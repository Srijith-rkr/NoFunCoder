input,target,problem_id,codes_annotated
"n,x=list(map(int,input().split())) # Hits:1.0, Total execution time: 43.958 ms, Average time per hit: 43.958 ms 


l=[1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(50): l+=[l[-1]*2+3] # Hits:51.0, Total execution time: 10.497 ms, Average time per hit: 0.20582352941176468 ms 


from functools import lru_cache # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


@lru_cache(None) # Hits:2.0, Total execution time: 5.833 ms, Average time per hit: 2.9165 ms 


def f(n,x): # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


  return int(x>0) if n<1 else f(n-1,l[n-1])+1+f(n-1,x-l[n-1]-2) if x>l[n]//2 else f(n-1,x-1)

print((f(n,x))) # Hits:1.0, Total execution time: 19.917 ms, Average time per hit: 19.917 ms 
","n,x=list(map(int,input().split())) # Hits:1.0, Total execution time: 35.792 ms, Average time per hit: 35.792 ms 


a,p=[1],[1] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(50): a+=[a[i]*2+3]; p+=[p[i]*2+1] # Hits:51.0, Total execution time: 15.25 ms, Average time per hit: 0.29901960784313725 ms 


def f(n,x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  return int(x>0) if n<1 else p[n-1]+1+f(n-1,x-2-a[n-1]) if x>a[n]//2 else f(n-1,x-1)

print((f(n,x))) # Hits:1.0, Total execution time: 7.125 ms, Average time per hit: 7.125 ms 
",p03209,True
"# -*- coding: utf-8 -*-



N, X = list(map(int, input().split())) # Hits:1.0, Total execution time: 42.333 ms, Average time per hit: 42.333 ms 




L, P = [1], [1] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


for i in range(N - 1): # Hits:2.0, Total execution time: 0.667 ms, Average time per hit: 0.3335 ms 


    L.append(L[-1] * 2 + 3) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


    P.append(P[-1] * 2 + 1) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 






def countPatty(N, X): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if N == 0:

        return 1 if X >= 1 else 0

    elif X <= 1:

        return 0

    elif 1 < X <= L[N - 1] + 1:

        return countPatty(N - 1, X - 1)

    elif L[N - 1] + 1 < X:

        return P[N - 1] + 1 + countPatty(N - 1, X - (L[N - 1] + 2))





print((countPatty(N, X))) # Hits:1.0, Total execution time: 7.875 ms, Average time per hit: 7.875 ms 

","N, X = list(map(int, input().split())) # Hits:1.0, Total execution time: 41.042 ms, Average time per hit: 41.042 ms 


L, P = [1], [1] # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for _ in range(N - 1): # Hits:2.0, Total execution time: 0.917 ms, Average time per hit: 0.4585 ms 


    L.append(L[-1] * 2 + 3) # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


    P.append(P[-1] * 2 + 1) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 






def ans(N, X): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    if N == 0:

        return 1 if X >= 1 else 0

    elif X <= 1:

        return 0

    elif X <= L[N - 1] + 1:

        return ans(N - 1, X - 1)

    else:

        return P[N - 1] + 1 + ans(N - 1, X - (L[N - 1] + 2))





print((ans(N, X))) # Hits:1.0, Total execution time: 18.042 ms, Average time per hit: 18.042 ms 

",p03209,True
"def do(level,x): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if x<=0: #1層も手を付けないとき

        return 0

    elif x>=whole[level]: #完食できるとき

        return patty[level]

    #それ以外、途中まで食べるときはlevel>=1の場合のみあり得る

    x-=1 #このとき1層目は必ずバンズ

    res=0 #食べたパティの総数を記録する

    if x>=whole[level-1]+1: #真ん中のパティまで到達できるとき

        x-=whole[level-1]+1

        res+=patty[level-1]+1

    return res+do(level-1,x)



n,x=list(map(int,input().split())) # Hits:1.0, Total execution time: 44.875 ms, Average time per hit: 44.875 ms 


whole=[1, 5, 13, 29, 61, 125, 253, 509, 1021, 2045, 4093, 8189, 16381, 32765, 65533, 131069, 262141, 524285, 1048573, 2097149, 4194301, 8388605, 16777213, 33554429, 67108861, 134217725, 268435453, 536870909, 1073741821, 2147483645, 4294967293, 8589934589, 17179869181, 34359738365, 68719476733, 137438953469, 274877906941, 549755813885, 1099511627773, 2199023255549, 4398046511101, 8796093022205, 17592186044413, 35184372088829, 70368744177661, 140737488355325, 281474976710653, 562949953421309, 1125899906842621, 2251799813685245, 4503599627370493] # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


patty=[1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647, 4294967295, 8589934591, 17179869183, 34359738367, 68719476735, 137438953471, 274877906943, 549755813887, 1099511627775, 2199023255551, 4398046511103, 8796093022207, 17592186044415, 35184372088831, 70368744177663, 140737488355327, 281474976710655, 562949953421311, 1125899906842623, 2251799813685247] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


print((do(n,x))) # Hits:1.0, Total execution time: 11.333 ms, Average time per hit: 11.333 ms 
","def do(level,x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if x<=0: #1層も手を付けないとき

        return 0

    elif x>=whole[level]: #完食できるとき

        return patty[level]

    #それ以外、途中まで食べるときはlevel>=1の場合のみあり得る

    x-=1 #このとき1層目は必ずバンズ

    res=0 #食べたパティの総数を記録する

    if x>=whole[level-1]+1: #真ん中のパティまで到達できるとき

        x-=whole[level-1]+1

        res+=patty[level-1]+1

    return res+do(level-1,x)



n,x=list(map(int,input().split())) # Hits:1.0, Total execution time: 37.666 ms, Average time per hit: 37.666 ms 


whole=[1]+[0]*50 # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


patty=[1]+[0]*50 # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


for i in range(1,n+1): # Hits:3.0, Total execution time: 0.75 ms, Average time per hit: 0.25 ms 


    whole[i]=whole[i-1]*2+3 # Hits:2.0, Total execution time: 0.459 ms, Average time per hit: 0.2295 ms 


    patty[i]=patty[i-1]*2+1 # Hits:2.0, Total execution time: 0.458 ms, Average time per hit: 0.229 ms 


print((do(n,x))) # Hits:1.0, Total execution time: 8.042 ms, Average time per hit: 8.042 ms 
",p03209,True
"from collections import defaultdict # Hits:1.0, Total execution time: 2.541 ms, Average time per hit: 2.541 ms 






def burger(lv, x): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    if d[(lv, x)] >= 0:

        return d[(lv, x)]



    if x < 1 or x > cnt[lv]:

        d[(lv, x)] = 0

        return d[(lv, x)]



    # base case

    if (lv, x) == (0, 1):

        d[(lv, x)] = 1

        return d[(lv, x)]



    half = (cnt[lv] - 1) // 2

    if x <= half:

        d[(lv, x)] = burger(lv - 1, x - 1)

        return d[(lv, x)]

    else:

        d[(lv, x)] = burger(lv - 1, half - 1) + 1 + burger(lv - 1, min(x - 1 - half, half - 1))

        return d[(lv, x)]





n, x = list(map(int, input().split())) # Hits:1.0, Total execution time: 45.75 ms, Average time per hit: 45.75 ms 


cnt = [1] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for lv in range(1, 50 + 1): # Hits:51.0, Total execution time: 4.751 ms, Average time per hit: 0.09315686274509803 ms 


    cnt.append(cnt[-1] * 2 + 3) # Hits:50.0, Total execution time: 10.668 ms, Average time per hit: 0.21336000000000002 ms 


d = defaultdict(lambda: -1) # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 




print((burger(n, x))) # Hits:1.0, Total execution time: 14.917 ms, Average time per hit: 14.917 ms 


# print(d)
","def burger(n, x): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    if x < 1:

        return 0



    # base case

    if (n, x) == (0, 1):

        return 1



    if x <= 1 + size[n - 1]:

        return burger(n - 1, x - 1)

    else:

        return p_num[n - 1] + 1 + burger(n - 1, min(x - 2 - size[n - 1], size[n - 1]))

    # x-2-sizeだと前lvバーガー+バンのことがあり、バンを外す





n, x = list(map(int, input().split())) # Hits:1.0, Total execution time: 42.667 ms, Average time per hit: 42.667 ms 


size, p_num = [1], [1] # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


for i in range(1, 50 + 1): # Hits:51.0, Total execution time: 5.168 ms, Average time per hit: 0.10133333333333333 ms 


    size.append(size[-1] * 2 + 3) # Hits:50.0, Total execution time: 11.874 ms, Average time per hit: 0.23748 ms 


    p_num.append(p_num[-1] * 2 + 1) # Hits:50.0, Total execution time: 10.247 ms, Average time per hit: 0.20494 ms 




print((burger(n, x))) # Hits:1.0, Total execution time: 10.25 ms, Average time per hit: 10.25 ms 

",p03209,True
"#!usr/bin/env python3

from collections import defaultdict

from collections import deque

from heapq import heappush, heappop

import sys

import math

import bisect

import random

def LI(): return list(map(int, sys.stdin.readline().split()))

def I(): return int(sys.stdin.readline())

def LS():return list(map(list, sys.stdin.readline().split()))

def S(): return list(sys.stdin.readline())[:-1]

def IR(n):

    l = [None for i in range(n)]

    for i in range(n):l[i] = I()

    return l

def LIR(n):

    l = [None for i in range(n)]

    for i in range(n):l[i] = LI()

    return l

def SR(n):

    l = [None for i in range(n)]

    for i in range(n):l[i] = S()

    return l

def LSR(n):

    l = [None for i in range(n)]

    for i in range(n):l[i] = SR()

    return l

mod = 1000000007



#A

def A():

    return



#B

def B():

    return



#C

def C():

    n,k = LI()

    h = IR(n)

    h.sort()

    ans = float(""inf"")

    for i in range(n-k+1):

        ans = min(ans,h[i+k-1]-h[i])

    print(ans)



#D

def D():

    n,x = LI()

    l = [1 for i in range(n+1)]

    for i in range(n):

        l[i+1] = 2*l[i]+3

    p = [1 for i in range(n+1)]

    for i in range(n):

        p[i+1] = 2*p[i]+1

    ans = 0

    for i in range(1,n+1)[::-1]:

        if i == 1:

            if x == 5:ans += 3

            else:ans += max(0,x-1)

        else:

            if x == 0:continue

            if x == l[i]:

                ans += p[i]

                x = 0

            if x > l[i-1]+1:

                ans += p[i-1]+1

                x -= l[i-1]+2

            else:

                x -= 1

    print(ans)

#E

def E():

    return



#F

def F():

    return



#G

def G():

    return



#H

def H():

    return



#Solve

if __name__ == ""__main__"":

    D()
",,p03209,False
"n,x = list(map(int,input().split())) # Hits:1.0, Total execution time: 54.541 ms, Average time per hit: 54.541 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while n > 0 or x > 0: # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


    if x >= 2**(n+1)-1: # Hits:2.0, Total execution time: 0.625 ms, Average time per hit: 0.3125 ms 


        cnt += 2**n # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


        x -= (2**(n+1)-1) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    else:

        x -= 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    n -= 1 # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


if x >= 1: # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


    cnt += 1

print(cnt) # Hits:1.0, Total execution time: 6.459 ms, Average time per hit: 6.459 ms 
","n,x = list(map(int,input().split())) # Hits:1.0, Total execution time: 42.042 ms, Average time per hit: 42.042 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


while n > 0 and x > 0: # Hits:2.0, Total execution time: 0.582 ms, Average time per hit: 0.291 ms 


    if x >= 2**(n+1)-1: # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


        cnt += 2**n # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


        x -= (2**(n+1)-1) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    else:

        x -= 1 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    n -= 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


if x >= 1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    cnt += 1

print(cnt) # Hits:1.0, Total execution time: 6.542 ms, Average time per hit: 6.542 ms 
",p03209,True
"from functools import lru_cache # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




@lru_cache() # Hits:2.0, Total execution time: 5.75 ms, Average time per hit: 2.875 ms 


def f(n): # Hits:2.0, Total execution time: 0.251 ms, Average time per hit: 0.1255 ms 


    if n==0:

        return 1

    return 2*f(n-1)+1



@lru_cache() # Hits:2.0, Total execution time: 2.666 ms, Average time per hit: 1.333 ms 


def g(n): # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


    if n==0:

        return 1

    return 2*g(n-1)+3



N, X = list(map(int, input().split())) # Hits:1.0, Total execution time: 41.417 ms, Average time per hit: 41.417 ms 


total = [g(i) for i in range(N+1)] # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 


p = [f(i) for i in range(N+1)] # Hits:1.0, Total execution time: 1.791 ms, Average time per hit: 1.791 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




def search(x, n): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    global ans

    if n==0:

        if x:

            ans += 1

        return

    if x==0:

        return

    if x > total[n-1] + 2:

        ans += p[n-1] + 1

        search(x-(2 + total[n-1]), n-1)

    elif x == total[n-1] + 2:

        ans += p[n-1] + 1

    else:

        search(x-1, n-1)



search(X, N) # Hits:1.0, Total execution time: 3.416 ms, Average time per hit: 3.416 ms 


print(ans) # Hits:1.0, Total execution time: 9.875 ms, Average time per hit: 9.875 ms 
","N, X = list(map(int, input().split())) # Hits:1.0, Total execution time: 49.75 ms, Average time per hit: 49.75 ms 


q = [1]*(N+1) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


p = [1]*(N+1) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(1, N+1): # Hits:3.0, Total execution time: 0.874 ms, Average time per hit: 0.29133333333333333 ms 


    q[i] = 2*q[i-1]+3 # Hits:2.0, Total execution time: 0.584 ms, Average time per hit: 0.292 ms 


    p[i] = 2*p[i-1]+1 # Hits:2.0, Total execution time: 0.334 ms, Average time per hit: 0.167 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def search(x, n): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    global ans

    if n==0:

        if x:

            ans += 1

        return

    if x==0:

        return

    

    a = q[n-1] + 2

    b = p[n-1] + 1



    if x > a:

        ans += b

        search(x-a, n-1)

    elif x == a:

        ans += b

    else:

        search(x-1, n-1)



search(X, N) # Hits:1.0, Total execution time: 3.208 ms, Average time per hit: 3.208 ms 


print(ans) # Hits:1.0, Total execution time: 7.458 ms, Average time per hit: 7.458 ms 
",p03209,True
"N, X = [int(_) for _ in input().split()] # Hits:1.0, Total execution time: 40.5 ms, Average time per hit: 40.5 ms 






def calc(n, x, cache = {}): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    #print(""calc"", n, x)

    key = (n, x)

    if key in cache:

        return cache[key]

    if n == 1:

        if x < 2:

            result = 0

        elif x < 5:

            result = x - 1

        else:

            result = 3

    else:

        plen = 2 * 2 ** n - 3

        if x == 1:

            result = 0

        elif x < 2 + plen:

            result = calc(n - 1, x - 1)

        elif x == 2 + plen:

            result = calc(n - 1, x - 1) + 1

        else:

            result = calc(n - 1, plen) + 1 + calc(n - 1, x - 2 - plen)

    #print(""calc"", n, x, ""="", result)

    cache[key] = result

    return result



result = calc(N, X) # Hits:1.0, Total execution time: 4.125 ms, Average time per hit: 4.125 ms 




print(result) # Hits:1.0, Total execution time: 5.708 ms, Average time per hit: 5.708 ms 

","N, X = [int(_) for _ in input().split()] # Hits:1.0, Total execution time: 39.292 ms, Average time per hit: 39.292 ms 




def calc(n, x, cache = {}): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    if n == 1:

        return min(max(x - 1, 0), 3)

    else:

        plen = 2 * 2 ** n - 3

        if x == 1:

            return 0

        elif x >= 4 * 2 ** n - 3:

            return 2 * 2 ** n - 1

        elif x < 2 + plen:

            return calc(n - 1, x - 1)

        elif x == 2 + plen:

            return calc(n - 1, x - 1) + 1

        else:

            return 2 ** n + calc(n - 1, x - 2 - plen)



result = calc(N, X) # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 




print(result) # Hits:1.0, Total execution time: 7.625 ms, Average time per hit: 7.625 ms 

",p03209,True
"N,X = list(map(int,input().split())) # Hits:1.0, Total execution time: 39.291 ms, Average time per hit: 39.291 ms 




# 層の総数

T = [1] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(1, 50+1): # Hits:51.0, Total execution time: 4.674 ms, Average time per hit: 0.0916470588235294 ms 


    T.append(T[i-1]*2+3) # Hits:50.0, Total execution time: 11.618 ms, Average time per hit: 0.23236 ms 




def hash(n,x): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    return ""{0:d},{1:d}"".format(n,x)



# レベルnバーガーの下からx層内のパティの数

memo = dict() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


def solve(n,x): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    global T, memo

    if hash(n,x) in memo:

        return memo[hash(n,x)]

    if n == 0 and x >= 1:

        memo[hash(n,x)] = 1

        return 1

    if x <= 1:

        memo[hash(n,x)] = 0

        return 0

    memo[hash(n,x)] = solve(n-1, min(x-1, T[n-1]))

    if x >= T[n-1]+2:

        memo[hash(n,x)] += 1

    if x >= T[n-1]+3:

        memo[hash(n,x)] += solve(n-1, min(x-1-T[n-1]-1, T[n-1]))

    return memo[hash(n,x)]



print((solve(N,X))) # Hits:1.0, Total execution time: 6.208 ms, Average time per hit: 6.208 ms 

","N, X = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.416 ms, Average time per hit: 35.416 ms 


c = [1] * (N + 1) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


p = [1] * (N + 1) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(1, N + 1): # Hits:3.0, Total execution time: 0.792 ms, Average time per hit: 0.264 ms 


    c[i] = c[i - 1] * 2 + 3 # Hits:2.0, Total execution time: 0.499 ms, Average time per hit: 0.2495 ms 


    p[i] = p[i - 1] * 2 + 1 # Hits:2.0, Total execution time: 0.376 ms, Average time per hit: 0.188 ms 


def solve(l, x): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if l == 0:

        return x

    res = 0

    x -= 1

    if x <= 0: return res

    if x < c[l - 1]:

        res += solve(l - 1, x)

    else:

        res += p[l - 1]

        x -= c[l - 1]

        if x >= 1:

            res += 1

            x -= 1

        if x <= 0: return res

        if x < c[l - 1]:

            res += solve(l - 1, x)

        else:

            res += p[l - 1]

    return res

print((solve(N, X))) # Hits:1.0, Total execution time: 8.625 ms, Average time per hit: 8.625 ms 

",p03209,True
"import sys

from functools import lru_cache



read = sys.stdin.read

readline = sys.stdin.readline

readlines = sys.stdin.readlines

sys.setrecursionlimit(10 ** 9)

INF = 1 << 60

MOD = 1000000007





def main():

    N, X = list(map(int, readline().split()))



    @lru_cache(maxsize=None)

    def rec1(i):

        if i == 0:

            return 1

        else:

            return 2 * rec1(i - 1) + 1



    @lru_cache(maxsize=None)

    def rec2(i):

        if i == 0:

            return 1

        else:

            return 2 * rec2(i - 1) + 3



    def rec(i, x):

        if x <= 0:

            return 0

        if i == 0:

            return 1



        x -= 1

        ans = 0

        if x > rec2(i - 1):

            x -= rec2(i - 1)

            ans += rec1(i - 1)

        else:

            ans += rec(i - 1, x)

            return ans



        if x > 0:

            x -= 1

            ans += 1

        else:

            return ans



        if x > rec2(i - 1):

            x -= rec2(i - 1)

            ans += rec1(i - 1)

        else:

            ans += rec(i - 1, x)



        return ans



    print((rec(N, X)))

    return





if __name__ == '__main__':

    main()
",,p03209,False
"from bisect import bisect # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 76.875 ms, Average time per hit: 76.875 ms 


B = [] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


BW = []; BB = [] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


MB = {}; MW = {} # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(2*N): # Hits:9.0, Total execution time: 2.04 ms, Average time per hit: 0.22666666666666666 ms 


    c, a = input().split() # Hits:8.0, Total execution time: 6.876 ms, Average time per hit: 0.8595 ms 


    a = int(a) # Hits:8.0, Total execution time: 2.0 ms, Average time per hit: 0.25 ms 


    c = ""BW"".index(c) # Hits:8.0, Total execution time: 2.457 ms, Average time per hit: 0.307125 ms 


    B.append((c, a)) # Hits:8.0, Total execution time: 1.917 ms, Average time per hit: 0.239625 ms 


    if c: # Hits:8.0, Total execution time: 1.167 ms, Average time per hit: 0.145875 ms 


        MW[a-1] = i # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


    else:

        MB[a-1] = i # Hits:4.0, Total execution time: 4.166 ms, Average time per hit: 1.0415 ms 




P = [[0]*(N+1) for i in range(N+1)] # Hits:1.0, Total execution time: 2.916 ms, Average time per hit: 2.916 ms 


Q = [[0]*(N+1) for i in range(N+1)] # Hits:1.0, Total execution time: 1.458 ms, Average time per hit: 1.458 ms 




for p in range(N): # Hits:5.0, Total execution time: 0.709 ms, Average time per hit: 0.1418 ms 


    cnt = MW[p] - sum(MW[p0] < MW[p] for p0 in range(p)) # Hits:4.0, Total execution time: 6.0 ms, Average time per hit: 1.5 ms 




    P[p][0] = cnt # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    for q in range(N): # Hits:20.0, Total execution time: 2.581 ms, Average time per hit: 0.12905 ms 


        if MB[q] < MW[p]: # Hits:16.0, Total execution time: 2.878 ms, Average time per hit: 0.179875 ms 


            cnt -= 1 # Hits:10.0, Total execution time: 1.291 ms, Average time per hit: 0.1291 ms 


        P[p][q+1] = cnt # Hits:16.0, Total execution time: 2.791 ms, Average time per hit: 0.1744375 ms 




for q in range(N): # Hits:5.0, Total execution time: 0.542 ms, Average time per hit: 0.10840000000000001 ms 


    cnt = MB[q] - sum(MB[q0] < MB[q] for q0 in range(q)) # Hits:4.0, Total execution time: 3.624 ms, Average time per hit: 0.906 ms 




    Q[q][0] = cnt # Hits:4.0, Total execution time: 0.418 ms, Average time per hit: 0.1045 ms 


    for p in range(N): # Hits:20.0, Total execution time: 2.122 ms, Average time per hit: 0.1061 ms 


        if MW[p] < MB[q]: # Hits:16.0, Total execution time: 2.209 ms, Average time per hit: 0.1380625 ms 


            cnt -= 1 # Hits:6.0, Total execution time: 0.585 ms, Average time per hit: 0.0975 ms 


        Q[q][p+1] = cnt # Hits:16.0, Total execution time: 2.168 ms, Average time per hit: 0.1355 ms 




from heapq import heappush, heappop # Hits:1.0, Total execution time: 1.917 ms, Average time per hit: 1.917 ms 


dist = [[10**9]*(N+1) for i in range(N+1)] # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


dist[0][0] = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


que = [(0, 0, 0)] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


while que: # Hits:17.0, Total execution time: 1.833 ms, Average time per hit: 0.10782352941176471 ms 


    cost, i, j = heappop(que) # Hits:17.0, Total execution time: 4.749 ms, Average time per hit: 0.2793529411764706 ms 


    if dist[i][j] < cost: # Hits:17.0, Total execution time: 2.584 ms, Average time per hit: 0.152 ms 


        continue # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    if i == j == N: # Hits:17.0, Total execution time: 2.416 ms, Average time per hit: 0.14211764705882354 ms 


        print(cost) # Hits:1.0, Total execution time: 9.292 ms, Average time per hit: 9.292 ms 


        break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    if i < N and cost + P[i][j] < dist[i+1][j]: # Hits:16.0, Total execution time: 3.833 ms, Average time per hit: 0.2395625 ms 


        dist[i+1][j] = d = cost + P[i][j] # Hits:14.0, Total execution time: 2.876 ms, Average time per hit: 0.2054285714285714 ms 


        heappush(que, (d, i+1, j)) # Hits:14.0, Total execution time: 2.667 ms, Average time per hit: 0.1905 ms 


    if j < N and cost + Q[j][i] < dist[i][j+1]: # Hits:16.0, Total execution time: 12.209 ms, Average time per hit: 0.7630625 ms 


        dist[i][j+1] = d = cost + Q[j][i] # Hits:6.0, Total execution time: 1.25 ms, Average time per hit: 0.20833333333333334 ms 


        heappush(que, (d, i, j+1)) # Hits:6.0, Total execution time: 1.667 ms, Average time per hit: 0.2778333333333333 ms 

","from bisect import bisect # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 45.917 ms, Average time per hit: 45.917 ms 


B = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


BW = []; BB = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


MB = {}; MW = {} # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(2*N): # Hits:9.0, Total execution time: 1.502 ms, Average time per hit: 0.1668888888888889 ms 


    c, a = input().split() # Hits:8.0, Total execution time: 4.916 ms, Average time per hit: 0.6145 ms 


    a = int(a) # Hits:8.0, Total execution time: 1.376 ms, Average time per hit: 0.172 ms 


    c = ""BW"".index(c) # Hits:8.0, Total execution time: 1.75 ms, Average time per hit: 0.21875 ms 


    B.append((c, a)) # Hits:8.0, Total execution time: 1.46 ms, Average time per hit: 0.1825 ms 


    if c: # Hits:8.0, Total execution time: 0.71 ms, Average time per hit: 0.08875 ms 


        MW[a-1] = i # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    else:

        MB[a-1] = i # Hits:4.0, Total execution time: 2.999 ms, Average time per hit: 0.74975 ms 




P = [[0]*(N+1) for i in range(N+1)] # Hits:1.0, Total execution time: 2.458 ms, Average time per hit: 2.458 ms 


Q = [[0]*(N+1) for i in range(N+1)] # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 




for p in range(N): # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


    cnt = MW[p] - sum(MW[p0] < MW[p] for p0 in range(p)) # Hits:4.0, Total execution time: 4.876 ms, Average time per hit: 1.219 ms 




    P[p][0] = cnt # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    for q in range(N): # Hits:20.0, Total execution time: 2.332 ms, Average time per hit: 0.1166 ms 


        if MB[q] < MW[p]: # Hits:16.0, Total execution time: 2.459 ms, Average time per hit: 0.1536875 ms 


            cnt -= 1 # Hits:10.0, Total execution time: 0.874 ms, Average time per hit: 0.0874 ms 


        P[p][q+1] = cnt # Hits:16.0, Total execution time: 2.416 ms, Average time per hit: 0.151 ms 




for q in range(N): # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


    cnt = MB[q] - sum(MB[q0] < MB[q] for q0 in range(q)) # Hits:4.0, Total execution time: 3.915 ms, Average time per hit: 0.97875 ms 




    Q[q][0] = cnt # Hits:4.0, Total execution time: 0.418 ms, Average time per hit: 0.1045 ms 


    for p in range(N): # Hits:20.0, Total execution time: 2.291 ms, Average time per hit: 0.11455 ms 


        if MW[p] < MB[q]: # Hits:16.0, Total execution time: 2.417 ms, Average time per hit: 0.1510625 ms 


            cnt -= 1 # Hits:6.0, Total execution time: 0.541 ms, Average time per hit: 0.09016666666666667 ms 


        Q[q][p+1] = cnt # Hits:16.0, Total execution time: 2.333 ms, Average time per hit: 0.1458125 ms 




dist = [[10**9]*(N+1) for i in range(N+1)] # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 


dist[0][0] = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


que = [(0, 0, 0)] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(N): # Hits:5.0, Total execution time: 0.544 ms, Average time per hit: 0.1088 ms 


    dist[i+1][0] = dist[i][0] + P[i][0] # Hits:4.0, Total execution time: 1.0 ms, Average time per hit: 0.25 ms 


for i in range(N): # Hits:5.0, Total execution time: 0.501 ms, Average time per hit: 0.1002 ms 


    dist[0][i+1] = dist[0][i] + Q[i][0] # Hits:4.0, Total execution time: 0.958 ms, Average time per hit: 0.2395 ms 


for i in range(N): # Hits:5.0, Total execution time: 0.498 ms, Average time per hit: 0.0996 ms 


    for j in range(N): # Hits:20.0, Total execution time: 2.042 ms, Average time per hit: 0.1021 ms 


        dist[i+1][j+1] = min(dist[i][j+1] + P[i][j+1], dist[i+1][j] + Q[j][i+1]) # Hits:16.0, Total execution time: 7.67 ms, Average time per hit: 0.479375 ms 


print((dist[N][N])) # Hits:1.0, Total execution time: 8.166 ms, Average time per hit: 8.166 ms 

",p03357,True
"import sys # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 53.875 ms, Average time per hit: 53.875 ms 




ans = [] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


if N % 2: # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


    print((N*(N-1)//2 - N//2)) # Hits:1.0, Total execution time: 6.458 ms, Average time per hit: 6.458 ms 


    for i in range(1, N+1): # Hits:4.0, Total execution time: 0.793 ms, Average time per hit: 0.19825 ms 


        for j in range(i+1, N+1): # Hits:6.0, Total execution time: 1.21 ms, Average time per hit: 0.20166666666666666 ms 


            if i + j != N: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


                ans.append(""%d %d\n"" % (i, j)) # Hits:2.0, Total execution time: 1.292 ms, Average time per hit: 0.646 ms 


else:

    print((N*(N-1)//2 - N//2))

    for i in range(1, N+1):

        for j in range(i+1, N+1):

            if i + j != N+1:

                ans.append(""%d %d\n"" % (i, j))

sys.stdout.writelines(ans) # Hits:1.0, Total execution time: 2.25 ms, Average time per hit: 2.25 ms 
","import sys # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


N = int(sys.stdin.readline()) # Hits:1.0, Total execution time: 34.208 ms, Average time per hit: 34.208 ms 




ans = [""%d\n"" % (N*(N-1)//2 - N//2)] # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


K = N+((N&1)^1) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(1, N+1): # Hits:4.0, Total execution time: 0.627 ms, Average time per hit: 0.15675 ms 


    for j in range(i+1, N+1): # Hits:6.0, Total execution time: 0.999 ms, Average time per hit: 0.1665 ms 


        if i + j != K: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


            ans.append(""%d %d\n"" % (i, j)) # Hits:2.0, Total execution time: 0.75 ms, Average time per hit: 0.375 ms 


sys.stdout.writelines(ans) # Hits:1.0, Total execution time: 6.833 ms, Average time per hit: 6.833 ms 
",p03090,True
"def bfs(graph, start, goal, connection): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    visited = {start: None}

    unvisited = [start]

    while unvisited:

        now = unvisited[0]

        if now == goal or (1000000*now + goal) in connection:

            connection[1000000*start + goal] = 1

            return ""yes""

        unvisited = unvisited[1:]

        for next in graph[now][1:]:

            if not (next in visited):

                unvisited.append(next)

                visited[next] = now

    return ""no""



n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 49.792 ms, Average time per hit: 49.792 ms 


g = [[i] for i in range(n)] # Hits:1.0, Total execution time: 3.292 ms, Average time per hit: 3.292 ms 


c = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(m): # Hits:10.0, Total execution time: 1.252 ms, Average time per hit: 0.1252 ms 


    inp = list(map(int, input().split())) # Hits:9.0, Total execution time: 8.832 ms, Average time per hit: 0.9813333333333334 ms 


    g[inp[0]].append(inp[1]) # Hits:9.0, Total execution time: 2.583 ms, Average time per hit: 0.287 ms 


    g[inp[1]].append(inp[0]) # Hits:9.0, Total execution time: 3.5 ms, Average time per hit: 0.3888888888888889 ms 




q = int(eval(input())) # Hits:1.0, Total execution time: 7.959 ms, Average time per hit: 7.959 ms 




for i in range(q): # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


    s, t = list(map(int, input().split())) # Hits:3.0, Total execution time: 2.833 ms, Average time per hit: 0.9443333333333334 ms 


    print((bfs(g, s, t, c))) # Hits:3.0, Total execution time: 24.292 ms, Average time per hit: 8.097333333333333 ms 
","def bfs(graph, start, goal, connection): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    visited = {start: None}

    unvisited = [start]

    while unvisited:

        now = unvisited[0]

        if now == goal or (1000000*now + goal) in connection:

            connection[1000000*start + goal] = 1

            return ""yes""

        unvisited = unvisited[1:]

        for next in graph[now]:

            if not (next in visited):

                unvisited.append(next)

                visited[next] = now

    return ""no""



n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 29.75 ms, Average time per hit: 29.75 ms 


g = [[] for i in range(n)] # Hits:1.0, Total execution time: 2.333 ms, Average time per hit: 2.333 ms 


c = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(m): # Hits:10.0, Total execution time: 0.916 ms, Average time per hit: 0.0916 ms 


    inp = list(map(int, input().split())) # Hits:9.0, Total execution time: 5.749 ms, Average time per hit: 0.6387777777777778 ms 


    g[inp[0]].append(inp[1]) # Hits:9.0, Total execution time: 1.709 ms, Average time per hit: 0.18988888888888888 ms 


    g[inp[1]].append(inp[0]) # Hits:9.0, Total execution time: 2.043 ms, Average time per hit: 0.227 ms 




q = int(eval(input())) # Hits:1.0, Total execution time: 4.25 ms, Average time per hit: 4.25 ms 




for i in range(q): # Hits:4.0, Total execution time: 0.707 ms, Average time per hit: 0.17675 ms 


    s, t = list(map(int, input().split())) # Hits:3.0, Total execution time: 2.375 ms, Average time per hit: 0.7916666666666666 ms 


    print((bfs(g, s, t, c))) # Hits:3.0, Total execution time: 21.417 ms, Average time per hit: 7.139 ms 
",p02240,True
"n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.084 ms, Average time per hit: 35.084 ms 




adj = [[] for i in range(n)] # Hits:1.0, Total execution time: 2.25 ms, Average time per hit: 2.25 ms 




for i in range(m): # Hits:10.0, Total execution time: 1.04 ms, Average time per hit: 0.104 ms 


    s, t = list(map(int, input().split())) # Hits:9.0, Total execution time: 5.876 ms, Average time per hit: 0.652888888888889 ms 


    adj[s].append(t) # Hits:9.0, Total execution time: 1.334 ms, Average time per hit: 0.14822222222222223 ms 


    adj[t].append(s) # Hits:9.0, Total execution time: 2.083 ms, Average time per hit: 0.23144444444444445 ms 




isVisited = [False] * n # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




CC = [None] * n # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 






def dfs(u, group): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    path = []

    path.append(u)

    isVisited[u] = True

    CC[u] = group

    while path:

        u = path[-1]

        if adj[u]:

            v = adj[u].pop(0)

            if not isVisited[v]:

                isVisited[v] = True

                CC[v] = group

                path.append(v)

        else:

            path.pop()



def makeCC(group): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    for i in range(n):

        if not isVisited[i]:

            dfs(i, group)

            group += 1



def isConnected(v1, v2): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    if CC[v1] == CC[v2]:

        print('yes')

    else:

        print('no')





makeCC(0) # Hits:1.0, Total execution time: 14.916 ms, Average time per hit: 14.916 ms 






q = int(eval(input())) # Hits:1.0, Total execution time: 5.666 ms, Average time per hit: 5.666 ms 




for i in range(q): # Hits:4.0, Total execution time: 0.543 ms, Average time per hit: 0.13575 ms 


    s, t = list(map(int, input().split())) # Hits:3.0, Total execution time: 2.708 ms, Average time per hit: 0.9026666666666666 ms 


    isConnected(s, t) # Hits:3.0, Total execution time: 9.126 ms, Average time per hit: 3.042 ms 
","n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.625 ms, Average time per hit: 37.625 ms 




adj = [[] for i in range(n)] # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 




for i in range(m): # Hits:10.0, Total execution time: 1.0 ms, Average time per hit: 0.1 ms 


    s, t = list(map(int, input().split())) # Hits:9.0, Total execution time: 5.96 ms, Average time per hit: 0.6622222222222222 ms 


    adj[s].append(t) # Hits:9.0, Total execution time: 1.333 ms, Average time per hit: 0.1481111111111111 ms 


    adj[t].append(s) # Hits:9.0, Total execution time: 1.918 ms, Average time per hit: 0.2131111111111111 ms 




groups = [None] * n # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 






def dfs(u, group_num): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    path = []

    path.append(u)

    groups[u] = group_num

    while path:

        u = path[-1]

        if adj[u]:

            v = adj[u].pop(0)

            if not groups[v]:

                groups[v] = group_num

                path.append(v)

        else:

            path.pop()





g_n = 1 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in range(n): # Hits:11.0, Total execution time: 0.875 ms, Average time per hit: 0.07954545454545454 ms 


    if not groups[i]: # Hits:10.0, Total execution time: 0.916 ms, Average time per hit: 0.0916 ms 


        dfs(i, g_n) # Hits:3.0, Total execution time: 10.584 ms, Average time per hit: 3.528 ms 


        g_n += 1 # Hits:3.0, Total execution time: 0.249 ms, Average time per hit: 0.083 ms 




def isConnected(v1, v2): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    if groups[v1] == groups[v2]:

        print('yes')

    else:

        print('no')





q = int(eval(input())) # Hits:1.0, Total execution time: 4.5 ms, Average time per hit: 4.5 ms 




for i in range(q): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    s, t = list(map(int, input().split())) # Hits:3.0, Total execution time: 2.375 ms, Average time per hit: 0.7916666666666666 ms 


    isConnected(s, t) # Hits:3.0, Total execution time: 8.0 ms, Average time per hit: 2.6666666666666665 ms 
",p02240,True
"from collections import deque # Hits:1.0, Total execution time: 2.333 ms, Average time per hit: 2.333 ms 


from enum import Enum, auto # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


import sys # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


sys.setrecursionlimit(100000) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




class Color(Enum): # Hits:1.0, Total execution time: 101.25 ms, Average time per hit: 101.25 ms 


    WHITE = auto()

    GRAY = auto()

    BLACK = auto()



n, m = list(map(int, input().split(' '))) # Hits:1.0, Total execution time: 41.0 ms, Average time per hit: 41.0 ms 


adj_list = [[] for i in range(n)] # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


for i in range(m): # Hits:10.0, Total execution time: 0.956 ms, Average time per hit: 0.09559999999999999 ms 


    u, v = list(map(int, input().split(' '))) # Hits:9.0, Total execution time: 6.333 ms, Average time per hit: 0.7036666666666667 ms 


    adj_list[u].append(v) # Hits:9.0, Total execution time: 1.459 ms, Average time per hit: 0.16211111111111112 ms 


    adj_list[v].append(u) # Hits:9.0, Total execution time: 2.459 ms, Average time per hit: 0.27322222222222226 ms 




# 幅優先

def adj_bfs(s, e): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    queue = deque([])

    colors = [Color.WHITE for i in range(n)]



    queue.append(s)

    colors[s] = Color.GRAY



    while len(queue) > 0:

        u = queue.popleft()

        for v in adj_list[u]:

            if colors[v] == Color.WHITE:

                colors[v] = Color.GRAY

                queue.append(v)

                if v == e: return True

        colors[u] = Color.BLACK

    return False



# 深さ優先

colors = [Color.WHITE for i in range(n)] # Hits:1.0, Total execution time: 2.417 ms, Average time per hit: 2.417 ms 




def adj_dfs(u, e): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    colors[u] = Color.GRAY



    for v in adj_list[u]:

        if colors[v] == Color.WHITE:

            if v == e: return True

            if adj_dfs(v, e):

                return True



    colors[u] = Color.BLACK

    return False



q = int(eval(input())) # Hits:1.0, Total execution time: 6.208 ms, Average time per hit: 6.208 ms 


for i in range(q): # Hits:4.0, Total execution time: 0.582 ms, Average time per hit: 0.1455 ms 


    s, e = list(map(int, input().split(' '))) # Hits:3.0, Total execution time: 2.125 ms, Average time per hit: 0.7083333333333334 ms 


    colors = [Color.WHITE for i in range(n)] # Hits:3.0, Total execution time: 5.0 ms, Average time per hit: 1.6666666666666667 ms 


    if adj_dfs(s, e): # Hits:3.0, Total execution time: 8.25 ms, Average time per hit: 2.75 ms 


        print('yes') # Hits:2.0, Total execution time: 6.834 ms, Average time per hit: 3.417 ms 


    else:

        print('no') # Hits:1.0, Total execution time: 3.791 ms, Average time per hit: 3.791 ms 



","from collections import deque # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


import sys # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


sys.setrecursionlimit(100000) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




n, m = list(map(int, input().split(' '))) # Hits:1.0, Total execution time: 39.5 ms, Average time per hit: 39.5 ms 


adj_list = [[] for i in range(n)] # Hits:1.0, Total execution time: 2.208 ms, Average time per hit: 2.208 ms 


for i in range(m): # Hits:10.0, Total execution time: 1.126 ms, Average time per hit: 0.11259999999999999 ms 


    u, v = list(map(int, input().split(' '))) # Hits:9.0, Total execution time: 7.002 ms, Average time per hit: 0.778 ms 


    adj_list[u].append(v) # Hits:9.0, Total execution time: 1.459 ms, Average time per hit: 0.16211111111111112 ms 


    adj_list[v].append(u) # Hits:9.0, Total execution time: 2.251 ms, Average time per hit: 0.2501111111111111 ms 




# 深さ優先

# 全ての点をたどって連結しているもの同士を同じ色に設定する

colors = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




def adj_dfs(r, c): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    global colors

    stack = deque([])

    stack.append(r)

    colors[r] = c

    while len(stack) != 0:

        u = stack.pop()

        for v in adj_list[u]:

            if colors[v] == None:

                colors[v] = c

                stack.append(v)



def assign_color(): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    global colors

    id = 1

    colors = [None for i in range(n)]

    for u in range(n):

        if colors[u] == None:

            id += 1

            adj_dfs(u, id)



assign_color() # Hits:1.0, Total execution time: 14.292 ms, Average time per hit: 14.292 ms 




q = int(eval(input())) # Hits:1.0, Total execution time: 7.375 ms, Average time per hit: 7.375 ms 


for i in range(q): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    s, e = list(map(int, input().split(' '))) # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


    if colors[s] == colors[e]: # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


        print('yes')

    else:

        print('no')


",p02240,True
"# -*- coding: utf-8 -*-

from collections import deque





if __name__ == '__main__':



    n, m = [int(s) for s in input().split("" "")]

    M = [set() for j in range(n)]

    for _ in range(m):

        u, v = [int(s) for s in input().split("" "")]

        M[u].add(v)

        M[v].add(u)

        

    color = [0] * n

    def dfs(u, c):  # depth-first search

        color[u] = c

        for v in range(n):

            if v in M[u] and color[v] == 0:

                dfs(v, c)

        color[u] = c

    

    c = 1

    for u in range(n):

        if color[u] == 0:

            dfs(u, c)

            c += 1

    

    l = int(eval(input()))

    for _ in range(l):

        p, q = [int(s) for s in input().split("" "")]

        if color[p] == color[q]:

            print(""yes"")

        else:

            print(""no"")


",,p02240,False
"# -*- coding: utf-8 -*-

from collections import deque





class LinkedList:

    def __init__(self, n):

        self.n = n

        self.ll = [[] for _ in range(self.n)]



    def link(self, u, v, direction=False):

        self.ll[u].append(v)

        if not direction:

            self.ll[v].append(u)



    def check(self, start, goal):

        states = [0] * self.n

        queue = deque([start])



        while queue:

            u = queue.popleft()

            # if states[u]:

            #     continue

            # else:

            states[u] = 1



            for v in self.ll[u]:

                if v == goal:

                    print('yes')

                    return



                if states[v]:

                    continue

                else:

                    queue.append(v)



        else:

            print('no')

            return





if __name__ == '__main__':

    n, m = list(map(int, input().split()))

    ll = LinkedList(n)



    for _ in range(m):

        u, v = list(map(int, input().split()))

        ll.link(u, v)



    q = int(eval(input()))

    for _ in range(q):

        u, v = list(map(int, input().split()))

        ll.check(u, v)


",,p02240,False
"from collections import deque



def main():

    n, m = list(map(int,input().split()))

    A = [[] for i in range(n)]

    for i in range(m):

        s, t = list(map(int,input().split()))

        A[s].append(t)

        A[t].append(s)



    g = [-1]*n

    p = 1

    res = set(range(n))

    for i in range(n):

        if i in res:

            color = bfs(n,A,i,-1)

            c = []

            for j in range(n):

                if color[j] == 1:

                    c.append(i)

                    g[j] = p

            res = res - set(c)

            p += 1

            

    q = eval(input())

    a =[0]*q

    for i in range(q):

        s, t = list(map(int,input().split()))

        if g[s] == g[t]:

            a[i] = 'yes'

        else:

            a[i] = 'no'

    for i in a:

        print(i)

        

def bfs(n,A,s,t):

    color = [-1]*n

    Q = deque([s])

    while(True):

        if len(Q)==0:

            break

        u = Q.popleft()

        for i in A[u]:

            if i == t:

                color[t] = 1

                break

            elif color[i] == -1:

                color[i] = 0

                Q.append(i)

        color[u] = 1

    return color



if __name__ == '__main__':

    main()",,p02240,False
"from collections import deque # Hits:1.0, Total execution time: 1.541 ms, Average time per hit: 1.541 ms 




n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 40.084 ms, Average time per hit: 40.084 ms 


g = [set() for _ in range(n)] # Hits:1.0, Total execution time: 2.375 ms, Average time per hit: 2.375 ms 


group_ids = [0] * n # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




while m: # Hits:10.0, Total execution time: 0.876 ms, Average time per hit: 0.0876 ms 


    s, t = list(map(int, input().split())) # Hits:9.0, Total execution time: 6.418 ms, Average time per hit: 0.7131111111111111 ms 


    g[s].add(t) # Hits:9.0, Total execution time: 5.792 ms, Average time per hit: 0.6435555555555555 ms 


    g[t].add(s) # Hits:9.0, Total execution time: 1.126 ms, Average time per hit: 0.12511111111111112 ms 


    m -= 1 # Hits:9.0, Total execution time: 0.832 ms, Average time per hit: 0.09244444444444444 ms 






def search(s, gid): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    global g, group_ids

    queue = set()

    queue.add(s)

    visited = [0] * n

    visited[s] = 1

    group_ids[s] = gid



    while queue:

        i = queue.pop()

        for f in g[i]:

            if not visited[f]:

                visited[f] = 1

                group_ids[f] = gid

                queue.add(f)





gid = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    if group_ids[i]: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        continue

    search(i, gid) # Hits:1.0, Total execution time: 3.0 ms, Average time per hit: 3.0 ms 


    gid += 1



q = int(eval(input()))

while q:

    s, t = list(map(int, input().split()))

    gs, gt = group_ids[s], group_ids[t]

    print(('yes' if gs and gt and gs == gt else 'no'))

    q -= 1","n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 47.166 ms, Average time per hit: 47.166 ms 


g = [set() for _ in range(n)] # Hits:1.0, Total execution time: 3.917 ms, Average time per hit: 3.917 ms 


group_ids = [0] * n # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




while m: # Hits:10.0, Total execution time: 1.333 ms, Average time per hit: 0.1333 ms 


    s, t = list(map(int, input().split())) # Hits:9.0, Total execution time: 8.665 ms, Average time per hit: 0.9627777777777778 ms 


    g[s].add(t) # Hits:9.0, Total execution time: 2.042 ms, Average time per hit: 0.2268888888888889 ms 


    g[t].add(s) # Hits:9.0, Total execution time: 1.542 ms, Average time per hit: 0.17133333333333334 ms 


    m -= 1 # Hits:9.0, Total execution time: 1.168 ms, Average time per hit: 0.12977777777777777 ms 






def search(s, gid): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    global g, group_ids

    queue = set(g[s])

    group_ids[s] = gid



    while queue:

        i = queue.pop()

        if not group_ids[i]:

            group_ids[i] = gid

            queue.update(g[i])





gid = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if group_ids[i]: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


        continue

    search(i, gid) # Hits:1.0, Total execution time: 3.458 ms, Average time per hit: 3.458 ms 


    gid += 1



q = int(eval(input()))

while q:

    s, t = list(map(int, input().split()))

    gs, gt = group_ids[s], group_ids[t]

    print(('yes' if gs and gt and gs == gt else 'no'))

    q -= 1",p02240,True
"from collections import deque





def dfs(G, C, id, color):

    S = deque()

    S.append(id)

    C[id] = color



    while S:

        u = S.pop()

        #S = S[:-1]  # pop

        for i in range(len(G[u])):

            v = G[u][i]

            if C[v] == -1:

                C[v] = color

                S.append(v)





if __name__ == '__main__':

    # ??????????????\???

    num_of_users, num_of_links = [int(x) for x in input().split(' ')]

    links = []

    for _ in range(num_of_links):

        links.append(list(map(int, input().split(' '))))

    num_of_queries = int(eval(input()))

    queries = []

    for _ in range(num_of_queries):

        queries.append(list(map(int, input().split(' '))))



    # ???????????????

    G = [[] for _ in range(100000)]

    C = [-1] * 100000

    for f, t in links:

        G[f].append(t)

        G[t].append(f)



    color = 1

    for id in range(num_of_users):

        if C[id] == -1:

            dfs(G, C, id, color)

        color += 1



    # ???????????????

    for x, y in queries:

        if C[x] == C[y]:

            print('yes')

        else:

            print('no')","# -*- coding: utf-8 -*-

""""""



""""""



import sys # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


sys.setrecursionlimit(1000000) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 






n,m=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 40.834 ms, Average time per hit: 40.834 ms 


graph=[[] for i in range(n)] # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 




for i in range(m): # Hits:10.0, Total execution time: 1.126 ms, Average time per hit: 0.11259999999999999 ms 


    relation=[int(j) for j in input().split()] # Hits:9.0, Total execution time: 8.167 ms, Average time per hit: 0.9074444444444445 ms 


    graph[relation[0]].append(relation[1]) # Hits:9.0, Total execution time: 1.833 ms, Average time per hit: 0.20366666666666666 ms 


    graph[relation[1]].append(relation[0]) # Hits:9.0, Total execution time: 2.623 ms, Average time per hit: 0.29144444444444445 ms 






check=[0 for i in range(n)] # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


rabel=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


stack=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




#深さ優先探索

def dfs(graph,i): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    global stack

    global n

    global rabel



    if check[i]==0:



        #行った足跡をつける

        check[i]=rabel



        #今いる場所の情報

        now=graph[i]



        #スタックに入れる

        stack.append(now)



        #今いる場所から到達できる地点のうち、まだ行っていないとこ全部でdfs

        for j in now:

            if check[j]==0:

                dfs(graph,j)



        stack.pop()



for i in range(n): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    if check[i]==0: # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


        rabel+=1 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


        dfs(graph,i) # Hits:1.0, Total execution time: 2.167 ms, Average time per hit: 2.167 ms 


# print(check)







num=int(eval(input()))

for i in range(num):

    a,b=[int(j) for j in input().split()]

    if check[a]==check[b]:

        print(""yes"")

    else:

        print(""no"")
",p02240,False
"n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 41.792 ms, Average time per hit: 41.792 ms 


G = [[0 for i in range(n)] for j in range(n)] # Hits:1.0, Total execution time: 11.667 ms, Average time per hit: 11.667 ms 




for i in range(m): # Hits:10.0, Total execution time: 1.083 ms, Average time per hit: 0.1083 ms 


    s, t = list(map(int, input().split())) # Hits:9.0, Total execution time: 6.959 ms, Average time per hit: 0.7732222222222221 ms 


    G[s][t] = 1 # Hits:9.0, Total execution time: 1.25 ms, Average time per hit: 0.1388888888888889 ms 


    G[t][s] = 1 # Hits:9.0, Total execution time: 2.292 ms, Average time per hit: 0.25466666666666665 ms 




for i in range(n): # Hits:11.0, Total execution time: 1.083 ms, Average time per hit: 0.09845454545454545 ms 


    for j in range(n): # Hits:110.0, Total execution time: 9.624 ms, Average time per hit: 0.08749090909090909 ms 


        for k in range(n): # Hits:1100.0, Total execution time: 107.339 ms, Average time per hit: 0.0975809090909091 ms 


            if G[j][k] == 1: # Hits:1000.0, Total execution time: 121.035 ms, Average time per hit: 0.12103499999999999 ms 


                for l in range( n): # Hits:4147.0, Total execution time: 371.148 ms, Average time per hit: 0.08949795032553653 ms 


                    if G[k][l] == 1: # Hits:3770.0, Total execution time: 453.025 ms, Average time per hit: 0.12016578249336869 ms 


                        G[j][l] = 1 # Hits:1568.0, Total execution time: 163.017 ms, Average time per hit: 0.10396492346938775 ms 


                        G[l][j] = 1 # Hits:1568.0, Total execution time: 190.251 ms, Average time per hit: 0.12133354591836736 ms 




q = int(input()) # Hits:1.0, Total execution time: 2.042 ms, Average time per hit: 2.042 ms 


ans = [""no"" for i in range(q)] # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


for i in range(q): # Hits:4.0, Total execution time: 0.791 ms, Average time per hit: 0.19775 ms 


    s, t = list(map(int, input().split())) # Hits:3.0, Total execution time: 2.625 ms, Average time per hit: 0.875 ms 


    if G[s][t] == 1: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


        ans[i] = ""yes"" # Hits:2.0, Total execution time: 0.417 ms, Average time per hit: 0.2085 ms 


for i in range(q): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    print((ans[i])) # Hits:3.0, Total execution time: 14.126 ms, Average time per hit: 4.708666666666667 ms 
","def DFS(s): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    flag[s] = 1

    group[s] = j

    for i in range(n):

        if i in G[s] and flag[i] == 0:

            DFS(i)



n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.291 ms, Average time per hit: 37.291 ms 


G = [[] for j in range(n)] # Hits:1.0, Total execution time: 1.917 ms, Average time per hit: 1.917 ms 




for i in range(m): # Hits:10.0, Total execution time: 1.084 ms, Average time per hit: 0.10840000000000001 ms 


    s, t = list(map(int, input().split())) # Hits:9.0, Total execution time: 6.583 ms, Average time per hit: 0.7314444444444445 ms 


    G[s].append(t) # Hits:9.0, Total execution time: 1.417 ms, Average time per hit: 0.15744444444444447 ms 


    G[t].append(s) # Hits:9.0, Total execution time: 2.083 ms, Average time per hit: 0.23144444444444445 ms 




group = [[] for i in range(n)] # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


flag = [0 for i in range(n)] # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


j = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(n): # Hits:11.0, Total execution time: 1.21 ms, Average time per hit: 0.11 ms 


    if flag[i] == 0: # Hits:10.0, Total execution time: 1.125 ms, Average time per hit: 0.1125 ms 


        DFS(i) # Hits:3.0, Total execution time: 16.0 ms, Average time per hit: 5.333333333333333 ms 


        j += 1 # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 




q = int(eval(input())) # Hits:1.0, Total execution time: 5.833 ms, Average time per hit: 5.833 ms 


for i in range(q): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    s, t = input().split() # Hits:3.0, Total execution time: 1.835 ms, Average time per hit: 0.6116666666666666 ms 


    if group[int(s)] == group[int(t)]: # Hits:3.0, Total execution time: 1.167 ms, Average time per hit: 0.389 ms 


        print(""yes"") # Hits:2.0, Total execution time: 6.416 ms, Average time per hit: 3.208 ms 


    else:

        print(""no"") # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 
",p02240,True
"import sys

from collections import deque



def debug(x, table):

    for name, val in table.items():

        if x is val:

            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)

            return None



def paint_col(adj, cols, i, col):

    nxt = deque([i])



    while nxt:

        u = nxt.popleft()

        cols[u] = col

        for child in adj[u]:

            if cols[child] == 0:

                nxt.append(child)



def solve():

    n, m = map(int, input().split())

    adj = [[] for i in range(n)]



    for i in range(m):

        s, t = map(int, input().split())

        adj[s].append(t)

        adj[t].append(s)



    cols = [0] * n

    col = 1



    for i in range(n):

        if cols[i] == 0:

            paint_col(adj, cols, i, col)

            col += 1



    q = int(input())



    for i in range(q):

        s, t = map(int, input().split())



        if cols[s] == cols[t]:

            ans = 'yes'

        else:

            ans = 'no'



        print(ans)



if __name__ == '__main__':

    solve()
",,p02240,False
"#template

from collections import Counter # Hits:1.0, Total execution time: 1.791 ms, Average time per hit: 1.791 ms 


def inputlist(): return [int(j) for j in input().split()] # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


#template

N = int(eval(input())) # Hits:1.0, Total execution time: 40.792 ms, Average time per hit: 40.792 ms 


L = inputlist() # Hits:1.0, Total execution time: 3.625 ms, Average time per hit: 3.625 ms 


L.sort() # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


s = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(N-1): # Hits:10.0, Total execution time: 1.042 ms, Average time per hit: 0.1042 ms 


    s += L[i] # Hits:9.0, Total execution time: 1.416 ms, Average time per hit: 0.15733333333333335 ms 


if s > L[-1]: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print(""Yes"") # Hits:1.0, Total execution time: 14.208 ms, Average time per hit: 14.208 ms 


else:

    print(""No"") # Hits:1.0, Total execution time: 5.083 ms, Average time per hit: 5.083 ms 
","#template

def inputlist(): return [int(k) for k in input().split()] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


#template

N = int(eval(input())) # Hits:1.0, Total execution time: 46.666 ms, Average time per hit: 46.666 ms 


L = inputlist() # Hits:1.0, Total execution time: 4.875 ms, Average time per hit: 4.875 ms 


L.sort() # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


s=sum(L) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


s -=L[-1] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


if L[-1] < s: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    print(""Yes"") # Hits:1.0, Total execution time: 7.625 ms, Average time per hit: 7.625 ms 


else:

    print(""No"") # Hits:1.0, Total execution time: 6.625 ms, Average time per hit: 6.625 ms 
",p03136,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 48.25 ms, Average time per hit: 48.25 ms 


l=list(map(int,input().split())) # Hits:1.0, Total execution time: 2.917 ms, Average time per hit: 2.917 ms 




s=sum(l) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


m=max(l) # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


ans='Yes' if s>m*2 else 'No' # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


print(ans) # Hits:1.0, Total execution time: 6.125 ms, Average time per hit: 6.125 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 43.083 ms, Average time per hit: 43.083 ms 


l=list(map(int,input().split())) # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


print(('YNeos'[max(l)*2>=sum(l)::2])) # Hits:1.0, Total execution time: 6.5 ms, Average time per hit: 6.5 ms 
",p03136,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 40.209 ms, Average time per hit: 40.209 ms 


Length = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


if sum(Length) > 2*max(Length): # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


  print(""Yes"") # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 


else:

  print(""No"") # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 41.208 ms, Average time per hit: 41.208 ms 


L = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.542 ms, Average time per hit: 2.542 ms 


if 2*max(L)<sum(L): # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


  print(""Yes"") # Hits:1.0, Total execution time: 6.166 ms, Average time per hit: 6.166 ms 


else:

  print(""No"") # Hits:1.0, Total execution time: 5.041 ms, Average time per hit: 5.041 ms 
",p03136,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 42.583 ms, Average time per hit: 42.583 ms 


ans, q = 0, [""3"", ""5"", ""7""] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




while q: # Hits:29524.0, Total execution time: 2047.755 ms, Average time per hit: 0.06935899607099309 ms 


    p = q.pop() # Hits:29523.0, Total execution time: 3455.003 ms, Average time per hit: 0.11702750397994784 ms 


    for s in [""3"", ""5"", ""7""]: # Hits:118092.0, Total execution time: 9865.403 ms, Average time per hit: 0.08353997730582935 ms 


        t = p + s # Hits:88569.0, Total execution time: 8272.76 ms, Average time per hit: 0.0934046901286003 ms 


        if int(t) <= n: # Hits:88569.0, Total execution time: 12565.517 ms, Average time per hit: 0.1418726303785749 ms 


            q.append(str(t)) # Hits:29520.0, Total execution time: 4470.036 ms, Average time per hit: 0.1514239837398374 ms 


            if len(list(set(list(str(t))))) == 3: # Hits:29520.0, Total execution time: 11544.865 ms, Average time per hit: 0.39108621273712735 ms 


                ans += 1 # Hits:26484.0, Total execution time: 2339.426 ms, Average time per hit: 0.08833355988521371 ms 




print(ans) # Hits:1.0, Total execution time: 19.333 ms, Average time per hit: 19.333 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 40.25 ms, Average time per hit: 40.25 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


list_N = [[""3"", ""5"", ""7""]] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(2, 10): # Hits:9.0, Total execution time: 1.0 ms, Average time per hit: 0.11111111111111112 ms 


    d = [] # Hits:8.0, Total execution time: 0.542 ms, Average time per hit: 0.06775 ms 


    for a in list_N[-1]: # Hits:9848.0, Total execution time: 689.252 ms, Average time per hit: 0.06998903330625508 ms 


        for b in [""3"", ""5"", ""7""]: # Hits:39360.0, Total execution time: 3023.274 ms, Average time per hit: 0.0768108231707317 ms 


            k = b + a # Hits:29520.0, Total execution time: 2741.261 ms, Average time per hit: 0.09286114498644986 ms 


            if n >= int(k) and ""3"" in k and ""5"" in k and ""7"" in k: # Hits:29520.0, Total execution time: 6164.552 ms, Average time per hit: 0.2088262872628726 ms 


                ans += 1 # Hits:26484.0, Total execution time: 2266.294 ms, Average time per hit: 0.08557219453254795 ms 


            d.append(k) # Hits:29520.0, Total execution time: 3456.529 ms, Average time per hit: 0.11709109078590785 ms 


    list_N.append(d) # Hits:8.0, Total execution time: 1.375 ms, Average time per hit: 0.171875 ms 




print(ans) # Hits:1.0, Total execution time: 8.833 ms, Average time per hit: 8.833 ms 
",p03212,True
"import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 




readline = sys.stdin.buffer.readline # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


readlines = sys.stdin.buffer.readlines # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


read = sys.stdin.buffer.read # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


sys.setrecursionlimit(10 ** 7) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


INF = float('inf') # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 41.25 ms, Average time per hit: 41.25 ms 




def F(list_): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if list_ and int("""".join(map(str, list_))) > N:

        return

    

    if 3 in list_ and 5 in list_ and 7 in list_:

        yield 1

    

    for v in [3, 5, 7]:

        list_.append(v)

        yield from F(list_)

        list_.pop()

    return



ans = sum(F([])) # Hits:1.0, Total execution time: 100579.458 ms, Average time per hit: 100579.458 ms 


print(ans) # Hits:1.0, Total execution time: 20.042 ms, Average time per hit: 20.042 ms 
","import sys # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 




readline = sys.stdin.buffer.readline # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


readlines = sys.stdin.buffer.readlines # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


read = sys.stdin.buffer.read # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


sys.setrecursionlimit(10 ** 7) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


INF = float('inf') # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 50.542 ms, Average time per hit: 50.542 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


    if int(s) > N:

        return 0

    ret = 1 if all(s.count(c) > 0 for c in '753') else 0

    for c in '753':

        ret += dfs(s + c)

    return ret



ans = dfs(""0"") # Hits:1.0, Total execution time: 56538.375 ms, Average time per hit: 56538.375 ms 


print(ans) # Hits:1.0, Total execution time: 21.208 ms, Average time per hit: 21.208 ms 
",p03212,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 52.625 ms, Average time per hit: 52.625 ms 


num=[3,5,7] # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


#a[0]=3,a[1]=5,a[7]=5

ans=[3,5,7] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


answ=[] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i1 in range(3): # Hits:4.0, Total execution time: 1.709 ms, Average time per hit: 0.42725 ms 


  for i2 in range(3): # Hits:12.0, Total execution time: 1.21 ms, Average time per hit: 0.10083333333333333 ms 


    for i3 in range(3): # Hits:36.0, Total execution time: 3.914 ms, Average time per hit: 0.10872222222222223 ms 


      a=set([i1,i2,i3]) # Hits:27.0, Total execution time: 6.043 ms, Average time per hit: 0.2238148148148148 ms 


      if len(a)>2: # Hits:27.0, Total execution time: 3.54 ms, Average time per hit: 0.13111111111111112 ms 


        answ.append(int(str(num[i1])+str(num[i2])+str(num[i3]))) # Hits:6.0, Total execution time: 2.835 ms, Average time per hit: 0.4725 ms 


      for i4 in range(3): # Hits:108.0, Total execution time: 10.789 ms, Average time per hit: 0.09989814814814815 ms 


        a=set([i1,i2,i3,i4]) # Hits:81.0, Total execution time: 17.836 ms, Average time per hit: 0.22019753086419752 ms 


        if len(a)>2: # Hits:81.0, Total execution time: 9.498 ms, Average time per hit: 0.11725925925925926 ms 


          answ.append(int(str(num[i1])+str(num[i2])+str(num[i3])+str(num[i4]))) # Hits:36.0, Total execution time: 20.212 ms, Average time per hit: 0.5614444444444444 ms 


        for i5 in range(3): # Hits:324.0, Total execution time: 32.661 ms, Average time per hit: 0.10080555555555555 ms 


          a=set([i1,i2,i3,i4,i5]) # Hits:243.0, Total execution time: 53.705 ms, Average time per hit: 0.2210082304526749 ms 


          if len(a)>2: # Hits:243.0, Total execution time: 27.968 ms, Average time per hit: 0.11509465020576132 ms 


            answ.append(int(str(num[i1])+str(num[i2])+str(num[i3])+str(num[i5])+str(num[i4]))) # Hits:150.0, Total execution time: 97.623 ms, Average time per hit: 0.6508200000000001 ms 


          for i6 in range(3): # Hits:972.0, Total execution time: 98.786 ms, Average time per hit: 0.10163168724279835 ms 


            a=set([i1,i2,i3,i4,i5,i6]) # Hits:729.0, Total execution time: 168.422 ms, Average time per hit: 0.2310315500685871 ms 


            if len(a)>2: # Hits:729.0, Total execution time: 82.536 ms, Average time per hit: 0.11321810699588476 ms 


              answ.append(int(str(num[i1])+str(num[i2])+str(num[i3])+str(num[i6])+str(num[i5])+str(num[i4]))) # Hits:540.0, Total execution time: 400.139 ms, Average time per hit: 0.7409981481481481 ms 


            for i7 in range(3): # Hits:2916.0, Total execution time: 311.582 ms, Average time per hit: 0.10685253772290809 ms 


              a=set([i1,i2,i3,i4,i5,i6,i7]) # Hits:2187.0, Total execution time: 527.188 ms, Average time per hit: 0.24105532693187015 ms 


              if len(a)>2: # Hits:2187.0, Total execution time: 254.286 ms, Average time per hit: 0.11627160493827161 ms 


                answ.append(int(str(num[i1])+str(num[i2])+str(num[i3])+str(num[i7])+str(num[i6])+str(num[i5])+str(num[i4]))) # Hits:1806.0, Total execution time: 1513.291 ms, Average time per hit: 0.8379241417497232 ms 


              for i8 in range(3): # Hits:8748.0, Total execution time: 917.57 ms, Average time per hit: 0.1048891175125743 ms 


                a=set([i1,i2,i3,i4,i5,i6,i7,i8]) # Hits:6561.0, Total execution time: 1690.469 ms, Average time per hit: 0.257654168571864 ms 


                if len(a)>2: # Hits:6561.0, Total execution time: 725.503 ms, Average time per hit: 0.11057811309251639 ms 


                  answ.append(int(str(num[i1])+str(num[i2])+str(num[i3])+str(num[i8])+str(num[i7])+str(num[i6])+str(num[i5])+str(num[i4]))) # Hits:5796.0, Total execution time: 5412.079 ms, Average time per hit: 0.9337610420979986 ms 


                for i9 in range(3): # Hits:26244.0, Total execution time: 2798.853 ms, Average time per hit: 0.10664734796524919 ms 


                  a=set([i1,i2,i3,i4,i5,i6,i7,i8,i9]) # Hits:19683.0, Total execution time: 4891.79 ms, Average time per hit: 0.2485286795712036 ms 


                  if len(a)>2: # Hits:19683.0, Total execution time: 2217.737 ms, Average time per hit: 0.11267271249301428 ms 


                    answ.append(int(str(num[i1])+str(num[i2])+str(num[i3])+str(num[i9])+str(num[i8])+str(num[i7])+str(num[i6])+str(num[i5])+str(num[i4]))) # Hits:18150.0, Total execution time: 18836.603 ms, Average time per hit: 1.0378293663911846 ms 


answ.sort() # Hits:1.0, Total execution time: 723.25 ms, Average time per hit: 723.25 ms 


left=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


right=len(answ) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


while right-left>1: # Hits:16.0, Total execution time: 2.167 ms, Average time per hit: 0.1354375 ms 


  mid=(left+right)//2 # Hits:15.0, Total execution time: 1.543 ms, Average time per hit: 0.10286666666666666 ms 


  

  if n<answ[mid]: # Hits:15.0, Total execution time: 1.75 ms, Average time per hit: 0.11666666666666667 ms 


    right=mid # Hits:13.0, Total execution time: 1.083 ms, Average time per hit: 0.0833076923076923 ms 


  else:

    left=mid # Hits:15.0, Total execution time: 1.043 ms, Average time per hit: 0.06953333333333334 ms 


if 357>n: # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


  print((0))

else:

  print((left+1)) # Hits:1.0, Total execution time: 13.666 ms, Average time per hit: 13.666 ms 


                    

                ","n=int(eval(input())) # Hits:1.0, Total execution time: 50.959 ms, Average time per hit: 50.959 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


  if s!="""" and int(s)>n:

    return 0

  

  if len(set(list(s)))<3:

    ret=0

  else:

    ret=1

  

  for i in ""753"":

    ret+=dfs(s+i)

  

  return ret



print((dfs(""""))) # Hits:1.0, Total execution time: 41658.334 ms, Average time per hit: 41658.334 ms 
",p03212,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 44.459 ms, Average time per hit: 44.459 ms 


c=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


l=[3,5,7] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


L=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i1 in l: # Hits:4.0, Total execution time: 0.376 ms, Average time per hit: 0.094 ms 


  for i2 in l: # Hits:12.0, Total execution time: 0.875 ms, Average time per hit: 0.07291666666666667 ms 


    for i3 in l: # Hits:36.0, Total execution time: 2.707 ms, Average time per hit: 0.07519444444444444 ms 


      for i4 in l: # Hits:108.0, Total execution time: 7.869 ms, Average time per hit: 0.07286111111111111 ms 


        for i5 in l: # Hits:324.0, Total execution time: 24.382 ms, Average time per hit: 0.07525308641975309 ms 


          L.append(10000*i1+1000*i2+100*i3+10*i4+i5) # Hits:243.0, Total execution time: 54.998 ms, Average time per hit: 0.22632921810699588 ms 


for i in range(min(n+1,10000)): # Hits:10001.0, Total execution time: 748.645 ms, Average time per hit: 0.07485701429857015 ms 


  l=str(i) # Hits:10000.0, Total execution time: 1250.935 ms, Average time per hit: 0.1250935 ms 


  if '3' in l and '5' in l and '7' in l and '0' not in l and '1' not in l and '2' not in l and '4' not in l and '6' not in l and '8' not in l and '9' not in l:c+=1 # Hits:10000.0, Total execution time: 961.15 ms, Average time per hit: 0.09611499999999999 ms 


for j in L: # Hits:244.0, Total execution time: 30.925 ms, Average time per hit: 0.12674180327868853 ms 


  for i in range(j,n+1,100000): # Hits:2430243.0, Total execution time: 191254.19 ms, Average time per hit: 0.07869755822771633 ms 


    l=str(i) # Hits:2430000.0, Total execution time: 324202.669 ms, Average time per hit: 0.13341673621399178 ms 


    if '3' in l and '5' in l and '7' in l and '0' not in l and '1' not in l and '2' not in l and '4' not in l and '6' not in l and '8' not in l and '9' not in l:c+=1 # Hits:2430000.0, Total execution time: 429901.5 ms, Average time per hit: 0.17691419753086418 ms 


print(c) # Hits:1.0, Total execution time: 44.041 ms, Average time per hit: 44.041 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 67.75 ms, Average time per hit: 67.75 ms 


c=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


l=[0,3,5,7] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i1 in l: # Hits:5.0, Total execution time: 1.252 ms, Average time per hit: 0.2504 ms 


 for i2 in l: # Hits:20.0, Total execution time: 1.749 ms, Average time per hit: 0.08745 ms 


  for i3 in l: # Hits:80.0, Total execution time: 6.378 ms, Average time per hit: 0.07972499999999999 ms 


   for i4 in l: # Hits:320.0, Total execution time: 24.916 ms, Average time per hit: 0.0778625 ms 


    for i5 in l: # Hits:1280.0, Total execution time: 100.786 ms, Average time per hit: 0.0787390625 ms 


     for i6 in l: # Hits:5120.0, Total execution time: 402.437 ms, Average time per hit: 0.0786009765625 ms 


      for i7 in l: # Hits:20480.0, Total execution time: 1620.184 ms, Average time per hit: 0.07911054687499999 ms 


       for i8 in l: # Hits:81920.0, Total execution time: 6427.839 ms, Average time per hit: 0.07846483154296875 ms 


        for i9 in l: # Hits:327680.0, Total execution time: 26048.997 ms, Average time per hit: 0.07949523010253907 ms 


         x=str(i1+10*i2+100*i3+1000*i4+10000*i5+100000*i6+1000000*i7+10000000*i8+100000000*i9) # Hits:262144.0, Total execution time: 103271.774 ms, Average time per hit: 0.393950553894043 ms 


         if '3' in x and '5' in x and '7' in x and '0' not in x and int(x)<=n:c+=1 # Hits:262144.0, Total execution time: 45672.461 ms, Average time per hit: 0.17422661209106446 ms 


print(c) # Hits:1.0, Total execution time: 44.625 ms, Average time per hit: 44.625 ms 
",p03212,True
"import sys

n = int(eval(input()))

if n < 357:

  print((0))

  sys.exit()



def dfs(s): 

  if int(s) > n:

    return 0

  ret = 1 if all(s.count(c) > 0 for c in '753') else 0

  for c in '753':

    ret += dfs(s + c)

  return ret



print((dfs('0'))) ",,p03212,False
"def Base_10_to_n(x,n): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


	if (int(x/n)):

		return Base_10_to_n(int(x/n),n)+str(x%n)

	return str(x%n)

	

n=int(eval(input())) # Hits:1.0, Total execution time: 46.5 ms, Average time per hit: 46.5 ms 


l=len(str(n)) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




res=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




for i in range(4**l): # Hits:262145.0, Total execution time: 23389.967 ms, Average time per hit: 0.08922530279044041 ms 


	x=Base_10_to_n(i,4) # Hits:262144.0, Total execution time: 860420.031 ms, Average time per hit: 3.2822419395446776 ms 


	cnt=0 # Hits:262144.0, Total execution time: 20215.889 ms, Average time per hit: 0.07711749649047851 ms 


	if not ""0"" in x:  # Hits:262144.0, Total execution time: 23489.039 ms, Average time per hit: 0.08960357284545899 ms 


		if (""3"" in x) and (""2"" in x) and (""1"" in x): # Hits:29523.0, Total execution time: 3749.787 ms, Average time per hit: 0.1270123971141144 ms 


			for j in range(len(x)): # Hits:252996.0, Total execution time: 25274.807 ms, Average time per hit: 0.09990200240320005 ms 


				if x[j]==""1"": # Hits:226512.0, Total execution time: 23221.889 ms, Average time per hit: 0.1025194647524193 ms 


					cnt+=3*(10**j) # Hits:75504.0, Total execution time: 12121.76 ms, Average time per hit: 0.1605446069082433 ms 


				elif x[j]==""2"": # Hits:151008.0, Total execution time: 15577.882 ms, Average time per hit: 0.10315931606272516 ms 


					cnt+=5*(10**j) # Hits:75504.0, Total execution time: 10867.731 ms, Average time per hit: 0.1439358312142403 ms 


				elif x[j]==""3"": # Hits:75504.0, Total execution time: 7936.729 ms, Average time per hit: 0.10511666931553294 ms 


					cnt+=7*(10**j) # Hits:75504.0, Total execution time: 11177.822 ms, Average time per hit: 0.14804277919050646 ms 


			if cnt<=n: # Hits:26484.0, Total execution time: 2228.661 ms, Average time per hit: 0.08415122338015404 ms 


				res+=1 # Hits:26484.0, Total execution time: 2532.404 ms, Average time per hit: 0.09562014801389518 ms 


			

print(res) # Hits:1.0, Total execution time: 41.083 ms, Average time per hit: 41.083 ms 


		","n=int(eval(input())) # Hits:1.0, Total execution time: 30.917 ms, Average time per hit: 30.917 ms 


A=[""3"",""5"",""7""] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


A=set(A) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


cnt=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for _ in range(len(str(n))-1): # Hits:9.0, Total execution time: 2.085 ms, Average time per hit: 0.23166666666666666 ms 


	for a in list(A): # Hits:14756.0, Total execution time: 1283.755 ms, Average time per hit: 0.08699884792626728 ms 


		x=a+""3"" # Hits:14748.0, Total execution time: 2039.783 ms, Average time per hit: 0.1383091266612422 ms 


		y=a+""5"" # Hits:14748.0, Total execution time: 1598.994 ms, Average time per hit: 0.10842107404393816 ms 


		z=a+""7"" # Hits:14748.0, Total execution time: 1530.727 ms, Average time per hit: 0.103792175210198 ms 


		if int(x)<=n: # Hits:14748.0, Total execution time: 2131.79 ms, Average time per hit: 0.14454773528614048 ms 


			A.add(x) # Hits:14748.0, Total execution time: 2121.356 ms, Average time per hit: 0.14384024952535937 ms 


		if int(y)<=n: # Hits:14748.0, Total execution time: 2140.619 ms, Average time per hit: 0.1451463927312178 ms 


			A.add(y) # Hits:14748.0, Total execution time: 2250.277 ms, Average time per hit: 0.15258184160564145 ms 


		if int(z)<=n: # Hits:14748.0, Total execution time: 2113.071 ms, Average time per hit: 0.14327847843775426 ms 


			A.add(z) # Hits:14748.0, Total execution time: 2213.21 ms, Average time per hit: 0.1500684838622186 ms 




res=0 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




for a in list(A): # Hits:29524.0, Total execution time: 2641.888 ms, Average time per hit: 0.0894827259178973 ms 


	if ""3"" in a and ""5"" in a and ""7"" in a: # Hits:29523.0, Total execution time: 4480.394 ms, Average time per hit: 0.1517594417911459 ms 


		res+=1		 # Hits:26484.0, Total execution time: 2490.679 ms, Average time per hit: 0.0940446684790817 ms 




print(res) # Hits:1.0, Total execution time: 19.0 ms, Average time per hit: 19.0 ms 
",p03212,True
"N=int(eval(input())) # Hits:1.0, Total execution time: 45.667 ms, Average time per hit: 45.667 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    if int(s)>N:

        return 0

    else:

        if all(s.count(c)>=1 for c in ""753""):

            res=1

        else:

            res=0

        for c in ""753"":

            res+=dfs(s+c)

        return res



print((dfs(""0""))) # Hits:1.0, Total execution time: 58039.0 ms, Average time per hit: 58039.0 ms 
",,p03212,True
"import sys # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


sys.setrecursionlimit(1000000000) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


LET=('3','5','7') # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 39.209 ms, Average time per hit: 39.209 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  cnt = 0

  if len(s) >0 and int(s) > n:

    return cnt

  if s.count('3') > 0 and s.count('5')>0 and s.count('7')>0:

    cnt += 1

  for l in LET:

    cnt += dfs(s+l)

  return cnt



print((dfs(''))) # Hits:1.0, Total execution time: 49901.542 ms, Average time per hit: 49901.542 ms 
","import sys # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


sys.setrecursionlimit(10000000) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 45.833 ms, Average time per hit: 45.833 ms 


tex=['3','5','7'] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




def dfs(value): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  ans=0

  if value != '' and int(value) > n:

    return 0

  for x in tex:

    if not x in value:

      break

  else:

    ans += 1 

  for x in tex:

    ans += dfs(value+x)

  #print(value,ans)

  return ans



print((dfs(''))) # Hits:1.0, Total execution time: 44817.042 ms, Average time per hit: 44817.042 ms 
",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 77.333 ms, Average time per hit: 77.333 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, (4 ** 9)+1): # Hits:262145.0, Total execution time: 22930.259 ms, Average time per hit: 0.0874716626294608 ms 


    tmp = """" # Hits:262144.0, Total execution time: 19131.465 ms, Average time per hit: 0.07298074722290039 ms 


    now = i # Hits:262144.0, Total execution time: 18794.164 ms, Average time per hit: 0.07169404602050782 ms 


        

    while now != 0: # Hits:2534069.0, Total execution time: 217977.784 ms, Average time per hit: 0.08601888267446546 ms 


        if now % 4 == 0: # Hits:2271925.0, Total execution time: 227450.265 ms, Average time per hit: 0.10011345665019752 ms 


            tmp += ""0"" # Hits:502452.0, Total execution time: 54940.52 ms, Average time per hit: 0.1093448130368672 ms 


        elif now % 4 == 1: # Hits:1769473.0, Total execution time: 176890.471 ms, Average time per hit: 0.09996788365801569 ms 


            tmp += ""3"" # Hits:589825.0, Total execution time: 65134.82 ms, Average time per hit: 0.11043075488492349 ms 


        elif now % 4 == 2: # Hits:1179648.0, Total execution time: 116492.086 ms, Average time per hit: 0.09875156487358941 ms 


            tmp += ""5"" # Hits:589824.0, Total execution time: 64274.248 ms, Average time per hit: 0.10897191026475694 ms 


        else:

            tmp += ""7"" # Hits:589824.0, Total execution time: 64886.755 ms, Average time per hit: 0.11001036749945746 ms 




        now //= 4 # Hits:2271925.0, Total execution time: 224236.083 ms, Average time per hit: 0.09869871716716001 ms 




    

    tmp = str(int(tmp[::-1])) # Hits:262144.0, Total execution time: 65798.698 ms, Average time per hit: 0.25100211334228517 ms 


    if ""3"" in tmp and ""5"" in tmp and ""7"" in tmp: # Hits:262144.0, Total execution time: 32521.468 ms, Average time per hit: 0.12405955505371094 ms 


        tmp = int(tmp) # Hits:204630.0, Total execution time: 25982.56 ms, Average time per hit: 0.12697336656404243 ms 


        if tmp <= N and ""0"" not in str(tmp): # Hits:204630.0, Total execution time: 36030.752 ms, Average time per hit: 0.17607756438449887 ms 


            ans += 1 # Hits:26484.0, Total execution time: 2801.435 ms, Average time per hit: 0.10577839450234103 ms 


print(ans)             # Hits:1.0, Total execution time: 32.917 ms, Average time per hit: 32.917 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 51.0 ms, Average time per hit: 51.0 ms 




ans = [0] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




def calc(s): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    if int(s) <= N:

        if ""3"" in s and ""5"" in s and ""7"" in s:

            ans[0] += 1

        for e in [""3"", ""5"", ""7""]:

            calc(s + e)



for e in [""3"", ""5"", ""7""]: # Hits:4.0, Total execution time: 1.459 ms, Average time per hit: 0.36475 ms 


    calc(e) # Hits:3.0, Total execution time: 31475.75 ms, Average time per hit: 10491.916666666666 ms 




print((ans[0])) # Hits:1.0, Total execution time: 28.25 ms, Average time per hit: 28.25 ms 

",p03212,True
"from collections import Counter # Hits:1.0, Total execution time: 1.542 ms, Average time per hit: 1.542 ms 


ls=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def rec(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    if len(str(n))>9: return

    ls.append(n)

    rec(n*10+3)

    rec(n*10+5)

    rec(n*10+7)

n=int(eval(input())) # Hits:1.0, Total execution time: 43.875 ms, Average time per hit: 43.875 ms 


rec(3) # Hits:1.0, Total execution time: 9548.0 ms, Average time per hit: 9548.0 ms 


rec(5) # Hits:1.0, Total execution time: 9572.25 ms, Average time per hit: 9572.25 ms 


rec(7) # Hits:1.0, Total execution time: 9585.667 ms, Average time per hit: 9585.667 ms 


cnt=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for l in ls: # Hits:29524.0, Total execution time: 2597.142 ms, Average time per hit: 0.08796714537325566 ms 


    temp=Counter(str(l)) # Hits:29523.0, Total execution time: 32385.296 ms, Average time per hit: 1.0969513938285405 ms 


    if l<=n and len(list(temp.keys()))==3: # Hits:29523.0, Total execution time: 7915.661 ms, Average time per hit: 0.2681184500220168 ms 


        cnt+=1 # Hits:26484.0, Total execution time: 2612.783 ms, Average time per hit: 0.09865515027941399 ms 


print(cnt) # Hits:1.0, Total execution time: 24.375 ms, Average time per hit: 24.375 ms 
","ls=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def rec(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    if len(str(n))>9: return

    ls.append(n)

    for i in [3,5,7]: rec(10*n+i)

n=int(eval(input())) # Hits:1.0, Total execution time: 49.333 ms, Average time per hit: 49.333 ms 


rec(0) # Hits:1.0, Total execution time: 30596.792 ms, Average time per hit: 30596.792 ms 


cnt=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for l in ls: # Hits:29525.0, Total execution time: 2296.606 ms, Average time per hit: 0.07778513124470787 ms 


    if l<=n and all(str(l).count(i)>0 for i in ""357""): cnt+=1 # Hits:29524.0, Total execution time: 31270.278 ms, Average time per hit: 1.0591477442081019 ms 


print(cnt) # Hits:1.0, Total execution time: 7.75 ms, Average time per hit: 7.75 ms 
",p03212,True
"import math # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


n_in = int(eval(input())) # Hits:1.0, Total execution time: 48.417 ms, Average time per hit: 48.417 ms 






def sgs(n, a, s, s_temp): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if a == math.ceil(math.log(n, 10)):

        c = 0

        for i in s:

            i_listed = list(map(int, list(str(i))))

            if 3 in i_listed and 5 in i_listed and 7 in i_listed:

                if i <= n:

                    c += 1

    else:

        a += 1

        temp = []

        for i in s_temp:

            s.append(10 * i + 3)

            s.append(10 * i + 5)

            s.append(10 * i + 7)

            temp.append(10 * i + 3)

            temp.append(10 * i + 5)

            temp.append(10 * i + 7)

        s_temp = temp

        c = sgs(n, a, s, s_temp)

    return c





ans = sgs(n_in, -1, [3, 5, 7], [3, 5, 7]) # Hits:1.0, Total execution time: 300625.125 ms, Average time per hit: 300625.125 ms 


print(ans) # Hits:1.0, Total execution time: 28.042 ms, Average time per hit: 28.042 ms 

","import collections # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 43.333 ms, Average time per hit: 43.333 ms 






def generate(n): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    _list = []

    queue = collections.deque([0])

    while queue:

        _temp = queue.popleft()

        if _temp <= n and '3' in str(_temp) and '7' in str(_temp) and '5' in str(_temp):

            _list.append(_temp)

        if len(str(_temp)) > 9:

            break

        queue.append(_temp * 10 + 7)

        queue.append(_temp * 10 + 5)

        queue.append(_temp * 10 + 3)

    return _list





_list = generate(N) # Hits:1.0, Total execution time: 27122.917 ms, Average time per hit: 27122.917 ms 


print((len(_list))) # Hits:1.0, Total execution time: 8.5 ms, Average time per hit: 8.5 ms 

",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 55.917 ms, Average time per hit: 55.917 ms 


def n_ary(l,d): # リストl中の文字でd桁までを全列挙(sorted) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if d == 1:

        return(l)

    n = len(l)

    ll = n_ary(l,d-1)

    lll = []

    for i in l:

        for j in ll[n*(n**(d-2)-1)//(n-1):]:

            lll.append(i+j)

    return(ll+lll)

possible = [i.replace('0','3').replace('1', '5').replace('2','7') for i in n_ary(['0','1','2'],9)] # 制約が10^9なので9 # Hits:1.0, Total execution time: 12620.917 ms, Average time per hit: 12620.917 ms 


print((len([int(i) for i in possible if ('3' in i and '5' in i and '7' in i and int(i) <= N)]))) # Hits:1.0, Total execution time: 6866.292 ms, Average time per hit: 6866.292 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 49.417 ms, Average time per hit: 49.417 ms 


def n_ary(l,d): # リストl中の文字でd桁までを全列挙(sorted) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if d == 1:

        return(l)

    n = len(l)

    ll = n_ary(l,d-1)

    lll = []

    for i in l:

        for j in ll[n*(n**(d-2)-1)//(n-1):]:

            lll.append(i+j)

    return(ll+lll)

possible = [i for i in n_ary(['3','5','7'],9)] # 制約が10**9なので9 # Hits:1.0, Total execution time: 5491.667 ms, Average time per hit: 5491.667 ms 


print((len([int(i) for i in possible if ('3' in i and '5' in i and '7' in i and int(i) <= N)]))) # Hits:1.0, Total execution time: 7250.708 ms, Average time per hit: 7250.708 ms 
",p03212,True
"#from statistics import median

#import collections

#aa = collections.Counter(a) # list to list

#from itertools import combinations # (string,3) 3回



mod = 10**9 + 7



def readInts():

  return list(map(int,input().split()))

def main():

    from collections import deque

    d = deque()

    lc = [3,5,7]

    cnt = 0

    #nya = 0

    d.append(0)

    LIST = []

    n = int(eval(input()))

    flag = False

    while True:



        a = d.popleft()

        #print(a)

        if a > n:

            #print(a,nya)

            print(cnt)

            exit()        #print(n,a)

        if len(str(a)) == 3 and (not flag):



            flag = True

        if flag and (str(a).count('3') >= 1 and str(a).count('5') >= 1 and str(a).count('7') >= 1):

            cnt += 1

        for i in range(3):

            nya = a * 10 + lc[i]

            d.append(nya)

if __name__ == '__main__':

  main()
",,p03212,False
"def dfs(s,num): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if int(s)>num:

        return 0

    if s.count('7')>0 and s.count('5')>0 and s.count('3')>0:

        ret=1

    else:

        ret=0

    for i in ""753"":

        ret+=dfs(s+i,num)

    return ret

n=int(eval(input())) # Hits:1.0, Total execution time: 48.959 ms, Average time per hit: 48.959 ms 


print((dfs('0',n))) # Hits:1.0, Total execution time: 43701.083 ms, Average time per hit: 43701.083 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 51.959 ms, Average time per hit: 51.959 ms 




def dfs(now): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if int(now)>n:

        return 0

    for i in ""753"":

        if i not in now:

            ret=0

            break

    else:

        ret=1

    for i in ""753"":

        ret+=dfs(now+i)

    return ret

print((dfs(""0""))) # Hits:1.0, Total execution time: 41241.542 ms, Average time per hit: 41241.542 ms 
",p03212,True
"import itertools



n  = int(eval(input()))



if n < 357:

  print((0))

  exit()



max_m = len(str(n))



ans = 0



for m in range(3,max_m+1):

  for i in range(1, m):

    for j in range(1, m-i):

      k = m-i-j

      ls = ['7']*i+['5']*j+['3']*k

      for l in set(itertools.permutations(ls)):

        s = ''.join(l)

        s = int(s)

        if s <= n:

          ans += 1

          #print(s)

print(ans)","n = int(eval(input())) # Hits:1.0, Total execution time: 41.166 ms, Average time per hit: 41.166 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  ret = 0

  if int(s) > n:

    return 0

  if all(s.count(c) > 0 for c in '753'):

    ret = 1

  for c in '753':

    ret += dfs(s+c)

  return ret



print((dfs('0'))) # Hits:1.0, Total execution time: 58923.458 ms, Average time per hit: 58923.458 ms 


  ",p03212,False
"#!/usr/bin/env python3



import sys # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


import math # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


from bisect import bisect_right as br # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


from bisect import bisect_left as bl # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


sys.setrecursionlimit(2147483647) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


from heapq import heappush, heappop,heappushpop # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


from collections import defaultdict # Hits:1.0, Total execution time: 1.791 ms, Average time per hit: 1.791 ms 


from itertools import accumulate # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


from collections import Counter # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


from collections import deque # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


from operator import itemgetter # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


from itertools import permutations # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


mod = 10**9 + 7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


inf = float('inf') # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


def I(): return int(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def LI(): return list(map(int,sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




n = I() # Hits:1.0, Total execution time: 41.167 ms, Average time per hit: 41.167 ms 


s = str(n) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


m = len(str(n)) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




lst = [3,5,7] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


que = deque([3,5,7]) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


for _ in range(3**m): # Hits:19684.0, Total execution time: 1561.197 ms, Average time per hit: 0.07931299532615323 ms 


    x = que.popleft() # Hits:19683.0, Total execution time: 2516.348 ms, Average time per hit: 0.1278437230097038 ms 


    for j in [3,5,7]: # Hits:78732.0, Total execution time: 6264.647 ms, Average time per hit: 0.07956926027536453 ms 


        que.append(int(str(x)+str(j))) # Hits:59049.0, Total execution time: 19052.158 ms, Average time per hit: 0.32264996867008755 ms 


        lst.append(int(str(x)+str(j))) # Hits:59049.0, Total execution time: 18605.981 ms, Average time per hit: 0.31509392199698555 ms 




ans = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in lst: # Hits:29524.0, Total execution time: 2406.768 ms, Average time per hit: 0.08151903536106218 ms 


    if i > n: # Hits:29524.0, Total execution time: 2448.175 ms, Average time per hit: 0.08292152147405502 ms 


        break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    cnt = [0]*3 # Hits:29523.0, Total execution time: 3690.236 ms, Average time per hit: 0.12499529180638824 ms 


    for j in str(i): # Hits:280482.0, Total execution time: 22373.472 ms, Average time per hit: 0.07976794232784991 ms 


        cnt[(int(j)-1)//3] += 1 # Hits:250959.0, Total execution time: 51057.821 ms, Average time per hit: 0.20345084655262413 ms 


    for j in cnt: # Hits:111996.0, Total execution time: 8592.403 ms, Average time per hit: 0.07672062395085538 ms 


        if j == 0: # Hits:85512.0, Total execution time: 7456.738 ms, Average time per hit: 0.08720107119468612 ms 


            break # Hits:3039.0, Total execution time: 240.105 ms, Average time per hit: 0.07900789733464955 ms 


    else:

        ans += 1 # Hits:26484.0, Total execution time: 2403.045 ms, Average time per hit: 0.09073572723153601 ms 


print(ans) # Hits:1.0, Total execution time: 26.292 ms, Average time per hit: 26.292 ms 
","#!/usr/bin/env python3



import sys # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


import math # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


from bisect import bisect_right as br # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


from bisect import bisect_left as bl # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


sys.setrecursionlimit(2147483647) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


from heapq import heappush, heappop,heappushpop # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


from collections import defaultdict # Hits:1.0, Total execution time: 1.041 ms, Average time per hit: 1.041 ms 


from itertools import accumulate # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


from collections import Counter # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


from collections import deque # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


from operator import itemgetter # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


from itertools import permutations # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


mod = 10**9 + 7 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


inf = float('inf') # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


def I(): return int(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LI(): return list(map(int,sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




n = I() # Hits:1.0, Total execution time: 48.625 ms, Average time per hit: 48.625 ms 


num = ['7', '5', '3'] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


stack = [('', 0)] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


check = defaultdict(lambda:True) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


while stack: # Hits:29525.0, Total execution time: 2268.151 ms, Average time per hit: 0.0768213717188823 ms 


    m, l = stack.pop() # Hits:29524.0, Total execution time: 4619.853 ms, Average time per hit: 0.15647788240075872 ms 


    for x in num: # Hits:111997.0, Total execution time: 8618.757 ms, Average time per hit: 0.07695524880130718 ms 


        if x not in m: # Hits:85513.0, Total execution time: 7759.071 ms, Average time per hit: 0.09073557236911348 ms 


            break # Hits:3040.0, Total execution time: 223.501 ms, Average time per hit: 0.07352006578947369 ms 


    else:

        ans += 1 # Hits:26484.0, Total execution time: 2412.035 ms, Average time per hit: 0.09107517746563963 ms 


    for x in num: # Hits:118096.0, Total execution time: 10096.672 ms, Average time per hit: 0.0854954613196044 ms 


        if 10 * l + int(x) <= n: # Hits:88572.0, Total execution time: 15634.007 ms, Average time per hit: 0.17651184347197763 ms 


            if check[10*l + int(x)]: # Hits:29523.0, Total execution time: 9516.001 ms, Average time per hit: 0.32232500084679744 ms 


                stack.append((m + x, 10 * l + int(x))) # Hits:29523.0, Total execution time: 7661.087 ms, Average time per hit: 0.2594955458456119 ms 


                check[10*l + int(x)] = False # Hits:29523.0, Total execution time: 6051.934 ms, Average time per hit: 0.20499048199708703 ms 


print(ans) # Hits:1.0, Total execution time: 11.208 ms, Average time per hit: 11.208 ms 
",p03212,True
"from collections import Counter # Hits:1.0, Total execution time: 2.167 ms, Average time per hit: 2.167 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 44.25 ms, Average time per hit: 44.25 ms 




def change_to_num(ls): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    ls = list(map(str, ls))

    strnum = ''.join(ls)

    return int(strnum)

def dfs(num_ls): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    '''

    引数のnum_ls以降の753numの総数を返す

    '''

    if change_to_num(num_ls) > N:

        return 0

    

    tmp = 0

    # 引数のnum_lsは753か？

    c = Counter(num_ls)

    is753 = True

    for num in [7,5,3]:

        if c[num] == 0:

            is753 = False

    if is753:

        tmp += 1

    

    # 次の状態の753総数を足す

    for num in [7,5,3]:

        num_ls.append(num)

        tmp += dfs(num_ls)

        num_ls.pop()

    return tmp

print((dfs([0]))) # Hits:1.0, Total execution time: 159303.417 ms, Average time per hit: 159303.417 ms 






    ","from collections import Counter # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 43.167 ms, Average time per hit: 43.167 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def dfs(A): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    if A and int(A) > n:

        return

    if len(A) >= 3:

        c = Counter(A)

        is753 = True

        for i in ['7','5','3']:

            if c[i] < 1:

                is753 = False

        if is753:

            global ans 

            ans += 1

    for nex in ['7','5','3']:

        A += nex

        dfs(A)

        A = A[:-1]

dfs('') # Hits:1.0, Total execution time: 39.375 ms, Average time per hit: 39.375 ms 


print(ans)",p03212,True
"N=int(eval(input())) # Hits:1.0, Total execution time: 41.792 ms, Average time per hit: 41.792 ms 




def Base_10_to_n(X, n): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    if (int(X/n)):

        return Base_10_to_n(int(X/n), n)+str(X%n)

    return str(X%n)



ans=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(4**len(str(N))): # Hits:262145.0, Total execution time: 22458.869 ms, Average time per hit: 0.08567345934501898 ms 


    num=Base_10_to_n(i,4).zfill(len(str(N))+1).replace('0','').replace('1','7').replace('2','5') # Hits:262144.0, Total execution time: 974166.311 ms, Average time per hit: 3.7161495628356933 ms 


    # print(num)

    if set(list(num))==set(['3','5','7']) and int(num)<=N: # Hits:262144.0, Total execution time: 117192.151 ms, Average time per hit: 0.4470525779724121 ms 


        ans.append(num) # Hits:204630.0, Total execution time: 25980.301 ms, Average time per hit: 0.12696232712700972 ms 


print((len(set(ans)))) # Hits:1.0, Total execution time: 3579.791 ms, Average time per hit: 3579.791 ms 





","N=int(eval(input())) # Hits:1.0, Total execution time: 56.334 ms, Average time per hit: 56.334 ms 


N_num=len(str(N)) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


ans=0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




def Base_10_to_n(X, n): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    if (int(X/n)):

        return Base_10_to_n(int(X/n), n)+str(X%n)

    return str(X%n)



for i in range(3,N_num+1):#i桁についての3進数演算 # Hits:8.0, Total execution time: 1.208 ms, Average time per hit: 0.151 ms 


    for j in range(3**i): # Hits:29518.0, Total execution time: 2473.493 ms, Average time per hit: 0.08379609052103801 ms 


        num=Base_10_to_n(j,3).zfill(i).replace('0','3').replace('1','5').replace('2','7') # Hits:29511.0, Total execution time: 98888.301 ms, Average time per hit: 3.3508963098505644 ms 


        if set(list(num))==set(['3','5','7']) and int(num)<=N: # Hits:29511.0, Total execution time: 13477.948 ms, Average time per hit: 0.45670929483921247 ms 


            ans+=1 # Hits:26484.0, Total execution time: 2625.77 ms, Average time per hit: 0.0991455218244978 ms 


print(ans) # Hits:1.0, Total execution time: 26.375 ms, Average time per hit: 26.375 ms 









",p03212,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 50.333 ms, Average time per hit: 50.333 ms 




def ju(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    l=list(str(n))

    j=[0]*3

    f=0

    for i in range(len(l)):

        if l[i]=='3':

            j[0]=1

        elif l[i]=='5':

            j[1]=1

        elif l[i]=='7':

            j[2]=1

        else:

            f=1

    if sum(j)==3 and f==0:

        return 1

    else:

        return 0



zenbu=[3,5,7] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




for i in range(10): # Hits:11.0, Total execution time: 3.499 ms, Average time per hit: 0.3180909090909091 ms 


    tmp=[] # Hits:10.0, Total execution time: 1.0 ms, Average time per hit: 0.1 ms 


    for j in zenbu: # Hits:1048585.0, Total execution time: 78054.026 ms, Average time per hit: 0.07443748098628152 ms 


        tmp.append(j+3*(10**(i+1))) # Hits:1048575.0, Total execution time: 227421.317 ms, Average time per hit: 0.21688607586486422 ms 


        tmp.append(j+5*(10**(i+1))) # Hits:1048575.0, Total execution time: 223768.664 ms, Average time per hit: 0.21340263118994826 ms 


        tmp.append(j+7*(10**(i+1))) # Hits:1048575.0, Total execution time: 225124.251 ms, Average time per hit: 0.21469542092840282 ms 


        tmp.append(j) # Hits:1048575.0, Total execution time: 133305.718 ms, Average time per hit: 0.12713036072765418 ms 


    zenbu=tmp # Hits:10.0, Total execution time: 2600.125 ms, Average time per hit: 260.0125 ms 


  

ans=0 # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


for i in zenbu: # Hits:3145729.0, Total execution time: 234108.388 ms, Average time per hit: 0.0744210286391485 ms 


    if i<=n and ju(i)==1: # Hits:3145728.0, Total execution time: 783806.178 ms, Average time per hit: 0.24916527366638183 ms 


        ans+=1 # Hits:26484.0, Total execution time: 2425.326 ms, Average time per hit: 0.0915770276393294 ms 


print(ans) # Hits:1.0, Total execution time: 29.75 ms, Average time per hit: 29.75 ms 


      
","n=int(eval(input())) # Hits:1.0, Total execution time: 56.167 ms, Average time per hit: 56.167 ms 




def ju(n): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    l=list(str(n))

    j=[0]*3

    f=0

    for i in range(len(l)):

        if l[i]=='3':

            j[0]=1

        elif l[i]=='5':

            j[1]=1

        elif l[i]=='7':

            j[2]=1

        else:

            f=1

    if sum(j)==3 and f==0:

        return 1

    else:

        return 0



zenbu=[3,5,7] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




for i in range(8): # Hits:9.0, Total execution time: 1.291 ms, Average time per hit: 0.14344444444444446 ms 


    tmp=[] # Hits:8.0, Total execution time: 0.623 ms, Average time per hit: 0.077875 ms 


    for j in zenbu: # Hits:65543.0, Total execution time: 4932.102 ms, Average time per hit: 0.07524986649985506 ms 


        tmp.append(j+3*(10**(i+1))) # Hits:65535.0, Total execution time: 12527.744 ms, Average time per hit: 0.19116112001220723 ms 


        tmp.append(j+5*(10**(i+1))) # Hits:65535.0, Total execution time: 13019.445 ms, Average time per hit: 0.19866399633783474 ms 


        tmp.append(j+7*(10**(i+1))) # Hits:65535.0, Total execution time: 12418.342 ms, Average time per hit: 0.18949175249866482 ms 


        tmp.append(j) # Hits:65535.0, Total execution time: 8626.636 ms, Average time per hit: 0.13163402761882964 ms 


    zenbu=tmp # Hits:8.0, Total execution time: 46.585 ms, Average time per hit: 5.823125 ms 


  

ans=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in zenbu: # Hits:196609.0, Total execution time: 17806.804 ms, Average time per hit: 0.09056962804347715 ms 


    if i<=n and ju(i)==1: # Hits:196608.0, Total execution time: 563141.675 ms, Average time per hit: 2.864286677042643 ms 


        ans+=1 # Hits:26484.0, Total execution time: 2695.255 ms, Average time per hit: 0.10176918139253889 ms 


print(ans) # Hits:1.0, Total execution time: 53.75 ms, Average time per hit: 53.75 ms 


      
",p03212,True
"import itertools # Hits:1.0, Total execution time: 2.5 ms, Average time per hit: 2.5 ms 


n = eval(input()) # Hits:1.0, Total execution time: 90.209 ms, Average time per hit: 90.209 ms 


number = list(""753"") # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


N = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


flag = False # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(3, 10): # Hits:8.0, Total execution time: 3.25 ms, Average time per hit: 0.40625 ms 


  for v in itertools.product(number, repeat=i): # Hits:29518.0, Total execution time: 3114.584 ms, Average time per hit: 0.10551473677078392 ms 


    if ""7"" in v and ""5"" in v and ""3"" in v: # Hits:29511.0, Total execution time: 4710.567 ms, Average time per hit: 0.15962071769848532 ms 


      if int("""".join(v)) <= int(n): N.append(int("""".join(v))) # Hits:26484.0, Total execution time: 12288.773 ms, Average time per hit: 0.4640074384534058 ms 


print((len(N))) # Hits:1.0, Total execution time: 29.917 ms, Average time per hit: 29.917 ms 
","import itertools # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 54.0 ms, Average time per hit: 54.0 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(3,len(str(n))+1): # Hits:8.0, Total execution time: 2.5 ms, Average time per hit: 0.3125 ms 


    for v in itertools.product([""3"",""5"",""7""], repeat=i): # Hits:29518.0, Total execution time: 3018.27 ms, Average time per hit: 0.10225184633105223 ms 


        if len(set(v))!=3: continue # Hits:29511.0, Total execution time: 6875.832 ms, Average time per hit: 0.2329921724102877 ms 


        x = int("""".join(v)) # Hits:26484.0, Total execution time: 5703.92 ms, Average time per hit: 0.2153723002567588 ms 


        if n >= x: cnt += 1 # Hits:26484.0, Total execution time: 3234.12 ms, Average time per hit: 0.12211599456275488 ms 




print(cnt) # Hits:1.0, Total execution time: 33.916 ms, Average time per hit: 33.916 ms 
",p03212,True
"import sys

from itertools import product

from bisect import bisect_right as bi_r



shichigosan = set('357')



cand = []

for i in range(3, 10):

    for x in product('357', repeat=i):

        x = ''.join(x)

        if set(x) == shichigosan:

            cand.append(int(''.join(x)))



n = int(sys.stdin.readline().rstrip())



def main():

    return bi_r(cand, n)



if __name__ == '__main__':

    ans = main()

    print(ans)",,p03212,False
"N = int(eval(input())) # Hits:1.0, Total execution time: 50.25 ms, Average time per hit: 50.25 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if int(s) > N:

        return 0

    if all(s.count(c) > 0 for c in ""753""):

        ret = 1

    else:

        ret = 0

    

    for c in '753':

        ret += dfs(s + c)

    return ret



print((dfs('0')))  # Hits:1.0, Total execution time: 57865.292 ms, Average time per hit: 57865.292 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 67.458 ms, Average time per hit: 67.458 ms 




def func(s, cnt): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if int(s)>N:

        return cnt

    else:

        b=list(s)

        if '7' in b and '5' in b and '3' in b:

            cnt += 1

        for t in ""753"":

            cnt = func(s+t, cnt)

        return cnt

    

print((func(""0"", 0))) # Hits:1.0, Total execution time: 42649.917 ms, Average time per hit: 42649.917 ms 



",p03212,True
"import itertools # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 43.333 ms, Average time per hit: 43.333 ms 


p = 3 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


digits = [3, 5, 7] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


A = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


flag = False # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while True: # Hits:8.0, Total execution time: 0.584 ms, Average time per hit: 0.073 ms 


    for tup in itertools.product(digits, repeat=p): # Hits:29519.0, Total execution time: 2805.367 ms, Average time per hit: 0.09503597682848336 ms 


        a = int("""".join(list(map(str, tup)))) # Hits:29512.0, Total execution time: 18118.651 ms, Average time per hit: 0.6139418202764977 ms 


        if a > N: # Hits:29512.0, Total execution time: 2592.259 ms, Average time per hit: 0.08783745595012198 ms 


            flag = True # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


            break # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


        A.append(a) # Hits:29511.0, Total execution time: 3603.206 ms, Average time per hit: 0.12209704855816476 ms 


    if flag: # Hits:8.0, Total execution time: 1.082 ms, Average time per hit: 0.13525 ms 


        break # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    p += 1 # Hits:7.0, Total execution time: 1.582 ms, Average time per hit: 0.226 ms 


count = 0 # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


for a in A: # Hits:29512.0, Total execution time: 2358.349 ms, Average time per hit: 0.0799115275142315 ms 


    if ""3"" in str(a) and ""5"" in str(a) and ""7"" in str(a): # Hits:29511.0, Total execution time: 8930.904 ms, Average time per hit: 0.3026296635152994 ms 


        count += 1 # Hits:26484.0, Total execution time: 2537.43 ms, Average time per hit: 0.09580992297236067 ms 


print(count) # Hits:1.0, Total execution time: 20.5 ms, Average time per hit: 20.5 ms 

","import itertools # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 52.5 ms, Average time per hit: 52.5 ms 


digits = [3, 5, 7] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 






def get_A_product(digits, N): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    A = []

    flag = False

    p = 3

    while True:

        for tup in itertools.product(digits, repeat=p):

            a = int("""".join(list(map(str, tup))))

            if a > N:

                flag = True

                break

            A.append(a)

        if flag:

            break

        p += 1

    return A





count = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


A = get_A_product(digits, N) # Hits:1.0, Total execution time: 22582.125 ms, Average time per hit: 22582.125 ms 


for a in A: # Hits:29512.0, Total execution time: 2384.391 ms, Average time per hit: 0.08079394822445107 ms 


    if ""3"" in str(a) and ""5"" in str(a) and ""7"" in str(a): # Hits:29511.0, Total execution time: 9189.7 ms, Average time per hit: 0.3113991393039884 ms 


        count += 1 # Hits:26484.0, Total execution time: 2524.764 ms, Average time per hit: 0.09533167195287721 ms 


print(count) # Hits:1.0, Total execution time: 20.709 ms, Average time per hit: 20.709 ms 

",p03212,True
"from itertools import product # Hits:1.0, Total execution time: 3.25 ms, Average time per hit: 3.25 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 73.292 ms, Average time per hit: 73.292 ms 


num = ["""",""3"",""5"",""7""] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


A = set()  # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in product(num,repeat=9): # Hits:262145.0, Total execution time: 27465.493 ms, Average time per hit: 0.10477214137214137 ms 


	x = """".join(i) # Hits:262144.0, Total execution time: 38334.655 ms, Average time per hit: 0.14623510360717773 ms 


	if x == """": # Hits:262144.0, Total execution time: 23147.401 ms, Average time per hit: 0.0883003273010254 ms 


		continue # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


	elif len(set(x)) < 3: # Hits:262143.0, Total execution time: 57549.731 ms, Average time per hit: 0.21953563894515588 ms 


		continue # Hits:57513.0, Total execution time: 3882.438 ms, Average time per hit: 0.0675053987794064 ms 


	elif int(x) not in A and int(x) <= n: # Hits:204630.0, Total execution time: 36880.75 ms, Average time per hit: 0.18023139324634707 ms 


		A.add(int(x)) # Hits:26484.0, Total execution time: 5379.378 ms, Average time per hit: 0.20311803352967828 ms 


print((len(A))) # Hits:1.0, Total execution time: 23.875 ms, Average time per hit: 23.875 ms 
","from itertools import product # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 42.916 ms, Average time per hit: 42.916 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(3, len(str(n))+1): # Hits:8.0, Total execution time: 1.5 ms, Average time per hit: 0.1875 ms 


	for p in product([""7"",""5"",""3""], repeat = i): # Hits:29518.0, Total execution time: 2458.176 ms, Average time per hit: 0.0832771868012738 ms 


		if len(set(p)) == 3: # Hits:29511.0, Total execution time: 6138.386 ms, Average time per hit: 0.20800332079563552 ms 


			p = int("""".join(p)) # Hits:26484.0, Total execution time: 5184.217 ms, Average time per hit: 0.195749018275185 ms 


			if p <= n: # Hits:26484.0, Total execution time: 2309.274 ms, Average time per hit: 0.0871950611690077 ms 


				cnt += 1 # Hits:26484.0, Total execution time: 2468.334 ms, Average time per hit: 0.09320095151789759 ms 


print(cnt) # Hits:1.0, Total execution time: 6.25 ms, Average time per hit: 6.25 ms 
",p03212,True
"from itertools import product # Hits:1.0, Total execution time: 2.666 ms, Average time per hit: 2.666 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 69.166 ms, Average time per hit: 69.166 ms 


num = ['','3','5','7'] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


A = set()  # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in product(num,repeat=9): # Hits:262145.0, Total execution time: 26289.222 ms, Average time per hit: 0.10028504072173797 ms 


    x = """".join(i) # Hits:262144.0, Total execution time: 38344.26 ms, Average time per hit: 0.14627174377441407 ms 


    if len(set(x)) == 3: # Hits:262144.0, Total execution time: 57931.519 ms, Average time per hit: 0.22099120712280274 ms 


        if (int(x) not in A) and (int(x) <= n): # Hits:204630.0, Total execution time: 36748.166 ms, Average time per hit: 0.17958347260909935 ms 


            A.add(int(x)) # Hits:26484.0, Total execution time: 5274.336 ms, Average time per hit: 0.199151789759855 ms 


print((len(A))) # Hits:1.0, Total execution time: 39.25 ms, Average time per hit: 39.25 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 38.834 ms, Average time per hit: 38.834 ms 


num = ['3','5','7'] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(len(str(N))-1): # Hits:9.0, Total execution time: 2.291 ms, Average time per hit: 0.25455555555555553 ms 


    num2 = [] # Hits:8.0, Total execution time: 0.751 ms, Average time per hit: 0.093875 ms 


    for n in num: # Hits:65543.0, Total execution time: 4991.183 ms, Average time per hit: 0.07615127473566971 ms 


        num2.append(n+'3') # Hits:65535.0, Total execution time: 9548.616 ms, Average time per hit: 0.1457025406271458 ms 


        num2.append(n+'5') # Hits:65535.0, Total execution time: 9794.912 ms, Average time per hit: 0.14946077668421456 ms 


        num2.append(n+'7') # Hits:65535.0, Total execution time: 10094.557 ms, Average time per hit: 0.15403306630045013 ms 


        num2.append(n) # Hits:65535.0, Total execution time: 8551.306 ms, Average time per hit: 0.1304845654993515 ms 


    num = num2 # Hits:8.0, Total execution time: 92.459 ms, Average time per hit: 11.557375 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


num = set(num) # Hits:1.0, Total execution time: 3700.333 ms, Average time per hit: 3700.333 ms 


for n in num: # Hits:29524.0, Total execution time: 2732.937 ms, Average time per hit: 0.09256662376371766 ms 


    if '3' in n and '5' in n and '7' in n: # Hits:29523.0, Total execution time: 4376.503 ms, Average time per hit: 0.14824045659316465 ms 


        if int(n) <= N: # Hits:26484.0, Total execution time: 3670.547 ms, Average time per hit: 0.13859488747923274 ms 


            cnt += 1 # Hits:26484.0, Total execution time: 2469.825 ms, Average time per hit: 0.09325724966017218 ms 


print(cnt) # Hits:1.0, Total execution time: 31.375 ms, Average time per hit: 31.375 ms 
",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 56.541 ms, Average time per hit: 56.541 ms 


M = len(str(N)) # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 


count = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




def dfs(A): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


  global count

  

  if len(A) <= M and (3 in A and 5 in A and 7 in A):

    num = 0

    for i in range(len(A)):

      num += A[i]*(10**i)

    if num <= N:

      count += 1

  elif len(A) > M:

    return



  for i in [3, 5, 7]:

    A.append(i)

    dfs(A)

    A.pop()

  

dfs([]) # Hits:1.0, Total execution time: 29.333 ms, Average time per hit: 29.333 ms 


print(count)

    ","def func(cur, use): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


  

  global counter

  if (cur > N): return 

  if (use == 0b111): counter += 1



  func(cur * 10 + 7, use | 0b001)

  func(cur * 10 + 5, use | 0b010)

  func(cur * 10 + 3, use | 0b100) 



N = int(eval(input())) # Hits:1.0, Total execution time: 41.584 ms, Average time per hit: 41.584 ms 


counter = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


func(0, 0) # Hits:1.0, Total execution time: 8.75 ms, Average time per hit: 8.75 ms 


print(counter)",p03212,True
"import sys # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 


sys.setrecursionlimit(100000) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 67.791 ms, Average time per hit: 67.791 ms 


svt = [] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




def dfs(num): # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


    if num>1000000000:

        return

    #elif num<100:

    #    return

    else:

        svt.append(int(str(num)+'3'))

        dfs(int(str(num)+'3'))

        svt.append(int(str(num)+'5'))

        dfs(int(str(num)+'5'))

        svt.append(int(str(num)+'7'))

        dfs(int(str(num)+'7'))



def check753(num): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    exist3 = False

    exist5 = False

    exist7 = False

    s = str(num)

    for c in s:

        if c=='3':

            exist3 = True

        elif c=='5':

            exist5 = True

        elif c=='7':

            exist7 = True

    if exist3 and exist5 and exist7:

        return True

    else:

        return False





dfs(0) # Hits:1.0, Total execution time: 52179.458 ms, Average time per hit: 52179.458 ms 


svt = sorted(svt) # Hits:1.0, Total execution time: 2540.083 ms, Average time per hit: 2540.083 ms 


svt = svt[12:] # Hits:1.0, Total execution time: 122.625 ms, Average time per hit: 122.625 ms 


#print(svt)

count = 0 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(len(svt)): # Hits:29512.0, Total execution time: 2475.485 ms, Average time per hit: 0.08388062483057739 ms 


    if svt[i]>N: # Hits:29512.0, Total execution time: 2948.787 ms, Average time per hit: 0.0999182366494985 ms 


        break # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


    if check753(svt[i]): # Hits:29511.0, Total execution time: 56563.608 ms, Average time per hit: 1.9166957405713123 ms 


        count += 1 # Hits:26484.0, Total execution time: 2507.562 ms, Average time per hit: 0.09468214771182601 ms 


print(count) # Hits:1.0, Total execution time: 34.0 ms, Average time per hit: 34.0 ms 



","N = int(eval(input())) # Hits:1.0, Total execution time: 58.708 ms, Average time per hit: 58.708 ms 




cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def dfs(n): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    global cnt

    if n>N:

        return 0

    s = str(n)

    if '3' in s and '5' in s and '7' in s:

        cnt += 1

    dfs(int(s+'3'))

    dfs(int(s+'5'))

    dfs(int(s+'7'))



dfs(3) # Hits:1.0, Total execution time: 15.25 ms, Average time per hit: 15.25 ms 


dfs(5)

dfs(7)

print(cnt)
",p03212,True
"def main():

    N = int(eval(input()))



    def recur(s):

        if int(s) > N:

            return 0

        ret = 1 if all(s.count(c) for c in '753') else 0

        for c in '753':

            ret += recur(s + c)

        return ret

    print((recur('0')))





if __name__ == '__main__':

    main()
",,p03212,False
"N = int(eval(input())) # Hits:1.0, Total execution time: 40.667 ms, Average time per hit: 40.667 ms 






def dfs(s): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if int(s) > N:

        return 0

    if s.count(""7"") > 0 and s.count(""5"") > 0 and s.count(""3"") > 0:

        ret = 1

        # print(s)

    else:

        ret = 0

    ret += dfs(s + ""7"")

    ret += dfs(s + ""5"")

    ret += dfs(s + ""3"")

    return ret





print((dfs(""0""))) # Hits:1.0, Total execution time: 39279.209 ms, Average time per hit: 39279.209 ms 



","N = int(eval(input())) # Hits:1.0, Total execution time: 47.25 ms, Average time per hit: 47.25 ms 






def dfs(x): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    if x > N:

        return 0

    s = str(x)

    if s.count(""7"") > 0 and s.count(""5"") > 0 and s.count(""3"") > 0:

        ret = 1

        # print(x)

    else:

        ret = 0

    ret += dfs(10 * x + 7)

    ret += dfs(10 * x + 5)

    ret += dfs(10 * x + 3)

    return ret





print((dfs(0))) # Hits:1.0, Total execution time: 41149.208 ms, Average time per hit: 41149.208 ms 



",p03212,True
"# -*- coding: utf-8 -*-



N = int(eval(input())) # Hits:1.0, Total execution time: 77.667 ms, Average time per hit: 77.667 ms 




ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


cursor = ""357"" # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 






def increment(cursor): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    l = len(cursor)

    ret = [''] * (l + 1)

    if cursor[-1] == '7':

        ret[-1] = '3'

        ret[-2] = '3'

    elif cursor[-1] == '5':

        ret[-1] = '7'

    elif cursor[-1] == '3':

        ret[-1] = '5'



    for i in range(l-1):

        if ret[-(2 + i)] == '3':

            if cursor[-(2 + i)] == '7':

                ret[-(2 + i)] = '3'

                ret[-(3 + i)] = '3'

            elif cursor[-(2 + i)] == '5':

                ret[-(2 + i)] = '7'

            elif cursor[-(2 + i)] == '3':

                ret[-(2 + i)] = '5'

        else:

            ret[-(2 + i)] = cursor[-(2 + i)]



    return ''.join(ret)





while N >= int(cursor): # Hits:29507.0, Total execution time: 4367.62 ms, Average time per hit: 0.14801979191378317 ms 


    if '7' in cursor and '5' in cursor and '3' in cursor: # Hits:29506.0, Total execution time: 3978.608 ms, Average time per hit: 0.13484064258116993 ms 


        ans += 1 # Hits:26484.0, Total execution time: 2320.226 ms, Average time per hit: 0.08760859386799577 ms 


    cursor = increment(cursor) # Hits:29506.0, Total execution time: 75919.796 ms, Average time per hit: 2.573029078831424 ms 




print(ans) # Hits:1.0, Total execution time: 29.542 ms, Average time per hit: 29.542 ms 

","from itertools import product # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 45.834 ms, Average time per hit: 45.834 ms 


ans, L = 0, len(str(N)) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


for i in range(L + 1): # Hits:11.0, Total execution time: 1.167 ms, Average time per hit: 0.1060909090909091 ms 


    for p in product((""7"", ""5"", ""3""), repeat=i): # Hits:29534.0, Total execution time: 2852.089 ms, Average time per hit: 0.09656968239994582 ms 


        if ""7"" in p and ""5"" in p and ""3"" in p: # Hits:29524.0, Total execution time: 4415.378 ms, Average time per hit: 0.1495521609538003 ms 


            if (i == L and int(''.join(p)) <= N) or i < L: # Hits:26484.0, Total execution time: 5009.302 ms, Average time per hit: 0.18914446458238937 ms 


                ans += 1 # Hits:26484.0, Total execution time: 2473.344 ms, Average time per hit: 0.0933901223380154 ms 


print(ans) # Hits:1.0, Total execution time: 10.292 ms, Average time per hit: 10.292 ms 

",p03212,True
"import sys

from collections import deque



sys.setrecursionlimit(10 ** 6)

INF = float(""inf"")

MOD = 10 ** 9 + 7





def input():

    return sys.stdin.readline().strip()





def bfs(N):

    q = deque([""3"", ""5"", ""7""])



    cnt = 0

    while q:

        s = q.popleft()



        if int(s) > N:

            continue



        if len(set(s)) == 3:

            cnt += 1



        for c in [""3"", ""5"", ""7""]:

            q.append(s + c)



    return cnt





def main():

    N = int(eval(input()))

    ans = bfs(N)

    print(ans)





if __name__ == ""__main__"":

    main()
",,p03212,False
"N = int(eval(input())) # Hits:1.0, Total execution time: 66.542 ms, Average time per hit: 66.542 ms 


s = ""357"" # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(1,10): # Hits:10.0, Total execution time: 1.081 ms, Average time per hit: 0.10809999999999999 ms 


    for j in range(3**i): # Hits:29532.0, Total execution time: 2640.131 ms, Average time per hit: 0.0893989909250982 ms 


        n = j # Hits:29523.0, Total execution time: 2187.077 ms, Average time per hit: 0.07408044575415777 ms 


        t = """" # Hits:29523.0, Total execution time: 2173.446 ms, Average time per hit: 0.07361873793313688 ms 


        for k in range(i): # Hits:280482.0, Total execution time: 23546.025 ms, Average time per hit: 0.08394843519370226 ms 


            t+=s[n%3] # Hits:250959.0, Total execution time: 36103.022 ms, Average time per hit: 0.1438602401189039 ms 


            n//=3 # Hits:250959.0, Total execution time: 23899.559 ms, Average time per hit: 0.0952329225092545 ms 


        if len(set(t))!=3:continue # Hits:29523.0, Total execution time: 7411.983 ms, Average time per hit: 0.2510579209429936 ms 


        if int(t)<=N:cnt+=1 # Hits:26484.0, Total execution time: 4804.057 ms, Average time per hit: 0.18139469113426976 ms 


print(cnt) # Hits:1.0, Total execution time: 11.583 ms, Average time per hit: 11.583 ms 
","from collections import deque # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 41.375 ms, Average time per hit: 41.375 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


A = ""357"" # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


Q = deque([""3"",""5"",""7""]) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


while Q: # Hits:88573.0, Total execution time: 7671.18 ms, Average time per hit: 0.08660856017070666 ms 


    q = Q.pop() # Hits:88572.0, Total execution time: 11005.489 ms, Average time per hit: 0.12425471932439146 ms 


    x = int(q) # Hits:88572.0, Total execution time: 12835.147 ms, Average time per hit: 0.14491201508377363 ms 


    if x>N:continue # Hits:88572.0, Total execution time: 8373.226 ms, Average time per hit: 0.09453581267217631 ms 


    if len(set(q))==3:ans+=1 # Hits:29523.0, Total execution time: 8235.722 ms, Average time per hit: 0.2789595230836974 ms 


    for a in A: # Hits:118092.0, Total execution time: 10021.178 ms, Average time per hit: 0.08485907597466383 ms 


        Q.append(q+a) # Hits:88569.0, Total execution time: 14499.237 ms, Average time per hit: 0.1637055516038343 ms 


print(ans) # Hits:1.0, Total execution time: 28.875 ms, Average time per hit: 28.875 ms 
",p03212,True
"#! usr/bin/env python

# -*- coding: utf-8 -*-





def main():

    n = int(eval(input()))



    digits = [0, 3, 5, 7]

    ans = 0

    for i in range(4**9):

        cur = 0

        for j in range(10):

            cur += digits[i % 4] * 10 ** j

            i //= 4



        num = cur

        cnt = [0] * 10

        while num:

            cnt[num % 10] += 1

            num //= 10



        if cur <= n and not cnt[0] and cnt[3] and cnt[5] and cnt[7]:

            ans += 1



    print(ans)





if __name__ == '__main__':

    main()
",,p03212,False
"n=int(eval(input())) # Hits:1.0, Total execution time: 48.959 ms, Average time per hit: 48.959 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    if int(s)>n:

        return 0

    ret=1 if all(s.count(c)>0 for c in ""753"") else 0

    for c in ""753"":

        ret+=dfs(s+c)

    return ret



print((dfs(""0""))) # Hits:1.0, Total execution time: 56363.167 ms, Average time per hit: 56363.167 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 51.625 ms, Average time per hit: 51.625 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if int(s)>n:

       return 0

    b=(all(map(s.count,""357"")))

    for c in ""357"":

        b+=dfs(s+c)

    return b

print((dfs(""0""))) # Hits:1.0, Total execution time: 41899.75 ms, Average time per hit: 41899.75 ms 
",p03212,True
"import bisect # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 82.0 ms, Average time per hit: 82.0 ms 


S = set([7,5,3]) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


for i in range(8): # Hits:9.0, Total execution time: 2.751 ms, Average time per hit: 0.3056666666666667 ms 


    for j in S.copy(): # Hits:14756.0, Total execution time: 1272.159 ms, Average time per hit: 0.0862129981024668 ms 


        for k in [7,5,3]: # Hits:58992.0, Total execution time: 4770.366 ms, Average time per hit: 0.08086462571196094 ms 


            S.add(int(str(j)+str(k))) # Hits:44244.0, Total execution time: 14714.711 ms, Average time per hit: 0.3325809375282524 ms 


S = list(sorted(S)) # Hits:1.0, Total execution time: 1133.25 ms, Average time per hit: 1133.25 ms 


T = [] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in S: # Hits:29524.0, Total execution time: 2380.824 ms, Average time per hit: 0.08064029264327327 ms 


    if str(i).count('3') and str(i).count('5') and str(i).count('7'): # Hits:29523.0, Total execution time: 15178.559 ms, Average time per hit: 0.5141265792771738 ms 


        T.append(i) # Hits:26484.0, Total execution time: 3150.864 ms, Average time per hit: 0.11897236067059357 ms 


print((bisect.bisect_right(T,N))) # Hits:1.0, Total execution time: 29.167 ms, Average time per hit: 29.167 ms 
","import bisect # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 58.833 ms, Average time per hit: 58.833 ms 


S = set([7,5,3]) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


for i in range(8): # Hits:9.0, Total execution time: 1.332 ms, Average time per hit: 0.148 ms 


    for j in S.copy(): # Hits:14756.0, Total execution time: 1229.491 ms, Average time per hit: 0.08332142857142857 ms 


        for k in [7,5,3]: # Hits:58992.0, Total execution time: 4612.41 ms, Average time per hit: 0.07818704231082181 ms 


            S.add(10*j+k) # Hits:44244.0, Total execution time: 7196.637 ms, Average time per hit: 0.16265791971792784 ms 


T = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in S: # Hits:29524.0, Total execution time: 2494.41 ms, Average time per hit: 0.08448753556428669 ms 


    if str(i).count('3') and str(i).count('5') and str(i).count('7'): # Hits:29523.0, Total execution time: 15999.583 ms, Average time per hit: 0.5419362192189141 ms 


        T.append(i) # Hits:26484.0, Total execution time: 3201.167 ms, Average time per hit: 0.12087173387705785 ms 


T.sort() # Hits:1.0, Total execution time: 735.75 ms, Average time per hit: 735.75 ms 


print((bisect.bisect_right(T,N))) # Hits:1.0, Total execution time: 7.584 ms, Average time per hit: 7.584 ms 
",p03212,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 42.0 ms, Average time per hit: 42.0 ms 


s=[] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


def dfs(string,cur): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  if cur==len(str(n)):

    if string.count('3')>0 and string.count('5')>0 and string.count('7'):

      s.append(string)

    return

  dfs(string+"""",cur+1)

  dfs(string+""7"",cur+1)

  dfs(string+""5"",cur+1)

  dfs(string+""3"",cur+1)

dfs("""",0) # Hits:1.0, Total execution time: 214450.625 ms, Average time per hit: 214450.625 ms 




cnt=0 # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in set(s): # Hits:26485.0, Total execution time: 5623.708 ms, Average time per hit: 0.2123355861808571 ms 


  if int(i)<=n: # Hits:26484.0, Total execution time: 3761.28 ms, Average time per hit: 0.14202084277299504 ms 


    cnt+=1 # Hits:26484.0, Total execution time: 2397.934 ms, Average time per hit: 0.09054274278809848 ms 


print(cnt) # Hits:1.0, Total execution time: 26.375 ms, Average time per hit: 26.375 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 50.083 ms, Average time per hit: 50.083 ms 


def dfs(s): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


  if int(s)>n:

    return 0

  ret = 1 if all(s.count(c) for c in ""753"") else 0

  for c in '753':

    ret+=dfs(s+c)

  return ret

print((dfs(""0""))) # Hits:1.0, Total execution time: 55023.458 ms, Average time per hit: 55023.458 ms 
",p03212,True
"#!/usr/bin/env python3

n = int(eval(input())) # Hits:1.0, Total execution time: 43.625 ms, Average time per hit: 43.625 ms 




def dfs(k):  # k : str # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if int(k) > n: return 0

    c = 1 if all(k.count(t) for t in ""753"") else 0  # k judge

    for t in ""753"":

        c += dfs(k + t)

    return c

print((dfs(""0""))) # Hits:1.0, Total execution time: 53188.708 ms, Average time per hit: 53188.708 ms 
","#!/usr/bin/env python3

from itertools import*

n = int(eval(input()))

c = 0

k = ""357""



for i in range(3, -~len(str(n))):

    for j in product(k, repeat = i):

        if all(j.count(h) for h in k):

            if int("""".join(j)) <= n:

                c += 1

print(c)",p03212,True
"n = (int)(eval(input())) # Hits:1.0, Total execution time: 50.333 ms, Average time per hit: 50.333 ms 




def f(s): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    ans = 0

    if (int)(s) > n:

        return 0

    for c in '753':

        num = (str)(s+c)

        if (int)(num) <= n:

            if num.count('3')and num.count('5') and num.count('7'):

                ans += 1

            ans += f(num)

    return ans

print((f('0'))) # Hits:1.0, Total execution time: 42265.625 ms, Average time per hit: 42265.625 ms 

","# python template for atcoder1

import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


sys.setrecursionlimit(10**9) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 40.625 ms, Average time per hit: 40.625 ms 






ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 






def check(s: str)->bool: # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    return '3' in s and '5' in s and '7' in s





def dfs(s: str)->int: # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    ret = 0

    if int(s) > N:

        return 0

    else:

        if check(s):

            ret += 1

        r3 = dfs(s+""3"")

        r5 = dfs(s+""5"")

        r7 = dfs(s+""7"")



        ret += r3+r5+r7

    return ret





print((dfs(""0""))) # Hits:1.0, Total execution time: 39417.666 ms, Average time per hit: 39417.666 ms 

",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 41.041 ms, Average time per hit: 41.041 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    if int(s) > N:

        return 0

    ans = 1 if all (s.count(c) > 0 for c in ""753"") else 0

    

    for c in ""753"":

        ans += dfs(s+c)

    return ans

print((dfs('0'))) # Hits:1.0, Total execution time: 56037.458 ms, Average time per hit: 56037.458 ms 
","# ABC114



N = int(eval(input())) # Hits:1.0, Total execution time: 44.5 ms, Average time per hit: 44.5 ms 


def dfs(num): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if num > N:

        return 0

    flag = True

    for s in ""357"":

        if str(num).count(s) >= 1:

            pass

        else:

            flag = False

    ret = 1 if flag else 0



    for c in [3, 5, 7]:

        ret += dfs(num * 10 + c)

    return ret

ans = dfs(0) # Hits:1.0, Total execution time: 53475.458 ms, Average time per hit: 53475.458 ms 


print(ans) # Hits:1.0, Total execution time: 6.083 ms, Average time per hit: 6.083 ms 
",p03212,True
"# ABC114



N = int(eval(input())) # Hits:1.0, Total execution time: 41.75 ms, Average time per hit: 41.75 ms 


def dfs(num): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if num > N:

        return 0

    flag = True

    for s in ""357"":

        if str(num).count(s) >= 1:

            pass

        else:

            flag = False

    ret = 1 if flag else 0



    for c in [3, 5, 7]:

        ret += dfs(num * 10 + c)

    return ret

ans = dfs(0) # Hits:1.0, Total execution time: 52848.708 ms, Average time per hit: 52848.708 ms 


print(ans) # Hits:1.0, Total execution time: 5.834 ms, Average time per hit: 5.834 ms 
","# ABC114



N = int(eval(input())) # Hits:1.0, Total execution time: 28.584 ms, Average time per hit: 28.584 ms 


def dfs(num, use): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if num > N:

        return 0

    cnt = 1 if use == 0b111 else 0

    cnt += dfs(num*10 + 3, use | 0b001)

    cnt += dfs(num*10 + 5, use | 0b010)

    cnt += dfs(num*10 + 7, use | 0b100)

    return cnt

ans = dfs(0, 0) # Hits:1.0, Total execution time: 24774.167 ms, Average time per hit: 24774.167 ms 


print(ans) # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 
",p03212,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 43.042 ms, Average time per hit: 43.042 ms 


keta = len(str(n)) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 




if keta <= 2: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print((0))

else:

    # keta-1までのパターン

    ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    # for k in range(3, keta):

    #    ans = pow(3, k) - 3 - (3*(pow(2, k) + 2))



    from itertools import product # Hits:1.0, Total execution time: 1.416 ms, Average time per hit: 1.416 ms 


    for k in range(3, keta+1): # Hits:8.0, Total execution time: 1.375 ms, Average time per hit: 0.171875 ms 


        for l in product(['3', '5', '7'], repeat=k): # Hits:29518.0, Total execution time: 2885.65 ms, Average time per hit: 0.0977589945118233 ms 


            if not '3' in l or not '5' in l or not '7' in l: # Hits:29511.0, Total execution time: 4582.853 ms, Average time per hit: 0.15529304327200028 ms 


                continue # Hits:3027.0, Total execution time: 202.983 ms, Average time per hit: 0.06705748265609515 ms 


            nn = int(''.join(l)) # Hits:26484.0, Total execution time: 5152.92 ms, Average time per hit: 0.19456728590847305 ms 


            if nn <= n: # Hits:26484.0, Total execution time: 2293.601 ms, Average time per hit: 0.08660326989880683 ms 


                ans += 1 # Hits:26484.0, Total execution time: 2500.419 ms, Average time per hit: 0.09441243769823289 ms 




    print(ans) # Hits:1.0, Total execution time: 9.75 ms, Average time per hit: 9.75 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 38.416 ms, Average time per hit: 38.416 ms 


keta = len(str(n)) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




if keta <= 2: # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    print((0))

else:

    # keta-1までのパターン

    ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    for k in range(3, keta): # Hits:7.0, Total execution time: 1.001 ms, Average time per hit: 0.143 ms 


        ans += pow(3, k) - 3 - (3*(pow(2, k) - 2)) # Hits:6.0, Total execution time: 2.083 ms, Average time per hit: 0.3471666666666667 ms 




    from itertools import product # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


    for l in product(['3', '5', '7'], repeat=keta): # Hits:19684.0, Total execution time: 1893.78 ms, Average time per hit: 0.09620910384068279 ms 


        if not '3' in l or not '5' in l or not '7' in l: # Hits:19683.0, Total execution time: 2913.73 ms, Average time per hit: 0.14803282020017275 ms 


            continue # Hits:1533.0, Total execution time: 98.032 ms, Average time per hit: 0.0639478147423353 ms 


        nn = int(''.join(l)) # Hits:18150.0, Total execution time: 3398.572 ms, Average time per hit: 0.18724914600550963 ms 


        if nn <= n: # Hits:18150.0, Total execution time: 1508.937 ms, Average time per hit: 0.08313702479338843 ms 


            ans += 1 # Hits:18150.0, Total execution time: 1618.981 ms, Average time per hit: 0.08920005509641873 ms 




    print(ans) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 

",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 39.916 ms, Average time per hit: 39.916 ms 




def search(s) : # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if int(s) > N :

        return 0

    ret = 1 if all(s.count(i) > 0 for i in ['7', '5', '3']) else 0  # 753数

    for c in ['7', '5', '3'] :

        ret += search(s + c)

    return ret



ans = search('0') # Hits:1.0, Total execution time: 55408.292 ms, Average time per hit: 55408.292 ms 




print(ans) # Hits:1.0, Total execution time: 9.375 ms, Average time per hit: 9.375 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 38.5 ms, Average time per hit: 38.5 ms 




def dp(now) : # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if int(now) > N :

        return 0

    count = 0

    if all(x in now for x in ['7', '5', '3']) :

        count += 1

    for x in ['7', '5', '3'] :

        count += dp(now + x)

    return count



ans = dp('0') # Hits:1.0, Total execution time: 50519.375 ms, Average time per hit: 50519.375 ms 


print(ans) # Hits:1.0, Total execution time: 5.958 ms, Average time per hit: 5.958 ms 
",p03212,True
"import itertools # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


from sys import stdin # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 


N=int(stdin.readline().rstrip()) # Hits:1.0, Total execution time: 36.541 ms, Average time per hit: 36.541 ms 


ans=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(3,11): # Hits:9.0, Total execution time: 1.376 ms, Average time per hit: 0.15288888888888888 ms 


    for j in list(itertools.product(""753"",repeat=i)): # Hits:88568.0, Total execution time: 11180.148 ms, Average time per hit: 0.12623236383343872 ms 


        if int("""".join(j)) <= N and len(set("""".join(j)))==3: # Hits:88560.0, Total execution time: 25396.332 ms, Average time per hit: 0.286769783197832 ms 


            ans+=1 # Hits:26484.0, Total execution time: 2398.134 ms, Average time per hit: 0.0905502945174445 ms 


print(ans) # Hits:1.0, Total execution time: 7.0 ms, Average time per hit: 7.0 ms 
","import itertools # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


from sys import stdin # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 


N=int(stdin.readline().rstrip()) # Hits:1.0, Total execution time: 40.25 ms, Average time per hit: 40.25 ms 


ans=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(3,10): # Hits:8.0, Total execution time: 1.0 ms, Average time per hit: 0.125 ms 


    for j in list(itertools.product(""753"",repeat=i)): # Hits:29518.0, Total execution time: 3618.346 ms, Average time per hit: 0.12258100142286063 ms 


        if int("""".join(j)) <= N and len(set("""".join(j)))==3: # Hits:29511.0, Total execution time: 13088.884 ms, Average time per hit: 0.44352560062349633 ms 


            ans+=1 # Hits:26484.0, Total execution time: 2462.213 ms, Average time per hit: 0.09296983084126265 ms 


print(ans) # Hits:1.0, Total execution time: 5.833 ms, Average time per hit: 5.833 ms 
",p03212,True
"import sys

import math

import itertools





# \n

def input():

    return sys.stdin.readline().rstrip()





def main():

    N = int(eval(input()))



    A = int(math.log10(N))

    flag=0

    count =0

    for a in range(3,A+2):



        for i in itertools.product([3,5,7],repeat=a):

            digit=0

            if 3 in i and  5 in i and 7 in i:





                for s in range(a):

                    digit+=10**(a-s-1)*i[s]

                if digit <=N:

                    count+=1

                else:

                    break

    print(count)





if __name__ == ""__main__"":

    main()
",,p03212,False
"import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 




sys.setrecursionlimit(10 ** 9) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 43.917 ms, Average time per hit: 43.917 ms 


length = len(str(N)) + 1 # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


result = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 






def dfs(now): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if len(now) <= length and now != """":

        result.append(now)

        if len(now) == length:

            return

    dfs(""3"" + now)

    dfs(""5"" + now)

    dfs(""7"" + now)





dfs("""") # Hits:1.0, Total execution time: 37086.75 ms, Average time per hit: 37086.75 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


result = set(result) # Hits:1.0, Total execution time: 2816.541 ms, Average time per hit: 2816.541 ms 


for r in result: # Hits:88573.0, Total execution time: 7688.428 ms, Average time per hit: 0.08680329219965452 ms 


    i = int(r) # Hits:88572.0, Total execution time: 12120.962 ms, Average time per hit: 0.13684868807298017 ms 


    if i <= N and r.count(""3"") > 0 and r.count(""5"") > 0 and r.count(""7"") > 0: # Hits:88572.0, Total execution time: 17754.753 ms, Average time per hit: 0.2004555954477713 ms 


        ans += 1 # Hits:26484.0, Total execution time: 2496.967 ms, Average time per hit: 0.09428209484972058 ms 


print(ans) # Hits:1.0, Total execution time: 12.0 ms, Average time per hit: 12.0 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 39.958 ms, Average time per hit: 39.958 ms 


nums = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


length = len(str(N)) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


def dfs(s, n): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


        global nums

        nums.append(s)

        if n == length:

                return

        dfs(s + ""3"", n + 1)

        dfs(s + ""5"", n + 1)

        dfs(s + ""7"", n + 1)



dfs("""", 0) # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


ans = 0

for i in nums:

        if i.count(""3"") >= 1 and i.count(""5"") >= 1 and i.count(""7"") >= 1:

                if int(i) <= N:

                        ans += 1

print(ans)",p03212,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 42.708 ms, Average time per hit: 42.708 ms 


alist=[] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


import itertools # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


for i in range(3,10): # Hits:8.0, Total execution time: 1.168 ms, Average time per hit: 0.146 ms 


  blist=itertools.product(['3','5','7'], repeat=i) # Hits:7.0, Total execution time: 3.292 ms, Average time per hit: 0.47028571428571425 ms 


  for j in blist: # Hits:29518.0, Total execution time: 2734.855 ms, Average time per hit: 0.09265041669489803 ms 


    if '3' in j and '5' in j and '7' in j: # Hits:29511.0, Total execution time: 4229.566 ms, Average time per hit: 0.14332167666293924 ms 


      alist.append(int(''.join(j))) # Hits:26484.0, Total execution time: 6170.613 ms, Average time per hit: 0.23299399637516993 ms 


ans=0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in alist: # Hits:26485.0, Total execution time: 1850.633 ms, Average time per hit: 0.06987475929771568 ms 


  if i<=n: # Hits:26484.0, Total execution time: 2106.946 ms, Average time per hit: 0.07955542969339979 ms 


    ans+=1 # Hits:26484.0, Total execution time: 2316.723 ms, Average time per hit: 0.08747632532850022 ms 


print(ans) # Hits:1.0, Total execution time: 6.0 ms, Average time per hit: 6.0 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 44.791 ms, Average time per hit: 44.791 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


import itertools # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


for i in range(3,10): # Hits:8.0, Total execution time: 1.336 ms, Average time per hit: 0.167 ms 


  blist=itertools.product(['3','5','7'], repeat=i) # Hits:7.0, Total execution time: 3.249 ms, Average time per hit: 0.4641428571428572 ms 


  for j in blist: # Hits:29518.0, Total execution time: 2926.934 ms, Average time per hit: 0.09915759875330306 ms 


    if '3' in j and '5' in j and '7' in j: # Hits:29511.0, Total execution time: 4387.401 ms, Average time per hit: 0.14867002134797194 ms 


      if int(''.join(j))<=n: # Hits:26484.0, Total execution time: 5281.302 ms, Average time per hit: 0.19941481649297688 ms 


        ans+=1 # Hits:26484.0, Total execution time: 2522.275 ms, Average time per hit: 0.09523769068116598 ms 


print(ans) # Hits:1.0, Total execution time: 19.375 ms, Average time per hit: 19.375 ms 
",p03212,True
"import sys

input = sys.stdin.readline





c = 0

num = 0

def check(n):

	strn = str(n)

	l = [0, 0, 0]

	for c in strn:

		if c == '3':

			l[0] = 1

		elif c == '5':

			l[1] = 1

		elif c == '7':

			l[2] = 1

	return all(l) or False



def gen(n):

	global c

	# print(n)

	if n > num:

		return

	if check(n):

		# print(n)

		c += 1

	for i in [3, 5, 7]:

		k = 10 * n + i

		gen(k)



def main():

	global num

	num = int(input().strip())

	gen(0)

	print(c)



if __name__ == '__main__':

	main()
",,p03212,False
"UP = int(1e9) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


s = set() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


full = set('357') # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 






def dfs(n): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if n > UP:

        return

    if set(str(n)) == full:

        s.add(n)

    dfs(n * 10 + 3)

    dfs(n * 10 + 5)

    dfs(n * 10 + 7)





dfs(0) # Hits:1.0, Total execution time: 29989.417 ms, Average time per hit: 29989.417 ms 


l = list(s) # Hits:1.0, Total execution time: 120.584 ms, Average time per hit: 120.584 ms 


l.sort() # Hits:1.0, Total execution time: 742.542 ms, Average time per hit: 742.542 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 45.875 ms, Average time per hit: 45.875 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in l: # Hits:26485.0, Total execution time: 1963.679 ms, Average time per hit: 0.07414306211062867 ms 


    if i <= n: # Hits:26484.0, Total execution time: 2071.12 ms, Average time per hit: 0.07820268841564719 ms 


        ans += 1 # Hits:26484.0, Total execution time: 2294.108 ms, Average time per hit: 0.08662241353269899 ms 


    else:

        break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


print(ans) # Hits:1.0, Total execution time: 6.25 ms, Average time per hit: 6.25 ms 

","UP = int(1e9) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


s = set() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 






def dfs(n, f3, f5, f7): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if n > UP:

        return

    if f3 and f5 and f7:

        s.add(n)

    dfs(n * 10 + 3, True, f5, f7)

    dfs(n * 10 + 5, f3, True, f7)

    dfs(n * 10 + 7, f3, f5, True)





dfs(0, False, False, False) # Hits:1.0, Total execution time: 26736.875 ms, Average time per hit: 26736.875 ms 


l = list(s) # Hits:1.0, Total execution time: 126.792 ms, Average time per hit: 126.792 ms 


l.sort() # Hits:1.0, Total execution time: 743.667 ms, Average time per hit: 743.667 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 49.25 ms, Average time per hit: 49.25 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in l: # Hits:26485.0, Total execution time: 1879.876 ms, Average time per hit: 0.0709788937134227 ms 


    if i <= n: # Hits:26484.0, Total execution time: 2126.128 ms, Average time per hit: 0.0802797160549766 ms 


        ans += 1 # Hits:26484.0, Total execution time: 2313.931 ms, Average time per hit: 0.08737090318682977 ms 


    else:

        break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


print(ans) # Hits:1.0, Total execution time: 10.25 ms, Average time per hit: 10.25 ms 

",p03212,True
"

import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


sys.setrecursionlimit(1000000) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


##############################



N = int(eval(input())) # Hits:1.0, Total execution time: 40.666 ms, Average time per hit: 40.666 ms 




def dfs(next_value, value, count_flag, count): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    value += next_value

    int_value = int(value)



#    print(int_value)



    if int_value > N:

        return count



    if int_value >= 357:

        if count_flag == False:

            if len(set(list(value))) == 3:

                count_flag = True



        if count_flag:

            count += 1



    count = dfs('3', value, count_flag, count)

    count = dfs('5', value, count_flag, count)

    count = dfs('7', value, count_flag, count)



    return count





count = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


value = '' # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




count = dfs('3', '', False, count) # Hits:1.0, Total execution time: 12995.709 ms, Average time per hit: 12995.709 ms 


count = dfs('5', '', False, count) # Hits:1.0, Total execution time: 13357.25 ms, Average time per hit: 13357.25 ms 


count = dfs('7', '', False, count) # Hits:1.0, Total execution time: 13324.583 ms, Average time per hit: 13324.583 ms 




print(count) # Hits:1.0, Total execution time: 9.75 ms, Average time per hit: 9.75 ms 
","



import sys # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


sys.setrecursionlimit(2147483647) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


INF=float(""inf"") # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


MOD=10**9+7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


# A = [ int(input()) for _ in range(N) ]

##############################



N = int(eval(input())) # Hits:1.0, Total execution time: 40.875 ms, Average time per hit: 40.875 ms 




def dfs(X, bit, count): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if bit == 7:

        if X <= N:

            count += 1



    if X >= N:

        return count





    count = dfs(X*10+7, bit|4, count)

    count = dfs(X*10+5, bit|2, count)

    count = dfs(X*10+3, bit|1, count)



    return count





count = dfs(0, 0, 0) # Hits:1.0, Total execution time: 32547.083 ms, Average time per hit: 32547.083 ms 


print(count) # Hits:1.0, Total execution time: 6.375 ms, Average time per hit: 6.375 ms 

",p03212,True
"from itertools import product # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 28.083 ms, Average time per hit: 28.083 ms 




S = str(N) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


n = len(S) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(3, n + 1): # Hits:8.0, Total execution time: 10.001 ms, Average time per hit: 1.250125 ms 


    for p in product(['3', '5', '7'], repeat=i): # Hits:29518.0, Total execution time: 2957.703 ms, Average time per hit: 0.1001999796734196 ms 


        x = int(''.join(p)) # Hits:29511.0, Total execution time: 5761.763 ms, Average time per hit: 0.19524119819728236 ms 


        if x <= N and len(set(p) & {'3', '5', '7'}) == 3: # Hits:29511.0, Total execution time: 9579.852 ms, Average time per hit: 0.32461970112839283 ms 


            ans += 1 # Hits:26484.0, Total execution time: 2515.487 ms, Average time per hit: 0.09498138498716206 ms 


print(ans) # Hits:1.0, Total execution time: 9.125 ms, Average time per hit: 9.125 ms 

","from itertools import product # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 42.75 ms, Average time per hit: 42.75 ms 




S = [int(x) for x in str(N)] # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


n = len(S) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




# dp[pos][smaller?][started?][3?][5?][7?]

dp = [[[[[[0] * 2 for _ in range(2)] for _ in range(2)] # Hits:2.0, Total execution time: 70.583 ms, Average time per hit: 35.2915 ms 


        for _ in range(2)] for _ in range(2)] for _ in range(n + 1)] # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


dp[0][0][0][0][0][0] = 1 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




for i, j, k, c3, c5, c7 in product(list(range(n)), [0, 1], [0, 1], [0, 1], [0, 1], # Hits:290.0, Total execution time: 37.958 ms, Average time per hit: 0.1308896551724138 ms 


                                   [0, 1]): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    num = [0, 3, 5, 7] # Hits:288.0, Total execution time: 26.797 ms, Average time per hit: 0.09304513888888889 ms 


    if not j: # Hits:288.0, Total execution time: 21.494 ms, Average time per hit: 0.07463194444444445 ms 


        num = [x for x in num if x <= S[i]] # Hits:144.0, Total execution time: 90.96 ms, Average time per hit: 0.6316666666666666 ms 


    if k: # Hits:288.0, Total execution time: 20.2 ms, Average time per hit: 0.07013888888888889 ms 


        num = [x for x in num if x != 0] # Hits:144.0, Total execution time: 78.118 ms, Average time per hit: 0.5424861111111111 ms 


    for x in num: # Hits:1296.0, Total execution time: 100.346 ms, Average time per hit: 0.07742746913580247 ms 


        f0 = k or x != 0 # Hits:1008.0, Total execution time: 82.983 ms, Average time per hit: 0.08232440476190477 ms 


        f3 = c3 or x == 3 # Hits:1008.0, Total execution time: 84.489 ms, Average time per hit: 0.08381845238095238 ms 


        f5 = c5 or x == 5 # Hits:1008.0, Total execution time: 82.193 ms, Average time per hit: 0.08154067460317461 ms 


        f7 = c7 or x == 7 # Hits:1008.0, Total execution time: 82.179 ms, Average time per hit: 0.0815267857142857 ms 


        dp[i + 1][j or x < S[i]][f0][f3][f5][f7] += dp[i][j][k][c3][c5][c7] # Hits:1008.0, Total execution time: 351.14 ms, Average time per hit: 0.34835317460317455 ms 




ans = sum([dp[n][j][1][1][1][1] for j in [0, 1]]) # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


print(ans) # Hits:1.0, Total execution time: 8.542 ms, Average time per hit: 8.542 ms 

",p03212,True
"# 再帰で3,5,7を振り分けるのめんどくさそうだなと思ったら、

# 振り分けずに0個以上あればあればいいセットを作ってそこから省く、という手段を使うのか...



n = int(eval(input())) # Hits:1.0, Total execution time: 37.167 ms, Average time per hit: 37.167 ms 


sitigosan = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 






def f(i): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if i <= 10 ** 9:

        sitigosan.append(i)

        f(i * 10 + 3)

        f(i * 10 + 5)

        f(i * 10 + 7)





f(3) # Hits:1.0, Total execution time: 6295.916 ms, Average time per hit: 6295.916 ms 


f(5) # Hits:1.0, Total execution time: 6601.833 ms, Average time per hit: 6601.833 ms 


f(7) # Hits:1.0, Total execution time: 6604.208 ms, Average time per hit: 6604.208 ms 


# これだと3から埋めていってダメだと5、7に変えていってるので昇順に並んでない



sitigosan = sorted(sitigosan) # Hits:1.0, Total execution time: 384.75 ms, Average time per hit: 384.75 ms 


count = 0 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for sgs in sitigosan: # Hits:29524.0, Total execution time: 2328.489 ms, Average time per hit: 0.07886766698279367 ms 


    if sgs > n: # Hits:29523.0, Total execution time: 2424.296 ms, Average time per hit: 0.08211550316702232 ms 


        break # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    str_sgs = str(sgs) # Hits:29523.0, Total execution time: 3845.989 ms, Average time per hit: 0.13027094130000338 ms 


    if ""3"" in str_sgs and ""5"" in str_sgs and ""7"" in str_sgs: # Hits:29523.0, Total execution time: 3708.021 ms, Average time per hit: 0.12559770348541816 ms 


        count += 1 # Hits:26484.0, Total execution time: 2557.647 ms, Average time per hit: 0.09657328953330313 ms 


print(count) # Hits:1.0, Total execution time: 8.5 ms, Average time per hit: 8.5 ms 

","# bitDPやりたくなるけどあきらかにオーバーキル

# ふつうにDFSする

n = int(eval(input())) # Hits:1.0, Total execution time: 42.042 ms, Average time per hit: 42.042 ms 






def dfs(cur): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    ret = 0

    for m in [""3"", ""5"", ""7""]:

        nex = cur

        nex += m

        if int(nex) <= n:

            if ""7"" in nex and ""5"" in nex and ""3"" in nex:

                ret += 1

            ret += dfs(nex)

    return ret





print((dfs(""""))) # Hits:1.0, Total execution time: 32340.375 ms, Average time per hit: 32340.375 ms 

",p03212,True
"import itertools # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 41.458 ms, Average time per hit: 41.458 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(3, len(str(N)) + 1): # Hits:8.0, Total execution time: 1.706 ms, Average time per hit: 0.21325 ms 


  for ptn in itertools.product((3, 5, 7), repeat=i): # Hits:29518.0, Total execution time: 2981.4 ms, Average time per hit: 0.10100277796598685 ms 


    if (3 not in ptn) or (5 not in ptn) or (7 not in ptn): # Hits:29511.0, Total execution time: 4149.146 ms, Average time per hit: 0.14059659110162312 ms 


        continue # Hits:3027.0, Total execution time: 197.386 ms, Average time per hit: 0.06520845721836803 ms 


    a = int("""".join(list(map(str, ptn)))) # Hits:26484.0, Total execution time: 16001.558 ms, Average time per hit: 0.6041971756532246 ms 


    if a <= N: # Hits:26484.0, Total execution time: 2450.088 ms, Average time per hit: 0.09251200724966017 ms 


      ans +=1 # Hits:26484.0, Total execution time: 2424.401 ms, Average time per hit: 0.09154210089110405 ms 




print(ans) # Hits:1.0, Total execution time: 8.792 ms, Average time per hit: 8.792 ms 
","import itertools # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 39.167 ms, Average time per hit: 39.167 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, 10): # Hits:10.0, Total execution time: 1.25 ms, Average time per hit: 0.125 ms 


  for x in itertools.product(""753"", repeat=i): # Hits:29532.0, Total execution time: 3033.733 ms, Average time per hit: 0.10272697412975755 ms 


    s= ''.join(x) # Hits:29523.0, Total execution time: 3806.929 ms, Average time per hit: 0.12894790502320225 ms 


    if int(s) > N: continue # Hits:29523.0, Total execution time: 3977.644 ms, Average time per hit: 0.13473034583206314 ms 


    if '3' not in s: continue # Hits:29523.0, Total execution time: 2468.962 ms, Average time per hit: 0.0836284252955323 ms 


    if '5' not in s: continue # Hits:28501.0, Total execution time: 2411.18 ms, Average time per hit: 0.08459983860215431 ms 


    if '7' not in s: continue # Hits:27488.0, Total execution time: 2265.941 ms, Average time per hit: 0.082433825669383 ms 


    ans += 1 # Hits:26484.0, Total execution time: 2294.334 ms, Average time per hit: 0.08663094698686 ms 


print(ans) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 
",p03212,True
"from itertools import product # Hits:1.0, Total execution time: 3.25 ms, Average time per hit: 3.25 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 87.083 ms, Average time per hit: 87.083 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for k in range(3,11): # Hits:9.0, Total execution time: 2.749 ms, Average time per hit: 0.30544444444444446 ms 


    for i in product([0,3,5,7],repeat=k): # Hits:1398088.0, Total execution time: 143520.709 ms, Average time per hit: 0.10265498952855615 ms 


        if set(i) != {3,5,7}: # Hits:1398080.0, Total execution time: 322682.474 ms, Average time per hit: 0.23080401264591438 ms 


            continue # Hits:1315616.0, Total execution time: 88379.796 ms, Average time per hit: 0.06717750164181646 ms 


        if sum([10**j*v for j,v  in enumerate(i)]) <= N: # Hits:82464.0, Total execution time: 135370.182 ms, Average time per hit: 1.6415670110593714 ms 


            ans += 1 # Hits:26484.0, Total execution time: 2723.886 ms, Average time per hit: 0.10285024920706841 ms 


print(ans) # Hits:1.0, Total execution time: 36.292 ms, Average time per hit: 36.292 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 40.083 ms, Average time per hit: 40.083 ms 






def dfs(s): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if int(s) > N:

        return 0

    ret = 1 if len(set(s)) == 4 else 0

    for i in ('3', '5', '7'):

        ret += dfs(s+i)

    return ret





print((dfs('0'))) # Hits:1.0, Total execution time: 39311.083 ms, Average time per hit: 39311.083 ms 

",p03212,True
"import itertools # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 44.333 ms, Average time per hit: 44.333 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(3, 10): # Hits:8.0, Total execution time: 1.002 ms, Average time per hit: 0.12525 ms 


    product = list(itertools.product(['3', '5', '7'], repeat=i)) # Hits:7.0, Total execution time: 1137.333 ms, Average time per hit: 162.47614285714286 ms 


    for li in product: # Hits:29518.0, Total execution time: 2352.91 ms, Average time per hit: 0.07971102378209906 ms 


        if len(set(li)) == 3: # Hits:29511.0, Total execution time: 6542.188 ms, Average time per hit: 0.22168642201213107 ms 


            if int(''.join(li)) <= N: # Hits:26484.0, Total execution time: 5731.044 ms, Average time per hit: 0.21639646579066607 ms 


                ans += 1 # Hits:26484.0, Total execution time: 2500.753 ms, Average time per hit: 0.09442504908624075 ms 


print(ans) # Hits:1.0, Total execution time: 6.75 ms, Average time per hit: 6.75 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 44.0 ms, Average time per hit: 44.0 ms 






def dfs(cur, use, cnt): # Hits:1.0, Total execution time: 7.958 ms, Average time per hit: 7.958 ms 


    if cur > N:

        return

    if use == 0b111:

        cnt.append(1)

    dfs(cur*10 + 7, use | 0b001, cnt)

    dfs(cur*10 + 5, use | 0b010, cnt)

    dfs(cur*10 + 3, use | 0b100, cnt)





res = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


dfs(0, 0, res) # Hits:1.0, Total execution time: 25397.583 ms, Average time per hit: 25397.583 ms 


print((sum(res))) # Hits:1.0, Total execution time: 70.375 ms, Average time per hit: 70.375 ms 

",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 42.958 ms, Average time per hit: 42.958 ms 






def dfs(acc, sevens, fives, threes): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if int(acc) > N:

        return 0

    is_hichigosan_num = False

    if sevens >= 1 and fives >= 1 and threes >= 1:

        is_hichigosan_num = True



    return sum([

        1 if is_hichigosan_num else 0,

        dfs(acc + '7', sevens+1, fives, threes),

        dfs(acc + '5', sevens, fives+1, threes),

        dfs(acc + '3', sevens, fives, threes+1)

    ])





print((dfs('0', 0, 0, 0))) # Hits:1.0, Total execution time: 35852.458 ms, Average time per hit: 35852.458 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 36.958 ms, Average time per hit: 36.958 ms 






def dfs(acc): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if int(acc) > N:

        return 0

    is_hichigosan_num = False

    if '7' in acc and '5' in acc and '3' in acc:

        is_hichigosan_num = True



    return sum([

        1 if is_hichigosan_num else 0,

        dfs(acc + '7'),

        dfs(acc + '5'),

        dfs(acc + '3')

    ])





print((dfs('0'))) # Hits:1.0, Total execution time: 33143.583 ms, Average time per hit: 33143.583 ms 

",p03212,True
"import random as rng # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


import itertools as it # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


import collections as col # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


import heapq as hq # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


import sys # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


import copy as cp # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


sys.setrecursionlimit(10**9) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 






def dump_impl(*objects): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print(*objects, file=sys.stderr)





def dump_dummy(*objects): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    pass





dump = dump_impl if ""DEBUG"" in sys.argv else dump_dummy # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




N = int(input()) # Hits:1.0, Total execution time: 40.084 ms, Average time per hit: 40.084 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for m in range(10): # Hits:11.0, Total execution time: 1.456 ms, Average time per hit: 0.13236363636363638 ms 


    for s in it.product(""753"", repeat=m): # Hits:29534.0, Total execution time: 2869.436 ms, Average time per hit: 0.09715703934448432 ms 


        dump(s) # Hits:29524.0, Total execution time: 5796.935 ms, Average time per hit: 0.19634653163527976 ms 


        if '3' in s and '5' in s and '7' in s and int("""".join(s)) <= N: # Hits:29524.0, Total execution time: 8345.112 ms, Average time per hit: 0.28265519577293047 ms 


            ans += 1 # Hits:26484.0, Total execution time: 2435.641 ms, Average time per hit: 0.0919665080803504 ms 


print(ans) # Hits:1.0, Total execution time: 7.334 ms, Average time per hit: 7.334 ms 

","import random as rng # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


import itertools as it # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


import collections as col # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


import heapq as hq # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 


import sys # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


import copy as cp # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


sys.setrecursionlimit(10**9) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 






def dump_impl(*objects): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    print(*objects, file=sys.stderr)





def dump_dummy(*objects): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    pass





dump = dump_impl if ""DEBUG"" in sys.argv else dump_dummy # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




N = int(input()) # Hits:1.0, Total execution time: 59.0 ms, Average time per hit: 59.0 ms 




ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for n in range(3, 10): # Hits:8.0, Total execution time: 3.54 ms, Average time per hit: 0.4425 ms 


    for l in it.product([""7"", ""5"", ""3""], repeat=n): # Hits:29518.0, Total execution time: 3097.872 ms, Average time per hit: 0.1049485737516092 ms 


        if ""7"" not in l or ""5"" not in l or ""3"" not in l: # Hits:29511.0, Total execution time: 4827.871 ms, Average time per hit: 0.16359564230287013 ms 


            continue # Hits:3027.0, Total execution time: 229.32 ms, Average time per hit: 0.07575817641228941 ms 


        M = int("""".join(l)) # Hits:26484.0, Total execution time: 5541.423 ms, Average time per hit: 0.20923663343905755 ms 


        if M <= N: # Hits:26484.0, Total execution time: 2498.972 ms, Average time per hit: 0.09435780093641444 ms 


            dump(M, ans) # Hits:26484.0, Total execution time: 5919.878 ms, Average time per hit: 0.22352658208729798 ms 


            ans += 1 # Hits:26484.0, Total execution time: 2561.149 ms, Average time per hit: 0.09670552031415194 ms 


dump(N) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


print(ans) # Hits:1.0, Total execution time: 32.875 ms, Average time per hit: 32.875 ms 

",p03212,True
"def nextn(n): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if n == 0:

        return 3

    elif n % 10 == 3:

        return n+2

    elif n % 10== 5:

        return n+2

    elif n % 10 ==7:

        return nextn(n//10)*10 + 3



N = int(eval(input())) # Hits:1.0, Total execution time: 45.334 ms, Average time per hit: 45.334 ms 


n = 357 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


while n <= N: # Hits:29507.0, Total execution time: 3507.312 ms, Average time per hit: 0.11886372725116073 ms 


    s = str(n) # Hits:29506.0, Total execution time: 5382.009 ms, Average time per hit: 0.18240388395580562 ms 


    a = [False,False,False] # Hits:29506.0, Total execution time: 3523.551 ms, Average time per hit: 0.11941811834881041 ms 


    for c in s: # Hits:280429.0, Total execution time: 28119.091 ms, Average time per hit: 0.10027169443959077 ms 


        if c == '3': # Hits:250923.0, Total execution time: 25063.05 ms, Average time per hit: 0.0998834303750553 ms 


            a[0] = True # Hits:83636.0, Total execution time: 9206.885 ms, Average time per hit: 0.11008279927304032 ms 


        elif c == '5': # Hits:167287.0, Total execution time: 16903.29 ms, Average time per hit: 0.10104365551417624 ms 


            a[1] = True # Hits:83642.0, Total execution time: 9242.944 ms, Average time per hit: 0.110506013725162 ms 


        elif c == '7': # Hits:83645.0, Total execution time: 8051.781 ms, Average time per hit: 0.09626135453404268 ms 


            a[2] = True # Hits:83645.0, Total execution time: 10053.372 ms, Average time per hit: 0.12019094984757007 ms 


        else:

            print(s)

    if all(a): # Hits:29506.0, Total execution time: 4731.901 ms, Average time per hit: 0.16037080593777536 ms 


        ans += 1 # Hits:26484.0, Total execution time: 3023.907 ms, Average time per hit: 0.1141786361576801 ms 


    n = nextn(n)  # Hits:29506.0, Total execution time: 19971.01 ms, Average time per hit: 0.6768457262929574 ms 


print(ans) # Hits:1.0, Total execution time: 41.542 ms, Average time per hit: 41.542 ms 

","def nexti(i): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if i == 0:

        return 3

    elif i % 10 == 3:

        return i + 2

    elif i % 10== 5:

        return i + 2

    elif i % 10 ==7:

        return nexti(i//10)*10 + 3



n = int(eval(input())) # Hits:1.0, Total execution time: 55.75 ms, Average time per hit: 55.75 ms 


nn = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


i = 357 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




while i <= n: # Hits:29507.0, Total execution time: 2915.867 ms, Average time per hit: 0.09881950045751856 ms 


  s = str(i) # Hits:29506.0, Total execution time: 4261.032 ms, Average time per hit: 0.14441239070019657 ms 


  if '3' in s: # Hits:29506.0, Total execution time: 2780.319 ms, Average time per hit: 0.09422893648749407 ms 


    if '5' in s: # Hits:28490.0, Total execution time: 2503.52 ms, Average time per hit: 0.08787363987363987 ms 


      if '7' in s: # Hits:27483.0, Total execution time: 2621.202 ms, Average time per hit: 0.09537539569915948 ms 


        #print(i)

        nn += 1 # Hits:26484.0, Total execution time: 2433.601 ms, Average time per hit: 0.091889480441021 ms 


  if i % 10 == 7: # Hits:29506.0, Total execution time: 3550.166 ms, Average time per hit: 0.12032013827696061 ms 


    i = nexti(i) # Hits:9836.0, Total execution time: 9616.89 ms, Average time per hit: 0.9777236681577878 ms 


  else:

    i +=2 # Hits:19670.0, Total execution time: 1846.947 ms, Average time per hit: 0.09389664463650228 ms 


print(nn) # Hits:1.0, Total execution time: 37.333 ms, Average time per hit: 37.333 ms 
",p03212,True
"def nexti(i): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    if i == 0:

        return 3

    elif i % 10 == 3:

        return i + 2

    elif i % 10== 5:

        return i + 2

    elif i % 10 ==7:

        return nexti(i//10)*10 + 3



n = int(eval(input())) # Hits:1.0, Total execution time: 48.75 ms, Average time per hit: 48.75 ms 


nn = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


i = 357 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




while i <= n: # Hits:29507.0, Total execution time: 2772.655 ms, Average time per hit: 0.09396600806588268 ms 


  s = str(i) # Hits:29506.0, Total execution time: 4016.954 ms, Average time per hit: 0.13614024266250932 ms 


  if '3' in s: # Hits:29506.0, Total execution time: 2629.12 ms, Average time per hit: 0.08910458889717346 ms 


    if '5' in s: # Hits:28490.0, Total execution time: 2425.173 ms, Average time per hit: 0.08512365742365742 ms 


      if '7' in s: # Hits:27483.0, Total execution time: 2455.586 ms, Average time per hit: 0.08934927045810137 ms 


        #print(i)

        nn += 1 # Hits:26484.0, Total execution time: 2323.044 ms, Average time per hit: 0.0877149977344812 ms 


  if i % 10 == 7: # Hits:29506.0, Total execution time: 3459.295 ms, Average time per hit: 0.11724039178472175 ms 


    i = nexti(i) # Hits:9836.0, Total execution time: 9288.149 ms, Average time per hit: 0.9443014436762912 ms 


  else:

    i +=2 # Hits:19670.0, Total execution time: 1727.952 ms, Average time per hit: 0.08784707676664973 ms 


print(nn) # Hits:1.0, Total execution time: 31.958 ms, Average time per hit: 31.958 ms 
","from itertools import product # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 52.75 ms, Average time per hit: 52.75 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(3, len(str(N))+1): # Hits:8.0, Total execution time: 2.126 ms, Average time per hit: 0.26575 ms 


  for p in product([""7"", ""5"", ""3""], repeat = i): # Hits:29518.0, Total execution time: 2505.058 ms, Average time per hit: 0.08486543803780744 ms 


    if ""7"" in p and ""5"" in p and ""3"" in p: # Hits:29511.0, Total execution time: 4363.148 ms, Average time per hit: 0.1478481921995188 ms 


      p = int("""".join(p)) # Hits:26484.0, Total execution time: 5143.274 ms, Average time per hit: 0.1942030660021145 ms 


      if p <= N: # Hits:26484.0, Total execution time: 2242.172 ms, Average time per hit: 0.08466138045612445 ms 


        cnt += 1 # Hits:26484.0, Total execution time: 2434.492 ms, Average time per hit: 0.09192312339525752 ms 


print(cnt) # Hits:1.0, Total execution time: 12.25 ms, Average time per hit: 12.25 ms 

",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 48.916 ms, Average time per hit: 48.916 ms 


def dfs(s): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if int(s) > N:

        return 0

    ret = 1 if all(s.count(c) > 0 for c in ""753"") else 0

    for c in ""753"":

        ret += dfs(s + c)

    return ret

print((dfs(""0""))) # Hits:1.0, Total execution time: 60572.75 ms, Average time per hit: 60572.75 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 157.416 ms, Average time per hit: 157.416 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def dfs(x, a, b, c): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    global ans

    if x > N:

        return

    if (a & b & c):

        ans += 1

    dfs(10 * x + 3, 1, b, c)

    dfs(10 * x + 5, a, 1, c)

    dfs(10 * x + 7, a, b, 1)



dfs(0, 0, 0, 0) # Hits:1.0, Total execution time: 31.334 ms, Average time per hit: 31.334 ms 


print(ans)",p03212,True
"def function(n): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    digit=len(str(n))

    N=str(n)

    if digit<3:

        return 0

    else:

        k=int(N[0])

        m=int(N[1])

        if k<3:

            return function(10**(digit-1)-1)

        elif k==3 and m>0:

            return function(10**(digit-1)-1)+function(n%(10**(digit-1)))-function(10**(digit-2))+subfunction(5,7,n%(10**(digit-1)))

        elif k==3 and m==0:

            return function(10**(digit-1)-1)

        elif k==4:

            return function(4*(10**(digit-1))-1)

        elif k==5 and m>0:

            return function(4*(10**(digit-1))-1)+function(n%(10**(digit-1)))-function(10**(digit-2))+subfunction(3,7,n%(10**(digit-1)))

        elif k==5 and m==0:

            return function(4*(10**(digit-1))-1)

        elif k==6:

            return function(6*(10**(digit-1))-1)

        elif k==7 and m>0:

            return function(6*(10**(digit-1))-1)+function(n%(10**(digit-1)))-function(10**(digit-2))+subfunction(3,5,n%(10**(digit-1)))

        elif k==7 and m==0:

            return function(6*(10**(digit-1))-1)

        else:

            return function(8*(10**(digit-1))-1)



def subfunction(a,b,n): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    digit=len(str(n))

    N=str(n)

    k=int(N[0])

    if digit<2:

        return 0

    else:

        if k<a:

            return 0

        elif k==a:

            if n%(10**(digit-1))<b*(10**(digit-1)-1)//9:

                s=0

            else:

                s=1

            return subfunction(a,b,n%(10**(digit-1)))+s

        elif a<k<b:

            return subfunction(a,b,(a+1)*(10**(digit-1))-1)

        elif k==b:

            if n%(10**(digit-1))<a*(10**(digit-1)-1)//9:

                s=0

            else:

                s=1

            return subfunction(a,b,(a+1)*(10**(digit-1))-1)+subfunction(a,b,n%(10**(digit-1)))+s

        else:

            return subfunction(a,b,(b+1)*(10**(digit-1))-1)



N=int(eval(input())) # Hits:1.0, Total execution time: 58.75 ms, Average time per hit: 58.75 ms 


print((function(N))) # Hits:1.0, Total execution time: 343584.083 ms, Average time per hit: 343584.083 ms 
","import heapq # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




N=int(eval(input())) # Hits:1.0, Total execution time: 51.959 ms, Average time per hit: 51.959 ms 


count=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


que=[3,5,7] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


heapq.heapify(que) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


ans=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while True: # Hits:29524.0, Total execution time: 2270.931 ms, Average time per hit: 0.0769181343991329 ms 


    x=heapq.heappop(que) # Hits:29524.0, Total execution time: 9181.74 ms, Average time per hit: 0.3109924129521745 ms 


    if N>=x: # Hits:29524.0, Total execution time: 2676.461 ms, Average time per hit: 0.090653739330714 ms 


        count+=1 # Hits:29523.0, Total execution time: 2936.48 ms, Average time per hit: 0.099464146597568 ms 


        ans.append(x) # Hits:29523.0, Total execution time: 4152.333 ms, Average time per hit: 0.14064739355756528 ms 


    else:

        break # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


    heapq.heappush(que,10*x+3) # Hits:29523.0, Total execution time: 5166.839 ms, Average time per hit: 0.17501063577549705 ms 


    heapq.heappush(que,10*x+5) # Hits:29523.0, Total execution time: 5824.838 ms, Average time per hit: 0.19729830979236526 ms 


    heapq.heappush(que,10*x+7) # Hits:29523.0, Total execution time: 5335.749 ms, Average time per hit: 0.18073193781119803 ms 




count=0 # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


check=[""3"",""5"",""7""] # Hits:1.0, Total execution time: 1.166 ms, Average time per hit: 1.166 ms 


for i in ans: # Hits:29524.0, Total execution time: 3502.891 ms, Average time per hit: 0.11864554260940252 ms 


    for j in check: # Hits:111996.0, Total execution time: 13230.025 ms, Average time per hit: 0.11812944212293296 ms 


        if str(i).count(j)==0: # Hits:85512.0, Total execution time: 29516.127 ms, Average time per hit: 0.3451694148189728 ms 


            break # Hits:3039.0, Total execution time: 634.476 ms, Average time per hit: 0.20877788746298126 ms 


    else:

        count+=1 # Hits:26484.0, Total execution time: 3860.75 ms, Average time per hit: 0.1457766953632382 ms 




print(count) # Hits:1.0, Total execution time: 88.75 ms, Average time per hit: 88.75 ms 
",p03212,True
"from itertools import product # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 65.958 ms, Average time per hit: 65.958 ms 


res = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for pattern in product([""0"", ""3"", ""5"", ""7""], repeat=9): # Hits:262145.0, Total execution time: 28695.619 ms, Average time per hit: 0.1094646817600946 ms 


    p = int("""".join(pattern)) # Hits:262144.0, Total execution time: 56270.755 ms, Average time per hit: 0.2146558952331543 ms 


    if ""0"" not in str(p): # Hits:262144.0, Total execution time: 43333.035 ms, Average time per hit: 0.16530241012573244 ms 


        for i in [3, 5, 7]: # Hits:111996.0, Total execution time: 9846.88 ms, Average time per hit: 0.08792171148969606 ms 


            if str(i) not in str(p): # Hits:85512.0, Total execution time: 19995.409 ms, Average time per hit: 0.23383161427635887 ms 


                break # Hits:3039.0, Total execution time: 285.512 ms, Average time per hit: 0.09394932543599868 ms 


        else:

            if p <= n: # Hits:26484.0, Total execution time: 2628.578 ms, Average time per hit: 0.09925154810451593 ms 


                res += 1 # Hits:26484.0, Total execution time: 2843.129 ms, Average time per hit: 0.10735270351910588 ms 


            else:

                break # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


print(res) # Hits:1.0, Total execution time: 53.791 ms, Average time per hit: 53.791 ms 
","from itertools import product # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 87.125 ms, Average time per hit: 87.125 ms 




res = 0 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for pattern in product([""0"", ""3"", ""5"", ""7""], repeat=len(str(n))): # Hits:262145.0, Total execution time: 26676.409 ms, Average time per hit: 0.1017620362776326 ms 


    p = int("""".join(pattern)) # Hits:262144.0, Total execution time: 51171.042 ms, Average time per hit: 0.19520203399658204 ms 


    if ""0"" not in str(p): # Hits:262144.0, Total execution time: 40099.161 ms, Average time per hit: 0.15296615982055664 ms 


        if p <= n: # Hits:29523.0, Total execution time: 2620.666 ms, Average time per hit: 0.08876692748026961 ms 


            for i in [""3"", ""5"", ""7""]: # Hits:111996.0, Total execution time: 8867.811 ms, Average time per hit: 0.07917971177542056 ms 


                if i not in str(p): # Hits:85512.0, Total execution time: 13225.848 ms, Average time per hit: 0.1546665731125456 ms 


                    break # Hits:3039.0, Total execution time: 244.772 ms, Average time per hit: 0.08054359986837775 ms 


            else:

                res += 1 # Hits:26484.0, Total execution time: 2474.803 ms, Average time per hit: 0.09344521220359463 ms 


print(res) # Hits:1.0, Total execution time: 35.042 ms, Average time per hit: 35.042 ms 

",p03212,True
"from itertools import product # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 42.292 ms, Average time per hit: 42.292 ms 




res = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for pattern in product([""0"", ""3"", ""5"", ""7""], repeat=len(str(n))): # Hits:262145.0, Total execution time: 26563.198 ms, Average time per hit: 0.10133017223292452 ms 


    p = int("""".join(pattern)) # Hits:262144.0, Total execution time: 51486.859 ms, Average time per hit: 0.1964067802429199 ms 


    if ""0"" not in str(p): # Hits:262144.0, Total execution time: 40119.255 ms, Average time per hit: 0.1530428123474121 ms 


        if p <= n: # Hits:29523.0, Total execution time: 2608.726 ms, Average time per hit: 0.08836249703620906 ms 


            for i in [""3"", ""5"", ""7""]: # Hits:111996.0, Total execution time: 8922.56 ms, Average time per hit: 0.07966855959141399 ms 


                if i not in str(p): # Hits:85512.0, Total execution time: 13205.721 ms, Average time per hit: 0.1544312026382262 ms 


                    break # Hits:3039.0, Total execution time: 237.471 ms, Average time per hit: 0.07814116485686082 ms 


            else:

                res += 1 # Hits:26484.0, Total execution time: 2472.3 ms, Average time per hit: 0.09335070231082918 ms 


print(res) # Hits:1.0, Total execution time: 25.792 ms, Average time per hit: 25.792 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 53.0 ms, Average time per hit: 53.0 ms 






def dfs(s): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    if int(s) > n:

        return 0

    for i in '753':

        if s.count(i) == 0:

            res = 0

            break

    else:

        res = 1

    for i in '753':

        res += dfs(s + i)



    return res





print((dfs('0'))) # Hits:1.0, Total execution time: 71268.792 ms, Average time per hit: 71268.792 ms 

",p03212,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 48.5 ms, Average time per hit: 48.5 ms 






def dfs(s): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if int(s) > n:

        return 0

    for i in '753':

        if s.count(i) == 0:

            res = 0

            break

    else:

        res = 1

    for i in '753':

        res += dfs(s + i)



    return res





print((dfs('0'))) # Hits:1.0, Total execution time: 82531.791 ms, Average time per hit: 82531.791 ms 

",,p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 42.042 ms, Average time per hit: 42.042 ms 




l = len(str(10**9)) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


def dfs(A):#配列Aからできる753数 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    global N

    if len(A)>0 and(int("""".join(map(str, A)))>N):

        return 0

    

    ans = 0

    if(all(A.count(i)==0 for i in [0, 1, 2, 4, 6, 8, 9]) and (A.count(3) >0 and A.count(5) >0 and A.count(7) >0)):

        ans = ans + 1

    

    for i in [3, 5, 7]:

        A.append(i)

        ans = ans + dfs(A)

        A.pop()

    

    return ans

print((dfs([]))) # Hits:1.0, Total execution time: 8.667 ms, Average time per hit: 8.667 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 37.333 ms, Average time per hit: 37.333 ms 


import sys # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


sys.setrecursionlimit(500000) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


def dfs(l): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    global N



    if l!=[] and N<int("""".join(l)):

        return 0

    ans = 0

    if all(l.count(i)>0 for i in [""3"", ""5"", ""7""]):

        ans = 1

    for i in [""3"", ""5"", ""7""]:

        l.append(i)

        #参照渡し

        ans += dfs(l)

        l.pop()



    return ans



print((dfs([]))) # Hits:1.0, Total execution time: 6.0 ms, Average time per hit: 6.0 ms 
",p03212,True
"from itertools import product # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 30.25 ms, Average time per hit: 30.25 ms 


n_len = len(str(n)) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(3,n_len): # Hits:7.0, Total execution time: 0.999 ms, Average time per hit: 0.1427142857142857 ms 


    ite = product(list(range(3)),repeat=i) # Hits:6.0, Total execution time: 4.084 ms, Average time per hit: 0.6806666666666666 ms 


    for it in ite: # Hits:9834.0, Total execution time: 1014.943 ms, Average time per hit: 0.1032075452511694 ms 


        if 0 in it and 1 in it and 2 in it: # Hits:9828.0, Total execution time: 1457.794 ms, Average time per hit: 0.1483306878306878 ms 


            ans += 1 # Hits:8334.0, Total execution time: 819.015 ms, Average time per hit: 0.0982739380849532 ms 






num_d = {0:7,1:5,2:3} # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


ite = product(list(range(3)),repeat=n_len) # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


for it in ite: # Hits:19684.0, Total execution time: 2627.259 ms, Average time per hit: 0.1334718045112782 ms 


    if 0 in it and 1 in it and 2 in it: # Hits:19683.0, Total execution time: 3948.56 ms, Average time per hit: 0.2006076309505665 ms 


        curr_num = 0 # Hits:18150.0, Total execution time: 1901.791 ms, Average time per hit: 0.10478187327823692 ms 


        for i,j in enumerate(it): # Hits:181500.0, Total execution time: 25643.705 ms, Average time per hit: 0.1412876308539945 ms 


            curr_num += num_d[j]*(10**(n_len-1-i)) # Hits:163350.0, Total execution time: 41793.583 ms, Average time per hit: 0.2558529721456994 ms 


        if curr_num <= n:  # Hits:18150.0, Total execution time: 1976.995 ms, Average time per hit: 0.10892534435261707 ms 


            ans+=1 # Hits:18150.0, Total execution time: 2497.199 ms, Average time per hit: 0.1375867217630854 ms 




print(ans) # Hits:1.0, Total execution time: 42.75 ms, Average time per hit: 42.75 ms 
",,p03212,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 99.375 ms, Average time per hit: 99.375 ms 


q = [ 3, 5, 7 ] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




ans = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


while len(q) != 0: # Hits:29524.0, Total execution time: 3903.695 ms, Average time per hit: 0.13222107438016528 ms 


    x = q.pop(0) # Hits:29523.0, Total execution time: 53188.311 ms, Average time per hit: 1.8015889645361245 ms 


    for i in [ 3, 5 , 7]: # Hits:118092.0, Total execution time: 11372.75 ms, Average time per hit: 0.09630415269450937 ms 


        y = 10 * x + i # Hits:88569.0, Total execution time: 10392.016 ms, Average time per hit: 0.11733243008276034 ms 


        if ( y <= n): # Hits:88569.0, Total execution time: 8485.938 ms, Average time per hit: 0.09581160451173662 ms 


            q.append(y) # Hits:29520.0, Total execution time: 4008.564 ms, Average time per hit: 0.13579146341463413 ms 


            if '3' in str(y) and '5' in str(y) and '7' in str(y): # Hits:29520.0, Total execution time: 10525.286 ms, Average time per hit: 0.35654762872628726 ms 


                ans += 1 # Hits:26484.0, Total execution time: 2892.109 ms, Average time per hit: 0.10920212203594623 ms 


print(ans) # Hits:1.0, Total execution time: 26.666 ms, Average time per hit: 26.666 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 46.708 ms, Average time per hit: 46.708 ms 




def dfs(l): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    return sum([

        # next

        dfs(10 * l + i) if (10 * l + i) <= n else 0

        for i in [3, 5, 7]] +

        # current

        [1 if '3' in str(l) and '5' in str(l) and '7' in str(l) else 0]

        )



print((dfs(0))) # Hits:1.0, Total execution time: 41532.75 ms, Average time per hit: 41532.75 ms 
",p03212,True
"from collections import deque # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 49.375 ms, Average time per hit: 49.375 ms 


l=[""3"",""5"",""7""] # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


q=deque([""3"",""5"",""7""]) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


l1=[""3"",""5"",""7""] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


count=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while q: # Hits:29524.0, Total execution time: 2351.983 ms, Average time per hit: 0.0796634263649912 ms 


  a=q.popleft() # Hits:29523.0, Total execution time: 3754.978 ms, Average time per hit: 0.12718822612878095 ms 


  for i in l: # Hits:118092.0, Total execution time: 10074.599 ms, Average time per hit: 0.0853114436202283 ms 


    if int(i+a)<=n: # Hits:88569.0, Total execution time: 15931.225 ms, Average time per hit: 0.17987360137294087 ms 


      q.append(i+a) # Hits:29520.0, Total execution time: 4635.564 ms, Average time per hit: 0.15703130081300812 ms 


      l1.append(i+a) # Hits:29520.0, Total execution time: 4493.129 ms, Average time per hit: 0.15220626693766937 ms 


for i in l1: # Hits:29524.0, Total execution time: 2402.634 ms, Average time per hit: 0.08137901368378268 ms 


  if (""3"" in i) and (""5"" in i) and (""7"" in i): # Hits:29523.0, Total execution time: 4542.321 ms, Average time per hit: 0.15385702672492632 ms 


    count+=1 # Hits:26484.0, Total execution time: 2700.188 ms, Average time per hit: 0.10195544479685849 ms 


print(count) # Hits:1.0, Total execution time: 34.166 ms, Average time per hit: 34.166 ms 
","num=int(eval(input())) # Hits:1.0, Total execution time: 53.667 ms, Average time per hit: 53.667 ms 


def dfs(n): # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


  if n>num:

    return 0

  else:

    w=str(n)

    if w==""0"":

      w=""""

    if ""3"" in w and ""7"" in w and ""5"" in w:

      ret=1

    else:

      ret=0

    for i in ""357"":   

      ret+=dfs(int(i+w))

    return ret

print((dfs(0))) # Hits:1.0, Total execution time: 43176.0 ms, Average time per hit: 43176.0 ms 
",p03212,True
"def cnct(lint,lim): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    global list753

    global list357

    global list333

    lint1=str(lint)+""3""

    lint1int=int(lint1)

    if lint1int<=lim and not lint1int in list357:

        list357.add(lint1int)

        cnct(lint1int,lim)

    lint2=str(lint)+""5""

    lint2int=int(lint2)

    if lint2int<=lim and not lint2int in list357:

        list357.add(lint2int)

        cnct(lint2int,lim)

    lint3=str(lint)+""7""

    lint3int=int(lint3)

    if lint3int<=lim and not lint3int in list357:

        list357.add(lint3int)

        cnct(lint3int,lim) 

    lint4=""3""+str(lint)

    lint4int=int(lint4)

    if lint4int<=lim and not lint4int in list357:

        list357.add(lint4int)

        cnct(lint4int,lim)

    lint5=""5""+str(lint)

    lint5int=int(lint5)

    if lint5int<=lim and not lint5int in list357:

        list357.add(lint5int)

        cnct(lint5int,lim)

    lint6=""7""+str(lint)

    lint6int=int(lint6)

    if lint6int<=lim and not lint6int in list357:

        list357.add(lint6int)

        cnct(lint6int,lim)

def D(lint): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    lista=list(str(lint))

    if lista.count(""3"") and lista.count(""5"") and lista.count(""7""):

        return True

    else:

        return False



list753=[3,5,7] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


list357=set() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


k=int(eval(input())) # Hits:1.0, Total execution time: 49.167 ms, Average time per hit: 49.167 ms 


count=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for b in list753: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    cnct(b,k) # Hits:1.0, Total execution time: 4.417 ms, Average time per hit: 4.417 ms 


list333=list(list357)

list333.sort()

for c in [x for x in list333]:

    if not D(c):

        list333.remove(c)

print((len(list333)))
","def cnct(lint,lim): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    global list753

    global list357

    global list333

    lint1int=lint*10+3

    if lint1int<=lim and not lint1int in list357:

        list357.add(lint1int)

        cnct(lint1int,lim)

    lint2int=lint*10+5

    if lint2int<=lim and not lint2int in list357:

        list357.add(lint2int)

        cnct(lint2int,lim)

    lint3int=lint*10+7

    if lint3int<=lim and not lint3int in list357:

        list357.add(lint3int)

        cnct(lint3int,lim) 



def D(lint): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    lista=list(str(lint))

    if lista.count(""3"") and lista.count(""5"") and lista.count(""7""):

        return True

    else:

        return False



list753=[3,5,7] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


list357=set() # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


k=int(eval(input())) # Hits:1.0, Total execution time: 47.917 ms, Average time per hit: 47.917 ms 


for b in list753: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    cnct(b,k) # Hits:1.0, Total execution time: 2.625 ms, Average time per hit: 2.625 ms 


for c in [x for x in list357]:

    if not D(c):

        list357.remove(c)

print((len(list357)))",p03212,True
"lista=[3,5,7] # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


count=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


lim=int(eval(input())) # Hits:1.0, Total execution time: 46.542 ms, Average time per hit: 46.542 ms 


while True: # Hits:29524.0, Total execution time: 2534.305 ms, Average time per hit: 0.0858388091044574 ms 


    t=lista.pop(0) # Hits:29524.0, Total execution time: 165358.511 ms, Average time per hit: 5.600816657634467 ms 


    if t>lim: # Hits:29524.0, Total execution time: 3397.171 ms, Average time per hit: 0.11506472700176128 ms 


        break # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    c=list(str(t)) # Hits:29523.0, Total execution time: 9306.582 ms, Average time per hit: 0.31523158215628494 ms 


    if c.count(""3"") and c.count(""5"") and c.count(""7""): # Hits:29523.0, Total execution time: 12892.17 ms, Average time per hit: 0.4366822477390509 ms 


        count+=1 # Hits:26484.0, Total execution time: 2817.564 ms, Average time per hit: 0.10638740371545084 ms 


    lista.append(10*t+3) # Hits:29523.0, Total execution time: 5786.928 ms, Average time per hit: 0.19601422619652473 ms 


    lista.append(10*t+5) # Hits:29523.0, Total execution time: 5544.305 ms, Average time per hit: 0.18779612505504184 ms 


    lista.append(10*t+7) # Hits:29523.0, Total execution time: 5477.991 ms, Average time per hit: 0.1855499441113708 ms 


print(count) # Hits:1.0, Total execution time: 37.875 ms, Average time per hit: 37.875 ms 
","from collections import deque # Hits:1.0, Total execution time: 2.334 ms, Average time per hit: 2.334 ms 


lista=deque([3,5,7]) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


count=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


lim=int(eval(input())) # Hits:1.0, Total execution time: 60.875 ms, Average time per hit: 60.875 ms 


while True: # Hits:29524.0, Total execution time: 2183.87 ms, Average time per hit: 0.0739693131012058 ms 


    t=lista.popleft() # Hits:29524.0, Total execution time: 3982.879 ms, Average time per hit: 0.1349030957864788 ms 


    if t>lim: # Hits:29524.0, Total execution time: 2712.784 ms, Average time per hit: 0.09188402655466739 ms 


        break # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    c=list(str(t)) # Hits:29523.0, Total execution time: 6761.691 ms, Average time per hit: 0.22903129763235444 ms 


    if c.count(""3"") and c.count(""5"") and c.count(""7""): # Hits:29523.0, Total execution time: 11148.307 ms, Average time per hit: 0.37761430071469704 ms 


        count+=1 # Hits:26484.0, Total execution time: 2519.98 ms, Average time per hit: 0.0951510345869204 ms 


    lista.append(10*t+3) # Hits:29523.0, Total execution time: 4718.994 ms, Average time per hit: 0.15984127629305964 ms 


    lista.append(10*t+5) # Hits:29523.0, Total execution time: 4597.132 ms, Average time per hit: 0.15571357924330184 ms 


    lista.append(10*t+7) # Hits:29523.0, Total execution time: 4614.854 ms, Average time per hit: 0.15631385699285302 ms 


print(count) # Hits:1.0, Total execution time: 30.083 ms, Average time per hit: 30.083 ms 
",p03212,True
"from collections import deque # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 47.291 ms, Average time per hit: 47.291 ms 


stack = deque([""0""]) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while len(stack)>0: # Hits:29525.0, Total execution time: 3491.286 ms, Average time per hit: 0.11824846740050805 ms 


    c = stack.pop() # Hits:29524.0, Total execution time: 3569.755 ms, Average time per hit: 0.12091027638531364 ms 


    for s in ""357"": # Hits:118096.0, Total execution time: 10893.019 ms, Average time per hit: 0.09223867870207289 ms 


        cs = c + s # Hits:88572.0, Total execution time: 9074.51 ms, Average time per hit: 0.10245348417106986 ms 


        # print(cs)

        if int(cs)<=N: # Hits:88572.0, Total execution time: 13923.134 ms, Average time per hit: 0.1571956600279998 ms 


            stack.append(cs) # Hits:29523.0, Total execution time: 3864.816 ms, Average time per hit: 0.13090864749517325 ms 


            if cs.count(""3"")*cs.count(""5"")*cs.count(""7"")>0: # Hits:29523.0, Total execution time: 11513.188 ms, Average time per hit: 0.38997351217694676 ms 


                cnt += 1 # Hits:26484.0, Total execution time: 2553.551 ms, Average time per hit: 0.09641863011629663 ms 


print(cnt) # Hits:1.0, Total execution time: 31.167 ms, Average time per hit: 31.167 ms 
","""""""

dfsでとき直し114

7,5,3がそれぞれ1回以上現れる



3-3-3

   -5

   -7

 -5-3

   -5

   -7

 -7-3

   -5

   -7

とかそういうヤツ



3 33 35 37 5 

""""""



import sys # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


sys.setrecursionlimit(100000) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




cnt = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


num = ""0"" # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


X = int(eval(input())) # Hits:1.0, Total execution time: 45.416 ms, Average time per hit: 45.416 ms 


def dfs(num,is3,is5,is7): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    # print(num,is3 and is5 and is7)

    global cnt

    if is3 and is5 and is7:

        cnt += 1 

    N = ""357""

    for n in N:

        if int(num+n) > X: continue #終了条件

        if n == ""3"":

            dfs(num+n,True,is5,is7)

        elif n == ""5"":

            dfs(num+n,is3,True,is7)

        elif n == ""7"":

            dfs(num+n,is3,is5,True)





dfs(""0"",0,0,0) # Hits:1.0, Total execution time: 15.667 ms, Average time per hit: 15.667 ms 


print(cnt)",p03212,True
"from collections import deque # Hits:1.0, Total execution time: 2.167 ms, Average time per hit: 2.167 ms 


X = int(eval(input())) # Hits:1.0, Total execution time: 54.709 ms, Average time per hit: 54.709 ms 


# その時の数字と、3,5,7が今までに含まれていたか

q = deque([""""]) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


q_is3 = deque([0]) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


q_is5 = deque([0]) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


q_is7 = deque([0]) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


N = ""357"" # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while q: # Hits:29525.0, Total execution time: 2229.065 ms, Average time per hit: 0.07549754445385266 ms 


    num = q.popleft() # Hits:29524.0, Total execution time: 3849.917 ms, Average time per hit: 0.1303995732285598 ms 


    is3 = q_is3.popleft() # Hits:29524.0, Total execution time: 3350.21 ms, Average time per hit: 0.11347412274759518 ms 


    is5 = q_is5.popleft() # Hits:29524.0, Total execution time: 3265.057 ms, Average time per hit: 0.11058992683918169 ms 


    is7 = q_is7.popleft() # Hits:29524.0, Total execution time: 3308.236 ms, Average time per hit: 0.11205243191979405 ms 


    for n in N: # Hits:118096.0, Total execution time: 10302.266 ms, Average time per hit: 0.08723636702343857 ms 


        next_v = num + n # Hits:88572.0, Total execution time: 8814.557 ms, Average time per hit: 0.09951854988032335 ms 


        if int(next_v) > X: continue # Hits:88572.0, Total execution time: 13368.626 ms, Average time per hit: 0.1509351262249921 ms 


        else:

            next_is3 = is3 or n == ""3"" # Hits:29523.0, Total execution time: 2272.84 ms, Average time per hit: 0.0769854012126139 ms 


            next_is5 = is5 or n == ""5"" # Hits:29523.0, Total execution time: 2325.546 ms, Average time per hit: 0.07877065338888324 ms 


            next_is7 = is7 or n == ""7"" # Hits:29523.0, Total execution time: 2344.127 ms, Average time per hit: 0.0794000270975172 ms 


            q.append(next_v) # Hits:29523.0, Total execution time: 3604.873 ms, Average time per hit: 0.12210388510652712 ms 


            q_is3.append(next_is3) # Hits:29523.0, Total execution time: 3451.676 ms, Average time per hit: 0.11691481218033398 ms 


            q_is5.append(next_is5) # Hits:29523.0, Total execution time: 3403.932 ms, Average time per hit: 0.11529763235443552 ms 


            q_is7.append(next_is7) # Hits:29523.0, Total execution time: 3407.595 ms, Average time per hit: 0.11542170511126917 ms 


            if next_is3 and next_is5 and next_is7: # Hits:29523.0, Total execution time: 2705.695 ms, Average time per hit: 0.09164702096670392 ms 


                ans += 1 # Hits:26484.0, Total execution time: 2517.34 ms, Average time per hit: 0.09505135175955294 ms 


print(ans) # Hits:1.0, Total execution time: 29.25 ms, Average time per hit: 29.25 ms 

","""""""

753の数

""""""



import sys # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


sys.setrecursionlimit(100000) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 44.708 ms, Average time per hit: 44.708 ms 


# seen = [False] * N

"""""" # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


1. Gを予め作って探索するパターン

2. Gを作りながら探索するパターン

""""""

cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def dfs(v): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    global cnt

    # vを訪問済みにする

    # seen[v] = True

    num = ""753""

    #グラフ中の次のVについて

    for n in num:

        next_v = v + n

        # 探索打ち切り条件->

        # すでに探索済み or なにかの終了条件に引掛かる

        if int(next_v) > N: continue

        # 見られていない場合、再帰的に探索

        dfs(next_v)

        if ""3"" in next_v and ""5"" in next_v and ""7"" in next_v:

            cnt += 1



dfs("""") # Hits:1.0, Total execution time: 13.084 ms, Average time per hit: 13.084 ms 


print(cnt)	",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 69.209 ms, Average time per hit: 69.209 ms 


ans = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




def dfs(i): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    global ans

    if int(i) > N:

        return

    if all(i.count(c) for c in '753'):

        ans += 1

    dfs(i + '3')

    dfs(i + '5')

    dfs(i + '7')

    

dfs('0') # Hits:1.0, Total execution time: 29.875 ms, Average time per hit: 29.875 ms 




print(ans)","N = int(eval(input())) # Hits:1.0, Total execution time: 56.542 ms, Average time per hit: 56.542 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    global ans

    if int(s) > N:

        return



    if s.count('7') and s.count('5') and s.count('3'):

        ans += 1

    

    dfs(s + '7')

    dfs(s + '5')

    dfs(s + '3')



dfs('0') # Hits:1.0, Total execution time: 23.125 ms, Average time per hit: 23.125 ms 




print(ans)",p03212,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 44.833 ms, Average time per hit: 44.833 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


t = [3, 5, 7] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


while len(t) > 0: # Hits:29524.0, Total execution time: 3839.431 ms, Average time per hit: 0.13004440455222868 ms 


    x = t.pop(0) # Hits:29523.0, Total execution time: 49036.306 ms, Average time per hit: 1.660952680960607 ms 


    if x * 10 + 3 <= n: # Hits:29523.0, Total execution time: 3742.439 ms, Average time per hit: 0.1267635064187244 ms 


        t.append(x * 10 + 3) # Hits:9840.0, Total execution time: 1550.337 ms, Average time per hit: 0.1575545731707317 ms 


        if x * 10 + 5 <= n: # Hits:9840.0, Total execution time: 1174.569 ms, Average time per hit: 0.11936676829268292 ms 


            t.append(x * 10 + 5) # Hits:9840.0, Total execution time: 1433.743 ms, Average time per hit: 0.14570558943089432 ms 


            if x * 10 + 7 <= n: # Hits:9840.0, Total execution time: 1123.168 ms, Average time per hit: 0.11414308943089431 ms 


                t.append(x * 10 + 7) # Hits:9840.0, Total execution time: 1449.614 ms, Average time per hit: 0.14731849593495935 ms 


    if 357 <= x <= n: # Hits:29523.0, Total execution time: 3399.689 ms, Average time per hit: 0.11515391389763913 ms 


        s = str(x) # Hits:29506.0, Total execution time: 4575.682 ms, Average time per hit: 0.15507632345963532 ms 


        if '3' in s and '5' in s and '7' in s: # Hits:29506.0, Total execution time: 3780.672 ms, Average time per hit: 0.12813231207212092 ms 


            ans += 1 # Hits:26484.0, Total execution time: 2639.598 ms, Average time per hit: 0.09966764839148165 ms 


print(ans) # Hits:1.0, Total execution time: 19.667 ms, Average time per hit: 19.667 ms 

","# https://img.atcoder.jp/abc114/editorial.pdf

N = int(eval(input())) # Hits:1.0, Total execution time: 43.125 ms, Average time per hit: 43.125 ms 






def dfs(s):  # 文字列 s で始まる七五三数の個数 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if int(s) > N:

        return 0

    ret = 1 if all(s.count(c) > 0 for c in '753') else 0  # s 自体が七五三数なら +1

    for c in '753':

        ret += dfs(s + c)

    return ret





print((dfs('0'))) # 本当は dfs('') と書きたいが 6 行目でのエラーを防ぐため仕方なく # Hits:1.0, Total execution time: 57391.917 ms, Average time per hit: 57391.917 ms 

",p03212,True
"# 解説放送

def check(var): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    in_range = var <= N

    all_num_in = all(c in str(var) for c in '753')

    return in_range and all_num_in





def dfs(x): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    res = 0

    if check(x):

        res += 1

    if x <= N:

        res += dfs(10 * x + 3)

        res += dfs(10 * x + 5)

        res += dfs(10 * x + 7)

    return res





N = int(eval(input())) # Hits:1.0, Total execution time: 40.667 ms, Average time per hit: 40.667 ms 


print((dfs(0))) # Hits:1.0, Total execution time: 110010.167 ms, Average time per hit: 110010.167 ms 

","# 解説放送

def dfs(x): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    if x > N: return 0

    res = 1 if all(c in str(x) for c in '753') else 0

    for v in 3, 5, 7:

        res += dfs(10 * x + v)

    return res





N = int(eval(input())) # Hits:1.0, Total execution time: 42.75 ms, Average time per hit: 42.75 ms 


print((dfs(0))) # Hits:1.0, Total execution time: 46973.667 ms, Average time per hit: 46973.667 ms 

",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 40.417 ms, Average time per hit: 40.417 ms 






def to753(q): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    q, r = divmod(q, 4)

    r = 0 if r == 0 else 2 * r + 1  # 1->3, 2->5, 3->7

    if q == 0:

        return str(r)

    else:

        return to753(q) + str(r)





ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for qt in range(1, 4 ** 9): # Hits:262144.0, Total execution time: 22386.051 ms, Average time per hit: 0.0853960075378418 ms 


    s = to753(qt) # Hits:262143.0, Total execution time: 1017575.182 ms, Average time per hit: 3.8817560720675357 ms 


    # print(qt, list(s))

    if '0' in s: continue # Hits:262143.0, Total execution time: 24376.645 ms, Average time per hit: 0.09298987575483611 ms 


    if int(s) > N: break # Hits:29523.0, Total execution time: 4295.434 ms, Average time per hit: 0.14549449581682078 ms 


    if all(c in s for c in '753'): ans += 1 # Hits:29523.0, Total execution time: 18465.779 ms, Average time per hit: 0.6254709548487619 ms 


print(ans) # Hits:1.0, Total execution time: 39.209 ms, Average time per hit: 39.209 ms 

","# x以降のグラフの753数

def dfs(x): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    if x > N: return 0

    res = 1 if all(c in str(x) for c in '753') else 0  # x自身が753数かどうか

    for v in 3, 5, 7:

        res += dfs(10 * x + v)

    return res





N = int(eval(input())) # Hits:1.0, Total execution time: 44.375 ms, Average time per hit: 44.375 ms 


print((dfs(0))) # Hits:1.0, Total execution time: 47322.542 ms, Average time per hit: 47322.542 ms 

",p03212,True
"def check(var): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    in_range = var <= N

    all_num_in = all(c in str(var) for c in '753')

    return in_range and all_num_in





def dfs(x): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    res = 0

    if check(x):

        res += 1

    if x <= N:

        for v in 3, 5, 7:

            res += dfs(10 * x + v)

    return res





N = int(eval(input())) # Hits:1.0, Total execution time: 48.583 ms, Average time per hit: 48.583 ms 


print((dfs(0))) # Hits:1.0, Total execution time: 112527.959 ms, Average time per hit: 112527.959 ms 

","def check(var): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    return (0 <= var <= N) and all(c in str(var) for c in '753')





def dfs(x): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    res = 0

    if check(x): res += 1

    if x <= N:

        for v in 3, 5, 7:

            res += dfs(10 * x + v)

    return res





N = int(eval(input())) # Hits:1.0, Total execution time: 39.459 ms, Average time per hit: 39.459 ms 


print((dfs(0))) # Hits:1.0, Total execution time: 69637.334 ms, Average time per hit: 69637.334 ms 

",p03212,True
"def check(var): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    return (0 <= var <= N) and all(c in str(var) for c in '753')





def dfs(x): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    res = 0

    if check(x): res += 1

    if x <= N:

        for v in 3, 5, 7:

            res += dfs(10 * x + v)

    return res





N = int(eval(input())) # Hits:1.0, Total execution time: 38.125 ms, Average time per hit: 38.125 ms 


print((dfs(0))) # Hits:1.0, Total execution time: 69529.625 ms, Average time per hit: 69529.625 ms 

","def dfs(s): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    res = 0

    if int(s) > N: return res

    if all(c in s for c in '753'): res += 1

    for v in '753': res += dfs(s + v)

    return res





N = int(eval(input())) # Hits:1.0, Total execution time: 43.375 ms, Average time per hit: 43.375 ms 


print((dfs('0'))) # Hits:1.0, Total execution time: 48016.417 ms, Average time per hit: 48016.417 ms 

",p03212,True
"def func(var): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    res = 1 if all(c in str(var) for c in '357') else 0

    if var > N:

        return 0

    else:

        for v in 3, 5, 7:

            res += func(var * 10 + v)

    return res





N = int(eval(input())) # Hits:1.0, Total execution time: 34.959 ms, Average time per hit: 34.959 ms 


res = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for v in 3, 5, 7: # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    res += func(v) # Hits:3.0, Total execution time: 93443.835 ms, Average time per hit: 31147.945 ms 


print(res) # Hits:1.0, Total execution time: 10.834 ms, Average time per hit: 10.834 ms 

","def rec(s): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    """"""引数末尾に753を付け加えてできる753数

    753以外の数が現れないように文字を加えているので、

    ・すべて一回以上出たら753数に加算

    ・Nを超えたらreturn 0

    させればよい""""""

    # base case

    if int(s) > n:

        return 0



    res = 0

    if all(c in s for c in '753'):

        res += 1



    # 再帰ステップ

    for c in '753':

        res += rec(s + c)

    return res





n = int(eval(input())) # Hits:1.0, Total execution time: 45.542 ms, Average time per hit: 45.542 ms 


print((rec('0'))) # Hits:1.0, Total execution time: 49839.0 ms, Average time per hit: 49839.0 ms 

",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 37.75 ms, Average time per hit: 37.75 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    if int(s) > N:

        return 0

    if all(s.count(c) > 0 for c in '753'):

        ret = 1

    else:

        ret = 0

    for c in '753':

        ret += dfs(s + c)

    return ret



print((dfs('0'))) # Hits:1.0, Total execution time: 58234.625 ms, Average time per hit: 58234.625 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 47.458 ms, Average time per hit: 47.458 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    if int(s) > N:

        return 0

    if s.count(""7"") > 0 and s.count(""5"") > 0 and s.count(""3"") > 0:

        ret = 1

    else:

        ret = 0

    for c in ""753"":

        ret += dfs(s + c)

    return ret



print((dfs(""0"")))     # Hits:1.0, Total execution time: 42077.333 ms, Average time per hit: 42077.333 ms 
",p03212,True
"def sigm(nk): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    s=3**3*(3**(nk-2)-1)/(3-1)

    s=s-3*2**3*(2**(nk-2)-1)/(2-1)

    s=s+(nk-2)*3

    return int(s)

    

n=int(eval(input())) # Hits:1.0, Total execution time: 39.458 ms, Average time per hit: 39.458 ms 




if n<357: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print((0))

else:

    x0=[357,375,537,573,735,753] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    x1=[3,5,7] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    m=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    nk=len(str(n)) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


    if nk==3: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


        for j in range(6): # Hits:7.0, Total execution time: 1.209 ms, Average time per hit: 0.1727142857142857 ms 


            x=x0[j]  # Hits:6.0, Total execution time: 0.624 ms, Average time per hit: 0.104 ms 


#            print(x)

            if x<=n: # Hits:6.0, Total execution time: 0.626 ms, Average time per hit: 0.10433333333333333 ms 


                m=m+1 # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


    else:

        m=sigm(nk-1) # Hits:1.0, Total execution time: 2.292 ms, Average time per hit: 2.292 ms 


        for i in range(3**nk): # Hits:19684.0, Total execution time: 1664.644 ms, Average time per hit: 0.08456838041048567 ms 


            ii=i # Hits:19683.0, Total execution time: 1350.407 ms, Average time per hit: 0.06860778336635676 ms 


            x=0 # Hits:19683.0, Total execution time: 1427.132 ms, Average time per hit: 0.0725058172026622 ms 


            for j in range(nk): # Hits:196830.0, Total execution time: 16551.552 ms, Average time per hit: 0.08409059594573998 ms 


                iii=ii//3 # Hits:177147.0, Total execution time: 15989.819 ms, Average time per hit: 0.09026299626863564 ms 


                ir=ii-iii*3 # Hits:177147.0, Total execution time: 18872.042 ms, Average time per hit: 0.10653322946479477 ms 


                ii=(ii-ir)//3 # Hits:177147.0, Total execution time: 18845.074 ms, Average time per hit: 0.10638099431545553 ms 


                x=x+int(x1[ir])*10**j # Hits:177147.0, Total execution time: 33966.723 ms, Average time per hit: 0.19174314552320953 ms 


            xstr=str(x) # Hits:19683.0, Total execution time: 2709.818 ms, Average time per hit: 0.13767301732459483 ms 


            if xstr.find(""3"")>=0 and xstr.find(""5"")>=0 and xstr.find(""7"")>=0 and n>=x: # Hits:19683.0, Total execution time: 6667.315 ms, Average time per hit: 0.3387346949143931 ms 


                m=m+1                  # Hits:18150.0, Total execution time: 1837.472 ms, Average time per hit: 0.10123812672176308 ms 


    print(m) # Hits:1.0, Total execution time: 7.458 ms, Average time per hit: 7.458 ms 

","

import itertools # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 




n=int(eval(input())) # Hits:1.0, Total execution time: 38.875 ms, Average time per hit: 38.875 ms 




kn=len(str(n)) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




icnt=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for kkn in range(3,kn+1): # Hits:8.0, Total execution time: 1.166 ms, Average time per hit: 0.14575 ms 


    for i in itertools.product([3,5,7], repeat=kkn): # Hits:29518.0, Total execution time: 3027.421 ms, Average time per hit: 0.10256186055965852 ms 


        if (3 in i) and (5 in i) and (7 in i): # Hits:29511.0, Total execution time: 4214.079 ms, Average time per hit: 0.14279688929551693 ms 


            ni=0 # Hits:26484.0, Total execution time: 1963.223 ms, Average time per hit: 0.07412864370940946 ms 


            for ii in i: # Hits:252996.0, Total execution time: 19076.232 ms, Average time per hit: 0.0754013185979225 ms 


                ni=ni*10+ii # Hits:226512.0, Total execution time: 24819.992 ms, Average time per hit: 0.10957473334746062 ms 


#            print(""1:"",i,ni)

            if ni<=n: # Hits:26484.0, Total execution time: 2216.471 ms, Average time per hit: 0.08369094547651412 ms 


                icnt+=1     # Hits:26484.0, Total execution time: 2646.392 ms, Average time per hit: 0.09992418063736595 ms 


print(icnt) # Hits:1.0, Total execution time: 6.625 ms, Average time per hit: 6.625 ms 

",p03212,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 40.167 ms, Average time per hit: 40.167 ms 


option=[3,5,7] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


completed=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


a=[3,5,7] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while option: # Hits:29524.0, Total execution time: 2153.592 ms, Average time per hit: 0.0729437745562932 ms 


    number=option.pop() # Hits:29523.0, Total execution time: 3496.731 ms, Average time per hit: 0.11844091047657758 ms 


    completed.append(number) # Hits:29523.0, Total execution time: 3503.923 ms, Average time per hit: 0.11868451715611558 ms 


    for add_number in a: # Hits:118092.0, Total execution time: 9417.612 ms, Average time per hit: 0.07974809470582259 ms 


        new_number=number*10+add_number # Hits:88569.0, Total execution time: 9566.526 ms, Average time per hit: 0.10801212613894252 ms 


        if new_number<=n: # Hits:88569.0, Total execution time: 7806.865 ms, Average time per hit: 0.0881444410572548 ms 


            option.append(new_number) # Hits:29520.0, Total execution time: 3698.21 ms, Average time per hit: 0.1252781165311653 ms 


for i in completed: # Hits:29524.0, Total execution time: 2564.347 ms, Average time per hit: 0.08685635415255386 ms 


    i=list(str(i)) # Hits:29523.0, Total execution time: 5947.657 ms, Average time per hit: 0.20145842224706162 ms 


    i=set(i) # Hits:29523.0, Total execution time: 5598.454 ms, Average time per hit: 0.18963025437794265 ms 


    if len(set(i))==3: # Hits:29523.0, Total execution time: 4983.663 ms, Average time per hit: 0.16880611726450565 ms 


        ans+=1 # Hits:26484.0, Total execution time: 2486.209 ms, Average time per hit: 0.09387588732819815 ms 


print(ans) # Hits:1.0, Total execution time: 7.042 ms, Average time per hit: 7.042 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 39.417 ms, Average time per hit: 39.417 ms 


import itertools as it # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(3,len(str(n))+1): # Hits:8.0, Total execution time: 1.709 ms, Average time per hit: 0.213625 ms 


    pr=list(it.product(""753"",repeat=i)) # Hits:7.0, Total execution time: 1236.082 ms, Average time per hit: 176.58314285714286 ms 


    

    for j in pr: # Hits:29518.0, Total execution time: 2326.973 ms, Average time per hit: 0.07883233958940308 ms 


        s=set(j) # Hits:29511.0, Total execution time: 5577.84 ms, Average time per hit: 0.18900884415980482 ms 


        if len(s)==3: # Hits:29511.0, Total execution time: 3597.706 ms, Average time per hit: 0.12191067737453831 ms 


            num=int(''.join(j)) # Hits:26484.0, Total execution time: 5558.601 ms, Average time per hit: 0.20988525147258721 ms 


            if num<=n: # Hits:26484.0, Total execution time: 2376.529 ms, Average time per hit: 0.08973451895484065 ms 


                ans+=1 # Hits:26484.0, Total execution time: 2481.249 ms, Average time per hit: 0.09368860444041685 ms 


print(ans) # Hits:1.0, Total execution time: 10.375 ms, Average time per hit: 10.375 ms 
",p03212,True
"N=int(eval(input())) # Hits:1.0, Total execution time: 36.875 ms, Average time per hit: 36.875 ms 




ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def dfs(s, sum): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  global ans

  sum = sum + s





  if int(sum) > N:

    return False



  sum = str(int(sum))

  if sum.count(""3"") >= 1 and sum.count(""5"") >= 1 and sum.count(""7"") >= 1:

    ans += 1

  

  if dfs(""3"", sum):

    return True

  

  if dfs(""5"", sum):

    return True

  

  if dfs(""7"", sum):

    return True

  

  

dfs(""0"" ,'') # Hits:1.0, Total execution time: 21.125 ms, Average time per hit: 21.125 ms 


print(ans)



  ","N=int(eval(input())) # Hits:1.0, Total execution time: 36.75 ms, Average time per hit: 36.75 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def dfs(s, target): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


  global ans

  target = target + s



  if int(target) > N:

    return False



  if target.count(""3"") >= 1 and target.count(""5"") >= 1 and target.count(""7"") >= 1:

    ans += 1

  

  if dfs(""3"", target):

    return True

  

  if dfs(""5"", target):

    return True

  

  if dfs(""7"", target):

    return True

  

  

dfs(""0"" ,'') # Hits:1.0, Total execution time: 16.625 ms, Average time per hit: 16.625 ms 


print(ans)



  ",p03212,True
"# -*- coding: utf-8 -*-



from itertools import product # Hits:1.0, Total execution time: 2.917 ms, Average time per hit: 2.917 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 81.125 ms, Average time per hit: 81.125 ms 




cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


# 候補となりうる10桁までの数字を列挙

for prod in product(['0', '3', '5', '7'], repeat=10): # Hits:1048577.0, Total execution time: 112777.42 ms, Average time per hit: 0.10755282635419239 ms 


    # チェック用に変形

    num = int(''.join(prod)) # Hits:1048576.0, Total execution time: 227287.524 ms, Average time per hit: 0.21675827407836915 ms 


    s = str(num) # Hits:1048576.0, Total execution time: 154616.271 ms, Average time per hit: 0.1474535665512085 ms 


    # 753数ではない

    if (s.find('3') == -1 or s.find('5') == -1 # Hits:1048576.0, Total execution time: 265114.196 ms, Average time per hit: 0.2528325996398926 ms 


            or s.find('7') == -1 or s.find('0') != -1): # Hits:931502.0, Total execution time: 240184.118 ms, Average time per hit: 0.2578460572280038 ms 


        continue # Hits:966112.0, Total execution time: 71251.175 ms, Average time per hit: 0.07375042955682157 ms 


    # N以下ではない

    if num > N: # Hits:82464.0, Total execution time: 7611.764 ms, Average time per hit: 0.0923040842064416 ms 


        continue # Hits:55980.0, Total execution time: 4022.803 ms, Average time per hit: 0.07186143265451947 ms 


    cnt += 1 # Hits:26484.0, Total execution time: 2889.539 ms, Average time per hit: 0.10910508231384988 ms 


print(cnt) # Hits:1.0, Total execution time: 32.666 ms, Average time per hit: 32.666 ms 

","# -*- coding: utf-8 -*-



from itertools import product # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 56.416 ms, Average time per hit: 56.416 ms 




cnt = 0 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


# 候補となりうる9桁までの数字を列挙

for prod in product(['0', '3', '5', '7'], repeat=9): # Hits:262145.0, Total execution time: 25696.61 ms, Average time per hit: 0.0980244139693681 ms 


    # チェック用に変形

    num = int(''.join(prod)) # Hits:262144.0, Total execution time: 53258.069 ms, Average time per hit: 0.2031634101867676 ms 


    s = str(num) # Hits:262144.0, Total execution time: 36368.982 ms, Average time per hit: 0.13873665618896486 ms 


    # 753数ではない

    if (s.find('3') == -1 or s.find('5') == -1 # Hits:262144.0, Total execution time: 62040.38 ms, Average time per hit: 0.23666526794433593 ms 


            or s.find('7') == -1 or s.find('0') != -1): # Hits:223290.0, Total execution time: 54821.267 ms, Average time per hit: 0.24551599713377223 ms 


        continue # Hits:235660.0, Total execution time: 16435.572 ms, Average time per hit: 0.06974273105321226 ms 


    # N以下ではない

    if num > N: # Hits:26484.0, Total execution time: 2362.512 ms, Average time per hit: 0.08920525600362482 ms 


        continue # Hits:26471.0, Total execution time: 1770.844 ms, Average time per hit: 0.06689751048317026 ms 


    cnt += 1 # Hits:26484.0, Total execution time: 2459.34 ms, Average time per hit: 0.09286135024920707 ms 


print(cnt) # Hits:1.0, Total execution time: 44.542 ms, Average time per hit: 44.542 ms 

",p03212,True
"# -*- coding: utf-8 -*-



from itertools import product # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 61.458 ms, Average time per hit: 61.458 ms 




cnt = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


# 候補となりうる9桁までの数字を列挙

for prod in product(['0', '3', '5', '7'], repeat=9): # Hits:262145.0, Total execution time: 25413.154 ms, Average time per hit: 0.09694311926605505 ms 


    # チェック用に変形

    num = int(''.join(prod)) # Hits:262144.0, Total execution time: 54069.825 ms, Average time per hit: 0.20626001358032225 ms 


    s = str(num) # Hits:262144.0, Total execution time: 37394.217 ms, Average time per hit: 0.14264761734008788 ms 


    # 753数ではない

    if (s.find('3') == -1 or s.find('5') == -1 # Hits:262144.0, Total execution time: 61600.133 ms, Average time per hit: 0.23498585891723633 ms 


            or s.find('7') == -1 or s.find('0') != -1): # Hits:223290.0, Total execution time: 54221.485 ms, Average time per hit: 0.2428298849030409 ms 


        continue # Hits:235660.0, Total execution time: 16499.19 ms, Average time per hit: 0.07001268777051685 ms 


    # N以下ではない

    if num > N: # Hits:26484.0, Total execution time: 2360.88 ms, Average time per hit: 0.0891436338921613 ms 


        continue # Hits:26471.0, Total execution time: 1751.822 ms, Average time per hit: 0.06617891277246798 ms 


    cnt += 1 # Hits:26484.0, Total execution time: 2529.652 ms, Average time per hit: 0.09551623621809394 ms 


print(cnt) # Hits:1.0, Total execution time: 34.666 ms, Average time per hit: 34.666 ms 

","# -*- coding: utf-8 -*-



""""""

解説参考

再帰関数で候補の数を作っていく版

""""""



N = int(eval(input())) # Hits:1.0, Total execution time: 56.333 ms, Average time per hit: 56.333 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    # N以下しかやらない

    if int(s) > N:

        return 0

    # 753数かどうか

    if '7' in s and '5' in s and '3' in s:

        res = 1

    else:

        res = 0

    # sの後ろに753を付けたもので再帰していく

    for c in '753':

        res += dfs(s + c)

    # 最終的に自分より大きい桁で増えた分を返却していく

    return res



print((dfs('0'))) # Hits:1.0, Total execution time: 34575.709 ms, Average time per hit: 34575.709 ms 

",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 56.167 ms, Average time per hit: 56.167 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    if int(s) > N:

        return 0

    ret = 1 if all(s.count(c) > 0 for c in '357') else 0

    for c in '357':

        ret += dfs(s + c)

    return ret



print((dfs('0'))) # Hits:1.0, Total execution time: 56807.417 ms, Average time per hit: 56807.417 ms 
","# coding: utf-8

import sys # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


import itertools # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 




sr = lambda: sys.stdin.readline().rstrip() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


ir = lambda: int(sr()) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


lr = lambda: list(map(int, sr().split())) # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




N = ir() # Hits:1.0, Total execution time: 39.041 ms, Average time per hit: 39.041 ms 


answer = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


digit = len(str(N)) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


# 3, 5, 7だけでできた数を列挙

for d in range(3, digit+1): # Hits:8.0, Total execution time: 1.332 ms, Average time per hit: 0.1665 ms 


    for x in itertools.product(['3', '5', '7'], repeat=d): # Hits:29518.0, Total execution time: 2897.249 ms, Average time per hit: 0.0981519411884274 ms 


        if len(set(x)) != 3: # Hits:29511.0, Total execution time: 6296.016 ms, Average time per hit: 0.2133447189183694 ms 


            continue # Hits:3027.0, Total execution time: 193.191 ms, Average time per hit: 0.06382259663032705 ms 


        y = int(''.join(x)) # Hits:26484.0, Total execution time: 5388.785 ms, Average time per hit: 0.20347322911946836 ms 


        if y <= N: # Hits:26484.0, Total execution time: 2269.294 ms, Average time per hit: 0.08568547047273826 ms 


            answer += 1 # Hits:26484.0, Total execution time: 2463.535 ms, Average time per hit: 0.09301974777223984 ms 




print(answer) # Hits:1.0, Total execution time: 6.167 ms, Average time per hit: 6.167 ms 

",p03212,True
"from math import ceil,floor,factorial,gcd,sqrt,log2,cos,sin,tan,acos,asin,atan,degrees,radians,pi,inf # Hits:1.0, Total execution time: 1.917 ms, Average time per hit: 1.917 ms 


from itertools import accumulate,groupby,permutations,combinations,product,combinations_with_replacement # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


from collections import deque,defaultdict,Counter # Hits:1.0, Total execution time: 2.084 ms, Average time per hit: 2.084 ms 


from bisect import bisect_left,bisect_right # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


from operator import itemgetter # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


from heapq import heapify,heappop,heappush # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


from queue import Queue,LifoQueue,PriorityQueue # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 


from copy import deepcopy # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


from time import time # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


import string # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


import sys # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


sys.setrecursionlimit(10 ** 7) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


def input() : return sys.stdin.readline().strip() # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


def INT()   : return int(eval(input())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def MAP()   : return list(map(int,input().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LIST()  : return list(MAP()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




n = INT() # Hits:1.0, Total execution time: 46.083 ms, Average time per hit: 46.083 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for x in product([0, 3, 5, 7], repeat=9): # Hits:262145.0, Total execution time: 26252.413 ms, Average time per hit: 0.10014462606572698 ms 


    y = 0 # Hits:262144.0, Total execution time: 19365.909 ms, Average time per hit: 0.07387508010864258 ms 


    for i in range(9): # Hits:2621440.0, Total execution time: 219447.081 ms, Average time per hit: 0.08371241798400879 ms 


        y += x[8-i] * 10**i # Hits:2359296.0, Total execution time: 413315.371 ms, Average time per hit: 0.17518589062160916 ms 


    if y > n: # Hits:262144.0, Total execution time: 23372.627 ms, Average time per hit: 0.08915949630737305 ms 


        break # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    if str(y).count('0') == 0 and x.count(3) > 0 and x.count(5) > 0 and x.count(7) > 0: # Hits:262144.0, Total execution time: 73764.074 ms, Average time per hit: 0.28138761138916013 ms 


        ans += 1 # Hits:26484.0, Total execution time: 2543.756 ms, Average time per hit: 0.0960487841715753 ms 


print(ans) # Hits:1.0, Total execution time: 33.625 ms, Average time per hit: 33.625 ms 
","from math import ceil,floor,factorial,gcd,sqrt,log2,cos,sin,tan,acos,asin,atan,degrees,radians,pi,inf # Hits:1.0, Total execution time: 2.084 ms, Average time per hit: 2.084 ms 


from itertools import accumulate,groupby,permutations,combinations,product,combinations_with_replacement # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


from collections import deque,defaultdict,Counter # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


from bisect import bisect_left,bisect_right # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


from operator import itemgetter # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


from heapq import heapify,heappop,heappush # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


from queue import Queue,LifoQueue,PriorityQueue # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 


from copy import deepcopy # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


from time import time # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


import string # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


import sys # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


sys.setrecursionlimit(10 ** 7) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


def input() : return sys.stdin.readline().strip() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def INT()   : return int(eval(input())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def MAP()   : return list(map(int,input().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LIST()  : return list(MAP()) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




n = INT() # Hits:1.0, Total execution time: 47.375 ms, Average time per hit: 47.375 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    if int(s) > n:

        return 0

    ret = 1 if all(s.count(c) > 0 for c in '753') else 0

    for c in '753':

        ret += dfs(s+c)

    return ret



print((dfs('0'))) # Hits:1.0, Total execution time: 56954.416 ms, Average time per hit: 56954.416 ms 
",p03212,True
"import itertools

from collections import defaultdict



N=input()

k=len(N)



if int(N)<357:

	print(0)

	quit()



ans=0



for k in range(3,k+1):

	L=list(itertools.product( (3,5,7) , repeat=k))



	for t  in L:

		C=defaultdict(lambda: 0)

		v=0



		for idx, x in enumerate(t):

			v+=x*(10**idx)

			if x!=0:

				C[x]+=1

	

		if v<=int(N) and len(C)==3:

			ans+=1



print(ans)


","N=eval(input()) # Hits:1.0, Total execution time: 43.5 ms, Average time per hit: 43.5 ms 




l=len( str(N) ) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




s=""357"" # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




P=[ set() for i in range(l+1) ]   #Pattern # Hits:1.0, Total execution time: 1.959 ms, Average time per hit: 1.959 ms 


P[0].add(0) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




for i in range(1,l+1): # Hits:10.0, Total execution time: 1.458 ms, Average time per hit: 0.1458 ms 


	k=l-i	#keta # Hits:9.0, Total execution time: 1.0 ms, Average time per hit: 0.11111111111111112 ms 


	for x in P[i-1]: # Hits:14766.0, Total execution time: 1244.6 ms, Average time per hit: 0.08428822971691724 ms 


		for j in s: # Hits:59028.0, Total execution time: 4908.861 ms, Average time per hit: 0.0831615673917463 ms 


			j=int(j) # Hits:44271.0, Total execution time: 5646.854 ms, Average time per hit: 0.12755198662781506 ms 


			P[i].add(  x+(10**k)*j ) # Hits:44271.0, Total execution time: 8702.433 ms, Average time per hit: 0.19657186420004066 ms 


			P[i].add( 0 ) # Hits:44271.0, Total execution time: 6531.923 ms, Average time per hit: 0.14754405818707506 ms 






ans=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for x in P[-1]: # Hits:29525.0, Total execution time: 2595.922 ms, Average time per hit: 0.0879228450465707 ms 


	if  1<= x <= N: # Hits:29524.0, Total execution time: 3356.687 ms, Average time per hit: 0.11369350359029941 ms 


		for i in s: # Hits:111996.0, Total execution time: 8699.963 ms, Average time per hit: 0.07768101539340691 ms 


			if i not in str(x): # Hits:85512.0, Total execution time: 13331.264 ms, Average time per hit: 0.1558993357657405 ms 


				break # Hits:3039.0, Total execution time: 237.146 ms, Average time per hit: 0.07803422178348142 ms 


		else:

			ans+=1 # Hits:26484.0, Total execution time: 2401.979 ms, Average time per hit: 0.09069547651412174 ms 




print(ans) # Hits:1.0, Total execution time: 8.334 ms, Average time per hit: 8.334 ms 


	",p03212,False
"from itertools import product # Hits:1.0, Total execution time: 3.0 ms, Average time per hit: 3.0 ms 


from bisect import bisect_left, bisect_right # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 60.25 ms, Average time per hit: 60.25 ms 


s = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(3, 10): # Hits:8.0, Total execution time: 1.459 ms, Average time per hit: 0.182375 ms 


    for v in product('753', repeat=i): # Hits:29518.0, Total execution time: 2918.562 ms, Average time per hit: 0.09887397520157193 ms 


        if len(set(v)) >= 3: # Hits:29511.0, Total execution time: 6628.203 ms, Average time per hit: 0.22460109789569993 ms 


            s.append(int(''.join(v))) # Hits:26484.0, Total execution time: 6466.299 ms, Average time per hit: 0.2441586995922066 ms 




s.sort() # Hits:1.0, Total execution time: 58.708 ms, Average time per hit: 58.708 ms 




idx = bisect_right(s, n) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


print((len(s[:idx]))) # Hits:1.0, Total execution time: 43.167 ms, Average time per hit: 43.167 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 40.334 ms, Average time per hit: 40.334 ms 




def dfs(val, A): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if val > n:

        return

    A.append(val)

    dfs(10 * val + 3, A)

    dfs(10 * val + 5, A)

    dfs(10 * val + 7, A)



A = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


dfs(3, A) # Hits:1.0, Total execution time: 8134.583 ms, Average time per hit: 8134.583 ms 


dfs(5, A) # Hits:1.0, Total execution time: 8052.75 ms, Average time per hit: 8052.75 ms 


dfs(7, A) # Hits:1.0, Total execution time: 8018.583 ms, Average time per hit: 8018.583 ms 




cnt = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for v in A: # Hits:29524.0, Total execution time: 2454.04 ms, Average time per hit: 0.083120173418236 ms 


    if len(set(list(str(v)))) == 3: # Hits:29523.0, Total execution time: 10945.968 ms, Average time per hit: 0.3707606950513159 ms 


        cnt += 1 # Hits:26484.0, Total execution time: 2544.091 ms, Average time per hit: 0.09606143331822987 ms 


print(cnt) # Hits:1.0, Total execution time: 13.166 ms, Average time per hit: 13.166 ms 
",p03212,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 47.667 ms, Average time per hit: 47.667 ms 




def dfs(val, A): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if val > n:

        return

    A.append(val)

    dfs(10 * val + 3, A)

    dfs(10 * val + 5, A)

    dfs(10 * val + 7, A)



A = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


dfs(3, A) # Hits:1.0, Total execution time: 7744.333 ms, Average time per hit: 7744.333 ms 


dfs(5, A) # Hits:1.0, Total execution time: 7944.041 ms, Average time per hit: 7944.041 ms 


dfs(7, A) # Hits:1.0, Total execution time: 7921.916 ms, Average time per hit: 7921.916 ms 




cnt = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for v in A: # Hits:29524.0, Total execution time: 2383.185 ms, Average time per hit: 0.08072026148218399 ms 


    if len(set(list(str(v)))) == 3: # Hits:29523.0, Total execution time: 10933.194 ms, Average time per hit: 0.3703280154455848 ms 


        cnt += 1 # Hits:26484.0, Total execution time: 2569.656 ms, Average time per hit: 0.09702673312188492 ms 


print(cnt) # Hits:1.0, Total execution time: 17.958 ms, Average time per hit: 17.958 ms 
","# 7/3



# n 以下の「753数」の個数



n = int(eval(input())) # Hits:1.0, Total execution time: 40.0 ms, Average time per hit: 40.0 ms 




def dfs(val): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    # 終了条件

    if val > n:

        return



    A.append(val)



    for v in [3, 5, 7]:

        val = A.pop()

        dfs(10 * val + v)

        A.append(val)



A = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for v in [3, 5, 7]: # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    dfs(v) # Hits:3.0, Total execution time: 40536.958 ms, Average time per hit: 13512.319333333335 ms 




res = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for v in A: # Hits:29524.0, Total execution time: 2387.849 ms, Average time per hit: 0.0808782346565506 ms 


    s = str(v) # Hits:29523.0, Total execution time: 4188.555 ms, Average time per hit: 0.14187430139213494 ms 


    if '3' in s and '5' in s and '7' in s: # Hits:29523.0, Total execution time: 3783.251 ms, Average time per hit: 0.1281458862581716 ms 


        res += 1 # Hits:26484.0, Total execution time: 2433.243 ms, Average time per hit: 0.09187596284549161 ms 




print(res) # Hits:1.0, Total execution time: 6.958 ms, Average time per hit: 6.958 ms 
",p03212,True
"def dfs(s,n):

    if int(s)>n:

        return 0

    cur = 0

    if all(s.count(c) > 0 for c in '753'):

        cur = 1

    for c in ""753"":

        cur += dfs(s+c,n)

    return cur

def examC():

    N = I()

    ans = dfs(""0"",N)

    print(ans)



import sys,copy,bisect,itertools,heapq,math

from heapq import heappop,heappush,heapify

from collections import Counter,defaultdict,deque

def I(): return int(sys.stdin.readline())

def LI(): return list(map(int,sys.stdin.readline().split()))

def LSI(): return list(map(str,sys.stdin.readline().split()))

def LS(): return sys.stdin.readline().split()

def SI(): return sys.stdin.readline().strip()

mod = 10**9 + 7

inf = float('inf')



if __name__ == '__main__':

    examC()
",,p03212,False
"import sys

IS = lambda: sys.stdin.readline().rstrip()

II = lambda: int(IS())

MII = lambda: list(map(int, IS().split()))

from collections import deque



def main():

    n = II()

    cnt = 0

    dq = deque(['3', '5', '7'])

    while dq:

        d = dq.popleft()

        if int(d) > n: break

        if '7' in d and '5' in d and '3' in d:

            cnt += 1

        dq.append(d+'3')

        dq.append(d+'5')

        dq.append(d+'7')

    print(cnt)



if __name__ == '__main__':

    main()
",,p03212,False
"num = int(eval(input())) # Hits:1.0, Total execution time: 41.542 ms, Average time per hit: 41.542 ms 


def to3(x,n): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


  if (int(x/n)):

    return to3(int(x/n),n) + str(x%n)

  return str(x%n)

c = [""3"",""5"",""7""] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ch = [""0"",""3"",""5"",""7""] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(4 ** len(str(num))): # Hits:262145.0, Total execution time: 22776.617 ms, Average time per hit: 0.08688556714795247 ms 


  s = to3(i,4) # Hits:262144.0, Total execution time: 924326.912 ms, Average time per hit: 3.52602734375 ms 


  ss = """" # Hits:262144.0, Total execution time: 21147.962 ms, Average time per hit: 0.0806730728149414 ms 


  for j in range(len(s)): # Hits:2534060.0, Total execution time: 233002.854 ms, Average time per hit: 0.09194843610648525 ms 


    ss += ch[int(s[j])] # Hits:2271916.0, Total execution time: 468771.836 ms, Average time per hit: 0.20633326056068976 ms 


  key = 1 # Hits:262144.0, Total execution time: 19451.527 ms, Average time per hit: 0.07420168685913085 ms 


  k1 = 0 # Hits:262144.0, Total execution time: 19133.732 ms, Average time per hit: 0.07298939514160156 ms 


  k2 = 0 # Hits:262144.0, Total execution time: 19482.755 ms, Average time per hit: 0.0743208122253418 ms 


  k3 = 0 # Hits:262144.0, Total execution time: 19259.49 ms, Average time per hit: 0.07346912384033204 ms 


  for k in range(len(ss)): # Hits:1222147.0, Total execution time: 139123.794 ms, Average time per hit: 0.1138355647888511 ms 


    if ss[k] == ""0"": # Hits:1192624.0, Total execution time: 128208.307 ms, Average time per hit: 0.10750102882383719 ms 


      key = 0 # Hits:232621.0, Total execution time: 16776.993 ms, Average time per hit: 0.07212157543815907 ms 


      break # Hits:232621.0, Total execution time: 18229.702 ms, Average time per hit: 0.07836653612528534 ms 


    elif ss[k] == ""3"": # Hits:960003.0, Total execution time: 103358.252 ms, Average time per hit: 0.1076645093817415 ms 


      k1 = 1 # Hits:320001.0, Total execution time: 26501.634 ms, Average time per hit: 0.08281734744578924 ms 


    elif ss[k] == ""5"": # Hits:640002.0, Total execution time: 69582.773 ms, Average time per hit: 0.10872274305392796 ms 


      k2 = 1 # Hits:320001.0, Total execution time: 26508.937 ms, Average time per hit: 0.08284016924947109 ms 


    else:

      k3 = 1 # Hits:320001.0, Total execution time: 26375.116 ms, Average time per hit: 0.08242197993131271 ms 


  if key == 1 and k1 and k2 and k3 and int(ss) <= num:ans += 1 # Hits:262144.0, Total execution time: 31188.242 ms, Average time per hit: 0.11897370147705078 ms 


print(ans) # Hits:1.0, Total execution time: 41.625 ms, Average time per hit: 41.625 ms 
","num = int(eval(input())) # Hits:1.0, Total execution time: 40.959 ms, Average time per hit: 40.959 ms 


def to3(x,n): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


  if (int(x/n)):

    return to3(int(x/n),n) + str(x%n)

  return str(x%n)

ch = [""3"",""5"",""7""] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


ans = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(3 ** len(str(num))+1): # Hits:19685.0, Total execution time: 1546.679 ms, Average time per hit: 0.0785714503429007 ms 


  s = to3(i,3) # Hits:19684.0, Total execution time: 64116.792 ms, Average time per hit: 3.2573050193050195 ms 


  for u in range(len(str(num))-len(s)+2): # Hits:68891.0, Total execution time: 10233.034 ms, Average time per hit: 0.14853948991885732 ms 


    if u > 0: # Hits:49207.0, Total execution time: 4268.755 ms, Average time per hit: 0.08675097039039162 ms 


      s = ""0"" + s # Hits:29523.0, Total execution time: 3104.813 ms, Average time per hit: 0.1051659045489957 ms 


    k1 = 0 # Hits:49207.0, Total execution time: 3807.843 ms, Average time per hit: 0.07738417298351861 ms 


    k2 = 0 # Hits:49207.0, Total execution time: 3591.479 ms, Average time per hit: 0.07298715629890055 ms 


    k3 = 0 # Hits:49207.0, Total execution time: 3413.704 ms, Average time per hit: 0.06937435730688724 ms 


    ss = """" # Hits:49207.0, Total execution time: 3627.666 ms, Average time per hit: 0.07372255979840267 ms 


    for j in range(len(s)): # Hits:497006.0, Total execution time: 42656.475 ms, Average time per hit: 0.08582688136561731 ms 


      if s[j] == ""0"":k1 = 1 # Hits:447799.0, Total execution time: 48072.722 ms, Average time per hit: 0.1073533482656281 ms 


      elif s[j] == ""1"":k2 = 1 # Hits:285405.0, Total execution time: 30963.935 ms, Average time per hit: 0.10849121423941416 ms 


      else: k3 = 1 # Hits:142702.0, Total execution time: 10029.226 ms, Average time per hit: 0.07028090706507267 ms 


      ss += ch[int(s[j])] # Hits:447799.0, Total execution time: 92023.31 ms, Average time per hit: 0.205501374500613 ms 


    if k1 and k2 and k3 and int(ss) <= num:ans += 1 # Hits:49207.0, Total execution time: 9614.863 ms, Average time per hit: 0.19539624443676712 ms 


print(ans) # Hits:1.0, Total execution time: 36.084 ms, Average time per hit: 36.084 ms 
",p03212,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 47.708 ms, Average time per hit: 47.708 ms 




cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


i = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while i <= n: # Hits:132814.0, Total execution time: 12888.654 ms, Average time per hit: 0.09704288704504042 ms 


    is_broken = False # Hits:132813.0, Total execution time: 9802.147 ms, Average time per hit: 0.07380412309036014 ms 


    string = list(str(i)) # Hits:132813.0, Total execution time: 27947.562 ms, Average time per hit: 0.21042790991845678 ms 


    for j, s in enumerate(string): # Hits:1107180.0, Total execution time: 117399.794 ms, Average time per hit: 0.10603496631080764 ms 


        if s not in ['3', '5', '7']: # Hits:1077657.0, Total execution time: 103586.827 ms, Average time per hit: 0.0961222606079671 ms 


            i = i + 10**(len(string) - j - 1) # Hits:103290.0, Total execution time: 17395.916 ms, Average time per hit: 0.16841820118114048 ms 


            is_broken = True # Hits:103290.0, Total execution time: 8115.759 ms, Average time per hit: 0.07857255300609933 ms 


            break # Hits:103290.0, Total execution time: 8505.869 ms, Average time per hit: 0.08234939490754188 ms 


    if is_broken: # Hits:132813.0, Total execution time: 10165.723 ms, Average time per hit: 0.0765416261962308 ms 


        continue # Hits:103290.0, Total execution time: 6866.412 ms, Average time per hit: 0.06647702584954981 ms 




    c1 = string.count('3') >= 1 # Hits:29523.0, Total execution time: 5399.765 ms, Average time per hit: 0.18290028113674087 ms 


    c2 = string.count('5') >= 1 # Hits:29523.0, Total execution time: 5223.38 ms, Average time per hit: 0.17692578667479592 ms 


    c3 = string.count('7') >= 1 # Hits:29523.0, Total execution time: 5205.294 ms, Average time per hit: 0.17631317955492326 ms 


    if c1 and c2 and c3: # Hits:29523.0, Total execution time: 2702.3 ms, Average time per hit: 0.09153202587812892 ms 


        cnt += 1 # Hits:26484.0, Total execution time: 2432.983 ms, Average time per hit: 0.09186614559734178 ms 




    i += 1 # Hits:29523.0, Total execution time: 2841.834 ms, Average time per hit: 0.09625830708261356 ms 




print(cnt) # Hits:1.0, Total execution time: 52.833 ms, Average time per hit: 52.833 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 45.0 ms, Average time per hit: 45.0 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if int(s) > n:

        return 0

    ret = 1 if all(s.count(c) > 0 for c in '753') else 0

    for c in '753':

        ret += dfs(s + c)

    return ret



print((dfs('0'))) # Hits:1.0, Total execution time: 56130.75 ms, Average time per hit: 56130.75 ms 
",p03212,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 44.75 ms, Average time per hit: 44.75 ms 


def dfs(x): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    if int(x) > n:

        return 0

    

    if all(x.count(i) > 0 for i in ""753""):

        ret = 1

    else:

        ret = 0

    

    for i in ""753"":

        ret += dfs(x+i)

        

    return ret

print((dfs(""0""))) # Hits:1.0, Total execution time: 56669.292 ms, Average time per hit: 56669.292 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 48.25 ms, Average time per hit: 48.25 ms 




count = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def dfs(x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    global count

    if int(x) > n:

        return 0

    

    for i in ('753'):

        dfs(x+i)

    

    check =  True

    for j in ('753'):

        if x.find(j) == -1:

            check = False

    if check:

        count += 1

        

    return count

print((dfs('0'))) # Hits:1.0, Total execution time: 9.416 ms, Average time per hit: 9.416 ms 
",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 40.291 ms, Average time per hit: 40.291 ms 


from collections import deque # Hits:1.0, Total execution time: 2.208 ms, Average time per hit: 2.208 ms 




def solve(N): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    ans = 0

    d = deque([3,5,7])

    n = d.popleft()

    while n<=N:

        if len(set(list(str(n))))==3:

            ans += 1

        for num in [3,5,7]:

            new = int(str(n)+str(num))

            d.append(new)

        n = d.popleft()

    return ans

print((solve(N))) # Hits:1.0, Total execution time: 46530.459 ms, Average time per hit: 46530.459 ms 
","from collections import deque # Hits:1.0, Total execution time: 2.291 ms, Average time per hit: 2.291 ms 


def solve(): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    N = int(eval(input()))

    ans = 0

    d = deque([3,5,7])

    while len(d):

        n = d.popleft()

        for i in range(3,8,2):

            a = n*10+i

            if a<=N:

                if len(set(list(str(a))))==3:

                    ans += 1

                d.append(a)

    return ans

print((solve())) # Hits:1.0, Total execution time: 33666.25 ms, Average time per hit: 33666.25 ms 
",p03212,True
"from itertools import product # Hits:1.0, Total execution time: 2.166 ms, Average time per hit: 2.166 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 51.917 ms, Average time per hit: 51.917 ms 


a = ['7','5','3'] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




x =[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(3,11): # Hits:9.0, Total execution time: 1.668 ms, Average time per hit: 0.18533333333333335 ms 


    x += list(product(a, repeat = i)) # Hits:8.0, Total execution time: 3525.417 ms, Average time per hit: 440.677125 ms 


y = [] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


for j in x: # Hits:88561.0, Total execution time: 6777.646 ms, Average time per hit: 0.07653082056435677 ms 


    if '7' in j and '5' in j and '3' in j: # Hits:88560.0, Total execution time: 13011.079 ms, Average time per hit: 0.14691823622402891 ms 


        y.append(j) # Hits:82464.0, Total execution time: 9709.356 ms, Average time per hit: 0.11774054132712455 ms 


z = [] # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for k in range(len(y)): # Hits:82465.0, Total execution time: 6952.576 ms, Average time per hit: 0.08430941611592797 ms 


    z.append(''.join(y[k])) # Hits:82464.0, Total execution time: 17383.186 ms, Average time per hit: 0.2107972691113698 ms 


z = [int(_) for _ in z] # Hits:1.0, Total execution time: 9243.583 ms, Average time per hit: 9243.583 ms 




b = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for p in z: # Hits:82465.0, Total execution time: 6151.412 ms, Average time per hit: 0.07459421572788456 ms 


    if p <= n: # Hits:82464.0, Total execution time: 6953.482 ms, Average time per hit: 0.08432142510671324 ms 


        b += 1 # Hits:26484.0, Total execution time: 2396.031 ms, Average time per hit: 0.09047088808337109 ms 




print(b) # Hits:1.0, Total execution time: 18.166 ms, Average time per hit: 18.166 ms 

","from itertools import product # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


l = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for _ in range(3,10): # Hits:8.0, Total execution time: 1.041 ms, Average time per hit: 0.130125 ms 


    tmp = list(product('753', repeat = _)) # Hits:7.0, Total execution time: 1111.793 ms, Average time per hit: 158.82757142857142 ms 


    l += tmp # Hits:7.0, Total execution time: 29.709 ms, Average time per hit: 4.244142857142857 ms 




m = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in l: # Hits:29512.0, Total execution time: 2311.603 ms, Average time per hit: 0.07832756166982922 ms 


    if len(set(i)) == 3: # Hits:29511.0, Total execution time: 6444.018 ms, Average time per hit: 0.21835986581274777 ms 


       m.append(int(''.join(i))) # Hits:26484.0, Total execution time: 6394.411 ms, Average time per hit: 0.2414443059960731 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 59.583 ms, Average time per hit: 59.583 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for j in m: # Hits:26485.0, Total execution time: 1924.456 ms, Average time per hit: 0.07266211062865773 ms 


    if j <= n: # Hits:26484.0, Total execution time: 2177.059 ms, Average time per hit: 0.08220280169158736 ms 


        ans += 1 # Hits:26484.0, Total execution time: 2401.301 ms, Average time per hit: 0.09066987615163873 ms 




print(ans) # Hits:1.0, Total execution time: 5.708 ms, Average time per hit: 5.708 ms 
",p03212,True
"# ＢＦＳ, パターン列挙_全探索用



from collections import deque # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 43.209 ms, Average time per hit: 43.209 ms 




# DFS_start

queue = deque([0]) # 初期化_ここでは'0'を設置 # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


pre_ans = [] # パターン候補の器_初期化 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




while queue: # queueが空になるまでループ # Hits:88574.0, Total execution time: 7221.381 ms, Average time per hit: 0.08152935398649717 ms 


    tmp = queue.popleft() # パターンの候補を popleft # Hits:88573.0, Total execution time: 10481.415 ms, Average time per hit: 0.1183364569338286 ms 


    if tmp <= n: # パターンとしての条件を確認 # Hits:88573.0, Total execution time: 7916.06 ms, Average time per hit: 0.08937328531267993 ms 


        pre_ans.append(tmp) # 条件に合えば append # Hits:29524.0, Total execution time: 3477.584 ms, Average time per hit: 0.11778837555886736 ms 


        x = tmp * 10 + 3 # パターンの候補を作成して... # Hits:29524.0, Total execution time: 3431.598 ms, Average time per hit: 0.1162307952851917 ms 


        y = tmp * 10 + 5 # 〃 # Hits:29524.0, Total execution time: 3089.292 ms, Average time per hit: 0.1046366346023574 ms 


        z = tmp * 10 + 7 # 〃 # Hits:29524.0, Total execution time: 3075.279 ms, Average time per hit: 0.1041620037935239 ms 


        queue += [x, y, z]  # 積む # Hits:29524.0, Total execution time: 3990.707 ms, Average time per hit: 0.13516823601138056 ms 


# DFS_end



ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in pre_ans: # 列挙したパターンを全探索 # Hits:29525.0, Total execution time: 2389.057 ms, Average time per hit: 0.08091640982218459 ms 


    if len(set(str(i))) == 3: # Hits:29524.0, Total execution time: 8794.817 ms, Average time per hit: 0.29788704105134806 ms 


        ans += 1 # Hits:26484.0, Total execution time: 2486.763 ms, Average time per hit: 0.09389680561848664 ms 




print(ans) # Hits:1.0, Total execution time: 9.625 ms, Average time per hit: 9.625 ms 




''' # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


上記は パターンを列挙 → 全探索 だが、

実際には パターンを列挙 しながら 探索 が高効率



from collections import deque



n = int(input())



# DFS_start

queue = deque([0]) # 初期化_ここでは'0'を設置



ans = 0

while queue: # queueが空になるまでループ

    tmp = queue.popleft() # パターンの候補を popleft

    if tmp <= n: # パターンとしての条件を確認

        if len(set(str(tmp))) == 3: # ここで ansを探索

            ans += 1

        x = tmp * 10 + 3 # パターンの候補を作成して...

        y = tmp * 10 + 5 # 〃

        z = tmp * 10 + 7 # 〃

        queue += [x, y, z]  # 積む



print(ans)



'''","# ＤＦＳ, パターン列挙_全探索用



n = int(eval(input())) # Hits:1.0, Total execution time: 40.0 ms, Average time per hit: 40.0 ms 




# DFS_start

stack = [0] # 初期化_ここでは'0'を設置 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


pre_ans = [] # パターン候補の器_初期化 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




while stack: # stackが空になるまでループ # Hits:88574.0, Total execution time: 6937.955 ms, Average time per hit: 0.07832947591844108 ms 


    tmp = stack.pop() # パターンの候補を pop # Hits:88573.0, Total execution time: 9749.076 ms, Average time per hit: 0.11006826007925666 ms 


    if tmp <= n: # パターンとしての条件を確認 # Hits:88573.0, Total execution time: 7610.942 ms, Average time per hit: 0.08592846578528446 ms 


        pre_ans.append(tmp) # 条件に合えば append # Hits:29524.0, Total execution time: 3664.403 ms, Average time per hit: 0.12411607505758028 ms 


        x = tmp * 10 + 3 # パターンの候補を作成して... # Hits:29524.0, Total execution time: 3323.409 ms, Average time per hit: 0.11256635279772388 ms 


        y = tmp * 10 + 5 # 〃 # Hits:29524.0, Total execution time: 3267.036 ms, Average time per hit: 0.11065695705188999 ms 


        z = tmp * 10 + 7 # 〃 # Hits:29524.0, Total execution time: 3488.138 ms, Average time per hit: 0.11814584744614551 ms 


        stack += [x, y, z]  # 積む # Hits:29524.0, Total execution time: 3681.43 ms, Average time per hit: 0.12469279230456577 ms 


# DFS_end



ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in pre_ans: # 列挙したパターンを全探索 # Hits:29525.0, Total execution time: 2374.167 ms, Average time per hit: 0.0804120914479255 ms 


    if len(set(str(i))) == 3: # Hits:29524.0, Total execution time: 8861.615 ms, Average time per hit: 0.3001495393578106 ms 


        ans += 1 # Hits:26484.0, Total execution time: 2476.449 ms, Average time per hit: 0.09350736293611238 ms 




print(ans) # Hits:1.0, Total execution time: 9.292 ms, Average time per hit: 9.292 ms 






''' # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


上記は パターンを列挙 → 全探索 だが、

実際には パターンを列挙 しながら 探索 が高効率



n = int(input())



stack = [0]

ans = 0

while stack:

    tmp = stack.pop()

    if tmp <= n:

        if len(set(str(tmp))) == 3:

            ans += 1

        x = tmp * 10 + 3

        y = tmp * 10 + 5

        z = tmp * 10 + 7

        stack += [x, y, z]



print(ans)



'''",p03212,True
"from functools import reduce # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 43.583 ms, Average time per hit: 43.583 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def dfs(numl): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    global ans

    if 3 in numl and 5 in numl and 7 in numl and n >= reduce( lambda a,b:10*a+b, numl):

        ans += 1

    if len(str(n)) > len(numl):

        for i in [3,5,7]:

            dfs(numl+[i])



dfs([]) # Hits:1.0, Total execution time: 10.667 ms, Average time per hit: 10.667 ms 


print(ans)","n = int(eval(input())) # Hits:1.0, Total execution time: 42.959 ms, Average time per hit: 42.959 ms 




global ans

ans = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    global ans

    if s:

        if int(s) > n:

            return

    if s:

        if ""3"" in s and ""5"" in s and ""7"" in s:

            ans += 1

    dfs(s + ""3"")

    dfs(s + ""5"")

    dfs(s + ""7"")



dfs("""") # Hits:1.0, Total execution time: 33790.5 ms, Average time per hit: 33790.5 ms 






print(ans) # Hits:1.0, Total execution time: 7.75 ms, Average time per hit: 7.75 ms 
",p03212,True
"import sys # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


read = sys.stdin.buffer.read # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


readline = sys.stdin.buffer.readline # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


readlines = sys.stdin.buffer.readlines # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


sys.setrecursionlimit(10 ** 7) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 






n = int(readline()) # Hits:1.0, Total execution time: 39.042 ms, Average time per hit: 39.042 ms 






def dfs(s): # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


    if int(s) > n:

        return 0

    flag = True

    for check in '753':

        if s.count(check) <= 0:

            flag = False

    if flag:

        x = 1

    else:

        x = 0

    for check in '753':

        x += dfs(s + check)

    return x





print((dfs('0'))) # Hits:1.0, Total execution time: 51641.542 ms, Average time per hit: 51641.542 ms 

","import sys # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


read = sys.stdin.buffer.read # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


readline = sys.stdin.buffer.readline # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


readlines = sys.stdin.buffer.readlines # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


sys.setrecursionlimit(10 ** 7) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




n = int(readline()) # Hits:1.0, Total execution time: 35.25 ms, Average time per hit: 35.25 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


q = ['3', '5', '7'] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


while q: # Hits:29524.0, Total execution time: 2416.623 ms, Average time per hit: 0.08185283159463488 ms 


    qq = q.pop() # Hits:29523.0, Total execution time: 3823.449 ms, Average time per hit: 0.12950746875317548 ms 


    v = list(qq) # Hits:29523.0, Total execution time: 4892.964 ms, Average time per hit: 0.1657339701249873 ms 


    if '3' in v and '5' in v and '7' in v: # Hits:29523.0, Total execution time: 4665.757 ms, Average time per hit: 0.15803803813975545 ms 


        cnt += 1 # Hits:26484.0, Total execution time: 2464.078 ms, Average time per hit: 0.09304025071741429 ms 


    if int(qq + '3') <= n: # Hits:29523.0, Total execution time: 5483.61 ms, Average time per hit: 0.18574027029773396 ms 


        q.append(qq + '3') # Hits:9840.0, Total execution time: 1567.945 ms, Average time per hit: 0.15934400406504065 ms 


        if int(qq + '5') <= n: # Hits:9840.0, Total execution time: 1795.566 ms, Average time per hit: 0.18247621951219511 ms 


            q.append(qq + '5') # Hits:9840.0, Total execution time: 1548.035 ms, Average time per hit: 0.15732063008130082 ms 


            if int(qq + '7') <= n: # Hits:9840.0, Total execution time: 1743.925 ms, Average time per hit: 0.17722815040650405 ms 


                q.append(qq + '7') # Hits:9840.0, Total execution time: 1471.339 ms, Average time per hit: 0.14952632113821138 ms 


print(cnt) # Hits:1.0, Total execution time: 6.209 ms, Average time per hit: 6.209 ms 

",p03212,True
"import itertools # Hits:1.0, Total execution time: 3.166 ms, Average time per hit: 3.166 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 88.75 ms, Average time per hit: 88.75 ms 


a = [0, 3, 5, 7] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


ans = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


res = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in itertools.product(a, repeat = 9): # Hits:262145.0, Total execution time: 25567.793 ms, Average time per hit: 0.097533017986229 ms 


    val = 0 # Hits:262144.0, Total execution time: 20155.299 ms, Average time per hit: 0.0768863639831543 ms 


    for j in range(len(i)): # Hits:2621440.0, Total execution time: 227103.569 ms, Average time per hit: 0.08663313636779785 ms 


        val += 10 ** j * i[j] # Hits:2359296.0, Total execution time: 382956.528 ms, Average time per hit: 0.1623181355794271 ms 


    # print(val)

    tmp = str(val) # Hits:262144.0, Total execution time: 36792.712 ms, Average time per hit: 0.14035305786132812 ms 


    if val <= n and len(set(tmp)) == 3 and ""0"" not in tmp: # Hits:262144.0, Total execution time: 75594.752 ms, Average time per hit: 0.28837109375 ms 


        res += 1 # Hits:26484.0, Total execution time: 2453.802 ms, Average time per hit: 0.09265224286361577 ms 


        ans.append(val) # Hits:26484.0, Total execution time: 3606.8 ms, Average time per hit: 0.13618788702612897 ms 




ans.sort() # Hits:1.0, Total execution time: 1017.625 ms, Average time per hit: 1017.625 ms 


print(res) # Hits:1.0, Total execution time: 32.042 ms, Average time per hit: 32.042 ms 


# print(ans)","import itertools # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 48.167 ms, Average time per hit: 48.167 ms 


list_3_5_7 = [""3"", ""5"", ""7""] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




res = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(3, 10): # Hits:8.0, Total execution time: 3.459 ms, Average time per hit: 0.432375 ms 


    tmp_product_list = list(itertools.product(list_3_5_7, repeat = i)) # Hits:7.0, Total execution time: 1112.0 ms, Average time per hit: 158.85714285714286 ms 


    for tmp_list in tmp_product_list: # Hits:29518.0, Total execution time: 4020.648 ms, Average time per hit: 0.13621004133071346 ms 


        tmp_str = """".join(tmp_list) # Hits:29511.0, Total execution time: 6392.361 ms, Average time per hit: 0.2166094337704585 ms 


        if len(set(tmp_str)) == 3 and int(tmp_str) <= n: # Hits:29511.0, Total execution time: 16213.197 ms, Average time per hit: 0.5493950391379485 ms 


            res += 1 # Hits:26484.0, Total execution time: 6644.898 ms, Average time per hit: 0.25090235613955597 ms 




print(res) # Hits:1.0, Total execution time: 37.458 ms, Average time per hit: 37.458 ms 
",p03212,True
"import typing

n = int(eval(input()))



res = set()

str_num = """"

def dfs(str_num:str, i:int):

    global res

    if i == 10 :

        # print(str_num)

        if str_num and int(str_num) <= n and len(set(str_num)) == 3:

            res.add(str_num)

            # print(res, str_num)

        return 0

    dfs(str_num + ""3"", i + 1)

    dfs(str_num + ""5"", i + 1)

    dfs(str_num + ""7"", i + 1)

    dfs(str_num      , i + 1)



if __name__ == ""__main__"":

    dfs(str_num, 0)

    print((len(res)))
",,p03212,False
"N = int(eval(input())) # Hits:1.0, Total execution time: 53.25 ms, Average time per hit: 53.25 ms 


T = (""3"",""5"",""7"") # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




from collections import deque # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


que = deque(list(T)) # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while que: # Hits:88573.0, Total execution time: 8000.953 ms, Average time per hit: 0.09033173766271889 ms 


  num = que.pop() # Hits:88572.0, Total execution time: 11391.245 ms, Average time per hit: 0.12861000090321997 ms 


  if int(num) > N: # Hits:88572.0, Total execution time: 13962.161 ms, Average time per hit: 0.15763628460461543 ms 


    continue # Hits:59049.0, Total execution time: 4157.11 ms, Average time per hit: 0.07040102287930362 ms 


  if len(set(num)) == 3: # Hits:29523.0, Total execution time: 7661.702 ms, Average time per hit: 0.2595163770619517 ms 


    ans += 1 # Hits:26484.0, Total execution time: 2688.017 ms, Average time per hit: 0.10149588430750642 ms 


  for t in T: # Hits:118092.0, Total execution time: 10588.377 ms, Average time per hit: 0.08966210242861497 ms 


    que.append(num + t) # Hits:88569.0, Total execution time: 14451.775 ms, Average time per hit: 0.16316967562013798 ms 




print(ans) # Hits:1.0, Total execution time: 26.959 ms, Average time per hit: 26.959 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 44.125 ms, Average time per hit: 44.125 ms 


T = (""3"",""5"",""7"") # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




def dfs(x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  if x != """" and int(x) > N:

    return 0

  res = 0

  if len(set(x)) == 3:

    res = 1

  for t in T:

    res += dfs(x + t)

  return res

  

print((dfs(""""))) # Hits:1.0, Total execution time: 41048.333 ms, Average time per hit: 41048.333 ms 
",p03212,True
"import itertools # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


import bisect # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




lis = list(itertools.product('7530',repeat = 9)) # Hits:1.0, Total execution time: 10556.25 ms, Average time per hit: 10556.25 ms 


int_lis = list(map(int,list(map(''.join,lis)))) # Hits:1.0, Total execution time: 20151.208 ms, Average time per hit: 20151.208 ms 


str_lis = list(map(str,int_lis[:-16])) # Hits:1.0, Total execution time: 10958.917 ms, Average time per hit: 10958.917 ms 


lis = [] # Hits:1.0, Total execution time: 3340.5 ms, Average time per hit: 3340.5 ms 


for s in str_lis: # Hits:262129.0, Total execution time: 21165.223 ms, Average time per hit: 0.0807435384867756 ms 


    if ('7' in s) and ('5' in s) and ('3' in s) and ('0' not in s) : # Hits:262128.0, Total execution time: 39792.199 ms, Average time per hit: 0.1518044581273271 ms 


        lis.append(int(s)) # Hits:26484.0, Total execution time: 5005.769 ms, Average time per hit: 0.18901106328349193 ms 


print((bisect.bisect_right(sorted(lis),int(eval(input()))))) # Hits:1.0, Total execution time: 255.834 ms, Average time per hit: 255.834 ms 

","import itertools,bisect # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 




num_list = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def toInt(arr): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    num = int(''.join(arr))

for i in range(3,10): # Hits:8.0, Total execution time: 2.208 ms, Average time per hit: 0.276 ms 


    num_list += list(itertools.product('753',repeat=i) ) # Hits:7.0, Total execution time: 1259.292 ms, Average time per hit: 179.89885714285714 ms 


num = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for nm in num_list: # Hits:29512.0, Total execution time: 2446.792 ms, Average time per hit: 0.0829083762537273 ms 


    if '3' in nm and '5' in nm and '7' in nm: # Hits:29511.0, Total execution time: 4637.415 ms, Average time per hit: 0.1571419131849141 ms 


        num.append(int(''.join(nm))) # Hits:26484.0, Total execution time: 6641.904 ms, Average time per hit: 0.25078930675124605 ms 


num.sort() # Hits:1.0, Total execution time: 65.917 ms, Average time per hit: 65.917 ms 




print((bisect.bisect_right(num,int(eval(input()))))) # Hits:1.0, Total execution time: 113.084 ms, Average time per hit: 113.084 ms 

",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 72.042 ms, Average time per hit: 72.042 ms 




dp = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def dfs(x): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    if check(x):

        dp.append(x)



    if (x <= 10**9):

        dfs(10*x+3)

        dfs(10*x+5)

        dfs(10*x+7)



def check(x): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    set_x = set(list(str(x)))

    if set_x >= {'3','5','7'} and set_x <= {'3','5','7'}:

        return True





dfs(0) # Hits:1.0, Total execution time: 80394.0 ms, Average time per hit: 80394.0 ms 


print((len([item for item in dp if item <= N]))) # Hits:1.0, Total execution time: 5711.625 ms, Average time per hit: 5711.625 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 40.333 ms, Average time per hit: 40.333 ms 


dp = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def dfs(x): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    if len(set(str(x))) == 3:

        dp.append(x)



    if x < 10**9:

        dfs(x*10+3)

        dfs(x*10+5)

        dfs(x*10+7)



dfs(0) # Hits:1.0, Total execution time: 49206.166 ms, Average time per hit: 49206.166 ms 


print((len([item for item in dp if item <= N]))) # Hits:1.0, Total execution time: 5466.417 ms, Average time per hit: 5466.417 ms 

",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 53.459 ms, Average time per hit: 53.459 ms 


dp = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def dfs(x): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if len(set(str(x))) == 3:

        dp.append(x)



    if x < 10**9:

        dfs(x*10+3)

        dfs(x*10+5)

        dfs(x*10+7)



dfs(0) # Hits:1.0, Total execution time: 49158.209 ms, Average time per hit: 49158.209 ms 


print((len([item for item in dp if item <= N]))) # Hits:1.0, Total execution time: 5596.625 ms, Average time per hit: 5596.625 ms 

","from collections import deque # Hits:1.0, Total execution time: 77.834 ms, Average time per hit: 77.834 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 103.459 ms, Average time per hit: 103.459 ms 


q = deque() # Hits:1.0, Total execution time: 13.0 ms, Average time per hit: 13.0 ms 


q.append(0) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


memo = [] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


while q: # Hits:88574.0, Total execution time: 7190.09 ms, Average time per hit: 0.08117607875900378 ms 


    x = q.pop() # Hits:88573.0, Total execution time: 11179.636 ms, Average time per hit: 0.1262194573967236 ms 


    if x < 10**9: # Hits:88573.0, Total execution time: 7700.805 ms, Average time per hit: 0.08694303004301537 ms 


        if len(set(str(x))) == 3: # Hits:29524.0, Total execution time: 9329.173 ms, Average time per hit: 0.31598607912207016 ms 


            memo.append(x) # Hits:26484.0, Total execution time: 3450.568 ms, Average time per hit: 0.13028877813019182 ms 


        q.append(10*x+3) # Hits:29524.0, Total execution time: 4806.819 ms, Average time per hit: 0.1628105608996071 ms 


        q.append(10*x+5) # Hits:29524.0, Total execution time: 4987.846 ms, Average time per hit: 0.16894208101883215 ms 


        q.append(10*x+7) # Hits:29524.0, Total execution time: 4664.555 ms, Average time per hit: 0.1579919726324346 ms 




print((len([num for num in memo if num <= N]))) # Hits:1.0, Total execution time: 1837.125 ms, Average time per hit: 1837.125 ms 

",p03212,True
"from collections import deque

from collections import Counter

n=int(eval(input()))

if n<357:

    print((0))

    exit()

i=357

ans=0

while i<=n:

  c=Counter(str(i))

  if '3' in c and '5' in c and '7' in c:

    if c['3']+c['5']+c['7']==len(str(i)):

      ans+=1

  a=list(map(int,list(str(i))))

  a[-1]+=2

  j=-1

  while a[j]>7 and -j<len(a):

    a[j]=3

    a[j-1]+=2

    j-=1

  if a[0]>7:

    a[0]=33

  i=int(''.join(map(str,a)))



print(ans)
","n=int(eval(input())) # Hits:1.0, Total execution time: 53.583 ms, Average time per hit: 53.583 ms 


def dfs(s): # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


  if int(s)>n:

    return 0

  ret=1 if all(s.count(c) for c in '753') else 0

  for c in '753':

    ret+=dfs(s+c)

  return ret

print((dfs('0'))) # Hits:1.0, Total execution time: 55303.709 ms, Average time per hit: 55303.709 ms 
",p03212,False
"N = int(eval(input())) # Hits:1.0, Total execution time: 42.625 ms, Average time per hit: 42.625 ms 






def dfs(s):  # 文字列 s で始まる七五三数の個数 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if int(s) > N:

        return 0

    ret = 1 if all(s.count(c) > 0 for c in '753') else 0  # s 自体が七五三数なら+1

    for c in '753':

        ret += dfs(s + c)

    return ret





print((dfs('0')))  # 本当はdfs('')と書きたいがint(s)でエラーを吐かないように仕方なく # Hits:1.0, Total execution time: 56499.375 ms, Average time per hit: 56499.375 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 51.542 ms, Average time per hit: 51.542 ms 


num_list = [] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 






def dfs(num, add_num): # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


    num *= 10

    num += add_num



    if num > N:

        return



    num_list.append(num)



    dfs(num, 7)

    dfs(num, 5)

    dfs(num, 3)



    return num_list





dfs(3, 3) # Hits:1.0, Total execution time: 3210.208 ms, Average time per hit: 3210.208 ms 


dfs(3, 5) # Hits:1.0, Total execution time: 3251.375 ms, Average time per hit: 3251.375 ms 


dfs(3, 7) # Hits:1.0, Total execution time: 3367.917 ms, Average time per hit: 3367.917 ms 


dfs(5, 3) # Hits:1.0, Total execution time: 3413.791 ms, Average time per hit: 3413.791 ms 


dfs(5, 5) # Hits:1.0, Total execution time: 3376.958 ms, Average time per hit: 3376.958 ms 


dfs(5, 7) # Hits:1.0, Total execution time: 3385.292 ms, Average time per hit: 3385.292 ms 


dfs(7, 3) # Hits:1.0, Total execution time: 3377.375 ms, Average time per hit: 3377.375 ms 


dfs(7, 5) # Hits:1.0, Total execution time: 3391.625 ms, Average time per hit: 3391.625 ms 


dfs(7, 7) # Hits:1.0, Total execution time: 3475.375 ms, Average time per hit: 3475.375 ms 






ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


tmp = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


target = set(['7', '5', '3']) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


# print(num_list)

for n in num_list: # Hits:29521.0, Total execution time: 2436.878 ms, Average time per hit: 0.08254727143389452 ms 


    tmp = 0 # Hits:29520.0, Total execution time: 2071.755 ms, Average time per hit: 0.07018140243902439 ms 


    for t in target: # Hits:118080.0, Total execution time: 10211.01 ms, Average time per hit: 0.08647535569105691 ms 


        if t in str(n): # Hits:88560.0, Total execution time: 13970.7 ms, Average time per hit: 0.1577540650406504 ms 


            tmp += 1 # Hits:85500.0, Total execution time: 7716.67 ms, Average time per hit: 0.09025345029239766 ms 


    if tmp == 3: # Hits:29520.0, Total execution time: 2494.168 ms, Average time per hit: 0.08449078590785908 ms 


        ans += 1 # Hits:26484.0, Total execution time: 2623.129 ms, Average time per hit: 0.09904580123848362 ms 


print(ans) # Hits:1.0, Total execution time: 23.375 ms, Average time per hit: 23.375 ms 

",p03212,True
"#解説AC,9割写経

n = int(eval(input())) # Hits:1.0, Total execution time: 39.792 ms, Average time per hit: 39.792 ms 


def dfs(s): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if int(s)>n:

        return 0

    ret = 1 if all(s.count(c) > 0 for c in ""753"") else 0

    for c in ""753"":

        ret += dfs(s+c)

    return ret



print((dfs(""0""))) # Hits:1.0, Total execution time: 72268.959 ms, Average time per hit: 72268.959 ms 

","def dfs(n,a,s): # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


    global ans

    temp = int(s)

    if temp > n:

        return

    if ""7"" in s and ""5"" in s and ""3"" in s and n>=temp:

        ans += 1

    for i in a:

        dfs(n,a,s+i)

ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


a = [""7"",""5"",""3""] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 50.0 ms, Average time per hit: 50.0 ms 


s = ""0"" # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


dfs(n,a,s) # Hits:1.0, Total execution time: 21.291 ms, Average time per hit: 21.291 ms 


print(ans)",p03212,True
"import sys # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 


sys.setrecursionlimit(10**8) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


def ii(): return int(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


def mi(): return list(map(int, sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def li(): return list(map(int, sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


def dp2(ini, i, j): return [[ini]*i for _ in range(j)] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def dp3(ini, i, j, k): return [[[ini]*i for _ in range(j)] for _ in range(k)] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


import bisect #bisect.bisect_left(B, a) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


#from collections import defaultdict #d = defaultdict(int) d[key] += value

import itertools #list(accumulate(A)) # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


from collections import deque # Hits:1.0, Total execution time: 2.5 ms, Average time per hit: 2.5 ms 




N = ii() # Hits:1.0, Total execution time: 42.708 ms, Average time per hit: 42.708 ms 


que = deque([33, 35, 37, 53, 55, 57, 73, 75, 77]) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


ele = ['3', '5', '7'] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




ind = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while True: # Hits:9838.0, Total execution time: 691.04 ms, Average time per hit: 0.07024191908924578 ms 


    num = que[ind] * 10 # Hits:9838.0, Total execution time: 1971.989 ms, Average time per hit: 0.20044612726163855 ms 


    que.append(num + 3) # Hits:9838.0, Total execution time: 1293.758 ms, Average time per hit: 0.13150620044724537 ms 


    que.append(num + 5) # Hits:9838.0, Total execution time: 1251.115 ms, Average time per hit: 0.1271716812360236 ms 


    que.append(num + 7) # Hits:9838.0, Total execution time: 1292.113 ms, Average time per hit: 0.13133899166497257 ms 


    if len(str(num)) >= 10: # Hits:9838.0, Total execution time: 1709.693 ms, Average time per hit: 0.1737846106932303 ms 


        break # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ind += 1 # Hits:9837.0, Total execution time: 916.418 ms, Average time per hit: 0.0931603131035885 ms 




ind = bisect.bisect_right(que, N) # Hits:1.0, Total execution time: 3.25 ms, Average time per hit: 3.25 ms 




ele = ['3', '5', '7'] # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(ind): # Hits:29521.0, Total execution time: 2570.625 ms, Average time per hit: 0.08707784289150096 ms 


    tmp = str(que[i]) # Hits:29520.0, Total execution time: 8399.844 ms, Average time per hit: 0.2845475609756098 ms 


    for e in ele: # Hits:111992.0, Total execution time: 8969.497 ms, Average time per hit: 0.0800905153939567 ms 


        if e not in tmp: # Hits:85508.0, Total execution time: 7918.244 ms, Average time per hit: 0.09260237638583524 ms 


            cnt += 1 # Hits:3036.0, Total execution time: 274.697 ms, Average time per hit: 0.09047990777338603 ms 


            break # Hits:3036.0, Total execution time: 243.376 ms, Average time per hit: 0.08016337285902503 ms 




print((ind - cnt)) # Hits:1.0, Total execution time: 8.125 ms, Average time per hit: 8.125 ms 
","import sys # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


sys.setrecursionlimit(10**8) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


def ii(): return int(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


def mi(): return list(map(int, sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def li(): return list(map(int, sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def dp2(ini, i, j): return [[ini]*i for _ in range(j)] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def dp3(ini, i, j, k): return [[[ini]*i for _ in range(j)] for _ in range(k)] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


import bisect #bisect.bisect_left(B, a) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


#from collections import defaultdict #d = defaultdict(int) d[key] += value

import itertools #list(accumulate(A)) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


from collections import deque # Hits:1.0, Total execution time: 1.416 ms, Average time per hit: 1.416 ms 




N = ii() # Hits:1.0, Total execution time: 41.791 ms, Average time per hit: 41.791 ms 


ele = [3, 5, 7] # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


l = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




def dfs(num, flag3, flag5, flag7): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    #print(num, flag3, flag5, flag7)

    if num > N:

        return 

    if flag3 is flag5 is flag7 is True:

        l.append(num)

    num *= 10

    dfs(num+3, True, flag5, flag7)

    dfs(num+5, flag3, True, flag7)

    dfs(num+7, flag3, flag5, True)



dfs(0, False, False, False) # Hits:1.0, Total execution time: 26106.458 ms, Average time per hit: 26106.458 ms 


print((len(l))) # Hits:1.0, Total execution time: 7.958 ms, Average time per hit: 7.958 ms 

",p03212,True
"import sys # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


sys.setrecursionlimit(10**8) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


def ii(): return int(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


def mi(): return list(map(int, sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def li(): return list(map(int, sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


def li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


def dp2(ini, i, j): return [[ini]*i for _ in range(j)] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def dp3(ini, i, j, k): return [[[ini]*i for _ in range(j)] for _ in range(k)] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


#import bisect #bisect.bisect_left(B, a)

#from collections import defaultdict #d = defaultdict(int) d[key] += value

import itertools #list(accumulate(A)) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 




N = ii() # Hits:1.0, Total execution time: 45.75 ms, Average time per hit: 45.75 ms 


l = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for keta in range(3, 10): # Hits:8.0, Total execution time: 1.124 ms, Average time per hit: 0.1405 ms 


    for koho in itertools.product(['3', '5', '7'], repeat=keta): # Hits:29518.0, Total execution time: 2833.973 ms, Average time per hit: 0.09600830002032659 ms 


        l.append(int(''.join(koho))) # Hits:29511.0, Total execution time: 7069.012 ms, Average time per hit: 0.23953820609264342 ms 




l.sort() # Hits:1.0, Total execution time: 57.666 ms, Average time per hit: 57.666 ms 




ele = ['3', '5', '7'] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for num in l: # Hits:29512.0, Total execution time: 2450.655 ms, Average time per hit: 0.0830392721604771 ms 


    if num > N: # Hits:29511.0, Total execution time: 2501.973 ms, Average time per hit: 0.0847810308020738 ms 


        break # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    num = str(num) # Hits:29511.0, Total execution time: 4086.265 ms, Average time per hit: 0.13846582630205687 ms 


    if all(e in num for e in ele): # Hits:29511.0, Total execution time: 16542.47 ms, Average time per hit: 0.5605526752736267 ms 


        cnt += 1 # Hits:26484.0, Total execution time: 2522.706 ms, Average time per hit: 0.09525396465790667 ms 




print(cnt) # Hits:1.0, Total execution time: 6.709 ms, Average time per hit: 6.709 ms 
","import sys # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


sys.setrecursionlimit(10**8) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


def ii(): return int(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def mi(): return list(map(int, sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def li(): return list(map(int, sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def dp2(ini, i, j): return [[ini]*i for _ in range(j)] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def dp3(ini, i, j, k): return [[[ini]*i for _ in range(j)] for _ in range(k)] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


#import bisect #bisect.bisect_left(B, a)

#from collections import defaultdict #d = defaultdict(int) d[key] += value

#import itertools #list(accumulate(A))

#from collections import deque



## FlagをもたせたDFS



N = ii() # Hits:1.0, Total execution time: 24.5 ms, Average time per hit: 24.5 ms 


ele = [3, 5, 7] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


l = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




def dfs(num, flag): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if num > N:

        return 

    if flag == 7:

        l.append(num)

    num *= 10

    for i, e in enumerate(ele):

        dfs(num+e, flag | 1<<i)



dfs(0, 0) # Hits:1.0, Total execution time: 35086.666 ms, Average time per hit: 35086.666 ms 


print((len(l))) # Hits:1.0, Total execution time: 9.375 ms, Average time per hit: 9.375 ms 
",p03212,True
"# coding:utf-8



import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 






input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


INF = float('inf') # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


MOD = 10 ** 9 + 7 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 






def inpl(): return list(map(int, input().split())) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 






N = int(eval(input())) # Hits:1.0, Total execution time: 48.542 ms, Average time per hit: 48.542 ms 






def DFS(s): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if int(s) > N:

        return 0



    if all(s.count(c) > 0 for c in '753'):

        ret = 1

    else:

        ret = 0



    for c in '753':

        ret += DFS(s + c)

    return ret





print((DFS('0'))) # Hits:1.0, Total execution time: 58216.833 ms, Average time per hit: 58216.833 ms 

","# coding:utf-8



import itertools # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 43.375 ms, Average time per hit: 43.375 ms 




ans = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(2, len(str(N))): # Hits:8.0, Total execution time: 1.958 ms, Average time per hit: 0.24475 ms 


    for s in itertools.product('753', repeat=i+1): # Hits:29518.0, Total execution time: 2994.333 ms, Average time per hit: 0.10144091740632834 ms 


        if int(''.join(s)) > N: # Hits:29511.0, Total execution time: 6486.82 ms, Average time per hit: 0.21981024024939852 ms 


            continue # Hits:63.0, Total execution time: 4.54 ms, Average time per hit: 0.07206349206349207 ms 


        if all(s.count(c) > 0 for c in '753'): # Hits:29511.0, Total execution time: 24584.837 ms, Average time per hit: 0.8330736674460372 ms 


            ans += 1 # Hits:26484.0, Total execution time: 2545.312 ms, Average time per hit: 0.09610753662588734 ms 




print(ans) # Hits:1.0, Total execution time: 16.875 ms, Average time per hit: 16.875 ms 

",p03212,True
"from itertools import *

N = int(eval(input()))

ans = 0



for i in product(""0357"",repeat=10):

  j = """".join(i)

  if ""0"" not in str(int(j)) and ""3"" in j and ""5"" in j and ""7"" in j and int(j)<=N:

    ans+=1



print(ans)","from itertools import *

N = int(eval(input()))

S = []

ans = 0



for n in range(10):

  S+=list(product(""357"",repeat=n))



for s in S:

  if len(set(s))==3 and int("""".join(s))<=N:

    ans+=1



print(ans)",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 64.791 ms, Average time per hit: 64.791 ms 


from itertools import product # Hits:1.0, Total execution time: 3.292 ms, Average time per hit: 3.292 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for n in range(3,10): # Hits:8.0, Total execution time: 1.833 ms, Average time per hit: 0.229125 ms 


    for ptn in product('753', repeat=n): # Hits:29518.0, Total execution time: 3311.713 ms, Average time per hit: 0.11219300088081849 ms 


        if '7' not in ptn: continue # Hits:29511.0, Total execution time: 2914.982 ms, Average time per hit: 0.09877611737996002 ms 


        if '5' not in ptn: continue # Hits:28495.0, Total execution time: 2859.555 ms, Average time per hit: 0.1003528689243727 ms 


        if '3' not in ptn: continue # Hits:27486.0, Total execution time: 2690.009 ms, Average time per hit: 0.09786833296951175 ms 


        v = int(''.join(ptn)) # Hits:26484.0, Total execution time: 5394.2 ms, Average time per hit: 0.20367769219151186 ms 


        if v <= N: # Hits:26484.0, Total execution time: 2279.377 ms, Average time per hit: 0.08606619090771787 ms 


            ans += 1 # Hits:26484.0, Total execution time: 2478.502 ms, Average time per hit: 0.09358488143784927 ms 


print(ans) # Hits:1.0, Total execution time: 10.0 ms, Average time per hit: 10.0 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 41.0 ms, Average time per hit: 41.0 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


import itertools # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


for i in range(1,10): # Hits:10.0, Total execution time: 1.126 ms, Average time per hit: 0.11259999999999999 ms 


    for ptn in itertools.product('753',repeat=i): # Hits:29532.0, Total execution time: 3202.623 ms, Average time per hit: 0.10844585534335635 ms 


        s = ''.join(ptn) # Hits:29523.0, Total execution time: 4096.746 ms, Average time per hit: 0.1387645564475155 ms 


        if int(s) > N: continue # Hits:29523.0, Total execution time: 4156.212 ms, Average time per hit: 0.14077878264404023 ms 


        if '3' not in s: continue # Hits:29523.0, Total execution time: 2630.975 ms, Average time per hit: 0.0891161128611591 ms 


        if '5' not in s: continue # Hits:28501.0, Total execution time: 2469.972 ms, Average time per hit: 0.0866626434160205 ms 


        if '7' not in s: continue # Hits:27488.0, Total execution time: 2372.698 ms, Average time per hit: 0.08631759313154831 ms 


        ans += 1 # Hits:26484.0, Total execution time: 2400.99 ms, Average time per hit: 0.09065813321250565 ms 


print(ans) # Hits:1.0, Total execution time: 9.125 ms, Average time per hit: 9.125 ms 
",p03212,True
"# -*- coding: utf-8 -*-

""""""

C - 755



""""""

def gen_357(): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    def conv(n):

        res = []

        while n:

            n, r = divmod(n, 4)

            res.append(str(str(r)))

        if not res:

            res = ['0']

        return ''.join(res[::-1]).translate(str.maketrans('0123', '0357'))



    n = 0

    while True:

        t = conv(n)

        while '0' in t or len(set(list(t))) != 3:

            n += 1

            t = conv(n)

        yield t

        n += 1





def solve(n): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    ans = 0

    g = gen_357()

    while True:

        t = next(g)

        if int(t) > n:

            break

        ans += 1

    return ans





n = int(eval(input())) # Hits:1.0, Total execution time: 41.417 ms, Average time per hit: 41.417 ms 


ans = solve(n) # Hits:1.0, Total execution time: 1145803.583 ms, Average time per hit: 1145803.583 ms 


print(ans) # Hits:1.0, Total execution time: 25.375 ms, Average time per hit: 25.375 ms 

","# -*- coding: utf-8 -*-

""""""

C - 755

TLE

""""""

def gen_357(): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    def conv(n):

        res = []

        while n:

            n, r = divmod(n, 4)

            if r == 0 and n:

                return '0'

            res.append(str(str(r)))

        if not res:

            res = ['0']

        return ''.join(res[::-1]).translate(str.maketrans('0123', '0357'))



    n = 0

    while True:

        t = conv(n)

        while '0' in t or len(set(list(t))) != 3:

            n += 1

            t = conv(n)

        yield t

        n += 1





def solve(n): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    ans = 0

    g = gen_357()

    while True:

        t = next(g)

        if int(t) > n:

            break

        ans += 1

    return ans





n = int(eval(input())) # Hits:1.0, Total execution time: 46.541 ms, Average time per hit: 46.541 ms 


ans = solve(n) # Hits:1.0, Total execution time: 460084.667 ms, Average time per hit: 460084.667 ms 


print(ans) # Hits:1.0, Total execution time: 9.167 ms, Average time per hit: 9.167 ms 

",p03212,True
"n = int(eval(input()))

sitigosan_list = [3, 5, 7]

count = 0



if n < 357:

    print((0))

    exit()



def make_753(num):

    b = str(num) + '3'

    c = str(num) + '5'

    d = str(num) + '7'

    sitigosan_list.append(int(b))

    sitigosan_list.append(int(c))

    sitigosan_list.append(int(d))





for i in sitigosan_list:

    make_753(i)

    if max(sitigosan_list) > n:

        break



for j in sitigosan_list:

    if '3' in str(j) and '5' in str(j) and '7' in str(j) and j <= n:

        count += 1



print(count)
",,p03212,False
"from itertools import product # Hits:1.0, Total execution time: 2.458 ms, Average time per hit: 2.458 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 72.583 ms, Average time per hit: 72.583 ms 


A = set() # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


for x in product('753_', repeat=9): # Hits:262145.0, Total execution time: 26823.279 ms, Average time per hit: 0.10232229872780331 ms 


    s = ''.join(x).replace('_', '') # Hits:262144.0, Total execution time: 60285.81 ms, Average time per hit: 0.22997211456298827 ms 


    if all(d in s for d in '753') and int(s) <= n: # Hits:262144.0, Total execution time: 168627.522 ms, Average time per hit: 0.6432629470825195 ms 


        A.add(s) # Hits:204630.0, Total execution time: 32612.981 ms, Average time per hit: 0.15937536529345647 ms 


print((len(A))) # Hits:1.0, Total execution time: 34.75 ms, Average time per hit: 34.75 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 58.75 ms, Average time per hit: 58.75 ms 


B = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def dfs(A): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


  x = int(''.join(A))

  if x <= n:

    if '7' in A and '5' in A and '3' in A:

      B.append(x)

    dfs(A + ['7'])

    dfs(A + ['5'])

    dfs(A + ['3'])



dfs(['0']) # Hits:1.0, Total execution time: 52380.292 ms, Average time per hit: 52380.292 ms 


print((len(B))) # Hits:1.0, Total execution time: 26.292 ms, Average time per hit: 26.292 ms 
",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 32.709 ms, Average time per hit: 32.709 ms 






def dfs(s): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if int(s) > N:

        return 0

    ret = 1 if all(s.count(c) > 0 for c in ""753"") else 0

    for c in ""753"":

        ret += dfs(s + c)

    return ret



print((dfs(""0""))) # Hits:1.0, Total execution time: 58239.25 ms, Average time per hit: 58239.25 ms 
","import itertools # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 30.792 ms, Average time per hit: 30.792 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(3, len(str(N)) + 1): # Hits:8.0, Total execution time: 2.459 ms, Average time per hit: 0.307375 ms 


    cand = list(["""".join(x) for x in itertools.product(""357"", repeat=i)]) # Hits:7.0, Total execution time: 3873.167 ms, Average time per hit: 553.3095714285715 ms 


    for c in cand: # Hits:29518.0, Total execution time: 2365.6 ms, Average time per hit: 0.08014093095738194 ms 


        if int(c) > N: # Hits:29511.0, Total execution time: 4242.294 ms, Average time per hit: 0.14375297346752058 ms 


            continue # Hits:63.0, Total execution time: 4.462 ms, Average time per hit: 0.07082539682539682 ms 


        elif all(c.count(s) > 0 for s in ""357""): # Hits:29511.0, Total execution time: 23620.233 ms, Average time per hit: 0.8003874148622547 ms 


            ans += 1 # Hits:26484.0, Total execution time: 2584.786 ms, Average time per hit: 0.09759802144691135 ms 




print(ans) # Hits:1.0, Total execution time: 25.958 ms, Average time per hit: 25.958 ms 

",p03212,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 49.208 ms, Average time per hit: 49.208 ms 




def squ(x): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    if x == 0:

        return '0'

    a = """"

    while x != 0:

        x, mod = divmod(x, 4)

        a += str(mod)

    return a[::-1]





ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for x in range(10**6): # Hits:349526.0, Total execution time: 30437.53 ms, Average time per hit: 0.08708230575121736 ms 


    x_squ = squ(x) # Hits:349526.0, Total execution time: 1018081.106 ms, Average time per hit: 2.912747852806372 ms 


    x_str = x_squ.replace('3', '7').replace('2', '5').replace('1', '3') # Hits:349526.0, Total execution time: 109682.479 ms, Average time per hit: 0.31380349101354404 ms 




    if ""0"" in x_str: # Hits:349526.0, Total execution time: 30612.797 ms, Average time per hit: 0.08758374770403346 ms 


        continue # Hits:320002.0, Total execution time: 22134.665 ms, Average time per hit: 0.0691703958100262 ms 




    if int(x_str) > n: # Hits:29524.0, Total execution time: 4635.908 ms, Average time per hit: 0.15702167727950142 ms 


        break # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 




    if len(set(x_str)) != 3: # Hits:29523.0, Total execution time: 7419.557 ms, Average time per hit: 0.2513144666869898 ms 


        continue # Hits:3039.0, Total execution time: 214.091 ms, Average time per hit: 0.0704478446857519 ms 




    ans += 1 # Hits:26484.0, Total execution time: 2697.15 ms, Average time per hit: 0.10184073402809243 ms 




print(ans) # Hits:1.0, Total execution time: 59.541 ms, Average time per hit: 59.541 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 29.125 ms, Average time per hit: 29.125 ms 




def dfs(x): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if int('0'+x) > N:

        return 0



    retval = 1 if len(set(x)) == 3 else 0

    for c in '753':

        retval += dfs(x + c)

    return retval





print((dfs(''))) # Hits:1.0, Total execution time: 40613.042 ms, Average time per hit: 40613.042 ms 
",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 39.167 ms, Average time per hit: 39.167 ms 




def dfs(x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if int('0'+x) > N:

        return 0



    retval = 1 if len(set(x)) == 3 else 0

    for c in '753':

        retval += dfs(x + c)

    return retval





print((dfs(''))) # Hits:1.0, Total execution time: 40470.792 ms, Average time per hit: 40470.792 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 42.125 ms, Average time per hit: 42.125 ms 


like_753 = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 






def dfs(x): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    if n < x:

        return 0

    else:

        like_753.append(x)

        dfs(10*x+3)

        dfs(10*x+5)

        dfs(10*x+7)





dfs(3) # Hits:1.0, Total execution time: 7674.083 ms, Average time per hit: 7674.083 ms 


dfs(5) # Hits:1.0, Total execution time: 7734.667 ms, Average time per hit: 7734.667 ms 


dfs(7) # Hits:1.0, Total execution time: 7650.666 ms, Average time per hit: 7650.666 ms 




ls_753 = [x for x in like_753 if len(set(str(x))) == 3] # Hits:1.0, Total execution time: 8019.75 ms, Average time per hit: 8019.75 ms 


print((len(ls_753))) # Hits:1.0, Total execution time: 7.125 ms, Average time per hit: 7.125 ms 

",p03212,True
"def resolve(): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    from collections import deque

    n = int(eval(input()))

    ans = 0

    num = deque([3,5,7])

    while num[0] <= n:

        test = num.popleft()

        num.append(test * 10 + 3)

        num.append(test * 10 + 5)

        num.append(test * 10 + 7)

        if list(set([int(x) for x in list(str(test))])) == [3,5,7]:

            ans += 1

    print(ans)



resolve() # Hits:1.0, Total execution time: 58803.041 ms, Average time per hit: 58803.041 ms 
","def resolve(): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    from collections import deque



    def checker(n):

        n = str(n)

        OK3 = False

        OK5 = False

        OK7 = False

        for i in n:

            if i == ""3"":

                OK3 = True

            elif i== ""5"":

                OK5 = True

            elif i == ""7"":

                OK7 = True

        if OK3 and OK5 and OK7:

            return True

        else:

            return False



    n = int(eval(input()))

    if n < 357:

        print((0))

    else:

        ans = 0

        nxt = [3, 5, 7]

        nxt = deque(nxt)

        OK = True

        while OK:

            a = nxt.popleft()

            if a > n:

                break

            nxt.append(a*10+3)

            nxt.append(a * 10 + 5)

            nxt.append(a * 10 + 7)

            if checker(a):

                ans += 1

        print(ans)

resolve() # Hits:1.0, Total execution time: 69106.333 ms, Average time per hit: 69106.333 ms 
",p03212,True
"import copy # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 




word = ""753"" # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 






def dfs(n): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    ret = 0



    num = 0 if not n else int(''.join(n))



    if N < num:

        return ret



    ret += 1 if len(set(''.join(n)) & set(word)) == len(word) else 0



    for c in word:

        tmp = copy.deepcopy(n)

        n.append(c)

        ret += dfs(n)

        n = tmp



    return ret





N = int(eval(input())) # Hits:1.0, Total execution time: 46.125 ms, Average time per hit: 46.125 ms 




print((dfs([]))) # Hits:1.0, Total execution time: 860822.459 ms, Average time per hit: 860822.459 ms 

","ans = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 






def dfs(n, f1, f2, f3): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if N < n:

        return



    global ans

    ans += 1 if f1 & f2 & f3 else 0



    dfs(n * 10 + 7, True, f2, f3)

    dfs(n * 10 + 5, f1, True, f3)

    dfs(n * 10 + 3, f1, f2, True)





N = int(eval(input())) # Hits:1.0, Total execution time: 44.166 ms, Average time per hit: 44.166 ms 




dfs(0, False, False, False) # Hits:1.0, Total execution time: 2.375 ms, Average time per hit: 2.375 ms 




print(ans)
",p03212,True
"def f(n, f1, f2, f3): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    ret = 0



    def dfs(n, f1, f2, f3):

        if N < n:

            return 0



        nonlocal ret

        ret += 1 if f1 and f2 and f3 else 0



        dfs(n * 10 + 7, True, f2, f3)

        dfs(n * 10 + 5, f1, True, f3)

        dfs(n * 10 + 3, f1, f2, True)



        return ret



    return dfs(n, f1, f2, f3)





N = int(eval(input())) # Hits:1.0, Total execution time: 43.625 ms, Average time per hit: 43.625 ms 




print((f(0, False, False, False))) # Hits:1.0, Total execution time: 25529.083 ms, Average time per hit: 25529.083 ms 

","def dfs(ret, cur, f1, f2, f3): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if N < cur:

        return ret



    ret += 1 if f1 and f2 and f3 else 0



    ret = dfs(ret, cur * 10 + 7, True, f2, f3)

    ret = dfs(ret, cur * 10 + 5, f1, True, f3)

    ret = dfs(ret, cur * 10 + 3, f1, f2, True)



    return ret





N = int(eval(input())) # Hits:1.0, Total execution time: 43.875 ms, Average time per hit: 43.875 ms 




print((dfs(0, 0, False, False, False))) # Hits:1.0, Total execution time: 26418.0 ms, Average time per hit: 26418.0 ms 

",p03212,True
"# coding: utf-8

# Your code here!

N=int(eval(input())) # Hits:1.0, Total execution time: 45.667 ms, Average time per hit: 45.667 ms 




l=[3,5,7] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


l_ans=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


l_ans+=l # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




if N<357: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    print((0))

else:

    for i in range(8): # Hits:9.0, Total execution time: 1.29 ms, Average time per hit: 0.14333333333333334 ms 


        temp=[] # Hits:8.0, Total execution time: 5.459 ms, Average time per hit: 0.682375 ms 


        for item in l: # Hits:9848.0, Total execution time: 754.963 ms, Average time per hit: 0.0766615556458164 ms 


            temp.append(item+3*10**(i+1)) # Hits:9840.0, Total execution time: 1968.911 ms, Average time per hit: 0.200092581300813 ms 


            temp.append(item+5*10**(i+1)) # Hits:9840.0, Total execution time: 1926.272 ms, Average time per hit: 0.19575934959349592 ms 


            temp.append(item+7*10**(i+1)) # Hits:9840.0, Total execution time: 2007.272 ms, Average time per hit: 0.20399105691056912 ms 


        l.clear() # Hits:8.0, Total execution time: 9.498 ms, Average time per hit: 1.18725 ms 


        l+=temp # Hits:8.0, Total execution time: 18.917 ms, Average time per hit: 2.364625 ms 


        l_ans+=temp # Hits:8.0, Total execution time: 24.334 ms, Average time per hit: 3.04175 ms 


    l_ans.sort() # Hits:1.0, Total execution time: 825.375 ms, Average time per hit: 825.375 ms 


    

    count=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    for i in range(len(l_ans)): # Hits:29524.0, Total execution time: 2528.926 ms, Average time per hit: 0.08565661834439778 ms 


        if l_ans[i]>N: # Hits:29523.0, Total execution time: 2910.141 ms, Average time per hit: 0.09857199471598414 ms 


            break # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


        elif  (""3"" in str(l_ans[i]) and ""5"" in str(l_ans[i]) and ""7"" in str(l_ans[i]))==False: # Hits:29523.0, Total execution time: 11023.606 ms, Average time per hit: 0.37339044135081123 ms 


            pass # Hits:3039.0, Total execution time: 200.519 ms, Average time per hit: 0.06598190194142811 ms 


        else:

            count+=1 # Hits:26484.0, Total execution time: 2591.263 ms, Average time per hit: 0.0978425842017822 ms 


            

    print(count) # Hits:1.0, Total execution time: 6.292 ms, Average time per hit: 6.292 ms 
","# coding: utf-8

# Your code here!

N=int(eval(input())) # Hits:1.0, Total execution time: 47.625 ms, Average time per hit: 47.625 ms 






cand=[] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


def saiki(num,arc): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if ""3"" in arc and ""5"" in arc and ""7"" in arc:

        cand.append(arc)

    if num==len(str(N)):

        return 0

    else:

        for item in [""3"",""5"",""7""]:

            saiki(num+1,arc+[item])

    return 0





saiki(0,[]) # Hits:1.0, Total execution time: 54226.5 ms, Average time per hit: 54226.5 ms 




ans=0 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for item in cand: # Hits:26485.0, Total execution time: 1979.092 ms, Average time per hit: 0.07472501415895791 ms 


    if N>=((int("""".join(item)))): # Hits:26484.0, Total execution time: 5533.468 ms, Average time per hit: 0.2089362634043196 ms 


        ans+=1 # Hits:26484.0, Total execution time: 2436.271 ms, Average time per hit: 0.09199029602779037 ms 


        

print(ans) # Hits:1.0, Total execution time: 15.667 ms, Average time per hit: 15.667 ms 


    

    ",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 38.791 ms, Average time per hit: 38.791 ms 


M = len(str(N)) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




def nsin(X,n): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if(int(X/n)):

        return nsin(int(X/n),n)+str(X%n)

    return str(X%n)



res = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for m in range(3,M+1): # Hits:8.0, Total execution time: 1.207 ms, Average time per hit: 0.150875 ms 


    for i in range(3 ** m): # Hits:29518.0, Total execution time: 2686.261 ms, Average time per hit: 0.09100416694898028 ms 


        tri = nsin(i, 3).zfill(m) # Hits:29511.0, Total execution time: 92457.71 ms, Average time per hit: 3.132991426925553 ms 


        nl = [] # Hits:29511.0, Total execution time: 2721.827 ms, Average time per hit: 0.09223093083934804 ms 


        if tri.count('0') > 0 and tri.count('1') > 0 and tri.count('2') > 0: # Hits:29511.0, Total execution time: 11235.275 ms, Average time per hit: 0.3807148182033818 ms 


            for j in range(m): # Hits:252996.0, Total execution time: 23858.904 ms, Average time per hit: 0.09430545937485178 ms 


                if tri[j] == '0': # Hits:226512.0, Total execution time: 23585.341 ms, Average time per hit: 0.1041240243342516 ms 


                    nl.append('3') # Hits:75504.0, Total execution time: 9790.054 ms, Average time per hit: 0.1296627198559017 ms 


                elif tri[j] == '1': # Hits:151008.0, Total execution time: 15656.45 ms, Average time per hit: 0.10367960637847001 ms 


                    nl.append('5') # Hits:75504.0, Total execution time: 9740.669 ms, Average time per hit: 0.12900864854842126 ms 


                else:

                    nl.append('7') # Hits:75504.0, Total execution time: 9783.899 ms, Average time per hit: 0.12958120099597373 ms 


            x = ''.join(nl) # Hits:26484.0, Total execution time: 3802.842 ms, Average time per hit: 0.1435901676483915 ms 


            if int(x) <= N: # Hits:26484.0, Total execution time: 3969.228 ms, Average time per hit: 0.14987267784322608 ms 


                res += 1 # Hits:26484.0, Total execution time: 2686.819 ms, Average time per hit: 0.10145064944872376 ms 




print(res) # Hits:1.0, Total execution time: 24.459 ms, Average time per hit: 24.459 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 40.75 ms, Average time per hit: 40.75 ms 


M = len(str(N)) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


res = [0] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def dfs(x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    # 長さがMになったら終了

    if len(x) > M:

        return

    if x.count('3') > 0 and x.count('5') > 0 and x.count('7') > 0 and int(x) <= N:

        res[0] += 1

    dfs(x + '3')

    dfs(x + '5')

    dfs(x + '7')

    return



dfs('3') # Hits:1.0, Total execution time: 12659.583 ms, Average time per hit: 12659.583 ms 


dfs('5') # Hits:1.0, Total execution time: 12724.041 ms, Average time per hit: 12724.041 ms 


dfs('7') # Hits:1.0, Total execution time: 12464.458 ms, Average time per hit: 12464.458 ms 


print((res[0]))     # Hits:1.0, Total execution time: 5.709 ms, Average time per hit: 5.709 ms 


    ",p03212,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 46.042 ms, Average time per hit: 46.042 ms 




def tobase4(num): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    ans = ''

    while num>0:

        ans += str(num%4)

        num //= 4

    return ans[::-1]



def check(s): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    if '1' in s and '2' in s and '3' in s and '0' not in s:

        return True

    return False



def conv(s): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    s = s.replace('2','5')

    s = s.replace('3','7')

    s = s.replace('1','3')

    return s



res = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(10**9): # Hits:349532.0, Total execution time: 30740.995 ms, Average time per hit: 0.08794901468248974 ms 


    s = tobase4(i) # Hits:349532.0, Total execution time: 850614.448 ms, Average time per hit: 2.433581039790348 ms 


    if not check(s): # Hits:349532.0, Total execution time: 107655.948 ms, Average time per hit: 0.308000263209091 ms 


        continue # Hits:323047.0, Total execution time: 22250.642 ms, Average time per hit: 0.06887741412240324 ms 


    s = conv(s) # Hits:26485.0, Total execution time: 15022.297 ms, Average time per hit: 0.5672001887861053 ms 


    s = int(s) # Hits:26485.0, Total execution time: 3596.881 ms, Average time per hit: 0.13580823107419296 ms 


    #print(s)

    if n < s: # Hits:26485.0, Total execution time: 2421.43 ms, Average time per hit: 0.09142646781196903 ms 


        break # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    #print(s)

    res += 1 # Hits:26484.0, Total execution time: 2508.594 ms, Average time per hit: 0.09472111463525147 ms 


print(res) # Hits:1.0, Total execution time: 48.209 ms, Average time per hit: 48.209 ms 

","def dfs(N,s,a,b,c): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    if int(s)>N:

        return 0

    ret  = dfs(N,s+'3',True,b,c)

    ret += dfs(N,s+'5',a,True,c)

    ret += dfs(N,s+'7',a,b,True)

    return ret + (a and b and c)



print((dfs(int(eval(input())),'0',False,False,False))) # Hits:1.0, Total execution time: 29926.166 ms, Average time per hit: 29926.166 ms 

",p03212,True
"N = int(eval(input()))

array = []

for i in range(10**9):

    res = ''

    digit = 0

    while i:

        res = '0357'[i % 4] + res

        i //= 4

    if '3' in res and '5' in res and '7' in res and '0' not in res:

        res = int(res)

        if res > 10 ** 9:

            break

        array += [res]

array += [10**9]

for i in range(len(array)):

    if array[i] > N:

        print(i)

        exit()
","N = int(eval(input())) # Hits:1.0, Total execution time: 49.458 ms, Average time per hit: 49.458 ms 






def resol_a(x, a): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if x < 10:

        return int(x >= a)

    d = 0

    while x > 10**(d+1):

        d += 1

    f = x // 10 ** d

    r = x % 10 ** d

    c = resol_a(r, a)

    b = resol_a(10 ** d - 1, a)

    bb = resol_a(10 ** (d - 1), a)

    if f > a:

        return b + 1

    elif f == a:

        return b + c - bb

    else:

        return b





def resol_ab(x, a, b): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    d = 0

    if x < 100:

        return (x >= 10 * b + a) + (x >= 10 * a + b)

    while x > 10 ** (d + 1):

        d += 1

    f = x // 10 ** d

    r = x % 10 ** d

    if f > a:

        return resol_ab((a+1)*10**d-1, a, b)

    elif f == a:

        return resol_ab(a * 10 ** d - 1, a, b) + max(resol_ab(r, a, b) - resol_ab(10 **

                                                                                  (d - 1), a, b), 0) + max(resol_a(r, b) - resol_a(10 ** (d - 1), b), 0)

    elif f > b:

        return resol_ab((b+1)*10 ** d - 1, a, b)

    elif f == b:

        return resol_ab(b * 10 ** d - 1, a, b) + max(resol_ab(r, a, b) - resol_ab(10 **

                                                                                  (d - 1), a, b), 0) + max(resol_a(r, a) - resol_a(10 ** (d - 1), a), 0)

    else:

        return resol_ab(10 ** d - 1, a, b)





def resol_abc(x, a, b, c): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    if x < 1000:

        A, B, C = str(a), str(b), str(c)

        return sum([x >= int(_) for _ in [A+B+C, A+C+B, B+A+C, B+C+A, C+A+B, C+B+A]])

    d = 0

    while x > 10 ** (d + 1):

        d += 1

    f = x // 10 ** d

    r = x % 10 ** d

    if f > a:

        return resol_abc((a+1)*10**d-1, a, b, c)

    elif f == a:

        return resol_abc(a*10**d-1, a, b, c)+max(resol_abc(r, a, b, c)-resol_abc(10**(d-1), a, b, c), 0)+max(resol_ab(r, b, c)-resol_ab(10**(d-1), b, c), 0)

    elif f > b:

        return resol_abc((b+1)*10**d-1, a, b, c)

    elif f == b:

        return resol_abc(b*10**d-1, a, b, c)+max(resol_abc(r, a, b, c)-resol_abc(10**(d-1), a, b, c), 0)+max(resol_ab(r, a, c)-resol_ab(10**(d-1), a, c), 0)

    elif f > c:

        return resol_abc((c+1)*10**d-1, a, b, c)

    elif f == c:

        return resol_abc(c*10**d-1, a, b, c)+max(resol_abc(r, a, b, c)-resol_abc(10**(d-1), a, b, c), 0)+max(resol_ab(r, a, b)-resol_ab(10**(d-1), a, b), 0)

    else:

        return resol_abc(10**d-1, a, b, c)





print((resol_abc(N, 7, 5, 3))) # Hits:1.0, Total execution time: 472308.041 ms, Average time per hit: 472308.041 ms 
",p03212,False
"N = int(eval(input())) # Hits:1.0, Total execution time: 43.75 ms, Average time per hit: 43.75 ms 






def resol_a(x, a): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if x < 10:

        return int(x >= a)

    d = 0

    while x > 10**(d+1):

        d += 1

    f = x // 10 ** d

    r = x % 10 ** d

    c = resol_a(r, a)

    b = resol_a(10 ** d - 1, a)

    bb = resol_a(10 ** (d - 1), a)

    if f > a:

        return b + 1

    elif f == a:

        return b + c - bb

    else:

        return b





def resol_ab(x, a, b): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    d = 0

    if x < 100:

        return (x >= 10 * b + a) + (x >= 10 * a + b)

    while x > 10 ** (d + 1):

        d += 1

    f = x // 10 ** d

    r = x % 10 ** d

    if f > a:

        return resol_ab((a+1)*10**d-1, a, b)

    elif f == a:

        return resol_ab(a * 10 ** d - 1, a, b) + max(resol_ab(r, a, b) - resol_ab(10 **

                                                                                  (d - 1), a, b), 0) + max(resol_a(r, b) - resol_a(10 ** (d - 1), b), 0)

    elif f > b:

        return resol_ab((b+1)*10 ** d - 1, a, b)

    elif f == b:

        return resol_ab(b * 10 ** d - 1, a, b) + max(resol_ab(r, a, b) - resol_ab(10 **

                                                                                  (d - 1), a, b), 0) + max(resol_a(r, a) - resol_a(10 ** (d - 1), a), 0)

    else:

        return resol_ab(10 ** d - 1, a, b)





def resol_abc(x, a, b, c): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    if x < 1000:

        A, B, C = str(a), str(b), str(c)

        return sum([x >= int(_) for _ in [A+B+C, A+C+B, B+A+C, B+C+A, C+A+B, C+B+A]])

    d = 0

    while x > 10 ** (d + 1):

        d += 1

    f = x // 10 ** d

    r = x % 10 ** d

    if f > a:

        return resol_abc((a+1)*10**d-1, a, b, c)

    elif f == a:

        return resol_abc(a*10**d-1, a, b, c)+max(resol_abc(r, a, b, c)-resol_abc(10**(d-1), a, b, c), 0)+max(resol_ab(r, b, c)-resol_ab(10**(d-1), b, c), 0)

    elif f > b:

        return resol_abc((b+1)*10**d-1, a, b, c)

    elif f == b:

        return resol_abc(b*10**d-1, a, b, c)+max(resol_abc(r, a, b, c)-resol_abc(10**(d-1), a, b, c), 0)+max(resol_ab(r, a, c)-resol_ab(10**(d-1), a, c), 0)

    elif f > c:

        return resol_abc((c+1)*10**d-1, a, b, c)

    elif f == c:

        return resol_abc(c*10**d-1, a, b, c)+max(resol_abc(r, a, b, c)-resol_abc(10**(d-1), a, b, c), 0)+max(resol_ab(r, a, b)-resol_ab(10**(d-1), a, b), 0)

    else:

        return resol_abc(10**d-1, a, b, c)





print((resol_abc(N, 7, 5, 3))) # Hits:1.0, Total execution time: 479553.75 ms, Average time per hit: 479553.75 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 45.542 ms, Average time per hit: 45.542 ms 






def dfs(x, a, b, c): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if x > N:

        return 0

    else:

        return all([a, b, c]) + dfs(x * 10 + 7, a, b, 1) + dfs(x * 10 + 5, a, 1, c) + dfs(x * 10 + 3, 1, b, c)





print((dfs(0, 0, 0, 0))) # Hits:1.0, Total execution time: 23259.083 ms, Average time per hit: 23259.083 ms 
",p03212,True
"import copy

n = int(eval(input()))

ans = 0

for i in range(2,10):

  list = [""3"",""5"",""7""]

  for j in range(i):

    dlist = []

    for k in list:

      for l in (""3"",""5"",""7""):

        dlist.append(k+l)

    list = copy.copy(dlist)

  for m in list:

    if ""3"" in m and ""5"" in m and ""7"" in m:

      if int(m) <= n:

        ans +=1

      else:

        print(ans)

        exit()","n = int(eval(input())) # Hits:1.0, Total execution time: 54.0 ms, Average time per hit: 54.0 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def dfs(m): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


  global ans

  if m > n:

    return

  sm = str(m)

  if ""3"" in sm and ""5"" in sm and ""7"" in sm:

    ans += 1

  dfs(m*10+3)

  dfs(m*10+5)

  dfs(m*10+7)

dfs(0) # Hits:1.0, Total execution time: 17.917 ms, Average time per hit: 17.917 ms 


print(ans)",p03212,False
"def is_753(n): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    n = str(n)

    return(n.count(""7"") >= 1 and n.count(""3"") >= 1 and n.count(""5"") >= 1)





n = int(eval(input())) # Hits:1.0, Total execution time: 49.0 ms, Average time per hit: 49.0 ms 






v = [7, 5, 3] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


li = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


prev = [7, 5, 3] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(9): # Hits:10.0, Total execution time: 3.749 ms, Average time per hit: 0.37489999999999996 ms 


    tmp = [] # Hits:9.0, Total execution time: 0.667 ms, Average time per hit: 0.07411111111111111 ms 


    for j in v: # Hits:36.0, Total execution time: 2.875 ms, Average time per hit: 0.07986111111111112 ms 


        for k in prev: # Hits:88596.0, Total execution time: 6750.006 ms, Average time per hit: 0.07618860896654477 ms 


            tmp.append(k * 10 + j) # Hits:88569.0, Total execution time: 13393.277 ms, Average time per hit: 0.15121856405740158 ms 


    prev = tmp # Hits:9.0, Total execution time: 17.084 ms, Average time per hit: 1.8982222222222223 ms 


    li = li + prev # Hits:9.0, Total execution time: 442.71 ms, Average time per hit: 49.19 ms 




li = [x for x in li if is_753(x) and x <= n] # Hits:1.0, Total execution time: 69774.792 ms, Average time per hit: 69774.792 ms 




print((len(li))) # Hits:1.0, Total execution time: 31.125 ms, Average time per hit: 31.125 ms 
","import sys # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


sys.setrecursionlimit(10**6) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 47.958 ms, Average time per hit: 47.958 ms 


V = [3, 5, 7] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




li = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 






def rec(curr, use): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if curr > N:

        return

    if use == 0b111:

        li.append(curr)

    for i, b in enumerate(V):

        rec(curr * 10 + b, use | max(1, i * 2))





rec(0, 0) # Hits:1.0, Total execution time: 43100.5 ms, Average time per hit: 43100.5 ms 




print((len(li))) # Hits:1.0, Total execution time: 14.542 ms, Average time per hit: 14.542 ms 
",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 43.292 ms, Average time per hit: 43.292 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    if int(s) > N:

        return 0



    ret = 1 if all(s.count(c) > 0 for c in ""753"") else 0

    for c in ""753"":

        ret += dfs(s + c)

    return ret 



print((dfs(""0""))) # Hits:1.0, Total execution time: 57474.709 ms, Average time per hit: 57474.709 ms 
","ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def dfs(x, a, b, c): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    global ans

    if x > N : return

    if a & b & c: ans += 1

    dfs(10*x+3, 1, b, c)

    dfs(10*x+5, a, 1, c)

    dfs(10*x+7, a, b, 1)



N = int(eval(input())) # Hits:1.0, Total execution time: 46.0 ms, Average time per hit: 46.0 ms 




dfs(0, 0, 0, 0) # Hits:1.0, Total execution time: 11.458 ms, Average time per hit: 11.458 ms 


print(ans)",p03212,True
"# editorial

N = int(eval(input())) # Hits:1.0, Total execution time: 47.375 ms, Average time per hit: 47.375 ms 




from functools import lru_cache # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 


@lru_cache(maxsize=1000) # Hits:2.0, Total execution time: 6.583 ms, Average time per hit: 3.2915 ms 


def dfs(s): # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    if int(s) > N:

        return 0

    ret = 1 if  all(s.count(c) for c in ""753"") else 0

    for c in ""753"": #文字列数値をforで回すときの書き方！ 覚える

        ret += dfs(s+c) #pythonなのでそのまま+できる

    return ret



print((dfs(""0""))) # Hits:1.0, Total execution time: 58227.458 ms, Average time per hit: 58227.458 ms 
","# editorial

N = int(eval(input())) # Hits:1.0, Total execution time: 48.5 ms, Average time per hit: 48.5 ms 




#from functools import lru_cache

#@lru_cache(maxsize=1000)

def dfs(s): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if int(s) > N:

        return 0

    ret = 1 if  all(s.count(c) for c in ""753"") else 0

    for c in ""753"": #文字列数値をforで回すときの書き方！ 覚える

        ret += dfs(s+c) #pythonなのでそのまま+できる

    return ret



print((dfs(""0""))) # Hits:1.0, Total execution time: 62405.541 ms, Average time per hit: 62405.541 ms 
",p03212,True
"

#abc114-C:dfs



n=int(eval(input())) # Hits:1.0, Total execution time: 152.5 ms, Average time per hit: 152.5 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


    #s>nになったら数えない

    if int(s)>n:

        return 0



    #7,5,3がすべて入ってたら1,それ以外は0を返す変数を考える

    cnt=1 if all(s.count(c)>0 for c in '753') else 0



    for c in '753':

        cnt+=dfs(s+c)



    return cnt



print((dfs('0'))) # Hits:1.0, Total execution time: 113571.458 ms, Average time per hit: 113571.458 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 74.875 ms, Average time per hit: 74.875 ms 


def dfs(string): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if len(string) == len(str(n)):

        return 1 if all(k in string for k in '753') and int(''.join(string)) <= n else 0



    rec = 0

    s = '753' if len(string) != 0 and string[-1] != '0' else '0753'

    for num in s:

        string.append(num)

        rec += dfs(string)

        string.pop()



    return rec



print((dfs([]))) # Hits:1.0, Total execution time: 59017.583 ms, Average time per hit: 59017.583 ms 
",p03212,True
"from bisect import  bisect # Hits:1.0, Total execution time: 2.958 ms, Average time per hit: 2.958 ms 




def convert(number) : # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    if number == 0 :

        out = ""0""

    else :

        out = """"

    while number > 0 :

        surplus = (number % 4)

        out = str(surplus) + out

        number //= 4

    return out



def seven_five_three(string) : # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    string = string.replace(""3"",""7"").replace(""2"",""5"").replace(""1"",""3"")

    return string



L = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(3*10**5) : # Hits:300001.0, Total execution time: 24960.176 ms, Average time per hit: 0.08320030933230223 ms 


    l = convert(i) # Hits:300000.0, Total execution time: 800391.199 ms, Average time per hit: 2.6679706633333335 ms 


    l = seven_five_three(l) # Hits:300000.0, Total execution time: 145009.807 ms, Average time per hit: 0.48336602333333334 ms 


    if ((""0"" in l) or (""3"" not in l) or (""5"" not in l) or (""7"" not in l)) : # Hits:300000.0, Total execution time: 28277.899 ms, Average time per hit: 0.09425966333333334 ms 


        continue # Hits:273516.0, Total execution time: 18886.961 ms, Average time per hit: 0.0690524905307185 ms 


    l = int(l) # Hits:26484.0, Total execution time: 3702.046 ms, Average time per hit: 0.1397842470925842 ms 


    L.append(l) # Hits:26484.0, Total execution time: 3356.492 ms, Average time per hit: 0.12673659568041082 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 170.167 ms, Average time per hit: 170.167 ms 


ans = bisect(L,N) # Hits:1.0, Total execution time: 3.334 ms, Average time per hit: 3.334 ms 


print(ans) # Hits:1.0, Total execution time: 19.5 ms, Average time per hit: 19.5 ms 

","from itertools import product # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


element = [3,5,7] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 46.833 ms, Average time per hit: 46.833 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(3, len(str(N)) + 1) : # Hits:8.0, Total execution time: 2.291 ms, Average time per hit: 0.286375 ms 


    L = product(element, repeat=i) # Hits:7.0, Total execution time: 3.293 ms, Average time per hit: 0.4704285714285714 ms 


    for candidate in L : # Hits:29518.0, Total execution time: 3050.859 ms, Average time per hit: 0.10335588454502337 ms 


        if ((3 not in candidate) or (5 not in candidate) or (7 not in candidate)) : # Hits:29511.0, Total execution time: 4450.595 ms, Average time per hit: 0.15081139236217003 ms 


            continue # Hits:3027.0, Total execution time: 204.784 ms, Average time per hit: 0.06765246118268914 ms 


        l = int("""".join(list(map(str,candidate)))) # Hits:26484.0, Total execution time: 16311.882 ms, Average time per hit: 0.6159145899410966 ms 


        if l <= N : # Hits:26484.0, Total execution time: 2359.876 ms, Average time per hit: 0.08910572421084428 ms 


            ans += 1 # Hits:26484.0, Total execution time: 2479.237 ms, Average time per hit: 0.09361263404319589 ms 


print(ans) # Hits:1.0, Total execution time: 22.708 ms, Average time per hit: 22.708 ms 
",p03212,True
"from itertools import product # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 47.375 ms, Average time per hit: 47.375 ms 


E = [3,5,7] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(3, len(str(N))+1) : # Hits:8.0, Total execution time: 2.624 ms, Average time per hit: 0.328 ms 


    L = product(E, repeat=i) # Hits:7.0, Total execution time: 3.543 ms, Average time per hit: 0.5061428571428571 ms 


    for l in L : # Hits:29518.0, Total execution time: 4088.284 ms, Average time per hit: 0.13850138898299344 ms 


        if (3 not in l) or (5 not in l) or (7 not in l) : # Hits:29511.0, Total execution time: 5565.708 ms, Average time per hit: 0.18859774321439463 ms 


            continue # Hits:3027.0, Total execution time: 240.356 ms, Average time per hit: 0.0794040303931285 ms 


        number = int("""".join(list(map(str,l)))) # Hits:26484.0, Total execution time: 24512.879 ms, Average time per hit: 0.9255731384987161 ms 


        if number <= N : # Hits:26484.0, Total execution time: 3328.457 ms, Average time per hit: 0.12567803201933242 ms 


            ans += 1 # Hits:26484.0, Total execution time: 3289.764 ms, Average time per hit: 0.12421703670140462 ms 


print(ans) # Hits:1.0, Total execution time: 48.875 ms, Average time per hit: 48.875 ms 

","from itertools import *



N = int(eval(input()))



A = [""3"", ""5"", ""7""]



ans = 0



length = len(str(N))



for i in range(3, length+1) :

    for prod in product(A, repeat=i) :

        if prod.count(""3"") == 0 or prod.count(""5"") == 0 or prod.count(""7"") == 0 :

            continue

        

        num = int("""".join(prod))

        if num > N :

            break

        

        ans += 1

        

print(ans)
",p03212,True
"import itertools # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 79.708 ms, Average time per hit: 79.708 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,11): # Hits:11.0, Total execution time: 3.416 ms, Average time per hit: 0.31054545454545457 ms 


  for v in itertools.product('357', repeat = i): # Hits:88582.0, Total execution time: 9191.467 ms, Average time per hit: 0.10376224289359012 ms 


    p = """".join(v) # Hits:88572.0, Total execution time: 12717.239 ms, Average time per hit: 0.1435808043173915 ms 


    if('3' in v and '5' in v and '7' in v and int(p) <= N): # Hits:88572.0, Total execution time: 20714.733 ms, Average time per hit: 0.2338745088741363 ms 


      cnt += 1 # Hits:26484.0, Total execution time: 2606.093 ms, Average time per hit: 0.0984025449327896 ms 


print(cnt) # Hits:1.0, Total execution time: 27.375 ms, Average time per hit: 27.375 ms 
","from itertools import product # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 54.5 ms, Average time per hit: 54.5 ms 




ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,11): # Hits:11.0, Total execution time: 1.375 ms, Average time per hit: 0.125 ms 


  for fst in product(['5','7','3'], repeat = i): # Hits:88582.0, Total execution time: 8792.239 ms, Average time per hit: 0.09925536790770134 ms 


    num = """".join(fst) # Hits:88572.0, Total execution time: 12301.959 ms, Average time per hit: 0.13889218940522963 ms 


    if('5' in num and '7' in num and '3' in num and int(num) <= N): # Hits:88572.0, Total execution time: 18177.486 ms, Average time per hit: 0.2052283565912478 ms 


      ans += 1 # Hits:26484.0, Total execution time: 2491.805 ms, Average time per hit: 0.0940871847152998 ms 


print(ans) # Hits:1.0, Total execution time: 8.333 ms, Average time per hit: 8.333 ms 

",p03212,True
"from itertools import product # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 




def ans(): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


  N = int(eval(input()))

  cnt = 0

  for i in range(3, 11):

    for p in product([""3"", ""5"", ""7""], repeat = i):

      if(""3"" in p and ""5"" in p and ""7"" in p):

        p = int("""".join(p))

        if(p <= N):

          cnt += 1

  print(cnt)

ans() # Hits:1.0, Total execution time: 31354.958 ms, Average time per hit: 31354.958 ms 
","from itertools import product # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 44.708 ms, Average time per hit: 44.708 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(3,len(str(N))+1): # Hits:8.0, Total execution time: 1.168 ms, Average time per hit: 0.146 ms 


  for p in product([""3"", ""5"", ""7""], repeat = i): # Hits:29518.0, Total execution time: 3071.102 ms, Average time per hit: 0.10404166948980283 ms 


    if(""3"" in p and ""5"" in p and ""7"" in p): # Hits:29511.0, Total execution time: 4463.784 ms, Average time per hit: 0.15125831046050628 ms 


      if(int("""".join(p)) <= N): # Hits:26484.0, Total execution time: 5563.81 ms, Average time per hit: 0.21008193626340432 ms 


        cnt += 1 # Hits:26484.0, Total execution time: 2578.245 ms, Average time per hit: 0.09735104213864974 ms 


print(cnt) # Hits:1.0, Total execution time: 9.0 ms, Average time per hit: 9.0 ms 
",p03212,True
"import sys # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


sys.setrecursionlimit(100000) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 40.458 ms, Average time per hit: 40.458 ms 


m=len(str(n)) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


L=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def dfs(i,num): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    if i==m+1:

        return

    if 0<i<m+1:

        if len(set(num))==3 and int(num)<=n:

            L.append(int(num))

    dfs(i+1,num+'3')

    dfs(i+1,num+'5')

    dfs(i+1,num+'7')

dfs(0,'') # Hits:1.0, Total execution time: 37128.167 ms, Average time per hit: 37128.167 ms 


print((len(L))) # Hits:1.0, Total execution time: 9.542 ms, Average time per hit: 9.542 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 41.917 ms, Average time per hit: 41.917 ms 


m=len(str(n)) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


r=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def dfs(i,s): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    global r

    if len(set(s))==3 and int(s)<=n:

        r+=1

    if i==m:

        return

    dfs(i+1,'3'+s)

    dfs(i+1,'5'+s)

    dfs(i+1,'7'+s)



dfs(0,'') # Hits:1.0, Total execution time: 9.625 ms, Average time per hit: 9.625 ms 


print(r)",p03212,True
"# 2019/08/27



n=int(eval(input())) # Hits:1.0, Total execution time: 41.291 ms, Average time per hit: 41.291 ms 


ln=len(str(n)) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


sft='7530' # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


cnt=0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


def dfs(ln,s): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    global cnt

    if ln==0:

        if '7' in s and '5' in s and '3' in s:

            if '0' in str(int(s)):return

            if n>=int(s):cnt+=1

        return

    for e in sft:

        dfs(ln-1,s+e)

dfs(ln,'') # Hits:1.0, Total execution time: 7.75 ms, Average time per hit: 7.75 ms 




print(cnt)","# 写経



n=int(eval(input())) # Hits:1.0, Total execution time: 46.5 ms, Average time per hit: 46.5 ms 




def dfs(s): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if int(s)>n:return 0

    

    ret=1 if all(s.count(c)>0 for c in '753') else 0

    for c in '753':

        ret+=dfs(s+c)

    return ret



print((dfs('0'))) # Hits:1.0, Total execution time: 53381.875 ms, Average time per hit: 53381.875 ms 
",p03212,True
"import itertools # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


N=int(eval(input())) # Hits:1.0, Total execution time: 44.917 ms, Average time per hit: 44.917 ms 


ans=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


S=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(10): # Hits:11.0, Total execution time: 1.749 ms, Average time per hit: 0.159 ms 


    S+=list(itertools.product(""357"",repeat=i)) # Hits:10.0, Total execution time: 1097.583 ms, Average time per hit: 109.7583 ms 


for s in S: # Hits:29525.0, Total execution time: 2316.947 ms, Average time per hit: 0.07847407281964436 ms 


    if len(set(s))>2 and int("""".join(s))<=N: # Hits:29524.0, Total execution time: 10338.247 ms, Average time per hit: 0.35016417152147405 ms 


        ans+=1 # Hits:26484.0, Total execution time: 2481.825 ms, Average time per hit: 0.09371035342093338 ms 


print(ans) # Hits:1.0, Total execution time: 9.458 ms, Average time per hit: 9.458 ms 
","from itertools import product # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 41.667 ms, Average time per hit: 41.667 ms 


count = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in range(3,10): # Hits:8.0, Total execution time: 1.334 ms, Average time per hit: 0.16675 ms 


    a = product([""3"",""5"",""7""],repeat=i) # Hits:7.0, Total execution time: 3.084 ms, Average time per hit: 0.44057142857142856 ms 


    for b in a: # Hits:29518.0, Total execution time: 2839.707 ms, Average time per hit: 0.09620255437360255 ms 


        if 1<=int("""".join(b))<=N and len(set(b))==3: # Hits:29511.0, Total execution time: 11401.948 ms, Average time per hit: 0.3863626444376673 ms 


            count += 1 # Hits:26484.0, Total execution time: 2451.683 ms, Average time per hit: 0.09257223229119468 ms 


print(count) # Hits:1.0, Total execution time: 9.541 ms, Average time per hit: 9.541 ms 
",p03212,True
"import itertools # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


N=int(eval(input())) # Hits:1.0, Total execution time: 44.292 ms, Average time per hit: 44.292 ms 


l=len(str(N)) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


s=set() # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


S='753' # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,l+1): # Hits:10.0, Total execution time: 1.541 ms, Average time per hit: 0.1541 ms 


    for j in itertools.product(S,repeat=i): # Hits:29532.0, Total execution time: 2786.092 ms, Average time per hit: 0.09434146011106595 ms 


        s.add(int(''.join(j))) # Hits:29523.0, Total execution time: 7584.649 ms, Average time per hit: 0.2569064458219016 ms 


li=sorted(s) # Hits:1.0, Total execution time: 1015.0 ms, Average time per hit: 1015.0 ms 


cnt=0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(len(li)): # Hits:29524.0, Total execution time: 2534.579 ms, Average time per hit: 0.08584808968974394 ms 


    if(li[i]>N): # Hits:29523.0, Total execution time: 2893.81 ms, Average time per hit: 0.09801883277444703 ms 


        break # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    if('7' in str(li[i]) and '5' in str(li[i]) and '3' in str(li[i])): # Hits:29523.0, Total execution time: 10420.853 ms, Average time per hit: 0.35297405412729055 ms 


        cnt+=1 # Hits:26484.0, Total execution time: 2489.984 ms, Average time per hit: 0.0940184262196043 ms 


print(cnt) # Hits:1.0, Total execution time: 8.625 ms, Average time per hit: 8.625 ms 
","c='753' # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def dfs(s,L): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    global c

    li.append(s)

    if(len(s)==L):

        return

    for i in range(3):

        dfs(s+c[i],L)



N=int(eval(input())) # Hits:1.0, Total execution time: 46.75 ms, Average time per hit: 46.75 ms 


L=len(str(N)) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


li=[] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


dfs('',L) # Hits:1.0, Total execution time: 2.959 ms, Average time per hit: 2.959 ms 


ans=0

for x in li:

    if(x==''):

        continue

    if(int(x)<=N and '7' in x and '5' in x and '3' in x):

        ans+=1

print(ans)",p03212,True
"import sys

from collections import deque



input = sys.stdin.readline





def dfs(N):

    stack = deque([""3"", ""5"", ""7""])

    num = 0

    while stack:

        n = stack.pop()

        if int(n) > N:

            continue

        num += 1 if all(s in n for s in ""357"") else 0

        stack.append(""3"" + n)

        stack.append(""5"" + n)

        stack.append(""7"" + n)

    return num





def main():

    N = int(eval(input()))



    ans = dfs(N)



    print(ans)





if __name__ == ""__main__"":

    main()
",,p03212,False
"import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time # Hits:1.0, Total execution time: 10.917 ms, Average time per hit: 10.917 ms 




sys.setrecursionlimit(10**7) # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


inf=10**20 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


mod=10**9+7 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 




def LI(): return list(map(int,input().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def I(): return int(eval(input())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LS(): return input().split() # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def S(): return eval(input()) # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




# 10 -> n

def ten2n(a,n): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  x=a//n

  y=a%n

  if x:

    return ten2n(x,n)+str(y)

  return str(y)



def main(): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


  n=I()



  l=[]

  for i in range(pow(4,10)):

    l.append(ten2n(i,4).replace('3','7').replace('2','5').replace('1','3'))



  cnt=0

  for x in l:

    if int(x)<=n:

      if '3' in x and '5' in x and '7' in x and '0' not in x:

        cnt+=1

    else:

      break



  return cnt



print((main())) # Hits:1.0, Total execution time: 3905316.71 ms, Average time per hit: 3905316.71 ms 

","import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time # Hits:1.0, Total execution time: 10.458 ms, Average time per hit: 10.458 ms 




sys.setrecursionlimit(10**7) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


inf=10**20 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


mod=10**9+7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




def LI(): return list(map(int,input().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def I(): return int(eval(input())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LS(): return input().split() # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def S(): return eval(input()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




# 10 -> n

def ten2n(a,n): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


  x=a//n

  y=a%n

  if x:

    return ten2n(x,n)+str(y)

  return str(y)



def main(): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


  n=I()



  l=[]

  for i in range(pow(4,9)):

    l.append(ten2n(i,4).replace('3','7').replace('2','5').replace('1','3'))



  cnt=0

  for x in l:

    if int(x)<=n:

      if '3' in x and '5' in x and '7' in x and '0' not in x:

        cnt+=1

    else:

      break



  return cnt



print((main())) # Hits:1.0, Total execution time: 924362.751 ms, Average time per hit: 924362.751 ms 

",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 41.291 ms, Average time per hit: 41.291 ms 


import math # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


INF = 10**9 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 






def dfs(s): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if int(s) > N:

        return 0

    elif s.count('3') == 0 or s.count('5') == 0 or s.count('7') == 0:

        return 0 + dfs(s + ""3"") + dfs(s + ""5"") + dfs(s + ""7"")

    else:

        # print(s)

        return 1 + dfs(s + ""3"") + dfs(s + ""5"") + dfs(s + ""7"")





print((dfs(""0""))) # Hits:1.0, Total execution time: 35066.625 ms, Average time per hit: 35066.625 ms 
",,p03212,True
"import copy # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


from collections import deque # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 49.416 ms, Average time per hit: 49.416 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


array = ['7','5','3'] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




count = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


d = deque() # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


d.append(([],set())) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




while len(d) != 0: # Hits:88574.0, Total execution time: 12966.794 ms, Average time per hit: 0.146395036918283 ms 


  s,used = d.pop() # Hits:88573.0, Total execution time: 16225.366 ms, Average time per hit: 0.1831863660483443 ms 


  if len(s) != 0 and int(''.join(s)) > n: # Hits:88573.0, Total execution time: 26461.209 ms, Average time per hit: 0.2987502850755874 ms 


    continue # Hits:59049.0, Total execution time: 4832.627 ms, Average time per hit: 0.08184096259039103 ms 


  

  if len(used) == 3: # Hits:29524.0, Total execution time: 4108.594 ms, Average time per hit: 0.1391611570247934 ms 


    count += 1 # Hits:26484.0, Total execution time: 2639.248 ms, Average time per hit: 0.09965443286512611 ms 


    

  for c in array: # Hits:118096.0, Total execution time: 11488.677 ms, Average time per hit: 0.09728252438693945 ms 


    cp_s = copy.deepcopy(s) # Hits:88572.0, Total execution time: 863494.043 ms, Average time per hit: 9.749063394752291 ms 


    cp_used = copy.deepcopy(used) # Hits:88572.0, Total execution time: 636348.258 ms, Average time per hit: 7.184530754640293 ms 


    cp_s.append(c) # Hits:88572.0, Total execution time: 12168.815 ms, Average time per hit: 0.1373889603938039 ms 


    cp_used.add(c) # Hits:88572.0, Total execution time: 12409.438 ms, Average time per hit: 0.14010565415706994 ms 


    d.append((cp_s,cp_used)) # Hits:88572.0, Total execution time: 13570.673 ms, Average time per hit: 0.15321628731427542 ms 


  

print(count) # Hits:1.0, Total execution time: 23.291 ms, Average time per hit: 23.291 ms 
","import copy # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


from collections import deque # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 58.458 ms, Average time per hit: 58.458 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


array = ['7','5','3'] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




count = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


d = deque() # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


d.append(([],set())) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 




while len(d) != 0: # Hits:88574.0, Total execution time: 13054.137 ms, Average time per hit: 0.1473811389346761 ms 


  s,used = d.pop() # Hits:88573.0, Total execution time: 15170.24 ms, Average time per hit: 0.1712738644959525 ms 


  if len(s) != 0 and int(''.join(s)) > n: # Hits:88573.0, Total execution time: 26544.279 ms, Average time per hit: 0.29968815553272443 ms 


    continue # Hits:59049.0, Total execution time: 4798.488 ms, Average time per hit: 0.08126281562769902 ms 


  

  if len(used) == 3: # Hits:29524.0, Total execution time: 3999.421 ms, Average time per hit: 0.13546338572009214 ms 


    count += 1   # Hits:26484.0, Total execution time: 2624.329 ms, Average time per hit: 0.09909111161455973 ms 


    

  for c in array: # Hits:118096.0, Total execution time: 11928.785 ms, Average time per hit: 0.10100922131147541 ms 


    cp_s = copy.deepcopy(s) # Hits:88572.0, Total execution time: 871583.681 ms, Average time per hit: 9.84039742808111 ms 


    cp_s.append(c)     # Hits:88572.0, Total execution time: 12078.118 ms, Average time per hit: 0.13636496861310574 ms 


    if len(used) == 3: # Hits:88572.0, Total execution time: 10759.886 ms, Average time per hit: 0.1214818001174186 ms 


      d.append((cp_s,used)) # Hits:79452.0, Total execution time: 12317.135 ms, Average time per hit: 0.15502611639732167 ms 


    

    else:

      cp_used = copy.deepcopy(used) # Hits:9120.0, Total execution time: 60863.249 ms, Average time per hit: 6.673601864035088 ms 


      cp_used.add(c) # Hits:9120.0, Total execution time: 1284.982 ms, Average time per hit: 0.140897149122807 ms 


      d.append((cp_s,cp_used)) # Hits:9120.0, Total execution time: 1406.045 ms, Average time per hit: 0.15417160087719298 ms 


  

print(count) # Hits:1.0, Total execution time: 25.5 ms, Average time per hit: 25.5 ms 
",p03212,True
"import sys



read = sys.stdin.read

readline = sys.stdin.readline

readlines = sys.stdin.readlines

sys.setrecursionlimit(10 ** 9)

INF = 1 << 60

MOD = 1000000007





def main():

    N = int(readline())



    def rec(vec):

        if vec and int(''.join(vec)) > N:

            return 0

        ans = 0

        if all(c in vec for c in '357'):

            ans += 1

        for c in '357':

            vec.append(c)

            ans += rec(vec)

            vec.pop()

        return ans



    ans = rec([])

    print(ans)

    return





if __name__ == '__main__':

    main()
",,p03212,False
"import sys

readline = sys.stdin.readline

from collections import deque



def main():

    N = int(readline())

    que = []

    for val in ['357', '375', '537', '573', '735', '753']:

        if int(val) <= N:

            que.append(val)

    res = set(que)

    que = deque(que)

    while que:

        pre = que.popleft()

        for p in ['3', '5', '7']:

            for i in range(len(pre)+1):

                next = pre[:i] + p + pre[i:]

                if int(next) <= N and next not in res:

                    que.append(next)

                    res.add(next)



    print((len(res)))



if __name__ == '__main__':

    main()",,p03212,False
"# ABC114 C - 755

N = int(eval(input())) # Hits:1.0, Total execution time: 61.542 ms, Average time per hit: 61.542 ms 




def rep(s): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    if int(s) > N:

         return 0

    ret = 1 if all(s.count(c) > 0 for c in '753') else 0 

    for c in '753':

        ret += rep(s + c)

    return ret



print((rep('0'))) # Hits:1.0, Total execution time: 56369.458 ms, Average time per hit: 56369.458 ms 
","# C - 755



def dfs(n,s): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if int(s)>n:

        return 0

    res=0

    if s.count('7')>0 and s.count('5')>0 and s.count('3')>0:

        res=1

    

    for i in '753':

        res+=dfs(n,s+i)

    return res



n=int(eval(input())) # Hits:1.0, Total execution time: 49.709 ms, Average time per hit: 49.709 ms 


print((dfs(n,'0'))) # Hits:1.0, Total execution time: 43753.833 ms, Average time per hit: 43753.833 ms 
",p03212,True
"from itertools import product # Hits:1.0, Total execution time: 1.583 ms, Average time per hit: 1.583 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 51.959 ms, Average time per hit: 51.959 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for l in range(1, 11): # Hits:11.0, Total execution time: 1.586 ms, Average time per hit: 0.1441818181818182 ms 


    for p in product(""357"", repeat=l): # Hits:88582.0, Total execution time: 9769.386 ms, Average time per hit: 0.11028635614458919 ms 


        v = """".join(p) # Hits:88572.0, Total execution time: 12746.889 ms, Average time per hit: 0.14391556022219212 ms 


        if ""3"" in v and ""5"" in v and ""7"" in v and int("""".join(p)) <= N: # Hits:88572.0, Total execution time: 25424.536 ms, Average time per hit: 0.2870493609718647 ms 


            ans += 1 # Hits:26484.0, Total execution time: 2717.61 ms, Average time per hit: 0.1026132759401903 ms 


print(ans) # Hits:1.0, Total execution time: 7.583 ms, Average time per hit: 7.583 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 42.833 ms, Average time per hit: 42.833 ms 




cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def dfs(s): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    global cnt

    if '3' in s and '5' in s and '7' in s and int(s) <= N:

        cnt += 1

    if len(s) >= 10:

        return cnt

    dfs(s + '3')

    dfs(s + '5')

    dfs(s + '7')

    return cnt



print((dfs(''))) # Hits:1.0, Total execution time: 6.5 ms, Average time per hit: 6.5 ms 
",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 43.75 ms, Average time per hit: 43.75 ms 




cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def dfs(s): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    global cnt

    if '3' in s and '5' in s and '7' in s and int(s) <= N:

        cnt += 1

    if len(s) >= 10:

        return cnt

    dfs(s + '3')

    dfs(s + '5')

    dfs(s + '7')

    return cnt



print((dfs(''))) # Hits:1.0, Total execution time: 6.625 ms, Average time per hit: 6.625 ms 
","from itertools import product # Hits:1.0, Total execution time: 1.291 ms, Average time per hit: 1.291 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 45.167 ms, Average time per hit: 45.167 ms 




cnt = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(3,10): # Hits:8.0, Total execution time: 1.626 ms, Average time per hit: 0.20325 ms 


    for v in product('357',repeat=i): # Hits:29518.0, Total execution time: 3463.831 ms, Average time per hit: 0.11734639880750729 ms 


        val = ''.join(v) # Hits:29511.0, Total execution time: 4644.299 ms, Average time per hit: 0.1573751821354749 ms 


        if int(val) <= N and '3' in val and '5' in val and '7' in val: # Hits:29511.0, Total execution time: 6960.484 ms, Average time per hit: 0.23586066212598691 ms 


           cnt += 1 # Hits:26484.0, Total execution time: 3378.442 ms, Average time per hit: 0.12756539797613653 ms 




print(cnt) # Hits:1.0, Total execution time: 16.75 ms, Average time per hit: 16.75 ms 
",p03212,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 51.959 ms, Average time per hit: 51.959 ms 


A = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




def f(s): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if s != '' and eval(s) > N:

        return 0

    if all(s.count(i) >= 1 for i in '753'):

        A.append(eval(s))

    for i in '753':

        f(s + i)



f('') # Hits:1.0, Total execution time: 286019.416 ms, Average time per hit: 286019.416 ms 


print((len(A))) # Hits:1.0, Total execution time: 32.917 ms, Average time per hit: 32.917 ms 


# print(sorted(A))","N = int(eval(input())) # Hits:1.0, Total execution time: 47.0 ms, Average time per hit: 47.0 ms 


A = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




def f(s): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if int(s) > N:

        return 0

    if all(s.count(i) >= 1 for i in '753'):

        A.append(int(s))

    for i in '753':

        f(s + i)



f('0') # Hits:1.0, Total execution time: 57336.208 ms, Average time per hit: 57336.208 ms 


print((len(A))) # Hits:1.0, Total execution time: 10.042 ms, Average time per hit: 10.042 ms 


# print(sorted(A))",p03212,True
"from collections import deque # Hits:1.0, Total execution time: 1.541 ms, Average time per hit: 1.541 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 46.542 ms, Average time per hit: 46.542 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


option = [""7"",""5"",""3""] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


dq = deque() # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


for s in option: # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    dq.append(s) # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 




def judge(string): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    bit = [0]*3

    chenge = {""7"":0, ""5"":1, ""3"":2}

    for s in string:

        bit[chenge[s]] = 1

    return all(bit)



while dq: # Hits:88573.0, Total execution time: 7811.863 ms, Average time per hit: 0.08819688844230182 ms 


    n = dq.popleft() # Hits:88572.0, Total execution time: 11189.527 ms, Average time per hit: 0.12633255430610124 ms 


    if int(n) <= N and judge(n): # Hits:88572.0, Total execution time: 52044.124 ms, Average time per hit: 0.5875911574764034 ms 


        ans += 1 # Hits:26484.0, Total execution time: 2600.056 ms, Average time per hit: 0.09817459598247999 ms 


    if int(n) > N: # Hits:88572.0, Total execution time: 14368.588 ms, Average time per hit: 0.1622249469358262 ms 


        continue # Hits:59049.0, Total execution time: 4445.577 ms, Average time per hit: 0.07528623685413809 ms 


    for i,s in enumerate(option): # Hits:118092.0, Total execution time: 14699.97 ms, Average time per hit: 0.12447896555228127 ms 


        dq.append(n+s) # Hits:88569.0, Total execution time: 14065.284 ms, Average time per hit: 0.1588059479050232 ms 




print(ans) # Hits:1.0, Total execution time: 20.375 ms, Average time per hit: 20.375 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 46.0 ms, Average time per hit: 46.0 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def dfs(n=0,a=0,b=0,c=0): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if n > N:

        return

    if a*b*c > 0:

        global ans

        ans += 1

    dfs(10*n+3,a+1,b,c)

    dfs(10*n+5,a,b+1,c)

    dfs(10*n+7,a,b,c+1)



dfs() # Hits:1.0, Total execution time: 11.208 ms, Average time per hit: 11.208 ms 


print(ans)",p03212,True
"from sys import stdin

import sys

sys.setrecursionlimit(10**6) 

import bisect



n = int(stdin.readline().rstrip())



li = [7,5,3]



if n < 357:

    print((0))

    exit()



def Base_10_to_n(X, n):

    if (int(X/n)):

        return Base_10_to_n(int(X/n), n)+str(X%n)

    return str(X%n)



kazu = 0

point = 0

k = ""0""

while int(k) <= n:

    k = Base_10_to_n(kazu,4)

    k = k.replace(""3"",""7"").replace(""1"",""3"").replace(""2"",""5"")

    if all(k.count(c)>0 for c in ""753"")and k.count(""0"") == 0:

        if int(k) <= n:

            point += 1

    kazu += 1

print(point)",,p03212,False
"from sys import stdin

import sys

sys.setrecursionlimit(10**6) 

import bisect



n = int(stdin.readline().rstrip())



li = [7,5,3]



if n < 357:

    print((0))

    exit()



def Base_10_to_n(X, n):

    if (int(X/n)):

        return Base_10_to_n(int(X/n), n)+str(X%n)

    return str(X%n)



kazu = 0

point = 0

k = ""0""

while int(k) <= n:

    k = Base_10_to_n(kazu,4)

    if k.count(""0"") > 0:

        kazu += 1

        continue

    k = k.replace(""3"",""7"").replace(""1"",""3"").replace(""2"",""5"")

    if all(k.count(c)>0 for c in ""753""):

        if int(k) <= n:

            point += 1

    kazu += 1

print(point)","n = int(eval(input())) # Hits:1.0, Total execution time: 39.5 ms, Average time per hit: 39.5 ms 


point = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def sitigosan(num,keta): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    global point

    now = keta+num

    if int(now) > n:

        return

    else:

        if ""3"" in now and ""5"" in now and ""7"" in now:

            point += 1

        return sitigosan(""3"",str(now)),sitigosan(""5"",str(now)),sitigosan(""7"",str(now))

sitigosan("""",""3"") # Hits:1.0, Total execution time: 13.375 ms, Average time per hit: 13.375 ms 


sitigosan("""",""5"")

sitigosan("""",""7"")



print(point)",p03212,False
"#0,7,5,3で選んでくる

x=[0,7,5,3] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


a=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


k=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




def new_num(c): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    global x

    d=0

    for i in range(9):

        d+=(10**i)*x[c[i]]

    return d



for i0 in range(4): # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


    for i1 in range(4): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


        for i2 in range(4): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


            for i3 in range(4): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


                for i4 in range(4): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


                    for i5 in range(4): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


                        for i6 in range(4): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


                            for i7 in range(4): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


                                for i8 in range(4): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


                                    l1=new_num([i0,i1,i2,i3,i4,i5,i6,i7,i8]) # Hits:1.0, Total execution time: 1.959 ms, Average time per hit: 1.959 ms 


                                    l2=str(l1)

                                    if (""3"" in l2) and (""5"" in l2) and (""7"" in l2) and (""0"" not in l2):

                                        a.append(l1)

a.sort()

co=0

n=int(eval(input()))

for i in a:

    if i<=n:

        #print(i)

        co+=1

    else:

        break

print(co)
","from itertools import product # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 41.625 ms, Average time per hit: 41.625 ms 


ans=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(3,10): # Hits:8.0, Total execution time: 1.209 ms, Average time per hit: 0.151125 ms 


    l=list(product([""3"",""5"",""7""],repeat=i)) # Hits:7.0, Total execution time: 1151.625 ms, Average time per hit: 164.51785714285714 ms 


    for j in l: # Hits:29518.0, Total execution time: 2661.329 ms, Average time per hit: 0.09015952977844027 ms 


        if len(set(j))==3: # Hits:29511.0, Total execution time: 6697.413 ms, Average time per hit: 0.2269463250991156 ms 


            ans.append(int("""".join(list(j)))) # Hits:26484.0, Total execution time: 7862.145 ms, Average time per hit: 0.29686395559583145 ms 




ans.sort() # Hits:1.0, Total execution time: 52.666 ms, Average time per hit: 52.666 ms 


m=len(ans) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


l,r=0,m-1 # Hits:1.0, Total execution time: 222.25 ms, Average time per hit: 222.25 ms 


while l+1<r: # Hits:16.0, Total execution time: 2.001 ms, Average time per hit: 0.1250625 ms 


    k=(l+r)//2 # Hits:15.0, Total execution time: 1.667 ms, Average time per hit: 0.11113333333333333 ms 


    if ans[k]<n: # Hits:15.0, Total execution time: 1.667 ms, Average time per hit: 0.11113333333333333 ms 


        l=k # Hits:15.0, Total execution time: 1.331 ms, Average time per hit: 0.08873333333333333 ms 


    elif ans[k]>n: # Hits:13.0, Total execution time: 1.541 ms, Average time per hit: 0.11853846153846154 ms 


        r=k # Hits:13.0, Total execution time: 1.126 ms, Average time per hit: 0.08661538461538461 ms 


    else:

        l,r=k,k

        break

if ans[l]==n: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print((l+1))

elif ans[r]==n: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print((r+1))

elif ans[l]>n: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print(l)

elif ans[r]<n: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    print((r+1)) # Hits:1.0, Total execution time: 6.708 ms, Average time per hit: 6.708 ms 


elif ans[l]<n: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    print((l+1)) # Hits:1.0, Total execution time: 8.958 ms, Average time per hit: 8.958 ms 


#print(l,r)

#print(ans)
",p03212,True
"import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


sys.setrecursionlimit(10**6) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




d={} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def c(s): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


	a = [0] * 10

	for i in s:

		a[int(i)] += 1

	if a[3] != 0 and a[5] != 0 and a[7] != 0:

		return True

	else:

		return False



def r(m, s): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


	global d

	if s == """":

		pass

	elif m < int(s) or (s in d):

		return 0

	ret = 0

	if c(s):

		ret += 1

		d[s] = 1

	ret += r(m,s+""3"")

	ret += r(m,s+""5"")

	ret += r(m,s+""7"")

	ret += r(m,""3""+s)

	ret += r(m,""5""+s)

	ret += r(m,""7""+s)

	return ret



def main(): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


	n = int(eval(input()))

	print((r(n,"""")))

	return

main() # Hits:1.0, Total execution time: 52.542 ms, Average time per hit: 52.542 ms 
","import sys # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


sys.setrecursionlimit(10**6) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




d={} # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




def c(s): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


	a = [0] * 10

	for i in s:

		a[int(i)] += 1

	if a[3] != 0 and a[5] != 0 and a[7] != 0:

		return True

	else:

		return False



def r(m, s): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


	global d

	if s == """":

		pass

	elif m < int(s) or (s in d):

		return 0

	ret = 0

	if c(s):

		ret += 1

	d[s] = 1

	ret += r(m,s+""3"")

	ret += r(m,s+""5"")

	ret += r(m,s+""7"")

	ret += r(m,""3""+s)

	ret += r(m,""5""+s)

	ret += r(m,""7""+s)

	return ret



def main(): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


	n = int(eval(input()))

	print((r(n,"""")))

	return

main() # Hits:1.0, Total execution time: 45.209 ms, Average time per hit: 45.209 ms 
",p03212,True
"def func(S, num): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    ret = 0

    if '3' in S and '5' in S and '7' in S and int(S) <= num:

        ret += 1

    if len(S) == 10:

        return 0

    ret += func(S + '3', num)

    ret += func(S + '5', num)

    ret += func(S + '7', num)

    return ret



print(func('', eval(input()))) # Hits:1.0, Total execution time: 42570.208 ms, Average time per hit: 42570.208 ms 
","def func(S, num): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if len(S) == 10:

        return 0

    ret = 0

    if '3' in S and '5' in S and '7' in S and int(S) <= num:

        ret += 1

    ret += func(S + '3', num)

    ret += func(S + '5', num)

    ret += func(S + '7', num)

    return ret



print(func('', eval(input()))) # Hits:1.0, Total execution time: 30572.291 ms, Average time per hit: 30572.291 ms 
",p03212,True
"import sys # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


from collections import deque # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 




input = sys.stdin.readline # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 41.333 ms, Average time per hit: 41.333 ms 


relations = [[] for _ in range(N)] # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 


for _ in range(M): # Hits:11.0, Total execution time: 1.209 ms, Average time per hit: 0.1099090909090909 ms 


    a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 4.125 ms, Average time per hit: 0.4125 ms 


    a -= 1 # Hits:10.0, Total execution time: 1.124 ms, Average time per hit: 0.1124 ms 


    b -= 1 # Hits:10.0, Total execution time: 0.877 ms, Average time per hit: 0.0877 ms 


    relations[a].append(b) # Hits:10.0, Total execution time: 1.584 ms, Average time per hit: 0.1584 ms 


    relations[b].append(a) # Hits:10.0, Total execution time: 2.71 ms, Average time per hit: 0.271 ms 




ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


visited = set() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(N): # Hits:5.0, Total execution time: 0.501 ms, Average time per hit: 0.1002 ms 


    q = deque() # Hits:4.0, Total execution time: 0.917 ms, Average time per hit: 0.22925 ms 


    q.append(i) # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    start = len(visited) # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    while q: # Hits:18.0, Total execution time: 1.588 ms, Average time per hit: 0.08822222222222223 ms 


        pos = q.popleft() # Hits:14.0, Total execution time: 1.708 ms, Average time per hit: 0.122 ms 


        if pos in visited: # Hits:14.0, Total execution time: 1.293 ms, Average time per hit: 0.09235714285714286 ms 


            continue # Hits:10.0, Total execution time: 0.748 ms, Average time per hit: 0.07479999999999999 ms 


        visited.add(pos) # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


        for n_pos in relations[pos]: # Hits:24.0, Total execution time: 2.251 ms, Average time per hit: 0.09379166666666668 ms 


            if n_pos in visited: # Hits:20.0, Total execution time: 1.746 ms, Average time per hit: 0.0873 ms 


                continue # Hits:10.0, Total execution time: 0.667 ms, Average time per hit: 0.06670000000000001 ms 


            q.appendleft(n_pos) # Hits:10.0, Total execution time: 1.168 ms, Average time per hit: 0.1168 ms 


    end = len(visited) # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


    ans = max(ans, end - start) # Hits:4.0, Total execution time: 1.042 ms, Average time per hit: 0.2605 ms 




print(ans) # Hits:1.0, Total execution time: 5.666 ms, Average time per hit: 5.666 ms 
","import sys # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




class UnionFind(): # Hits:1.0, Total execution time: 5.959 ms, Average time per hit: 5.959 ms 


    def __init__(self, n):

        self.n = n

        self.parents = [-1] * n



    def find(self, x):

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)



        if x == y:

            return



        if self.parents[x] > self.parents[y]:

            x, y = y, x



        self.parents[x] += self.parents[y]

        self.parents[y] = x



    def size(self, x):

        return -self.parents[self.find(x)]



    def same(self, x, y):

        return self.find(x) == self.find(y)



    def members(self, x):

        root = self.find(x)

        return [i for i in range(self.n) if self.find(i) == root]



    def roots(self):

        return [i for i, x in enumerate(self.parents) if x < 0]



    def group_count(self):

        return len(self.roots())



    def all_group_members(self):

        return {r: self.members(r) for r in self.roots()}



    def __str__(self):

        return '\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())



input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 43.458 ms, Average time per hit: 43.458 ms 


relations = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for _ in range(M): # Hits:11.0, Total execution time: 1.584 ms, Average time per hit: 0.144 ms 


    a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 4.249 ms, Average time per hit: 0.4249 ms 


    a -= 1 # Hits:10.0, Total execution time: 1.044 ms, Average time per hit: 0.1044 ms 


    b -= 1 # Hits:10.0, Total execution time: 1.041 ms, Average time per hit: 0.1041 ms 


    relations.append((a, b)) # Hits:10.0, Total execution time: 2.542 ms, Average time per hit: 0.2542 ms 




uf = UnionFind(N) # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


for a, b in relations: # Hits:11.0, Total execution time: 1.167 ms, Average time per hit: 0.1060909090909091 ms 


    uf.union(a, b) # Hits:10.0, Total execution time: 14.543 ms, Average time per hit: 1.4543 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:5.0, Total execution time: 0.582 ms, Average time per hit: 0.1164 ms 


    ans = max(ans, uf.size(i)) # Hits:4.0, Total execution time: 3.793 ms, Average time per hit: 0.94825 ms 


print(ans) # Hits:1.0, Total execution time: 9.25 ms, Average time per hit: 9.25 ms 
",p02573,True
"from queue import deque # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


N,M=list(map(int, input().split())) # Hits:1.0, Total execution time: 37.25 ms, Average time per hit: 37.25 ms 


f=deque() # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


x=deque() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


mx=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for _ in range(M): # Hits:11.0, Total execution time: 1.586 ms, Average time per hit: 0.1441818181818182 ms 


    a,b = list(map(int, input().split())) # Hits:10.0, Total execution time: 7.082 ms, Average time per hit: 0.7082 ms 


    for i in f: # Hits:10.0, Total execution time: 1.209 ms, Average time per hit: 0.12090000000000001 ms 


        if a in i[0]: # Hits:9.0, Total execution time: 1.166 ms, Average time per hit: 0.12955555555555553 ms 


            if b not in i[0]: # Hits:9.0, Total execution time: 1.042 ms, Average time per hit: 0.11577777777777777 ms 


                i[0].add(b) # Hits:2.0, Total execution time: 0.5 ms, Average time per hit: 0.25 ms 


                i[1]+=1 # Hits:2.0, Total execution time: 0.459 ms, Average time per hit: 0.2295 ms 


                mx=max(mx,i[1]) # Hits:2.0, Total execution time: 0.417 ms, Average time per hit: 0.2085 ms 


            break # Hits:9.0, Total execution time: 1.957 ms, Average time per hit: 0.21744444444444447 ms 


        elif b in i[0]: # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


            i[0].add(a) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


            i[1]+=1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


            mx=max(mx,i[1]) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


            break # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    else:

        f.append([set((a,b)),2]) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


        mx=max(mx,2) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




if M == 0: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    mx = 1

print(mx) # Hits:1.0, Total execution time: 6.042 ms, Average time per hit: 6.042 ms 

","class UnionFind(): # Hits:1.0, Total execution time: 5.584 ms, Average time per hit: 5.584 ms 


    def __init__(self, n):

        self.n = n

        self.parents = [-1] * n



    def find(self, x):

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)



        if x == y:

            return



        if self.parents[x] > self.parents[y]:

            x, y = y, x



        self.parents[x] += self.parents[y]

        self.parents[y] = x



    def size(self, x):

        return -self.parents[self.find(x)]



    def same(self, x, y):

        return self.find(x) == self.find(y)



N,M=list(map(int, input().split())) # Hits:1.0, Total execution time: 36.458 ms, Average time per hit: 36.458 ms 


mx=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


uf = UnionFind(N+1) # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.206 ms, Average time per hit: 0.10963636363636364 ms 


	a,b = list(map(int, input().split())) # Hits:10.0, Total execution time: 6.499 ms, Average time per hit: 0.6498999999999999 ms 


	uf.union(a,b) # Hits:10.0, Total execution time: 14.043 ms, Average time per hit: 1.4042999999999999 ms 


for i in uf.parents: # Hits:6.0, Total execution time: 0.503 ms, Average time per hit: 0.08383333333333333 ms 


	mx = max(mx, uf.size(i)) # Hits:5.0, Total execution time: 3.874 ms, Average time per hit: 0.7747999999999999 ms 


if M == 0: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


	mx = 1

print(mx) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 





",p02573,True
"(n,m),*ab = [list(map(int, s.split())) for s in open(0)]



class UnionFind():

    def __init__(self, n):

        self.n = n

        self.parents = [-1] * n



    def find(self, x):

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)



        if x == y:

            return



        if self.parents[x] > self.parents[y]:

            x, y = y, x



        self.parents[x] += self.parents[y]

        self.parents[y] = x



    def size(self, x):

        return -self.parents[self.find(x)]



    def same(self, x, y):

        return self.find(x) == self.find(y)



    def members(self, x):

        root = self.find(x)

        return [i for i in range(self.n) if self.find(i) == root]



    def roots(self):

        return [i for i, x in enumerate(self.parents) if x < 0]



    def group_count(self):

        return len(self.roots())



    def all_group_members(self):

        return {r: self.members(r) for r in self.roots()}



    def __str__(self):

        return '\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())



u = UnionFind(n)



for a,b in ab:

    u.union(a-1,b-1)



print((max(list(map(len, list(u.all_group_members().values()))))))","n,m = list(map(int, input().split())) # Hits:1.0, Total execution time: 162.083 ms, Average time per hit: 162.083 ms 




class UnionFind: # Hits:1.0, Total execution time: 21.875 ms, Average time per hit: 21.875 ms 


    def __init__(self, n=0):

        self.d = [-1]*n



    def root(self, x):

        if self.d[x] < 0:

            return x

        self.d[x] = self.root(self.d[x])

        return self.d[x]



    def unite(self, x, y):

        x, y = self.root(x), self.root(y)

        if x == y:

            return False

        if x > y:

            x, y = y, x

        self.d[x] += self.d[y]

        self.d[y] = x

        return True



    def same(self, x, y):

        return self.root(x) == self.root(y)



    def size(self, x):

        return -self.d[self.root(x)]



u = UnionFind(n) # Hits:1.0, Total execution time: 3.917 ms, Average time per hit: 3.917 ms 




for _ in range(m): # Hits:11.0, Total execution time: 3.498 ms, Average time per hit: 0.318 ms 


    a,b = list(map(int, input().split())) # Hits:10.0, Total execution time: 23.041 ms, Average time per hit: 2.3041 ms 


    u.unite(a-1,b-1) # Hits:10.0, Total execution time: 55.333 ms, Average time per hit: 5.5333000000000006 ms 




print((-min(u.d))) # Hits:1.0, Total execution time: 21.583 ms, Average time per hit: 21.583 ms 
",p02573,False
"from sys import stdin

from collections import defaultdict

readline = stdin.readline

read = stdin.buffer.read

def r_map(): return list(map(int, readline().rstrip().split()))

def r_list(): return list(r_map())



class UnionFind:

    def __init__(self, n):

        self.n = n

        self.parents = [-1] * (n + 1)

        self.rank = [0] * (n + 1)



    def root(self, x):

        if(self.parents[x] < 0):

            return x

        else:

            self.parents[x] = self.root(self.parents[x])

            return self.parents[x]



    def unite(self, x, y) -> bool:

        x = self.root(x)

        y = self.root(y)

        if x == y:

            return False

        if self.rank[x] > self.rank[y]:

            self.parents[x] += self.parents[y]

            self.parents[y] = x

        else:

            self.parents[y] += self.parents[x]

            self.parents[x] = y

            if self.rank[x] == self.rank[y]:

                self.rank[y] += 1

        return True



    def members(self, x):

        root = self.root(x)

        return [i for i in range(self.n) if self.root(i) == root]



    def roots(self):

        return [i for i, x in enumerate(self.parents) if x < 0]



    def is_same(self, x, y) -> bool:

        return self.root(x) == self.root(y)



    def size(self, x):

        return -self.parents[self.root(x)]



    def all_group_members(self):

        return {r: self.members(r) for r in self.roots()}





def main():

    N, M = r_map()

    uf = UnionFind(N)

    for _ in range(M):

        a, b = r_map()

        uf.unite(a, b)

    ans = 0

    for i in uf.all_group_members():

        ans = max(ans, uf.size(i))

    print(ans)



if __name__ == ""__main__"":

    main()
",,p02573,False
"from collections import defaultdict # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 


from collections import deque # Hits:1.0, Total execution time: 1.542 ms, Average time per hit: 1.542 ms 




n, m = [int(x) for x in input().split()] # Hits:1.0, Total execution time: 112.875 ms, Average time per hit: 112.875 ms 


person_to_friends = defaultdict(set) # Hits:1.0, Total execution time: 1.458 ms, Average time per hit: 1.458 ms 




for _ in range(m): # Hits:11.0, Total execution time: 4.042 ms, Average time per hit: 0.3674545454545454 ms 


    a, b = [int(x) for x in input().split()] # Hits:10.0, Total execution time: 32.958 ms, Average time per hit: 3.2958000000000003 ms 


    person_to_friends[a].add(b) # Hits:10.0, Total execution time: 6.208 ms, Average time per hit: 0.6207999999999999 ms 


    person_to_friends[b].add(a) # Hits:10.0, Total execution time: 7.208 ms, Average time per hit: 0.7208 ms 




not_searched = set(range(1, n+1)) # Hits:1.0, Total execution time: 1.583 ms, Average time per hit: 1.583 ms 


max_pool_num = 1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




while len(not_searched) > 0: # Hits:2.0, Total execution time: 1.125 ms, Average time per hit: 0.5625 ms 


#     print(not_searched)

    first_person = not_searched.pop() # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


    friend_pool = set([first_person]) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


    que = deque([first_person]) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


    while len(que) > 0: # Hits:5.0, Total execution time: 1.958 ms, Average time per hit: 0.3916 ms 


        current_person = que.popleft() # Hits:4.0, Total execution time: 1.708 ms, Average time per hit: 0.427 ms 


        not_searched_friends = person_to_friends[current_person].intersection(not_searched) # Hits:4.0, Total execution time: 2.834 ms, Average time per hit: 0.7085 ms 


#         print(not_searched_friends)

        for friend in not_searched_friends: # Hits:7.0, Total execution time: 2.417 ms, Average time per hit: 0.34528571428571425 ms 


            not_searched.remove(friend) # Hits:3.0, Total execution time: 1.125 ms, Average time per hit: 0.375 ms 


            que.append(friend) # Hits:3.0, Total execution time: 1.001 ms, Average time per hit: 0.33366666666666667 ms 


            friend_pool.add(friend) # Hits:3.0, Total execution time: 0.958 ms, Average time per hit: 0.3193333333333333 ms 


    max_pool_num = max(len(friend_pool), max_pool_num) # Hits:1.0, Total execution time: 1.583 ms, Average time per hit: 1.583 ms 


print(max_pool_num) # Hits:1.0, Total execution time: 17.0 ms, Average time per hit: 17.0 ms 
","# UnionFind



# 配列で、子のID番目:(親のID), 親のID番目:(その塊の-サイズ)

# Union Findを使う

class UnionFind: # Hits:1.0, Total execution time: 331.5 ms, Average time per hit: 331.5 ms 


    def __init__(self, size):

        self.parent_indexes = [-1] * size

        

    def find_parent(self, n):

#         print(self.parent_indexes[n])

        if self.parent_indexes[n] < 0:

            return n

#         print('hewe')

        # 探しているnodeが指し示しているのが現在の親ではない場合、

        # 現在の親に書き換え(memo化)た上で返す

        self.parent_indexes[n] = self.find_parent(self.parent_indexes[n])

        return self.parent_indexes[n] 

    

    def union(self, n1, n2):

        if self.same_group(n1, n2):

            return False

        

        # サイズの大きい方の親が親であり続ける

        if self.size(n1) >= self.size(n2):

            tmp = self.size(n2)

            self.parent_indexes[self.find_parent(n2)] = self.find_parent(n1)

            self.parent_indexes[self.find_parent(n1)] -= tmp

            return True

        

        tmp = self.size(n1)

        self.parent_indexes[self.find_parent(n1)] = self.find_parent(n2)

        self.parent_indexes[self.find_parent(n2)] -= tmp

        return True

        

    

    def size(self, n):

        return -self.parent_indexes[self.find_parent(n)]

    

    def same_group(self, n1, n2):

        return self.find_parent(n1) == self.find_parent(n2)







n, m = [int(x) for x in input().split()] # Hits:1.0, Total execution time: 81.667 ms, Average time per hit: 81.667 ms 


uf = UnionFind(n) # Hits:1.0, Total execution time: 3.708 ms, Average time per hit: 3.708 ms 




for _ in range(m): # Hits:11.0, Total execution time: 3.25 ms, Average time per hit: 0.2954545454545454 ms 


    a, b = [int(x) for x in input().split()] # Hits:10.0, Total execution time: 24.5 ms, Average time per hit: 2.45 ms 


    uf.union(a-1, b-1) # Hits:10.0, Total execution time: 50.0 ms, Average time per hit: 5.0 ms 


    

print((-min(uf.parent_indexes))) # Hits:1.0, Total execution time: 13.083 ms, Average time per hit: 13.083 ms 
",p02573,True
"def main():

    import sys

    sys.setrecursionlimit(100000)

    n, m, *ab, = list(map(int, open(0).read().split()))



    p = [-1] * (n + 1)



    def f(x):

        if p[x] < 0:

            return x

        else:

            return f(p[x])



    def g(x, t):

        if p[x] < 0:

            return

        nx = p[x]

        p[x] = t

        g(nx, t)

        



    ans = -1

    order = set()

    for i, j in zip(ab[::2], ab[1::2]):

        if i > j:

            i, j = j, i

        if (i, j) in order:

            continue



        pi, pj = f(i), f(j)

        if pi == pj:

            continue

        p[pi] += p[pj]

        ans = min(ans, p[pi])

        p[j] = pi

        p[pj] = pi

        g(j, pi)

        order.add((i, j))

    print((-ans))





if __name__ == '__main__':

    main()
",,p02573,False
"from collections import deque # Hits:1.0, Total execution time: 4.292 ms, Average time per hit: 4.292 ms 




n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 75.0 ms, Average time per hit: 75.0 ms 


ab_array = [list(map(int, input().split())) for _ in range(m)] # Hits:1.0, Total execution time: 21.208 ms, Average time per hit: 21.208 ms 




ad_sum_array = [0] * n # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


ad_array = [set() for _ in range(n)] # Hits:1.0, Total execution time: 2.209 ms, Average time per hit: 2.209 ms 




for ab in ab_array: # Hits:11.0, Total execution time: 1.917 ms, Average time per hit: 0.17427272727272727 ms 


    a, b = ab # Hits:10.0, Total execution time: 1.876 ms, Average time per hit: 0.1876 ms 


    ad_array[a - 1].add(b - 1) # Hits:10.0, Total execution time: 4.041 ms, Average time per hit: 0.4041 ms 


    ad_array[b - 1].add(a - 1) # Hits:10.0, Total execution time: 5.043 ms, Average time per hit: 0.5043 ms 




check_array = [False] * n # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 




def bfs(node_num): # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


    queue = deque([node_num])

    check_array[node_num] = True

    num = 1



    while queue:

        node = queue.popleft()

        for ad in ad_array[node]:

            if not check_array[ad]:

                check_array[ad] = True

                queue.append(ad)

                num += 1

    return num



ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:5.0, Total execution time: 4.125 ms, Average time per hit: 0.825 ms 


    if not check_array[i]: # Hits:4.0, Total execution time: 1.082 ms, Average time per hit: 0.2705 ms 


        ans = max(ans, bfs(i)) # Hits:1.0, Total execution time: 12.375 ms, Average time per hit: 12.375 ms 




print(ans) # Hits:1.0, Total execution time: 17.875 ms, Average time per hit: 17.875 ms 
",,p02573,True
"class UnionFind(): # Hits:1.0, Total execution time: 16.666 ms, Average time per hit: 16.666 ms 


    def __init__(self, n):

        self.n = n

        self.parents = [-1] * n



    def find(self, x):

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)

        if x == y:

            return



        if self.parents[x] > self.parents[y]:

            x, y = y, x

        self.parents[x] += self.parents[y]

        self.parents[y] = x



    def same(self, x, y):

        return self.find(x) == self.find(y)



    def size(self, x):

        return -self.parents[self.find(x)]



    def members(self, x):

        root = self.find(x)

        return [i for i in range(self.n) if self.find(i) == root]



    def roots(self):

        return [i for i, x in enumerate(self.parents) if x < 0]



    def group_count(self):

        return len(self.roots())



    def all_group_members(self):

        return {r: self.members(r) for r in self.roots()}



    def max_group_members(self):

        ret = 1

        for r in self.roots():

            ret = max(len(self.members(r)), ret)

        return ret



    def __str__(self):

        return '\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())





N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 69.917 ms, Average time per hit: 69.917 ms 


Groups = UnionFind(N) # Hits:1.0, Total execution time: 3.417 ms, Average time per hit: 3.417 ms 


for i in range(M): # Hits:11.0, Total execution time: 2.75 ms, Average time per hit: 0.25 ms 


    a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 17.749 ms, Average time per hit: 1.7749000000000001 ms 


    Groups.union(a-1, b-1) # Hits:10.0, Total execution time: 29.498 ms, Average time per hit: 2.9498 ms 




print((Groups.max_group_members())) # Hits:1.0, Total execution time: 25.333 ms, Average time per hit: 25.333 ms 
","class UnionFind(): # Hits:1.0, Total execution time: 9.167 ms, Average time per hit: 9.167 ms 


    def __init__(self, n):

        self.n = n

        self.parents = [-1] * n



    def find(self, x):

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)

        if x == y:

            return



        if self.parents[x] > self.parents[y]:

            x, y = y, x

        self.parents[x] += self.parents[y]

        self.parents[y] = x



    def size(self, x):

        return -self.parents[self.find(x)]





N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 51.208 ms, Average time per hit: 51.208 ms 


Groups = UnionFind(N) # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


for i in range(M): # Hits:11.0, Total execution time: 2.207 ms, Average time per hit: 0.2006363636363636 ms 


    a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 15.458 ms, Average time per hit: 1.5458 ms 


    Groups.union(a-1, b-1) # Hits:10.0, Total execution time: 24.5 ms, Average time per hit: 2.45 ms 




ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N): # Hits:5.0, Total execution time: 0.833 ms, Average time per hit: 0.1666 ms 


    ans = max(Groups.size(i), ans) # Hits:4.0, Total execution time: 6.292 ms, Average time per hit: 1.573 ms 




print(ans) # Hits:1.0, Total execution time: 11.584 ms, Average time per hit: 11.584 ms 
",p02573,True
"import sys # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 


input=sys.stdin.readline # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


sys.setrecursionlimit(10 ** 8) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


from itertools import accumulate # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


from itertools import permutations # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


from itertools import combinations # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


from collections import defaultdict # Hits:1.0, Total execution time: 2.167 ms, Average time per hit: 2.167 ms 


from collections import Counter # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


import fractions # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


import math # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


from collections import deque # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


from bisect import bisect_left # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


from bisect import bisect_right # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


from bisect import insort_left # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


import itertools # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


from heapq import heapify # Hits:1.0, Total execution time: 1.041 ms, Average time per hit: 1.041 ms 


from heapq import heappop # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


from heapq import heappush # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


import heapq # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


from copy import deepcopy # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


from decimal import Decimal # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


alf = list(""abcdefghijklmnopqrstuvwxyz"") # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


ALF = list(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"") # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


#import numpy as np

INF = float(""inf"") # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


#d = defaultdict(int)

#d = defaultdict(list)

N,M = list(map(int,input().split())) # Hits:1.0, Total execution time: 42.584 ms, Average time per hit: 42.584 ms 


count = [[0]*N for _ in range(N)] # Hits:1.0, Total execution time: 2.875 ms, Average time per hit: 2.875 ms 


fr = [[] for _ in range(N)] # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


for _ in range(M): # Hits:11.0, Total execution time: 1.583 ms, Average time per hit: 0.1439090909090909 ms 


    a,b = list(map(int,input().split())) # Hits:10.0, Total execution time: 6.873 ms, Average time per hit: 0.6872999999999999 ms 


    a,b = a-1,b-1 # Hits:10.0, Total execution time: 1.794 ms, Average time per hit: 0.1794 ms 


    if count[a][b] == 1: # Hits:10.0, Total execution time: 2.166 ms, Average time per hit: 0.2166 ms 


        continue # Hits:4.0, Total execution time: 0.376 ms, Average time per hit: 0.094 ms 


    count[a][b] = 1 # Hits:6.0, Total execution time: 1.042 ms, Average time per hit: 0.17366666666666666 ms 


    count[b][a] = 1 # Hits:6.0, Total execution time: 0.999 ms, Average time per hit: 0.1665 ms 


    fr[a].append(b) # Hits:6.0, Total execution time: 1.25 ms, Average time per hit: 0.20833333333333334 ms 


    fr[b].append(a) # Hits:6.0, Total execution time: 3.541 ms, Average time per hit: 0.5901666666666666 ms 


used = [-1]*N  # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


MAX = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def dfs(fr,cur,parent,cnt): # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


    global MAX

    MAX = max(cnt,MAX)

    children = fr[cur]

    for chi in children:

        if chi == parent or used[chi] != -1:

            continue

        used[chi] = 0

        cnt += 1

        dfs(fr,chi,cur,cnt)

    return



for i in range(N): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    cnt = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    if used[i] != -1: # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


        continue

    used[i] = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    dfs(fr,i,-1,cnt) # Hits:1.0, Total execution time: 3.25 ms, Average time per hit: 3.25 ms 


print(MAX)



            












","import sys # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


sys.setrecursionlimit(99999999) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 






[n,m]=list(map(int,input().split())) # Hits:1.0, Total execution time: 38.041 ms, Average time per hit: 38.041 ms 


friends=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(m): # Hits:11.0, Total execution time: 1.834 ms, Average time per hit: 0.16672727272727272 ms 


    friends.append(list(map(int,input().split()))) # Hits:10.0, Total execution time: 12.833 ms, Average time per hit: 1.2832999999999999 ms 




tomodachi=[[]for i in range(n)] # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 




for i in range(m): # Hits:11.0, Total execution time: 1.584 ms, Average time per hit: 0.144 ms 


    tomodachi[friends[i][0]-1].append(friends[i][1]-1) # Hits:10.0, Total execution time: 3.71 ms, Average time per hit: 0.371 ms 


    tomodachi[friends[i][1]-1].append(friends[i][0]-1) # Hits:10.0, Total execution time: 3.374 ms, Average time per hit: 0.3374 ms 




for i in range(n): # Hits:5.0, Total execution time: 0.709 ms, Average time per hit: 0.1418 ms 


    tomodachi[i]=list(set(tomodachi[i])) # Hits:4.0, Total execution time: 2.417 ms, Average time per hit: 0.60425 ms 




namelist=[1 for i in range(n)] # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


teams=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def haba(x,kari,tomodachi,namelist): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    for i in range(len(tomodachi[x])):

        if namelist[tomodachi[x][i]]==1:#生き残っているなら

            kari.append(tomodachi[x][i])

            namelist[tomodachi[x][i]]=0#殺す

            haba(tomodachi[x][i],kari,tomodachi,namelist)

    return(kari)

            





for i in range(n): # Hits:5.0, Total execution time: 0.75 ms, Average time per hit: 0.15 ms 


    if namelist[i]==1: # Hits:4.0, Total execution time: 0.751 ms, Average time per hit: 0.18775 ms 


        teams.append(list(set(haba(i,[i],tomodachi,namelist)))) # Hits:1.0, Total execution time: 9.708 ms, Average time per hit: 9.708 ms 




saidai=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(len(teams)): # Hits:2.0, Total execution time: 0.5 ms, Average time per hit: 0.25 ms 


    if saidai<len(teams[i]): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


        saidai=len(teams[i]) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




ans=saidai # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




print(ans) # Hits:1.0, Total execution time: 9.666 ms, Average time per hit: 9.666 ms 

",p02573,True
"class UnionFind(): # Hits:1.0, Total execution time: 11.333 ms, Average time per hit: 11.333 ms 


    def __init__(self, n):

        self.n = n

        self.parents = [-1] * n



    def find(self, x):

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)



        if x == y:

            return



        if self.parents[x] > self.parents[y]:

            x, y = y, x



        self.parents[x] += self.parents[y]

        self.parents[y] = x



    def size(self, x):

        return -self.parents[self.find(x)]



    def same(self, x, y):

        return self.find(x) == self.find(y)



    def members(self, x):

        root = self.find(x)

        return [i for i in range(self.n) if self.find(i) == root]



    def roots(self):

        return [i for i, x in enumerate(self.parents) if x < 0]



    def group_count(self):

        return len(self.roots())



    def all_group_members(self):

        return {r: self.members(r) for r in self.roots()}



    def __str__(self):

        return '\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())





n,m=list(map(int,input().split())) # Hits:1.0, Total execution time: 42.0 ms, Average time per hit: 42.0 ms 


uf=UnionFind(n) # Hits:1.0, Total execution time: 1.834 ms, Average time per hit: 1.834 ms 


for _ in range(m): # Hits:11.0, Total execution time: 1.458 ms, Average time per hit: 0.13254545454545452 ms 


  a,b=list(map(int,input().split())) # Hits:10.0, Total execution time: 11.791 ms, Average time per hit: 1.1790999999999998 ms 


  uf.union(a-1,b-1) # Hits:10.0, Total execution time: 18.835 ms, Average time per hit: 1.8835 ms 




dic=uf.all_group_members() # Hits:1.0, Total execution time: 8.25 ms, Average time per hit: 8.25 ms 


max_size=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for ss in list(dic.values()): # Hits:2.0, Total execution time: 0.583 ms, Average time per hit: 0.2915 ms 


  max_size=max(max_size,len(ss)) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




print(max_size) # Hits:1.0, Total execution time: 6.792 ms, Average time per hit: 6.792 ms 
","n,m=list(map(int,input().split())) # Hits:1.0, Total execution time: 39.584 ms, Average time per hit: 39.584 ms 


par = [-1]*(n+1) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


def find(x): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    if par[x] < 0:

        return x

    else:

        par[x] = find(par[x]) #経路圧縮

        return par[x]

def same(x,y): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    return find(x) == find(y)

def unite(x,y): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    x = find(x)

    y = find(y)

    if x == y:

      return 0

    else:

      if par[x] > par[y]:

        x,y = y,x

      par[x] += par[y]

      par[y] = x

def size(x): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    return -par[find(x)]



max_size=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for _ in range(m): # Hits:11.0, Total execution time: 1.625 ms, Average time per hit: 0.1477272727272727 ms 


  a,b=list(map(int,input().split())) # Hits:10.0, Total execution time: 11.208 ms, Average time per hit: 1.1208 ms 


  unite(a,b) # Hits:10.0, Total execution time: 16.208 ms, Average time per hit: 1.6208 ms 


  

print((-min(par))) # Hits:1.0, Total execution time: 6.875 ms, Average time per hit: 6.875 ms 
",p02573,True
"#!/usr/bin/env python3

def main():

    from collections import deque



    N, M = list(map(int, input().split()))

    friends_input = [set() for _ in range(N)]

    for _ in range(M):

        a, b = list(map(int, input().split()))

        friends_input[a - 1].add(b - 1)

        friends_input[b - 1].add(a - 1)



    seen = [False] * N

    friends_group = []

    for i in range(N):

        if seen[i]:

            continue

        q = deque([i])

        tmp_group = set([i])

        while q:

            now = q.popleft()

            if seen[now]:

                continue

            seen[now] = True

            for j in friends_input[now]:

                if not seen[j]:

                    q.append(j)

                    tmp_group.add(j)

        friends_group.append(tmp_group)

    ans = 0

    for i in friends_group:

        ans = max(ans, len(i))

    print(ans)





if __name__ == '__main__':

    main()
",,p02573,False
"N,M=list(map(int,input().split())) # Hits:1.0, Total execution time: 39.375 ms, Average time per hit: 39.375 ms 




G=[[] for i in range(N)] # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.416 ms, Average time per hit: 0.12872727272727272 ms 


    a,b=[int(x)-1 for x in input().split()] # Hits:10.0, Total execution time: 14.081 ms, Average time per hit: 1.4081 ms 


    G[a].append(b) # Hits:10.0, Total execution time: 1.961 ms, Average time per hit: 0.1961 ms 


    G[b].append(a) # Hits:10.0, Total execution time: 2.457 ms, Average time per hit: 0.2457 ms 




from collections import deque # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 




over=[] #探索ずみ # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


before=[] #探索前 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:5.0, Total execution time: 0.707 ms, Average time per hit: 0.1414 ms 


    before.append(i) # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 




dist=[float('inf')]*N # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


cnt=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


cup=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while before: # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


    v=before.pop(0) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    que=deque([v]) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    dist[v]=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    cuppy=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    cuppy.append(v) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    while que: # Hits:5.0, Total execution time: 0.499 ms, Average time per hit: 0.0998 ms 


        u=que.popleft() # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


        

        for e in G[u]: # Hits:24.0, Total execution time: 2.708 ms, Average time per hit: 0.11283333333333333 ms 


            if dist[e] == float('inf'): # Hits:20.0, Total execution time: 4.417 ms, Average time per hit: 0.22085 ms 


                

                que.append(e) # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


                before.remove(e) # Hits:3.0, Total execution time: 0.582 ms, Average time per hit: 0.194 ms 


                cuppy.append(e) # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


                dist[e]=dist[u] + 1 # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


    

    cup.append(cuppy) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    cnt += 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 






ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(len(cup)): # Hits:2.0, Total execution time: 0.5 ms, Average time per hit: 0.25 ms 


    ans = max(ans,len(cup[i])) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


print(ans) # Hits:1.0, Total execution time: 5.459 ms, Average time per hit: 5.459 ms 
","N,M=list(map(int,input().split())) # Hits:1.0, Total execution time: 43.5 ms, Average time per hit: 43.5 ms 




class UnionFind(): # Hits:1.0, Total execution time: 10.167 ms, Average time per hit: 10.167 ms 


    def __init__(self,n): #n:要素数

        self.n=n

        self.parents = [-1]*n 

        #parents:各要素の親要素番号を格納

        #要素が根である場合、-(そのグループの要素数)を格納する

    

    def find(self,x): #xが属する根を返す

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x]=self.find(self.parents[x])

            return self.parents[x]

    

    def union(self,x,y): #xのグループとyのグループを併合する

        x = self.find(x)

        y = self.find(y)

        

        if x==y:

            return

        

        if self.parents[x] > self.parents[y]: #|xのグループ|<|yのグループ|

            x,y=y,x

        

        self.parents[x] += self.parents[y]

        self.parents[y] = x

        #よりグループ数が多い方の根にもう一方のグループを接続

        

    def size(self,x): #xの属するグループのサイズ

        return -self.parents[self.find(x)]



uf=UnionFind(N) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.876 ms, Average time per hit: 0.17054545454545453 ms 


    a,b=[int(x)-1 for x in input().split()] # Hits:10.0, Total execution time: 19.082 ms, Average time per hit: 1.9082000000000001 ms 


    uf.union(a,b) # Hits:10.0, Total execution time: 19.918 ms, Average time per hit: 1.9918 ms 




ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(N): # Hits:5.0, Total execution time: 0.791 ms, Average time per hit: 0.15819999999999998 ms 


    if uf.size(i) > ans: # Hits:4.0, Total execution time: 4.543 ms, Average time per hit: 1.13575 ms 


        ans=uf.size(i) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


        

print(ans) # Hits:1.0, Total execution time: 7.375 ms, Average time per hit: 7.375 ms 
",p02573,True
"n, m = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.666 ms, Average time per hit: 37.666 ms 




class unionfind(): # Hits:1.0, Total execution time: 7.166 ms, Average time per hit: 7.166 ms 


    def __init__(self,n):

        self.li = [i for i in range(n+1)]

        self.group = [1]*(n+1)



    def find(self, x):

        while self.li[x]!=x:

            x = self.li[x]

        return x



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)

        if x == y:

            return;

        elif x>y:

            self.li[y] = x

            self.group[x] += self.group[y]

        else:

            self.li[x] = y

            self.group[y] += self.group[x]

x = unionfind(n) # Hits:1.0, Total execution time: 3.167 ms, Average time per hit: 3.167 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for _ in range(m): # Hits:11.0, Total execution time: 1.125 ms, Average time per hit: 0.10227272727272727 ms 


    a,b = list(map(int,input().split())) # Hits:10.0, Total execution time: 10.668 ms, Average time per hit: 1.0668 ms 


    x.union(a,b) # Hits:10.0, Total execution time: 15.625 ms, Average time per hit: 1.5625 ms 


print((max(x.group))) # Hits:1.0, Total execution time: 7.166 ms, Average time per hit: 7.166 ms 
","n, m = list(map(int,input().split())) # Hits:1.0, Total execution time: 36.625 ms, Average time per hit: 36.625 ms 




class unionfind(): # Hits:1.0, Total execution time: 6.125 ms, Average time per hit: 6.125 ms 


    def __init__(self,n):

        self.li = [-1]*(n+1)



    def find(self, x):

        if self.li[x]<0:

            return x

        else:

            self.li[x] = self.find(self.li[x])

            return self.li[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)

        if x == y:

            return;

        if x>y:

            x, y = y, x

        self.li[x]+=self.li[y]

        self.li[y] = x



x = unionfind(n) # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for _ in range(m): # Hits:11.0, Total execution time: 1.626 ms, Average time per hit: 0.14781818181818182 ms 


    a,b = list(map(int,input().split())) # Hits:10.0, Total execution time: 10.79 ms, Average time per hit: 1.079 ms 


    x.union(a,b) # Hits:10.0, Total execution time: 16.5 ms, Average time per hit: 1.65 ms 


print((-min(x.li))) # Hits:1.0, Total execution time: 7.334 ms, Average time per hit: 7.334 ms 
",p02573,True
"from collections import deque # Hits:1.0, Total execution time: 2.084 ms, Average time per hit: 2.084 ms 


import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 






N,M = list(map(int,input().split())) # Hits:1.0, Total execution time: 35.833 ms, Average time per hit: 35.833 ms 




table = [[] for i in range(N)] # Hits:1.0, Total execution time: 1.416 ms, Average time per hit: 1.416 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.167 ms, Average time per hit: 0.1060909090909091 ms 


    a,b = list(map(int,input().split())) # Hits:10.0, Total execution time: 4.706 ms, Average time per hit: 0.4706 ms 


    a -= 1 # Hits:10.0, Total execution time: 1.085 ms, Average time per hit: 0.1085 ms 


    b -= 1 # Hits:10.0, Total execution time: 0.957 ms, Average time per hit: 0.09570000000000001 ms 


#    print(a,b)

    table[a].append(b) # Hits:10.0, Total execution time: 1.751 ms, Average time per hit: 0.1751 ms 


    table[b].append(a) # Hits:10.0, Total execution time: 2.417 ms, Average time per hit: 0.2417 ms 




visited = [0]*N # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


visited[0] = 1 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


H = deque() # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


H.append(0) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


c = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




while H: # Hits:5.0, Total execution time: 0.5 ms, Average time per hit: 0.1 ms 


    ans = max(ans,c) # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


    x = H.popleft() # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


#    print(""x:"",x,""c:"",c)

#    print(visited)

    for y in table[x]: # Hits:24.0, Total execution time: 2.541 ms, Average time per hit: 0.105875 ms 


        if visited[y] == 0: # Hits:20.0, Total execution time: 2.584 ms, Average time per hit: 0.12919999999999998 ms 


            H.append(y) # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


            visited[y] = 1 # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


#            print(y,""added"")

            c += 1 # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    if not H: # Hits:4.0, Total execution time: 0.336 ms, Average time per hit: 0.084 ms 


        for i in range(N): # Hits:5.0, Total execution time: 0.543 ms, Average time per hit: 0.10859999999999999 ms 


            if visited[i] == 0: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


                H.append(i) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


                visited[i] = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


                c = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


                break # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




print(ans) # Hits:1.0, Total execution time: 6.0 ms, Average time per hit: 6.0 ms 
","class UnionFind: # Hits:1.0, Total execution time: 8.375 ms, Average time per hit: 8.375 ms 


    def __init__(self,N):

        self.parent = [i for i in range(N)]

        self.rank = [0] * N

        self.count = 0

        self._size = [1]*N

    def root(self,a):

        if self.parent[a] == a:

            return a

        else:

            self.parent[a] = self.root(self.parent[a])

            return self.parent[a]

    def is_sama(self,a,b):

        return self.root(a) == self.root(b)

    def unite(self,a,b):

        ra = self.root(a)

        rb = self.root(b)

        if ra == rb:

            return

        if self.rank[ra] < self.rank[rb]:

            self.parent[ra] = rb

            self._size[rb] += self._size[ra]

        else:

            self.parent[rb] = ra

            if self.rank[ra] == self.rank[rb]:

                self.rank[ra] += 1

            self._size[ra] += self._size[rb]

        self.count += 1

    def print_info(self):

        print((""parent"", self.parent))

        print((""rank"", self.rank))

        print((""count"", self.count))

        print((""size"", self._size))

    def size(self,a):

        return self._size[self.root(a)]



N, M = list(map(int,input().split())) # Hits:1.0, Total execution time: 36.0 ms, Average time per hit: 36.0 ms 


uf = UnionFind(N) # Hits:1.0, Total execution time: 2.667 ms, Average time per hit: 2.667 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.164 ms, Average time per hit: 0.10581818181818181 ms 


    a,b = list(map(int,input().split())) # Hits:10.0, Total execution time: 9.875 ms, Average time per hit: 0.9875 ms 


    a -= 1 # Hits:10.0, Total execution time: 1.042 ms, Average time per hit: 0.1042 ms 


    b -= 1 # Hits:10.0, Total execution time: 1.04 ms, Average time per hit: 0.104 ms 


    uf.unite(a,b) # Hits:10.0, Total execution time: 17.375 ms, Average time per hit: 1.7375 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(N): # Hits:5.0, Total execution time: 0.541 ms, Average time per hit: 0.1082 ms 


    ans = max(ans,uf.size(i)) # Hits:4.0, Total execution time: 3.918 ms, Average time per hit: 0.9795 ms 


print(ans) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 
",p02573,True
"from collections import deque # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 




n,m = list(map(int,input().split())) # Hits:1.0, Total execution time: 36.708 ms, Average time per hit: 36.708 ms 




g = {i:set() for i in range(n+1)} # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 




for i in range(m): # Hits:11.0, Total execution time: 1.044 ms, Average time per hit: 0.0949090909090909 ms 


    a,b = list(map(int,input().split())) # Hits:10.0, Total execution time: 9.54 ms, Average time per hit: 0.954 ms 


    g[a].add(b) # Hits:10.0, Total execution time: 2.002 ms, Average time per hit: 0.2002 ms 


    g[b].add(a) # Hits:10.0, Total execution time: 2.375 ms, Average time per hit: 0.2375 ms 


    

seen = {i:0 for i in range(n+1)} # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


seen[0]=1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


seen[1]=1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


q = deque() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


q.append(1) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


grpsize=1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




while 0 in list(seen.values()): # Hits:2.0, Total execution time: 0.833 ms, Average time per hit: 0.4165 ms 


    if len(q)>0: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


        now = q.popleft() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


        nextp = g[now] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        for i in nextp: # Hits:4.0, Total execution time: 0.499 ms, Average time per hit: 0.12475 ms 


            if seen[i]==0: # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


                q.append(i) # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


                grpsize+=1 # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


                seen[i]=grpsize # Hits:3.0, Total execution time: 0.374 ms, Average time per hit: 0.12466666666666668 ms 


        

    else:

        for i in range(1,n+1): # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


            if seen[i]==0: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


                grpsize=1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


                seen[i]=grpsize # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


                q.append(i) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


                break # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


                

print((max(seen.values()))) # Hits:1.0, Total execution time: 5.958 ms, Average time per hit: 5.958 ms 
","from sys import setrecursionlimit # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 




def find(par,i): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    if par[i]<0:

        return i

    par[i] = find(par,par[i])

    return par[i]



def unite(par,i,j): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ri = find(par,i)

    rj = find(par, j)

    if ri==rj:

        return

    par[rj] += par[ri]

    par[ri] = rj

    

setrecursionlimit(10**6) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


n,m = list(map(int,input().split())) # Hits:1.0, Total execution time: 32.958 ms, Average time per hit: 32.958 ms 




parent = [-1]*n # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


for _ in range(m): # Hits:11.0, Total execution time: 1.333 ms, Average time per hit: 0.12118181818181818 ms 


    a,b = [int(x)-1 for x in input().split()] # Hits:10.0, Total execution time: 13.126 ms, Average time per hit: 1.3126 ms 


    unite(parent,a,b) # Hits:10.0, Total execution time: 15.25 ms, Average time per hit: 1.525 ms 


    

print((-min(parent))) # Hits:1.0, Total execution time: 5.833 ms, Average time per hit: 5.833 ms 
",p02573,True
"n,m = list(map(int,input().split())) # Hits:1.0, Total execution time: 34.583 ms, Average time per hit: 34.583 ms 


par = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(n): # Hits:5.0, Total execution time: 0.834 ms, Average time per hit: 0.1668 ms 


    par.append(i)  #初期親 # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


rank = [1 for i in range(n)] #初期ランク # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


cut = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def find(n): #親検索andランク短縮 # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    global cut

    if par[n] == n:

        for i in range(len(cut)):

            par[cut[i]] = n

        cut = []

        return n

    else:

        cut.append(n)

        find(par[n])

        return find(par[n])

def shorten(n): # 根に直接接続する # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    global cut

    if par[n] == n:

        for i in range(len(cut)):

            par[cut[i]] = n

        cut = []

    else:

        cut.append(n)

        shorten(par[n])

def unite(a,b): #グループ併合 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    x = find(a)

    y = find(b) #根っこ同士をくっつける

    if x == y: 

        return    #既に同一ユニオンなら何もしない

    if rank[x] < rank[y]:

        par[x] = y 

    elif rank[x] == rank[y]:

        par[y] = x

        rank[x] += 1

    else:

        par[y] = x

def judge(a,b): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    return par[a] == par[b]

for i in range(m): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    a,b = list(map(int,input().split())) # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


    a -= 1 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    b -= 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    unite(a,b) # Hits:1.0, Total execution time: 3.958 ms, Average time per hit: 3.958 ms 


for i in range(n):

    shorten(i)

import collections

c = collections.Counter(par)

ans = 0

for i in range(n):

    ans = max(ans,c[i])

print(ans)","n,m = list(map(int,input().split())) # Hits:1.0, Total execution time: 36.959 ms, Average time per hit: 36.959 ms 


par = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:5.0, Total execution time: 0.875 ms, Average time per hit: 0.175 ms 


    par.append(-1)  #初期親 # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


rank = [1 for i in range(n)] #初期ランク # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


cut = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def find(n): #親検索andランク短縮 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    global cut

    if par[n] < 0:

        for i in range(len(cut)):

            par[cut[i]] = n

        cut = []

        return n

    else:

        cut.append(n)

        find(par[n])

        return find(par[n])

def shorten(n): # 根に直接接続する # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    global cut

    if par[n] < 0:

        for i in range(len(cut)):

            par[cut[i]] = n

        cut = []

    else:

        cut.append(n)

        shorten(par[n])

def unite(a,b): #グループ併合 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    x = find(a)

    y = find(b) #根っこ同士をくっつける

    if x == y: 

        return    #既に同一ユニオンなら何もしない

    if rank[x] < rank[y]:

        par[y] += par[x]

        par[x] = y 

    elif rank[x] == rank[y]:

        par[x] += par[y]

        par[y] = x

        rank[x] += 1

    else:

        par[x] += par[y]

        par[y] = x

def judge(a,b): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    return par[a] == par[b]

for i in range(m): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    a,b = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.917 ms, Average time per hit: 1.917 ms 


    a -= 1 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    b -= 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    unite(a,b) # Hits:1.0, Total execution time: 3.958 ms, Average time per hit: 3.958 ms 


ans = 0

for i in range(n):

    ans = max(ans,-par[i])

print(ans)",p02573,True
"# 接続最大クラスタのサイズが答え？



N, M = [int(x) for x in input().split(' ')] # Hits:1.0, Total execution time: 42.0 ms, Average time per hit: 42.0 ms 




from collections import defaultdict # Hits:1.0, Total execution time: 2.083 ms, Average time per hit: 2.083 ms 


d = defaultdict(set) # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 




for i in range(M): # Hits:11.0, Total execution time: 1.501 ms, Average time per hit: 0.13645454545454547 ms 


    a, b = [int(x) for x in input().split(' ')] # Hits:10.0, Total execution time: 13.125 ms, Average time per hit: 1.3125 ms 


    d[a].add(b) # Hits:10.0, Total execution time: 2.333 ms, Average time per hit: 0.2333 ms 


    d[b].add(a) # Hits:10.0, Total execution time: 2.499 ms, Average time per hit: 0.2499 ms 




def bfs(i): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    obs = {i}

    passed = {i}



    # get next_obs

    before = {i}

    while True:

        after = set()

        for i in before:

            after |= d[i]

        before = after - passed

        passed |= after

        if len(after) == 0:

            return len(passed)



print((max([bfs(i) for i in range(1, N+1)]))) # Hits:1.0, Total execution time: 19.666 ms, Average time per hit: 19.666 ms 
","# 接続最大クラスタのサイズが答え？



N, M = [int(x) for x in input().split(' ')] # Hits:1.0, Total execution time: 39.125 ms, Average time per hit: 39.125 ms 




# from collections import defaultdict

# d = defaultdict(set)



# for i in range(M):

#     a, b = [int(x) for x in input().split(' ')]

#     d[a].add(b)

#     d[b].add(a)



class UF: # Hits:1.0, Total execution time: 7.625 ms, Average time per hit: 7.625 ms 


    def __init__(self):

        self.r = [-1] * N



    def root(self, i):

        r = self.r

        if r[i] < 0:

            return i

        else:

            r[i] = self.root(r[i])

            return r[i]



    def union(self, i, j):

        i -= 1

        j -= 1

        ri = self.root(i)

        rj = self.root(j)

        if ri == rj:

            return

        else:

            if not self.r[ri] < self.r[rj]:

                ri, rj = rj, ri

            self.r[ri] += self.r[rj]

            self.r[rj] = ri

            return



    def max_size(self):

        return -min(self.r)



uf = UF() # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.293 ms, Average time per hit: 0.11754545454545455 ms 


    uf.union(*[int(x) for x in input().split(' ')]) # Hits:10.0, Total execution time: 24.998 ms, Average time per hit: 2.4998 ms 


print((uf.max_size())) # Hits:1.0, Total execution time: 6.042 ms, Average time per hit: 6.042 ms 


        

        


",p02573,True
"N,M = list(map(int,input().split())) # Hits:1.0, Total execution time: 33.917 ms, Average time per hit: 33.917 ms 


ls = [0 for _ in range(N)] # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 


flg = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.25 ms, Average time per hit: 0.11363636363636365 ms 


    a,b = list(map(int,input().split())) # Hits:10.0, Total execution time: 9.665 ms, Average time per hit: 0.9665 ms 


    if ls[a-1] == 0 and ls[b-1] == 0: # Hits:10.0, Total execution time: 1.54 ms, Average time per hit: 0.154 ms 


        ls[a-1]=flg # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        ls[b-1]=flg # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        flg+=1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    elif ls[a-1] == 0: # Hits:9.0, Total execution time: 1.167 ms, Average time per hit: 0.12966666666666665 ms 


        ls[a-1] = ls[b-1] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    elif ls[b-1] == 0: # Hits:9.0, Total execution time: 1.334 ms, Average time per hit: 0.14822222222222223 ms 


        ls[b-1] = ls[a-1] # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


    else:

        check = ls[b-1] # Hits:7.0, Total execution time: 0.916 ms, Average time per hit: 0.13085714285714287 ms 


        ls[b-1] = ls[a-1] # Hits:7.0, Total execution time: 1.334 ms, Average time per hit: 0.19057142857142859 ms 


        for l in range(len(ls)): # Hits:35.0, Total execution time: 4.418 ms, Average time per hit: 0.12622857142857144 ms 


            if ls[l] == check: # Hits:28.0, Total execution time: 3.457 ms, Average time per hit: 0.12346428571428571 ms 


                ls[l]=ls[a-1] # Hits:20.0, Total execution time: 4.416 ms, Average time per hit: 0.22080000000000002 ms 


import collections # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


c = collections.Counter(ls) # Hits:1.0, Total execution time: 3.291 ms, Average time per hit: 3.291 ms 


plan = c.most_common() # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


if plan[0][0] == 0 and M != 0: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ans = plan[1][1]

elif M ==0: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    ans =1

else:

    ans = plan[0][1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


print(ans) # Hits:1.0, Total execution time: 5.708 ms, Average time per hit: 5.708 ms 
","class UnionFind(): # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 


    def __init__(self, n):

        self.n = n

        self.parents = [-1] * n



    def find(self, x):

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)



        if x == y:

            return



        if self.parents[x] > self.parents[y]:

            x, y = y, x



        self.parents[x] += self.parents[y]

        self.parents[y] = x



    def size(self, x):

        return -self.parents[self.find(x)]



    def same(self, x, y):

        return self.find(x) == self.find(y)



    def members(self, x):

        root = self.find(x)

        return [i for i in range(self.n) if self.find(i) == root]



    def roots(self):

        return [i for i, x in enumerate(self.parents) if x < 0]



    def group_count(self):

        return len(self.roots())



    def all_group_members(self):

        return {r: self.members(r) for r in self.roots()}



    def __str__(self):

        return '\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())



n,m = list(map(int,input().split())) # Hits:1.0, Total execution time: 39.708 ms, Average time per hit: 39.708 ms 


uf = UnionFind(n) # Hits:1.0, Total execution time: 1.791 ms, Average time per hit: 1.791 ms 


for i in range(m): # Hits:11.0, Total execution time: 1.498 ms, Average time per hit: 0.13618181818181818 ms 


    a,b = list(map(int,input().split())) # Hits:10.0, Total execution time: 9.29 ms, Average time per hit: 0.929 ms 


    uf.union(a-1,b-1) # Hits:10.0, Total execution time: 13.918 ms, Average time per hit: 1.3918 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for j in range(n): # Hits:5.0, Total execution time: 0.541 ms, Average time per hit: 0.1082 ms 


    check = uf.size(j) # Hits:4.0, Total execution time: 2.959 ms, Average time per hit: 0.73975 ms 


    if ans < check: # Hits:4.0, Total execution time: 0.375 ms, Average time per hit: 0.09375 ms 


        ans = check # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


print(ans) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 
",p02573,True
"import sys

import math

from collections import deque

n,m = list(map(int, input().split()))



q = [0]*(n+1)



graph = [[] for _ in range(n+1)]

for i in range(m):

    a, b = list(map(int, input().split()))

    graph[a].append(b)

    graph[b].append(a)



dist = [-1] * (n+1)

dist[0] = 0

dist[1] = 0



if m == 0:

    print((1))

    exit()



d = deque()

a = 0

for l,j in enumerate(q):

    b = set()

    if j == 0:

        d.append(l)

        while d:

            v = d.popleft()

            b.add(v)

            q[v] = -1



            for i in graph[v]:

                b.add(i)

                q[i] = -1



                if dist[i] != -1:

                    continue

                dist[i] = dist[v] + 1

                d.append(i)

        a = max(a,len(b))

print(a)",,p02573,False
"import collections # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


import sys # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


sys.setrecursionlimit(10 ** 7) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




class UnionFindPathCompression(): # Hits:1.0, Total execution time: 4.125 ms, Average time per hit: 4.125 ms 


    def __init__(self, n):

        self.parents = list(range(n))

        self.rank = [1]*n

        self.size = [1]*n

        



    def find(self, x):

        if self.parents[x] == x:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        px = self.find(x)

        py = self.find(y)



        if px == py:

            return

        else:

            if self.rank[px] < self.rank[py]:

                self.parents[px] = py

                self.size[py] += self.size[px]

            else:

                self.parents[py] = px

                self.size[px] += self.size[py]

                #ランクの更新

                if self.rank[px] == self.rank[py]:

                    self.rank[px] += 1





n,m = list(map(int,input().split())) # Hits:1.0, Total execution time: 26.292 ms, Average time per hit: 26.292 ms 


ufpc = UnionFindPathCompression(n) # Hits:1.0, Total execution time: 2.334 ms, Average time per hit: 2.334 ms 


for _ in range(m): # Hits:11.0, Total execution time: 1.08 ms, Average time per hit: 0.09818181818181819 ms 


    a,b = list(map(int,input().split())) # Hits:10.0, Total execution time: 4.168 ms, Average time per hit: 0.4168 ms 


    a,b=a-1,b-1 # Hits:10.0, Total execution time: 1.334 ms, Average time per hit: 0.13340000000000002 ms 


    ufpc.union(a,b) # Hits:10.0, Total execution time: 16.292 ms, Average time per hit: 1.6292 ms 




for i in range(n): # Hits:5.0, Total execution time: 0.499 ms, Average time per hit: 0.0998 ms 


    ufpc.find(i) # Hits:4.0, Total execution time: 2.124 ms, Average time per hit: 0.531 ms 




c = collections.Counter(ufpc.parents) # Hits:1.0, Total execution time: 3.833 ms, Average time per hit: 3.833 ms 


score_sorted = sorted(list(c.items()), key=lambda x:-x[1]) # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 


print((score_sorted[0][1])) # Hits:1.0, Total execution time: 5.041 ms, Average time per hit: 5.041 ms 

","import sys # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


sys.setrecursionlimit(10 ** 7) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




class UnionFindPathCompression(): # Hits:1.0, Total execution time: 3.708 ms, Average time per hit: 3.708 ms 


    def __init__(self, n):

        self.parents = list(range(n))

        self.rank = [1]*n

        self.size = [1]*n

        



    def find(self, x):

        if self.parents[x] == x:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        px = self.find(x)

        py = self.find(y)



        if px == py:

            return

        else:

            if self.rank[px] < self.rank[py]:

                self.parents[px] = py

                self.size[py] += self.size[px]

            else:

                self.parents[py] = px

                self.size[px] += self.size[py]

                #ランクの更新

                if self.rank[px] == self.rank[py]:

                    self.rank[px] += 1





n,m = list(map(int,input().split())) # Hits:1.0, Total execution time: 32.917 ms, Average time per hit: 32.917 ms 


ufpc = UnionFindPathCompression(n) # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 


for _ in range(m): # Hits:11.0, Total execution time: 1.167 ms, Average time per hit: 0.1060909090909091 ms 


    a,b = list(map(int,input().split())) # Hits:10.0, Total execution time: 3.875 ms, Average time per hit: 0.3875 ms 


    a,b=a-1,b-1 # Hits:10.0, Total execution time: 1.125 ms, Average time per hit: 0.1125 ms 


    ufpc.union(a,b) # Hits:10.0, Total execution time: 14.706 ms, Average time per hit: 1.4706 ms 




for i in range(n): # Hits:5.0, Total execution time: 0.458 ms, Average time per hit: 0.0916 ms 


    ufpc.find(i) # Hits:4.0, Total execution time: 2.0 ms, Average time per hit: 0.5 ms 


    

counter = {} # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for v in ufpc.parents: # Hits:5.0, Total execution time: 0.499 ms, Average time per hit: 0.0998 ms 


    if v in counter: # Hits:4.0, Total execution time: 0.418 ms, Average time per hit: 0.1045 ms 


        counter[v] += 1 # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    else:

        counter[v] = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for key,val in list(counter.items()): # Hits:2.0, Total execution time: 0.625 ms, Average time per hit: 0.3125 ms 


    ans = max(ans, val) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


print(ans) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 




        ",p02573,True
"# union find, bfs



import sys

from collections import deque

si = sys.stdin.readline





def main():

    [n, m] = [int(e) for e in si().split()]

    if not m:

        print((1))

        return



    visited = [False]*(n+1)

    fm = [set() for _ in range(n+1)]

    mx, comp = 0, 0



    while m:

        m -= 1

        [a, b] = [int(e) for e in si().split()]

        fm[a].add(b)

        fm[b].add(a)



    for i in range(1, n+1):

        if visited[i]:

            continue

        visited[i] = True

        comp += 1

        q = deque()

        q.append(i)

        cnt = 1

        while q:

            curr = q.popleft()

            for e in fm[curr]:

                if not visited[e]:

                    visited[e] = True

                    q.append(e)

                    cnt += 1

        mx = max(mx, cnt)

    print(mx)



if __name__ == '__main__':

    main()
",,p02573,False
"from collections import Counter  # Hits:1.0, Total execution time: 1.791 ms, Average time per hit: 1.791 ms 




class UnionFind(object): # Hits:1.0, Total execution time: 5.542 ms, Average time per hit: 5.542 ms 


    def __init__(self, n=1):

        self.par = [i for i in range(n)]

        self.rank = [0 for _ in range(n)]



    def find(self, x):

        if self.par[x] == x:

            return x

        else:

            self.par[x] = self.find(self.par[x])

            return self.par[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)

        if x != y:

            if self.rank[x] < self.rank[y]:

                x, y = y, x

            if self.rank[x] == self.rank[y]:

                self.rank[x] += 1

            self.par[y] = x



    def is_same(self, x, y):

        return self.find(x) == self.find(y)



N,M= list(map(int, input().split())) # Hits:1.0, Total execution time: 33.0 ms, Average time per hit: 33.0 ms 


uf1=UnionFind(N) # Hits:1.0, Total execution time: 3.5 ms, Average time per hit: 3.5 ms 




for _ in range(M): # Hits:11.0, Total execution time: 1.083 ms, Average time per hit: 0.09845454545454545 ms 


    x, y = list(map(int, input().split())) # Hits:10.0, Total execution time: 8.917 ms, Average time per hit: 0.8917 ms 


    uf1.union(x-1,y-1) # Hits:10.0, Total execution time: 15.582 ms, Average time per hit: 1.5582 ms 




for i in range(N): # Hits:5.0, Total execution time: 0.54 ms, Average time per hit: 0.108 ms 


    uf1.find(i)  # Hits:4.0, Total execution time: 2.043 ms, Average time per hit: 0.51075 ms 


c = list(Counter(uf1.par).values()) # Hits:1.0, Total execution time: 4.625 ms, Average time per hit: 4.625 ms 


print((max(c))) # Hits:1.0, Total execution time: 9.083 ms, Average time per hit: 9.083 ms 
","import sys # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


sys.setrecursionlimit(500*500) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 42.167 ms, Average time per hit: 42.167 ms 


UF = [-1] * (N+1) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


def find(x): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    global UF

    if UF[x] == -1:

        return x

    else:

        UF[x] = find(UF[x])

        return UF[x]

def union(x,y): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    global UF

    xx = find(x)

    yy = find(y)

    if UF[x] == UF[y] == -1:

        UF[y] = xx

        return

    elif xx == yy:

        return 

    else:

        UF[yy] = xx

        return 

    

for _ in range(M): # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 


    x, y = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.625 ms, Average time per hit: 2.625 ms 


    union(x,y) # Hits:1.0, Total execution time: 2.25 ms, Average time per hit: 2.25 ms 


    

cnt = [0] * (N+1)

for i in range(1,N+1):

    z = find(i)

    cnt[z] += 1



print((max(cnt)))


",p02573,True
"import collections as col # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


from collections import defaultdict as dd # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 




d=dd(list) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




N,M=list(map(int, input().split())) # Hits:1.0, Total execution time: 30.584 ms, Average time per hit: 30.584 ms 


p=[-1]*N # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


p[0]=1 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




for _ in range(M): # Hits:11.0, Total execution time: 1.376 ms, Average time per hit: 0.12509090909090909 ms 


    i,j=list(map(int, input().split())) # Hits:10.0, Total execution time: 8.25 ms, Average time per hit: 0.825 ms 


    if i>j: # Hits:10.0, Total execution time: 1.041 ms, Average time per hit: 0.1041 ms 


        i,j=j,i # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


    d[i].append(j) # Hits:10.0, Total execution time: 3.916 ms, Average time per hit: 0.3916 ms 




for i in d: # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


    for j in d[i]: # Hits:13.0, Total execution time: 1.166 ms, Average time per hit: 0.0896923076923077 ms 


        if p[i-1]==-1: # Hits:10.0, Total execution time: 1.375 ms, Average time per hit: 0.1375 ms 


            if p[j-1]==-1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


                if i<j: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


                    p[i-1]=i # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


                    p[j-1]=i # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


                else:

                    p[i-1]=j

                    p[j-1]=j

            else:

                p[i-1]=p[j-1]

        else:

            if p[j-1]==-1: # Hits:10.0, Total execution time: 1.291 ms, Average time per hit: 0.1291 ms 


                p[j-1]=p[i-1] # Hits:3.0, Total execution time: 0.457 ms, Average time per hit: 0.15233333333333335 ms 


            else:

                if p[i-1]<p[j-1]: # Hits:7.0, Total execution time: 1.084 ms, Average time per hit: 0.15485714285714286 ms 


                    p[i-1]=p[j-1]

                else:

                    p[j-1]=p[i-1] # Hits:7.0, Total execution time: 1.043 ms, Average time per hit: 0.149 ms 




for i,a in enumerate(p): # Hits:5.0, Total execution time: 0.917 ms, Average time per hit: 0.1834 ms 


    if i!=a-1 and a>=0 and p.count(i+1)>1: # Hits:4.0, Total execution time: 1.083 ms, Average time per hit: 0.27075 ms 


        p=[a if k==i+1 else k for k in p]



ans=col.Counter(p) # Hits:1.0, Total execution time: 3.0 ms, Average time per hit: 3.0 ms 




if ans.most_common()[0][0]==-1: # Hits:1.0, Total execution time: 1.458 ms, Average time per hit: 1.458 ms 


    print((ans.most_common()[1][1]))

else:

    print((ans.most_common()[0][1])) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 
","import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


sys.setrecursionlimit(10**8) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




def find(x): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    if par[x]==x:

        return x

    else:

        par[x]=find(par[x])

        return par[x]



def union(a,b): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    a=find(a)

    b=find(b)

    if a==b:

        return

    

    if rank[a]<rank[b]:

        par[a]=b

        rank[b]+=rank[a]

        rank[a]=rank[b]

    else:

        par[b]=a

        rank[a]+=rank[b]

        rank[b]=rank[a]



    return



def chk(a,b): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    if par[a]==par[b]:

        print('Yes')

    else:

        print('No')



    return



N,M=list(map(int, input().split())) # Hits:1.0, Total execution time: 34.875 ms, Average time per hit: 34.875 ms 




par=(list(range(N+1))) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


rank=[1]*(N+1) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 




for _ in range(M): # Hits:11.0, Total execution time: 1.086 ms, Average time per hit: 0.09872727272727273 ms 


    A,B=list(map(int, input().split())) # Hits:10.0, Total execution time: 8.416 ms, Average time per hit: 0.8416 ms 


    union(A,B) # Hits:10.0, Total execution time: 13.415 ms, Average time per hit: 1.3415 ms 




print((max(rank))) # Hits:1.0, Total execution time: 5.583 ms, Average time per hit: 5.583 ms 
",p02573,True
"N,M = list(map(int,input().split()))     # Hits:1.0, Total execution time: 32.125 ms, Average time per hit: 32.125 ms 


       

AB = [None]*M # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.333 ms, Average time per hit: 0.12118181818181818 ms 


    a,b = list(map(int,input().split())) # Hits:10.0, Total execution time: 8.417 ms, Average time per hit: 0.8417 ms 


    if a>b: # Hits:10.0, Total execution time: 0.917 ms, Average time per hit: 0.0917 ms 


        a,b=b,a # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


    AB[i] = (a-1,b-1) # Hits:10.0, Total execution time: 2.418 ms, Average time per hit: 0.24180000000000001 ms 




AB=set(AB) # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 




tree=[[] for _ in range(N)] # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


for a,b in AB: # Hits:7.0, Total execution time: 0.917 ms, Average time per hit: 0.131 ms 


    tree[a].append(b) # Hits:6.0, Total execution time: 0.833 ms, Average time per hit: 0.13883333333333334 ms 


    tree[b].append(a) #aがbの親、とかが保証されてれば不要。 # Hits:6.0, Total execution time: 0.833 ms, Average time per hit: 0.13883333333333334 ms 




from collections import deque # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 




groups=[] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


been=[0]*N # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N): # Hits:5.0, Total execution time: 0.501 ms, Average time per hit: 0.1002 ms 


    if been[i]==0: # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


        group=[i] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        been[i]=1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        q = deque([(i,togo) for togo in tree[i]])  # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


        while q: # Hits:10.0, Total execution time: 0.916 ms, Average time per hit: 0.0916 ms 


            parent,x = q.popleft() # Hits:9.0, Total execution time: 1.292 ms, Average time per hit: 0.14355555555555555 ms 


            if been[x]==1: # Hits:9.0, Total execution time: 0.917 ms, Average time per hit: 0.10188888888888889 ms 


                continue # Hits:6.0, Total execution time: 0.418 ms, Average time per hit: 0.06966666666666667 ms 


            been[x]=1 # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


            group.append(x) # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


            for y in tree[x]: # Hits:12.0, Total execution time: 1.125 ms, Average time per hit: 0.09375 ms 


                if y == parent:#親ノードを飛ばし # Hits:9.0, Total execution time: 0.748 ms, Average time per hit: 0.08311111111111111 ms 


                    continue # Hits:3.0, Total execution time: 0.167 ms, Average time per hit: 0.05566666666666666 ms 


                q.append((x,y))#子ノードを追加 # Hits:6.0, Total execution time: 1.042 ms, Average time per hit: 0.17366666666666666 ms 


        groups.append(group) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




print((max( len(g) for g in groups))) # Hits:1.0, Total execution time: 5.542 ms, Average time per hit: 5.542 ms 
","class UnionFind(): # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 


    def __init__(self, n):

        self.n = n

        self.parents = [-1] * n



    def find(self, x):

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)



        if x == y:

            return



        if self.parents[x] > self.parents[y]:

            x, y = y, x



        self.parents[x] += self.parents[y]

        self.parents[y] = x



    def size(self, x):

        return -self.parents[self.find(x)]

    

    def same(self, x, y):

        return self.find(x) == self.find(y)



    def members(self, x):

        root = self.find(x)

        return [i for i in range(self.n) if self.find(i) == root]



    def roots(self):

        return [i for i, x in enumerate(self.parents) if x < 0]



    def group_count(self):

        return len(self.roots())



    def all_group_members(self):

        return {r: self.members(r) for r in self.roots()}



    def __str__(self):

        return '\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())

    

N,M = list(map(int,input().split()))     # Hits:1.0, Total execution time: 36.834 ms, Average time per hit: 36.834 ms 


uf = UnionFind(N) # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.248 ms, Average time per hit: 0.11345454545454545 ms 


    a,b = list(map(int,input().split())) # Hits:10.0, Total execution time: 9.374 ms, Average time per hit: 0.9374 ms 


    uf.union(a-1,b-1) # Hits:10.0, Total execution time: 14.874 ms, Average time per hit: 1.4874 ms 


    

root = uf.roots() # Hits:1.0, Total execution time: 2.917 ms, Average time per hit: 2.917 ms 


print(( max(uf.size(r) for r in root) )) # Hits:1.0, Total execution time: 8.917 ms, Average time per hit: 8.917 ms 
",p02573,True
"from collections import Counter

import sys



sys.setrecursionlimit(20000)





def _ia(): return list(map(int, sys.stdin.readline().strip().split()))





class UnionFind:

    def __init__(self, n):

        self._par = [-1]*(n+1)

        self._rnk = [0]*(n+1)



    def root(self, x):

        if self._par[x] < 0:

            return x

        else:

            self._par[x] = self.root(self._par[x])

            return self._par[x]



    def unite(self, x, y):

        x = self.root(x)

        y = self.root(y)

        if x == y:

            return

        elif self._rnk[x] > self._rnk[y]:

            self._par[x] += self._par[y]

            self._par[y] = x

        else:

            self._par[y] += self._par[x]

            self._par[x] = y

            if self._rnk[x] == self._rnk[y]:

                self._rnk[y] += 1



    def same(self, x, y):

        return self.root(x) == self.root(y)





def main():

    n, m = _ia()

    uf = UnionFind(n)

    for _ in range(m):

        a, b = [x-1 for x in _ia()]

        uf.unite(a, b)

    c = Counter([uf.root(i) for i in range(n)])

    return max(c.values())





if __name__ == ""__main__"":

    print((main()))
",,p02573,False
"import sys

import os

from collections import deque





def _S(): return sys.stdin.readline().rstrip()

def I(): return int(_S())

def LS(): return list(_S().split())

def LI(): return list(map(int,LS()))



if os.getenv(""LOCAL""):

    inputFile = basename_without_ext = os.path.splitext(os.path.basename(__file__))[0]+'.txt'

    sys.stdin = open(inputFile, ""r"")



N,M = LI()

AB = [LI() for _ in range(M)]



if M==0:

    print((1))

    exit()



# 無向グラフ

G = []

for _ in [0]*N:

    G.append([False]*N)



for r in AB:

    f = r[0]-1

    t = r[1]-1

    G[f][t] = True

    G[t][f] = True



used = [False] * N



ss = []

for i in range(N):

    if used[i]==True:

            continue

    s = set()

    que = deque([])

    que.append(i)

    while que:

        p = que.popleft() 

        if used[p]==True:

            continue

        s.add(p)

        used[p]=True   

        for i, x in enumerate(G[p]):

            if x == True:

                if used[i]==True:

                    continue

                if not i in que:

                    que.append(i)

    ss.append(len(s))





    # for i, x in enumerate(G[i]):

    #     if x == True:

    #         if used[i]==True:

    #             continue

    #         for j,y in enumerate(x):

    #             if used[j]==True:

    #                 continue

    #             if x == True and used[i]==False:

    #                 s.add(i)





    # l = [i for i, x in enumerate(G[i]) if x == True and used[i]==False]

    # for j in l:

    #     used[j]=True

    #     s.add(j)

    #     for i,x in enumerate(G[i]):

    #         if x == True and used[i]==False:

    #             s.add(i)



print((max(ss)))","import math # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


import os # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


from operator import mul # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 




sys.setrecursionlimit(10**7) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




def _S(): return sys.stdin.readline().rstrip() # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


def I(): return int(_S()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LS(): return list(_S().split()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LI(): return list(map(int,LS())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




if os.getenv(""LOCAL""): # Hits:1.0, Total execution time: 3.625 ms, Average time per hit: 3.625 ms 


    inputFile = basename_without_ext = os.path.splitext(os.path.basename(__file__))[0]+'.txt'

    sys.stdin = open(inputFile, ""r"")

INF = float(""inf"") # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




N,M = LI() # Hits:1.0, Total execution time: 36.75 ms, Average time per hit: 36.75 ms 


AB = [LI() for _ in range(M)] # Hits:1.0, Total execution time: 9.75 ms, Average time per hit: 9.75 ms 




ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




par = [0]*N # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


# rank = [0]*N



def init(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    for i in range(n):

        # 親のID or 属する頂点の数

        par[i]=-1

        # rank[i] = 0



# rootを返す

def find(x): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    # 根

    if par[x] < 0:

        return x

    # 節の親

    else:

        par[x] = find(par[x])

        return par[x]



def unite(x,y): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    x = find(x)

    y = find(y)

    if (x==y):

        return

    if (par[x] > par[y]):

        x,y = y,x

    # rootの頂点数を結合

    par[x] += par[y]

    # yの親をxに

    par[y] = x

    return



    # if (rank[x]<rank[y]):

    #     par[x]=y

    # else:

    #     par[y]=x

    #     if rank[x] == rank[y]:

    #         rank[x] += 1



def same(x,y): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    return find(x)==find(y)



def size(x): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    return -par[find(x)]



init(N) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 




for r in AB: # Hits:11.0, Total execution time: 0.917 ms, Average time per hit: 0.08336363636363636 ms 


    f = r[0]-1 # Hits:10.0, Total execution time: 1.041 ms, Average time per hit: 0.1041 ms 


    t = r[1]-1 # Hits:10.0, Total execution time: 1.001 ms, Average time per hit: 0.1001 ms 


    unite(f,t) # Hits:10.0, Total execution time: 11.331 ms, Average time per hit: 1.1331 ms 


    # print(par)



for i in range(N): # Hits:5.0, Total execution time: 0.459 ms, Average time per hit: 0.09179999999999999 ms 


    # print(size(i))

    ans = max(ans,size(i)) # Hits:4.0, Total execution time: 2.834 ms, Average time per hit: 0.7085 ms 




print(ans) # Hits:1.0, Total execution time: 5.041 ms, Average time per hit: 5.041 ms 
",p02573,False
"import sys

import math

from collections import deque



sys.setrecursionlimit(1000000)

MOD = 10 ** 9 + 7

input = lambda: sys.stdin.readline().strip()

NI = lambda: int(eval(input()))

NMI = lambda: list(map(int, input().split()))

NLI = lambda: list(NMI())

SI = lambda: eval(input())





#隣接リスト 1-index

def make_adjlist_nond(n, edges):

    res = [[] for _ in range(n+1)]

    for edge in edges:

        res[edge[0]].append(edge[1])

        res[edge[1]].append(edge[0])

    return res





def main():

    N, M = NMI()

    F = {}

    for _ in range(M):

        a, b = NMI()

        F[(a, b)] = 1

    tree = make_adjlist_nond(N, list(F.keys()))



    ans = 0

    for start in range(1, N+1):

        que = deque()

        que.append(start)

        seen = [0] * (N+1)

        seen[start] = 1

        fri_cnt = 1

        while que:

            now = que.popleft()



            for goto in tree[now]:

                if seen[goto]:

                    continue

                seen[goto] = 1

                fri_cnt += 1

                que.append(goto)

        ans = max(fri_cnt, ans)

    print(ans)











if __name__ == ""__main__"":

    main()",,p02573,False
"from collections import deque # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 




N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.667 ms, Average time per hit: 35.667 ms 


friends = [[] for _ in range(N+1)] # Hits:1.0, Total execution time: 1.792 ms, Average time per hit: 1.792 ms 


for __ in range(M): # Hits:11.0, Total execution time: 1.168 ms, Average time per hit: 0.10618181818181818 ms 


  a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 9.96 ms, Average time per hit: 0.996 ms 


  friends[a].append(b) # Hits:10.0, Total execution time: 1.71 ms, Average time per hit: 0.171 ms 


  friends[b].append(a) # Hits:10.0, Total execution time: 2.125 ms, Average time per hit: 0.2125 ms 


checked = [0 for ___ in range(N+1)] # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


answer = 1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(1, N+1): # Hits:5.0, Total execution time: 0.624 ms, Average time per hit: 0.1248 ms 


  friend = deque(friends[i]) # Hits:4.0, Total execution time: 1.085 ms, Average time per hit: 0.27125 ms 


  cnt = 0 # Hits:4.0, Total execution time: 0.334 ms, Average time per hit: 0.0835 ms 


  while(len(friend) > 0): # Hits:44.0, Total execution time: 5.877 ms, Average time per hit: 0.1335681818181818 ms 


    f = friend.popleft() # Hits:40.0, Total execution time: 4.959 ms, Average time per hit: 0.12397499999999999 ms 


    if checked[f] != 0: # Hits:40.0, Total execution time: 4.124 ms, Average time per hit: 0.1031 ms 


      continue # Hits:36.0, Total execution time: 2.706 ms, Average time per hit: 0.07516666666666667 ms 


    else:

      checked[f] = 1 # Hits:4.0, Total execution time: 0.375 ms, Average time per hit: 0.09375 ms 


      cnt += 1 # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


      for ff in friends[f]: # Hits:24.0, Total execution time: 2.375 ms, Average time per hit: 0.09895833333333333 ms 


        friend.append(ff) # Hits:20.0, Total execution time: 2.668 ms, Average time per hit: 0.13340000000000002 ms 


  answer = max(answer, cnt) # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


print(answer) # Hits:1.0, Total execution time: 6.375 ms, Average time per hit: 6.375 ms 


  ","class UnionFind(): # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 


    def __init__(self, n):

        self.n = n

        self.parents = [-1] * n



    def find(self, x):

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)



        if x == y:

            return



        if self.parents[x] > self.parents[y]:

            x, y = y, x



        self.parents[x] += self.parents[y]

        self.parents[y] = x



    def size(self, x):

        return -self.parents[self.find(x)]



    def same(self, x, y):

        return self.find(x) == self.find(y)



    def members(self, x):

        root = self.find(x)

        return [i for i in range(self.n) if self.find(i) == root]



    def roots(self):

        return [i for i, x in enumerate(self.parents) if x < 0]



    def group_count(self):

        return len(self.roots())



    def all_group_members(self):

        return {r: self.members(r) for r in self.roots()}



    def __str__(self):

        return '\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())



N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.625 ms, Average time per hit: 34.625 ms 


f_uf = UnionFind(N) # Hits:1.0, Total execution time: 1.791 ms, Average time per hit: 1.791 ms 


for _ in range(M): # Hits:11.0, Total execution time: 1.333 ms, Average time per hit: 0.12118181818181818 ms 


  a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 8.459 ms, Average time per hit: 0.8459 ms 


  f_uf.union(a-1, b-1) # Hits:10.0, Total execution time: 14.169 ms, Average time per hit: 1.4169 ms 


answer = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:5.0, Total execution time: 0.458 ms, Average time per hit: 0.0916 ms 


  answer = max(answer, f_uf.size(i)) # Hits:4.0, Total execution time: 3.417 ms, Average time per hit: 0.85425 ms 


print(answer) # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 

",p02573,True
"import sys # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


sys.setrecursionlimit(10**9) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.833 ms, Average time per hit: 33.833 ms 




root = [-1]*n # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




def find(n): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if root[n] < 0:

        return n

    else:

        root[n] = find(root[n])

        return root[n]



def unite(x, y): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    x = find(x)

    y = find(y)

    if x == y:

        return

    else:

        root[x] += root[y]

        root[y] = x



def size(n): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    return -root[find(n)]



for i in range(m): # Hits:11.0, Total execution time: 1.166 ms, Average time per hit: 0.106 ms 


    a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 8.293 ms, Average time per hit: 0.8292999999999999 ms 


    a -= 1 # Hits:10.0, Total execution time: 0.917 ms, Average time per hit: 0.0917 ms 


    b -= 1 # Hits:10.0, Total execution time: 0.877 ms, Average time per hit: 0.0877 ms 


    unite(a, b) # Hits:10.0, Total execution time: 11.334 ms, Average time per hit: 1.1334000000000002 ms 




ans = max(list(map(size, list(range(n))))) # Hits:1.0, Total execution time: 2.458 ms, Average time per hit: 2.458 ms 


print(ans) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 
","import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


sys.setrecursionlimit(10**9) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.209 ms, Average time per hit: 35.209 ms 




root = [-1]*n # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




def find(n): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if root[n] < 0:

        return n

    else:

        root[n] = find(root[n])

        return root[n]



def unite(x, y): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    x = find(x)

    y = find(y)

    if x == y:

        return

    else:

        root[x] += root[y]

        root[y] = x



def size(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    return -root[find(n)]



for i in range(m): # Hits:11.0, Total execution time: 1.292 ms, Average time per hit: 0.11745454545454545 ms 


    a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 8.459 ms, Average time per hit: 0.8459 ms 


    a -= 1 # Hits:10.0, Total execution time: 1.042 ms, Average time per hit: 0.1042 ms 


    b -= 1 # Hits:10.0, Total execution time: 0.918 ms, Average time per hit: 0.09179999999999999 ms 


    unite(a, b) # Hits:10.0, Total execution time: 11.834 ms, Average time per hit: 1.1834 ms 




print((-min(root))) # Hits:1.0, Total execution time: 5.666 ms, Average time per hit: 5.666 ms 
",p02573,True
"from collections import defaultdict,deque

n,m = list(map(int,input().split()))



d = defaultdict(list)



if m==0:

    print((1))

    exit()



visited = [-1] + [False]*n

for i in range(m):

    a,b = list(map(int,input().split()))

    d[a].append(b)

    d[b].append(a)

maxi = 1

for i in range(1,n+1):

    if visited[i]:

        continue

    cnt = 0

    que = deque([i])

    while que:

        v = que.pop()

        if not visited[v]:

            visited[v] = True

            cnt += 1

        for j in d[v]:

            if not visited[j]:

                que.append(j)

    maxi = max(maxi,cnt)

print(maxi)","class UnionFind: # Hits:1.0, Total execution time: 5.708 ms, Average time per hit: 5.708 ms 


    def __init__(self, n):

        self.par = [i for i in range(n+1)]

        self.rank = [0] * (n+1)

        self.size = [1] * (n+1)



    # 検索

    def find(self, x):

        if self.par[x] == x:

            return x

        else:

            self.par[x] = self.find(self.par[x])

            return self.par[x]



    # 併合

    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)

        if x == y:

            return

        if self.rank[x] < self.rank[y]:

            self.par[x] = y

            self.size[y] += self.size[x]

        else:

            self.par[y] = x

            self.size[x] += self.size[y]

            if self.rank[x] == self.rank[y]:

                self.rank[x] += 1



    # 同じ集合に属するか判定

    def same_check(self, x, y):

        return self.find(x) == self.find(y)

    



n,m = list(map(int,input().split())) # Hits:1.0, Total execution time: 34.416 ms, Average time per hit: 34.416 ms 


uf = UnionFind(n) # Hits:1.0, Total execution time: 2.625 ms, Average time per hit: 2.625 ms 


for i in range(m): # Hits:11.0, Total execution time: 0.998 ms, Average time per hit: 0.09072727272727274 ms 


    a,b = list(map(int,input().split())) # Hits:10.0, Total execution time: 8.21 ms, Average time per hit: 0.821 ms 


    uf.union(a,b) # Hits:10.0, Total execution time: 14.084 ms, Average time per hit: 1.4084 ms 


print((max(uf.size))) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 
",p02573,False
"import math

from math import gcd,pi,sqrt

INF = float(""inf"")



import sys

sys.setrecursionlimit(10**6)

import itertools

from collections import Counter,deque

def i_input(): return int(eval(input()))

def i_map(): return list(map(int, input().split()))

def i_list(): return list(i_map())

def i_row(N): return [i_input() for _ in range(N)]

def i_row_list(N): return [i_list() for _ in range(N)]

def s_input(): return eval(input())

def s_map(): return input().split()

def s_list(): return list(s_map())

def s_row(N): return [s_input for _ in range(N)]

def s_row_str(N): return [s_list() for _ in range(N)]

def s_row_list(N): return [list(s_input()) for _ in range(N)]



def main():

    global ans

    n,m = i_map()

    s = [0]*n

    g = [[0]*n for i in range(n)]

    for i in range(m):

        a,b = i_map()

        a -= 1

        b -= 1

        g[a][b] = g[b][a] = 1



    def dfs(i):

        global ans

        s[i] = 1

        ans += 1

        for v in range(n):

            if g[i][v] == 0:

                continue

            if s[v] == 0:

                dfs(v)



    cnts = []



    for i in range(n):

        if s[i] == 0:

            trial = dfs(i)

            cnts.append(ans)

            ans = 0

    print((max(cnts)))









if __name__==""__main__"":

    ans = 0

    main()
",,p02573,False
"from collections import deque



def bfs(fd, n):

    visited = set()

    ans = 1

    for i in range(1, n + 1):

        if i in visited: continue

        volume = 1

        queue = deque(list(fd[i]))

        visited.add(i)

        while queue:

            x = queue.popleft()

            if x in visited: continue

            visited.add(x)

            volume += 1

            for l in fd[x]:

                if l not in visited and l not in queue:

                    queue.append(l)

        ans = max(ans, volume)

    return ans



if __name__ == ""__main__"":

    n, m = list(map(int, input().split()))

    fd = {i+1:set() for i in range(n)}

    for _ in range(m):

        a, b = list(map(int, input().split()))

        fd[a].add(b)

        fd[b].add(a)

    print((bfs(fd, n)))",,p02573,False
"import collections # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.125 ms, Average time per hit: 34.125 ms 


A = [0]*M # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


B = [0]*M # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.125 ms, Average time per hit: 0.10227272727272727 ms 


  A[i],B[i] = list(map(int,input().split())) # Hits:10.0, Total execution time: 9.541 ms, Average time per hit: 0.9541000000000001 ms 


ans = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


f = [-1]*N # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.041 ms, Average time per hit: 0.09463636363636364 ms 




  if f[A[i]-1] == -1 and f[B[i]-1] == -1: # Hits:10.0, Total execution time: 1.458 ms, Average time per hit: 0.1458 ms 


    f[A[i]-1] = i # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    f[B[i]-1] = i # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  elif f[A[i]-1] != -1 and f[B[i]-1] == -1: # Hits:9.0, Total execution time: 1.918 ms, Average time per hit: 0.2131111111111111 ms 


    f[B[i]-1] = f[A[i]-1] # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


  elif f[A[i]-1] == -1 and f[B[i]-1] != -1: # Hits:7.0, Total execution time: 0.917 ms, Average time per hit: 0.131 ms 


    f[A[i]-1] = f[B[i]-1] # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


  else:

    f = [f[B[i]-1] if j == f[A[i]-1] else j for j in f] # Hits:7.0, Total execution time: 7.75 ms, Average time per hit: 1.1071428571428572 ms 


ff = [i for i in f if i != -1] # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


if ff != []: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  print((max(collections.Counter(ff).values()))) # Hits:1.0, Total execution time: 8.75 ms, Average time per hit: 8.75 ms 


else:

  print((1))","# cf. 16315733

N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.458 ms, Average time per hit: 35.458 ms 


# upperは、根なら-その木の長さを、枝ならその木の根の要素のインデックスを指す。

upper = [-1] * N # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


# xの根を返す

def root(x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  # xが根なら

  if upper[x] < 0:

    return x

  # xが枝なら

  else:

    # 根のインデックスをさかのぼる

    upper[x] = root(upper[x])

    # 根のインデックスを返す

    return upper[x]



# x,yが同じグループにあるかどうか判定する

def equiv(x, y): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


  return root(x) == root(y)



def unite(x, y): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


  x, y = root(x), root(y)

  if x != y:

    if upper[y] < upper[x]:

      #xとyの値をスワップ、必ずupper[y] >= upper[x]とするつまりxのほうが高い

      x,y = y,x

    # 要素の数を足す：結合後の要素の数を求める

    upper[x] += upper[y]

    # yの根をxにする（木が高い方を根にする）

    upper[y] = x

  return x == y



for i in range(M): # Hits:11.0, Total execution time: 1.248 ms, Average time per hit: 0.11345454545454545 ms 


  a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 8.709 ms, Average time per hit: 0.8709 ms 


  unite(a-1, b-1) # Hits:10.0, Total execution time: 13.128 ms, Average time per hit: 1.3128 ms 


print((-min(upper))) # Hits:1.0, Total execution time: 5.542 ms, Average time per hit: 5.542 ms 
",p02573,True
"from collections import deque # Hits:1.0, Total execution time: 1.291 ms, Average time per hit: 1.291 ms 


N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.25 ms, Average time per hit: 38.25 ms 


tree = [[] for _ in range(N)] # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 


happend = set() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for _ in range(M): # Hits:11.0, Total execution time: 1.046 ms, Average time per hit: 0.09509090909090909 ms 


    a, b = [int(x)-1 for x in input().split()] # Hits:10.0, Total execution time: 11.414 ms, Average time per hit: 1.1414000000000002 ms 


    if (a, b) not in happend and (b, a) not in happend: # Hits:10.0, Total execution time: 2.081 ms, Average time per hit: 0.2081 ms 


        tree[a].append(b) # Hits:6.0, Total execution time: 0.917 ms, Average time per hit: 0.15283333333333335 ms 


        tree[b].append(a) # Hits:6.0, Total execution time: 0.833 ms, Average time per hit: 0.13883333333333334 ms 


        happend.add((a, b)) # Hits:6.0, Total execution time: 1.125 ms, Average time per hit: 0.1875 ms 


        happend.add((b, a)) # Hits:6.0, Total execution time: 2.208 ms, Average time per hit: 0.368 ms 


visited = [False]*N # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


q = deque() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(N): # Hits:5.0, Total execution time: 0.541 ms, Average time per hit: 0.1082 ms 


    if visited[i]: # Hits:4.0, Total execution time: 0.375 ms, Average time per hit: 0.09375 ms 


        continue # Hits:3.0, Total execution time: 0.208 ms, Average time per hit: 0.06933333333333333 ms 


    visited[i] = True # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    q.append(i) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    tmp = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    while len(q): # Hits:5.0, Total execution time: 0.875 ms, Average time per hit: 0.175 ms 


        v = q.popleft() # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


        for e in tree[v]: # Hits:16.0, Total execution time: 1.458 ms, Average time per hit: 0.091125 ms 


            # print(""v , e"", v, e)

            if visited[e]: # Hits:12.0, Total execution time: 1.25 ms, Average time per hit: 0.10416666666666667 ms 


                continue # Hits:9.0, Total execution time: 0.666 ms, Average time per hit: 0.074 ms 


            visited[e] += 1 # Hits:3.0, Total execution time: 0.582 ms, Average time per hit: 0.194 ms 


            tmp += 1 # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


            q.append(e) # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


            # print(""tmp : "", tmp)

    ans = max(tmp, ans) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


# print(tree)

print(ans) # Hits:1.0, Total execution time: 5.083 ms, Average time per hit: 5.083 ms 

","class UnionFind(): # Hits:1.0, Total execution time: 6.583 ms, Average time per hit: 6.583 ms 


    def __init__(self, n):

        self.n = n

        self.parents = [-1]*n  # 根のノードは限らないので注意



    def find(self, x):  # あるノードの親を探すためのメソッド

        if self.parents[x] < 0:  # 親の場合、要素の個数を負の値で保持している

            return x  # 自身が親であるということ

        else:

            self.parents[x] = self.find(self.parents[x])  # 再帰的に親を探しにいく

            return self.parents[x]



    def union(self, x, y):

        x = self.find(x)  # この変数xに格納されているものは必ず根のノード

        y = self.find(y)  # この変数yに格納されているものは必ず根のノード

        if x == y:

            return  # もし同じ親ならば何も起こらない



        if self.parents[x] > self.parents[y]:  # それぞれ、要素の個数が負で格納されている

            # yのグループの方が要素が多いの場合（yの方が値が小さいということは、負の世界では値が大きいため）

            x, y = y, x  # 必ずxの方が要素が多い状態にする



        self.parents[x] += self.parents[y]  # 負の値だが、これでいい

        self.parents[y] = x  # yは親ではなくなったため、新しい親であるxの値を正でもつ



    def size(self, x):

        return -self.parents[self.find(x)]  # 親まで辿ればグループの大きさが負で格納されているため、それにマイナスをつけてreturnする



    def same(self, x, y):

        return self.find(x) == self.find(y)  # 親が同じならTrueが返却される



    def members(self, x):  # この実装変じゃね？

        root = self.find(x)  # 親の値を取得する

        return [i for i in range(self.n) if self.find(i) == root]



    def roots(self):

        return [i for i, x in enumerate(self.parents) if x < 0]



    def group_counts(self):

        return len(self.roots())  # グループの数を返す



    def all_group_members(self):

        return {r: self.members(r) for r in self.roots()}  # 親のノード番号をキーにして、子のノードを対応させた辞書を返す



    def __str__(self):

        return '\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())





N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 32.084 ms, Average time per hit: 32.084 ms 


uf = UnionFind(N) # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


for _ in range(M): # Hits:11.0, Total execution time: 1.125 ms, Average time per hit: 0.10227272727272727 ms 


    a, b = [int(x)-1 for x in input().split()] # Hits:10.0, Total execution time: 11.251 ms, Average time per hit: 1.1251 ms 


    uf.union(a, b) # Hits:10.0, Total execution time: 13.292 ms, Average time per hit: 1.3292 ms 




ans = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for a in uf.roots(): # Hits:2.0, Total execution time: 1.583 ms, Average time per hit: 0.7915 ms 


    ans = max(ans, uf.size(a)) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


print(ans) # Hits:1.0, Total execution time: 4.833 ms, Average time per hit: 4.833 ms 

",p02573,True
"import sys

from collections import deque



def main():



    input = sys.stdin.readline



    N,M = list(map(int,input().split()))



    A = [0] * M

    B = [0] * M



    friend_list = [ set() for _ in range(N)]

    friend_list_len = 0



    for i in range(M):

        A[i],B[i] = list(map(int,input().split()))



        for j in range(friend_list_len):

            flag = False

            if A[i] in friend_list[j]:

                friend_list[j].add(B[i])

                flag = True

            if B[i] in friend_list[j]:

                friend_list[j].add(A[i])

                flag = True

            if flag:

                break                

        else:

            friend_list[friend_list_len].add(A[i])

            friend_list[friend_list_len].add(B[i])

            friend_list_len += 1



    ans = 1

    for i in range(friend_list_len):

        ans = max(ans,len(friend_list[i]))



    print(ans)





if __name__ == ""__main__"":

    main()",,p02573,False
"from collections import deque # Hits:1.0, Total execution time: 1.416 ms, Average time per hit: 1.416 ms 


import copy # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




N, M = list(map(int,input().split())) # Hits:1.0, Total execution time: 38.833 ms, Average time per hit: 38.833 ms 




edge_list = [set() for i in range (N)] # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 






for i in range (M): # Hits:11.0, Total execution time: 1.085 ms, Average time per hit: 0.09863636363636365 ms 


    A,B = list(map(int,input().split())) # Hits:10.0, Total execution time: 8.333 ms, Average time per hit: 0.8332999999999999 ms 


    edge_list[A-1].add(B-1) # Hits:10.0, Total execution time: 2.125 ms, Average time per hit: 0.2125 ms 


    edge_list[B-1].add(A-1) # Hits:10.0, Total execution time: 2.96 ms, Average time per hit: 0.296 ms 




for i in range (N): # Hits:5.0, Total execution time: 0.542 ms, Average time per hit: 0.10840000000000001 ms 


    d =deque(edge_list[i]) # Hits:4.0, Total execution time: 1.249 ms, Average time per hit: 0.31225 ms 


    while d: # Hits:16.0, Total execution time: 1.545 ms, Average time per hit: 0.0965625 ms 


        a = d.popleft() # Hits:12.0, Total execution time: 1.499 ms, Average time per hit: 0.12491666666666668 ms 


        el = copy.copy(edge_list[a]) # Hits:12.0, Total execution time: 6.332 ms, Average time per hit: 0.5276666666666666 ms 


        for j in range (len(edge_list[a])): # Hits:48.0, Total execution time: 5.54 ms, Average time per hit: 0.11541666666666667 ms 


            aj = el.pop() # Hits:36.0, Total execution time: 4.207 ms, Average time per hit: 0.11686111111111111 ms 


            if (aj not in edge_list[i]) and i != aj: # Hits:36.0, Total execution time: 4.292 ms, Average time per hit: 0.11922222222222223 ms 


                edge_list[i].add(aj) # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


                d.append(aj) # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 






edge_list = list(map(len,edge_list)) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 




print((max(edge_list)+1)) # Hits:1.0, Total execution time: 5.709 ms, Average time per hit: 5.709 ms 

","class UnionFind: # Hits:1.0, Total execution time: 14.583 ms, Average time per hit: 14.583 ms 


    def __init__ (self,n):

        self.parent = [i for i in range (n)]

        self.height = [0 for _ in range (n)]



    def get_root(self,i):

        if self.parent[i] == i:

            return i

        else:

            self.parent[i] = self.get_root(self.parent[i])

            return self.parent[i]



    def unite(self,i,j):

        root_i = self.get_root(i)

        root_j = self.get_root(j)

        if root_i != root_j:

            if self.height[root_i] < self.height[root_j]:

                self.parent[root_i] = root_j

            else:

                self.parent[root_j] = root_i

                if self.height[root_i] == self.height[root_j]:

                    self.height[root_i] += 1



    def is_in_group(self,i,j):

        if self.get_root(i) == self.get_root(j):

            return True

        else:

            return False



def main(): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    N,M = list(map(int, input().split()))

    uf = UnionFind(N)

    for _ in range (M):

        A,B = [int(x)-1 for x in input().split()]

        uf.unite(A,B)



    check = [0]*N

    for i in range(N):

        check[uf.get_root(i)] += 1

    print((max(check)))





main() # Hits:1.0, Total execution time: 75.25 ms, Average time per hit: 75.25 ms 

",p02573,True
"N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.375 ms, Average time per hit: 37.375 ms 


friends = {i: set([]) for i in range(N)} # Hits:1.0, Total execution time: 2.041 ms, Average time per hit: 2.041 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.04 ms, Average time per hit: 0.09454545454545454 ms 


    a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 8.416 ms, Average time per hit: 0.8416 ms 


    a -= 1 # Hits:10.0, Total execution time: 1.04 ms, Average time per hit: 0.104 ms 


    b -= 1 # Hits:10.0, Total execution time: 0.833 ms, Average time per hit: 0.0833 ms 


    friends[a].add(b) # Hits:10.0, Total execution time: 1.625 ms, Average time per hit: 0.1625 ms 


    friends[b].add(a) # Hits:10.0, Total execution time: 2.334 ms, Average time per hit: 0.2334 ms 


#print(friends)

from collections import deque # Hits:1.0, Total execution time: 1.541 ms, Average time per hit: 1.541 ms 




reached = [-1] * N # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


ans = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(N): # Hits:5.0, Total execution time: 0.541 ms, Average time per hit: 0.1082 ms 


    if reached[i] == -1: # Hits:4.0, Total execution time: 0.457 ms, Average time per hit: 0.11425 ms 


        queue = deque() # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


        queue.append(i) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


        t = 1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


        reached[i] = 0 # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


        while len(queue) > 0: # Hits:5.0, Total execution time: 0.75 ms, Average time per hit: 0.15 ms 


            v = queue.popleft() # Hits:4.0, Total execution time: 0.501 ms, Average time per hit: 0.12525 ms 


            for n in friends.get(v): # Hits:16.0, Total execution time: 1.789 ms, Average time per hit: 0.1118125 ms 


                if reached[n] == -1: # Hits:12.0, Total execution time: 1.25 ms, Average time per hit: 0.10416666666666667 ms 


                    reached[n] = 0 # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


                    queue.append(n) # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


                    t += 1 # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    ans = max(ans, t) # Hits:4.0, Total execution time: 0.875 ms, Average time per hit: 0.21875 ms 


print(ans) # Hits:1.0, Total execution time: 4.833 ms, Average time per hit: 4.833 ms 

","N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.25 ms, Average time per hit: 35.25 ms 


t = [-1] * N # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




import sys # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


sys.setrecursionlimit(10 ** 6) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


def find(e): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if t[e] < 0:

        return e

    else:

        t[e] = find(t[e])

        return t[e]





def unite(a, b): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    a_root = find(a)

    b_root = find(b)

    if a_root == b_root:

        return

    t[a_root] += t[b_root]

    t[b_root] = a_root





for i in range(M): # Hits:11.0, Total execution time: 1.167 ms, Average time per hit: 0.1060909090909091 ms 


    a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 8.502 ms, Average time per hit: 0.8502000000000001 ms 


    a -= 1 # Hits:10.0, Total execution time: 1.083 ms, Average time per hit: 0.1083 ms 


    b -= 1 # Hits:10.0, Total execution time: 0.917 ms, Average time per hit: 0.0917 ms 


    unite(a, b) # Hits:10.0, Total execution time: 12.083 ms, Average time per hit: 1.2083 ms 






def size(x): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    x = find(x)

    return -t[x]





ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


    ans = max(ans, size(i)) # Hits:4.0, Total execution time: 3.292 ms, Average time per hit: 0.823 ms 


print(ans) # Hits:1.0, Total execution time: 8.25 ms, Average time per hit: 8.25 ms 



",p02573,True
"from collections import deque # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 


N,M = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.166 ms, Average time per hit: 37.166 ms 


graph = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


fship = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.209 ms, Average time per hit: 0.1099090909090909 ms 


    x,y = list(map(int,input().split())) # Hits:10.0, Total execution time: 8.206 ms, Average time per hit: 0.8206 ms 


    if x>y: # Hits:10.0, Total execution time: 0.875 ms, Average time per hit: 0.0875 ms 


        x,y = y,x # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


    if [x-1,y-1] not in fship: # Hits:10.0, Total execution time: 1.874 ms, Average time per hit: 0.1874 ms 


        fship.append([x-1,y-1]) # Hits:6.0, Total execution time: 1.75 ms, Average time per hit: 0.2916666666666667 ms 


fship.sort(key = lambda x: x[0]) # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


graph = [[] for _ in range(N)] # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


for i in fship: # Hits:7.0, Total execution time: 0.501 ms, Average time per hit: 0.07157142857142856 ms 


    graph[i[0]].append(i[1]) # Hits:6.0, Total execution time: 0.959 ms, Average time per hit: 0.15983333333333336 ms 




dist = [None]*N # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


ans = -1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(N): # Hits:5.0, Total execution time: 0.5 ms, Average time per hit: 0.1 ms 


    if dist[i]: # Hits:4.0, Total execution time: 0.375 ms, Average time per hit: 0.09375 ms 


        continue # Hits:3.0, Total execution time: 0.125 ms, Average time per hit: 0.041666666666666664 ms 


    dist[i] = True # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    tmp = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


    d = deque() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    d.append(i) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    while d: # Hits:5.0, Total execution time: 0.373 ms, Average time per hit: 0.0746 ms 


        v = d.popleft() # Hits:4.0, Total execution time: 0.46 ms, Average time per hit: 0.115 ms 


        for i in graph[v]: # Hits:10.0, Total execution time: 1.043 ms, Average time per hit: 0.1043 ms 


            if dist[i]: # Hits:6.0, Total execution time: 0.54 ms, Average time per hit: 0.09 ms 


                continue # Hits:3.0, Total execution time: 0.251 ms, Average time per hit: 0.08366666666666667 ms 


            dist[i] = True # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


            d.append(i) # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


            tmp += 1 # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


    ans = max(ans,tmp) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


print((ans+1)) # Hits:1.0, Total execution time: 4.667 ms, Average time per hit: 4.667 ms 
","from collections import deque # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 


N,M = list(map(int,input().split())) # Hits:1.0, Total execution time: 34.25 ms, Average time per hit: 34.25 ms 


graph = [[] for _ in range(N)] # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.044 ms, Average time per hit: 0.0949090909090909 ms 


    x,y = list(map(int,input().split())) # Hits:10.0, Total execution time: 8.376 ms, Average time per hit: 0.8376 ms 


    x -= 1 # Hits:10.0, Total execution time: 0.918 ms, Average time per hit: 0.09179999999999999 ms 


    y -= 1 # Hits:10.0, Total execution time: 0.832 ms, Average time per hit: 0.0832 ms 


    graph[x].append(y) # Hits:10.0, Total execution time: 1.458 ms, Average time per hit: 0.1458 ms 


    graph[y].append(x) # Hits:10.0, Total execution time: 2.248 ms, Average time per hit: 0.2248 ms 




seen = [None]*N # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


ans = -1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(N): # Hits:5.0, Total execution time: 0.54 ms, Average time per hit: 0.108 ms 


    if seen[i]: # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


        continue # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


    seen[i] = True # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    tmp = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


    d = deque() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    d.append(i) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    while d: # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 


        v = d.popleft() # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


        for i in graph[v]: # Hits:24.0, Total execution time: 2.376 ms, Average time per hit: 0.099 ms 


            if seen[i]: # Hits:20.0, Total execution time: 2.124 ms, Average time per hit: 0.1062 ms 


                continue # Hits:17.0, Total execution time: 1.207 ms, Average time per hit: 0.071 ms 


            seen[i] = True # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


            d.append(i) # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


            tmp += 1 # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


    ans = max(ans,tmp) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


print((ans+1)) # Hits:1.0, Total execution time: 6.875 ms, Average time per hit: 6.875 ms 
",p02573,True
"

#スタック、キューを使う

from collections import deque # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 




N,M = list(map(int,input().split())) # Hits:1.0, Total execution time: 39.0 ms, Average time per hit: 39.0 ms 




G = [ set() for row in range(N)] # Hits:1.0, Total execution time: 1.458 ms, Average time per hit: 1.458 ms 




for i in range(M): # Hits:11.0, Total execution time: 1.081 ms, Average time per hit: 0.09827272727272726 ms 


    A,B = list(map(int,input().split())) # Hits:10.0, Total execution time: 8.5 ms, Average time per hit: 0.85 ms 


    G[A-1].add(B-1) # Hits:10.0, Total execution time: 2.083 ms, Average time per hit: 0.2083 ms 


    G[B-1].add(A-1) # Hits:10.0, Total execution time: 2.751 ms, Average time per hit: 0.2751 ms 




for i in range(N): # Hits:5.0, Total execution time: 0.46 ms, Average time per hit: 0.092 ms 


    G[i] = list(G[i]) # Hits:4.0, Total execution time: 1.125 ms, Average time per hit: 0.28125 ms 




#1グループに所属する最大数

ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




#友達グループの数

count = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 




#各頂点の状態を色で表す WHITE:未訪問 GRAY:訪問中 BLACK:訪問完了

color = ['WHITE' for i in range(N)] # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 




#訪問途中の頂点を退避しておくスタック

S = deque() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




#次の要素を取り出す

def next(u):     # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    #G[u]に格納されているまだ未訪問のノードを返す

    for i in range(len(G[u])):

        if color[G[u][i]] == 'WHITE':

            return G[u][i]

    return -1



def dfs(u): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    #始点uをスタックに追加

    S.append(u)

    color[u] = 'GRAY'

    global count

    count += 1

    #dequeは空のとき偽を返す

    while S:

        u = S[-1]    #スタックの頂点をuに格納

        v = next(u)

        #uに未訪問の隣接ノードがある

        if v != -1:

            color[v] = 'GRAY'

            count += 1

            S.append(v)

        else:

            S.pop()

            color[u]='BLACK'



#未訪問のuを始点として深さ優先探索

for i in range(N): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    count = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


    if color[i] == 'WHITE': # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


        dfs(i) # Hits:1.0, Total execution time: 2.708 ms, Average time per hit: 2.708 ms 


        if count >= ans:

            ans = count



print(ans)
","""""""

UnionFindにはいろいろな実装があるが, 本問ではparents配列にノード数を保持する実装だと非常に簡単に解ける. 

以下のようにしてノード数を保持する.

自身が子のとき, 親ノード番号を格納する.

自身が根のとき, ノード数を負の数で格納する.

つまり,　負の数のときは自身が根であり, その絶対値がその木のノード数を表す.

初期化時は、すべてのノードを−1で初期化する.

""""""



N,M = list(map(int,input().split())) # Hits:1.0, Total execution time: 35.458 ms, Average time per hit: 35.458 ms 




#UnionFind木の実装

#-1で初期化し、併合のたびに-1していく

par = [-1] * N  #親 # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


rank = [0] * N #木の深さ # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




#木の根を求める

def find(x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    #par[x]が負のとき(自分が代表のとき)、自身を返す

    if par[x] < 0:

        return x

    else:

        return find(par[x])



#xとyの属する集合を併合

def unite(x,y): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    x = find(x)

    y = find(y)

    #もとから同じ集合のときは何もしない

    if (x == y):

        return

    #x側を常に小さくする

    if par[x] > par[y]:

            x, y = y, x

    

    #x側に併合する、その際xの代表にノード数を加算する

    par[x] += par[y]

    par[y] = x

    



#xとyが同じ集合に属するかどうか

def same(x,y): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    return find(x) == find(y)



for i in range(M): # Hits:11.0, Total execution time: 1.125 ms, Average time per hit: 0.10227272727272727 ms 


    x,y = list(map(int,input().split())) # Hits:10.0, Total execution time: 8.335 ms, Average time per hit: 0.8335 ms 


    x -= 1; y -= 1 # Hits:10.0, Total execution time: 1.208 ms, Average time per hit: 0.12079999999999999 ms 


    unite(x,y) # Hits:10.0, Total execution time: 11.459 ms, Average time per hit: 1.1459000000000001 ms 






ans = min(par) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




print((abs(ans))) # Hits:1.0, Total execution time: 5.917 ms, Average time per hit: 5.917 ms 

",p02573,True
"import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




class UnionFind(): # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 


    def __init__(self, n):

        self.n = n

        self.parents = [-1] * n



    def find(self, x):

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def unite(self, x, y):

        x = self.find(x)

        y = self.find(y)



        if x == y:

            return



        if self.parents[x] > self.parents[y]:

            x, y = y, x



        self.parents[x] += self.parents[y]

        self.parents[y] = x



    def size(self, x):

        return -self.parents[self.find(x)]



    def same(self, x, y):

        return self.find(x) == self.find(y)



    def members(self, x):

        root = self.find(x)

        return [i for i in range(self.n) if self.find(i) == root]



    def roots(self):

        return [i for i, x in enumerate(self.parents) if x < 0]



    def group_count(self):

        return len(self.roots())



    def all_group_members(self):

        return {r: self.members(r) for r in self.roots()}



    def __str__(self):

        return '\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())



n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 32.416 ms, Average time per hit: 32.416 ms 


uf = UnionFind(n) # Hits:1.0, Total execution time: 1.416 ms, Average time per hit: 1.416 ms 


for _ in range(m): # Hits:11.0, Total execution time: 1.208 ms, Average time per hit: 0.10981818181818181 ms 


    a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 3.956 ms, Average time per hit: 0.3956 ms 


    a -= 1 # Hits:10.0, Total execution time: 0.916 ms, Average time per hit: 0.0916 ms 


    b -= 1 # Hits:10.0, Total execution time: 0.875 ms, Average time per hit: 0.0875 ms 


    uf.unite(a, b) # Hits:10.0, Total execution time: 14.043 ms, Average time per hit: 1.4042999999999999 ms 


D = uf.all_group_members() # Hits:1.0, Total execution time: 7.459 ms, Average time per hit: 7.459 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in list(D.values()): # Hits:2.0, Total execution time: 0.625 ms, Average time per hit: 0.3125 ms 


    ans = max(ans, len(i)) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


print(ans) # Hits:1.0, Total execution time: 5.542 ms, Average time per hit: 5.542 ms 
","import sys # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


sys.setrecursionlimit(10**7) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 32.834 ms, Average time per hit: 32.834 ms 


G = [set() for _ in range(n)] # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 


for _ in range(m): # Hits:11.0, Total execution time: 0.959 ms, Average time per hit: 0.0871818181818182 ms 


    a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 4.293 ms, Average time per hit: 0.4293 ms 


    a -= 1 # Hits:10.0, Total execution time: 0.878 ms, Average time per hit: 0.0878 ms 


    b -= 1 # Hits:10.0, Total execution time: 0.874 ms, Average time per hit: 0.0874 ms 


    G[a].add(b) # Hits:10.0, Total execution time: 1.624 ms, Average time per hit: 0.16240000000000002 ms 


    G[b].add(a) # Hits:10.0, Total execution time: 1.79 ms, Average time per hit: 0.179 ms 


ans = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


seen = [0]*n # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def dfs(v): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    res = 0

    stack = [v]

    seen[v] = True

    while stack:

        res += 1

        v = stack.pop()

        for nv in G[v]:

            if seen[nv]:

                continue

            seen[nv] = True

            stack.append(nv)

    return res

for i in range(n): # Hits:5.0, Total execution time: 0.499 ms, Average time per hit: 0.0998 ms 


    if not seen[i]: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


        ans = max(ans, dfs(i)) # Hits:1.0, Total execution time: 3.958 ms, Average time per hit: 3.958 ms 


print(ans) # Hits:1.0, Total execution time: 5.291 ms, Average time per hit: 5.291 ms 
",p02573,True
"class UnionFind(): # Hits:1.0, Total execution time: 6.625 ms, Average time per hit: 6.625 ms 


    def __init__(self, n):

        self.n = n

        self.parents = [-1] * n



    def find(self, x):

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)



        if x == y:

            return



        if self.parents[x] > self.parents[y]:

            x, y = y, x



        self.parents[x] += self.parents[y]

        self.parents[y] = x



    def size(self, x):

        return -self.parents[self.find(x)]



    def same(self, x, y):

        return self.find(x) == self.find(y)



    def members(self, x):

        root = self.find(x)

        return [i for i in range(self.n) if self.find(i) == root]



    def roots(self):

        return [i for i, x in enumerate(self.parents) if x < 0]



    def group_count(self):

        return len(self.roots())



    def all_group_members(self):

        return {r: self.members(r) for r in self.roots()}



    def __str__(self):

        return '\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())



def main(): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


  n, m = list(map(int, input().split()))

  uf = UnionFind(n)



  for i in range(m):

    a, b = list(map(int, input().split()))

    a -= 1; b-= 1;

    uf.union(a, b)

  

  max_len = 0

  for g in list(uf.all_group_members().values()):

    len_g = len(g)

    if len_g > max_len:

      max_len = len_g

      

  print(max_len)

  

main() # Hits:1.0, Total execution time: 69.25 ms, Average time per hit: 69.25 ms 
","class UnionFind(): # Hits:1.0, Total execution time: 5.041 ms, Average time per hit: 5.041 ms 


    def __init__(self, n):

        self.n = n

        self.parents = [-1] * n



    def find(self, x):

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)



        if x == y:

            return



        if self.parents[x] > self.parents[y]:

            x, y = y, x



        self.parents[x] += self.parents[y]

        self.parents[y] = x



    def size(self, x):

        return -self.parents[self.find(x)]



    def same(self, x, y):

        return self.find(x) == self.find(y)



    def roots(self):

        return [i for i, x in enumerate(self.parents) if x < 0]



def main(): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


  n, m = list(map(int, input().split()))

  uf = UnionFind(n)



  for i in range(m):

    a, b = list(map(int, input().split()))

    a -= 1; b-= 1;

    uf.union(a, b)

  

  ans = 0

  for i in range(n):

    ans = max(ans, uf.size(i))

      

  print(ans)

  

main() # Hits:1.0, Total execution time: 68.833 ms, Average time per hit: 68.833 ms 
",p02573,True
"import queue # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.291 ms, Average time per hit: 37.291 ms 


l = [[] for i in range(N)] # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.042 ms, Average time per hit: 0.09472727272727273 ms 


        a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 8.375 ms, Average time per hit: 0.8375 ms 


        l[a - 1].append(b - 1) # Hits:10.0, Total execution time: 1.96 ms, Average time per hit: 0.196 ms 


        l[b - 1].append(a - 1) # Hits:10.0, Total execution time: 2.292 ms, Average time per hit: 0.2292 ms 


c = [0] * N  # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


ans = 1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


q = queue.Queue() # Hits:1.0, Total execution time: 6.667 ms, Average time per hit: 6.667 ms 


for j in range(N): # Hits:5.0, Total execution time: 0.499 ms, Average time per hit: 0.0998 ms 


        q.put(l[j]) # Hits:4.0, Total execution time: 6.917 ms, Average time per hit: 1.72925 ms 


        u = 0  # Hits:4.0, Total execution time: 0.291 ms, Average time per hit: 0.07275 ms 


        while not q.empty(): # Hits:12.0, Total execution time: 6.459 ms, Average time per hit: 0.53825 ms 


                temp = q.get() # Hits:8.0, Total execution time: 13.334 ms, Average time per hit: 1.66675 ms 


                for k in temp: # Hits:48.0, Total execution time: 4.124 ms, Average time per hit: 0.08591666666666667 ms 


                        if c[k]: # Hits:40.0, Total execution time: 3.584 ms, Average time per hit: 0.0896 ms 


                                continue # Hits:36.0, Total execution time: 2.375 ms, Average time per hit: 0.06597222222222222 ms 


                        c[k] = 1  # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


                        u += 1 # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


                        q.put(l[k]) # Hits:4.0, Total execution time: 6.208 ms, Average time per hit: 1.552 ms 


        ans = max(ans, u) # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


print(ans)  # Hits:1.0, Total execution time: 14.959 ms, Average time per hit: 14.959 ms 
","N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.666 ms, Average time per hit: 34.666 ms 


r = [-1] * (N + 1) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




def root(x): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


        if r[x] < 0:

                return x

        return root(r[x])



for i in range(M): # Hits:11.0, Total execution time: 1.291 ms, Average time per hit: 0.11736363636363636 ms 


        x, y = list(map(int, input().split())) # Hits:10.0, Total execution time: 9.169 ms, Average time per hit: 0.9168999999999999 ms 


        x = root(x) # Hits:10.0, Total execution time: 4.125 ms, Average time per hit: 0.4125 ms 


        y = root(y) # Hits:10.0, Total execution time: 3.627 ms, Average time per hit: 0.36269999999999997 ms 


        if x == y: # Hits:10.0, Total execution time: 0.876 ms, Average time per hit: 0.0876 ms 


                continue # Hits:7.0, Total execution time: 0.417 ms, Average time per hit: 0.05957142857142857 ms 


        if r[x] > r[y]: # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


                x, y = y, x # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        r[x] += r[y] # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


        r[y] = x  # Hits:3.0, Total execution time: 0.917 ms, Average time per hit: 0.3056666666666667 ms 




print((-min(r))) # Hits:1.0, Total execution time: 5.166 ms, Average time per hit: 5.166 ms 
",p02573,True
"def uf_find(x): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


  if x == p[x]:

    return x

  else:

    p[x] = uf_find(p[x])

    return p[x]



def uf_unite(x,y): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  x = uf_find(x)

  y = uf_find(y)

  if x != y:

    if r[y]>r[x]:

      x,y = y,x

    if r[x]==r[y]:

      r[x]+= 1

    p[y] = x

    #print(r)





N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.333 ms, Average time per hit: 35.333 ms 


p = list(range(N)) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


r = [0]*N # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




for i in range(M): # Hits:11.0, Total execution time: 1.168 ms, Average time per hit: 0.10618181818181818 ms 


  A, B = [int(j)-1 for j in input().split()] # Hits:10.0, Total execution time: 13.583 ms, Average time per hit: 1.3583 ms 


  uf_unite(A,B) # Hits:10.0, Total execution time: 23.0 ms, Average time per hit: 2.3 ms 


  #print(p)

  

#for i in range(N):

  #p[i] = uf_find(i)



q = [0]*N # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(N): # Hits:5.0, Total execution time: 0.75 ms, Average time per hit: 0.15 ms 


  q[i] = p.count(i) # Hits:4.0, Total execution time: 1.166 ms, Average time per hit: 0.2915 ms 


  

print((max(q))) # Hits:1.0, Total execution time: 6.208 ms, Average time per hit: 6.208 ms 

","N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 27.292 ms, Average time per hit: 27.292 ms 




par = list(range(N)) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


rank = [1]*N # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


size = [1]*N # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




def find(x): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


  if par[x] == x:

    return x

  else:

    return find(par[x])

  

def unite(x,y): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  x = find(x)

  y = find(y)

  

  if x == y:

    return

  if rank[x]<rank[y]:

    par[x]=y

    size[y]+= size[x]

  else:

    par[y] = x

    size[x] += size[y]

    if rank[x]==rank[y]:

      rank[x]+=1

    

for i in range(M): # Hits:11.0, Total execution time: 1.165 ms, Average time per hit: 0.10590909090909091 ms 


  a,b = [int(i)-1 for i in input().split()] # Hits:10.0, Total execution time: 10.793 ms, Average time per hit: 1.0793 ms 


  unite(a,b) # Hits:10.0, Total execution time: 12.292 ms, Average time per hit: 1.2292 ms 


  

print((max(size))) # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 
",p02573,True
"from collections import deque # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 




n,m=list(map(int,input().split())) # Hits:1.0, Total execution time: 36.959 ms, Average time per hit: 36.959 ms 


f=[[] for i in range(n+1)] # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 


for i in range(m): # Hits:11.0, Total execution time: 0.916 ms, Average time per hit: 0.08327272727272726 ms 


    a,b=list(map(int,input().split())) # Hits:10.0, Total execution time: 8.249 ms, Average time per hit: 0.8249 ms 


    f[a].append(b) # Hits:10.0, Total execution time: 1.416 ms, Average time per hit: 0.1416 ms 


    f[b].append(a) # Hits:10.0, Total execution time: 1.791 ms, Average time per hit: 0.17909999999999998 ms 


g=[0]*(n+1) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


p=[0]*(n+1) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,n+1): # Hits:5.0, Total execution time: 0.584 ms, Average time per hit: 0.1168 ms 


    if p[i]==0: # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


        p[i]=i # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        data=[i] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        data=deque(data) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


        while len(data)>0: # Hits:12.0, Total execution time: 1.375 ms, Average time per hit: 0.11458333333333333 ms 


            pos=data.popleft() # Hits:11.0, Total execution time: 1.084 ms, Average time per hit: 0.09854545454545455 ms 


            p[pos]=i # Hits:11.0, Total execution time: 1.041 ms, Average time per hit: 0.09463636363636364 ms 


            for j in f[pos]: # Hits:31.0, Total execution time: 2.792 ms, Average time per hit: 0.09006451612903225 ms 


                if p[j]==0: # Hits:20.0, Total execution time: 2.0 ms, Average time per hit: 0.1 ms 


                    data.append(j) # Hits:10.0, Total execution time: 1.249 ms, Average time per hit: 0.12490000000000001 ms 


            f[pos]=[] # Hits:11.0, Total execution time: 1.041 ms, Average time per hit: 0.09463636363636364 ms 


for i in range(n): # Hits:5.0, Total execution time: 0.499 ms, Average time per hit: 0.0998 ms 


    g[p[i+1]]+=1 # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


print((max(g))) # Hits:1.0, Total execution time: 4.667 ms, Average time per hit: 4.667 ms 



","from _collections import deque # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 




n,m=list(map(int,input().split())) # Hits:1.0, Total execution time: 36.833 ms, Average time per hit: 36.833 ms 


f=[[] for i in range(n+1)] # Hits:1.0, Total execution time: 1.458 ms, Average time per hit: 1.458 ms 


for i in range(m): # Hits:11.0, Total execution time: 1.081 ms, Average time per hit: 0.09827272727272726 ms 


    a,b=list(map(int,input().split())) # Hits:10.0, Total execution time: 8.458 ms, Average time per hit: 0.8458 ms 


    f[a].append(b) # Hits:10.0, Total execution time: 1.5 ms, Average time per hit: 0.15 ms 


    f[b].append(a) # Hits:10.0, Total execution time: 2.708 ms, Average time per hit: 0.2708 ms 


g=[0]*(n+1) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


p=[0]*(n+1) # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,n+1): # Hits:5.0, Total execution time: 0.584 ms, Average time per hit: 0.1168 ms 


    if p[i]==0: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


        p[i]=i # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


        data=[i] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        data=deque(data) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


        while len(data)>0: # Hits:5.0, Total execution time: 0.875 ms, Average time per hit: 0.175 ms 


            pos=data.popleft() # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


            p[pos]=i # Hits:4.0, Total execution time: 0.332 ms, Average time per hit: 0.083 ms 


            for j in f[pos]: # Hits:24.0, Total execution time: 2.287 ms, Average time per hit: 0.09529166666666668 ms 


                if p[j]==0: # Hits:20.0, Total execution time: 2.082 ms, Average time per hit: 0.1041 ms 


                    p[j]=i # Hits:3.0, Total execution time: 0.293 ms, Average time per hit: 0.09766666666666667 ms 


                    data.append(j) # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


for i in range(n): # Hits:5.0, Total execution time: 0.5 ms, Average time per hit: 0.1 ms 


    g[p[i+1]]+=1 # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


print((max(g))) # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 

",p02573,True
"from collections import deque # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 


 

N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.166 ms, Average time per hit: 35.166 ms 


g = {i:set() for i in range(N)} # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


v = [-1 for i in range(N)] # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


for _ in range(M): # Hits:11.0, Total execution time: 1.168 ms, Average time per hit: 0.10618181818181818 ms 


  a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 8.54 ms, Average time per hit: 0.854 ms 


  a, b = a-1, b-1 # Hits:10.0, Total execution time: 1.29 ms, Average time per hit: 0.129 ms 


  g[a].add(b) # Hits:10.0, Total execution time: 1.71 ms, Average time per hit: 0.171 ms 


  g[b].add(a) # Hits:10.0, Total execution time: 2.375 ms, Average time per hit: 0.2375 ms 


  

Q = deque() # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for a in g: # Hits:5.0, Total execution time: 0.543 ms, Average time per hit: 0.10859999999999999 ms 


  if v[a]==-1: # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


    v[a] = 1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ans_tmp = 1 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


    Q.append(a) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    while len(Q)>0: # Hits:5.0, Total execution time: 0.833 ms, Average time per hit: 0.1666 ms 


      na = Q.popleft() # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


      for nb in g[na]: # Hits:16.0, Total execution time: 1.875 ms, Average time per hit: 0.1171875 ms 


        if v[nb] == -1: # Hits:12.0, Total execution time: 1.333 ms, Average time per hit: 0.11108333333333333 ms 


          v[nb] = 1 # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


          ans_tmp += 1 # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


          Q.append(nb) # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    ans = max(ans, ans_tmp) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


print(ans) # Hits:1.0, Total execution time: 4.834 ms, Average time per hit: 4.834 ms 
","N, M = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.375 ms, Average time per hit: 36.375 ms 


r = [i for i in range(N+1)] # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


n = [0 for i in range(N+1)] # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


buf = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




def root(x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  if x==r[x]:

    return x

  else:

    r[x] = root(r[x])

    return r[x]



def unite(x, y): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  rx = root(x)

  ry = root(y)

  if rx < ry:

    r[ry] = rx

  elif rx > ry:

    r[rx] = ry

    



for _ in range(M): # Hits:11.0, Total execution time: 1.043 ms, Average time per hit: 0.09481818181818182 ms 


  a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 8.917 ms, Average time per hit: 0.8917 ms 


  unite(a, b) # Hits:10.0, Total execution time: 12.749 ms, Average time per hit: 1.2749000000000001 ms 




for x in range(1, N+1): # Hits:5.0, Total execution time: 0.584 ms, Average time per hit: 0.1168 ms 


  if r[x] != x and r[r[x]] != r[x]: # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    _ = root(x)

  

  

for x in r[1:]: # Hits:5.0, Total execution time: 0.541 ms, Average time per hit: 0.1082 ms 


  n[x] += 1 # Hits:4.0, Total execution time: 0.582 ms, Average time per hit: 0.1455 ms 


    

ans = max(n[1:]) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




print(ans) # Hits:1.0, Total execution time: 5.042 ms, Average time per hit: 5.042 ms 
",p02573,True
"class UnionFind(): # Hits:1.0, Total execution time: 16.959 ms, Average time per hit: 16.959 ms 


    def __init__(self, n):

        self.n = n

        self.parents = [-1] * n



    def find(self, x):

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)



        if x == y:

            return



        if self.parents[x] > self.parents[y]:

            x, y = y, x



        self.parents[x] += self.parents[y]

        self.parents[y] = x



    def size(self, x):

        return -self.parents[self.find(x)]



    def same(self, x, y):

        return self.find(x) == self.find(y)



    def members(self, x):

        root = self.find(x)

        return [i for i in range(self.n) if self.find(i) == root]



    def roots(self):

        return [i for i, x in enumerate(self.parents) if x < 0]



    def group_count(self):

        return len(self.roots())



    def all_group_members(self):

        return {r: self.members(r) for r in self.roots()}



    def __str__(self):

        return '\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())





n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 40.917 ms, Average time per hit: 40.917 ms 


friends = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(m): # Hits:11.0, Total execution time: 1.582 ms, Average time per hit: 0.14381818181818182 ms 


    f = list(map(int, input().split())) # Hits:10.0, Total execution time: 9.334 ms, Average time per hit: 0.9334 ms 


    f.sort() # Hits:10.0, Total execution time: 1.835 ms, Average time per hit: 0.1835 ms 


    if f not in friends: # Hits:10.0, Total execution time: 1.541 ms, Average time per hit: 0.1541 ms 


        friends.append(f) # Hits:6.0, Total execution time: 1.999 ms, Average time per hit: 0.33316666666666667 ms 




friend_map = UnionFind(n) # Hits:1.0, Total execution time: 1.666 ms, Average time per hit: 1.666 ms 




for f in friends: # Hits:7.0, Total execution time: 0.75 ms, Average time per hit: 0.10714285714285714 ms 


    friend_map.union(f[0]-1, f[1]-1) # Hits:6.0, Total execution time: 11.041 ms, Average time per hit: 1.8401666666666667 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 


    tmp = friend_map.size(i) # Hits:4.0, Total execution time: 3.626 ms, Average time per hit: 0.9065 ms 


    ans = max(ans, tmp) # Hits:4.0, Total execution time: 0.958 ms, Average time per hit: 0.2395 ms 




print(ans) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 

","class UnionFind(): # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 


    def __init__(self, n):

        self.n = n

        self.parents = [-1] * n



    def find(self, x):

        if self.parents[x] < 0:

            return x

        else:

            self.parents[x] = self.find(self.parents[x])

            return self.parents[x]



    def union(self, x, y):

        x = self.find(x)

        y = self.find(y)



        if x == y:

            return



        if self.parents[x] > self.parents[y]:

            x, y = y, x



        self.parents[x] += self.parents[y]

        self.parents[y] = x



    def size(self, x):

        return -self.parents[self.find(x)]



    def same(self, x, y):

        return self.find(x) == self.find(y)



    def members(self, x):

        root = self.find(x)

        return [i for i in range(self.n) if self.find(i) == root]



    def roots(self):

        return [i for i, x in enumerate(self.parents) if x < 0]



    def group_count(self):

        return len(self.roots())



    def all_group_members(self):

        return {r: self.members(r) for r in self.roots()}



    def __str__(self):

        return '\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())





n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.291 ms, Average time per hit: 34.291 ms 


friends = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(m): # Hits:11.0, Total execution time: 1.291 ms, Average time per hit: 0.11736363636363636 ms 


    f = list(map(int, input().split())) # Hits:10.0, Total execution time: 7.793 ms, Average time per hit: 0.7793 ms 


    friends.append(f) # Hits:10.0, Total execution time: 1.708 ms, Average time per hit: 0.1708 ms 




friend_map = UnionFind(n) # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 




for f in friends: # Hits:11.0, Total execution time: 0.956 ms, Average time per hit: 0.08690909090909091 ms 


    friend_map.union(f[0]-1, f[1]-1) # Hits:10.0, Total execution time: 12.836 ms, Average time per hit: 1.2835999999999999 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:5.0, Total execution time: 0.582 ms, Average time per hit: 0.1164 ms 


    tmp = friend_map.size(i) # Hits:4.0, Total execution time: 2.874 ms, Average time per hit: 0.7185 ms 


    ans = max(ans, tmp) # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 




print(ans) # Hits:1.0, Total execution time: 5.792 ms, Average time per hit: 5.792 ms 

",p02573,True
"from collections import deque # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


N,M=[int(s) for s in input().split()]  # Hits:1.0, Total execution time: 36.042 ms, Average time per hit: 36.042 ms 


hito=[0 for i in range(N)] # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


edge=[set() for _ in range(N)] # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.082 ms, Average time per hit: 0.09836363636363636 ms 


  a,b=[int(s) for s in input().split()] # Hits:10.0, Total execution time: 10.25 ms, Average time per hit: 1.025 ms 


  edge[a-1].add(b-1) # Hits:10.0, Total execution time: 2.045 ms, Average time per hit: 0.2045 ms 


  edge[b-1].add(a-1) # Hits:10.0, Total execution time: 2.126 ms, Average time per hit: 0.21259999999999998 ms 






def dfs(start): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


  count=1

  reach=deque([start])

  hito[start]=1

  while reach:

    _from=reach.pop()

    for _to in edge[_from]:

      if not(_to in reach) and hito[_to]==0:

        reach.append(_to)

        count+=1

        hito[_to]=1

  return(count)

 



ans=set() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for h in range(N): # Hits:5.0, Total execution time: 0.458 ms, Average time per hit: 0.0916 ms 


  if hito[h]==0: # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


    ans.add(dfs(h)) # Hits:1.0, Total execution time: 4.667 ms, Average time per hit: 4.667 ms 


print((max(ans))) # Hits:1.0, Total execution time: 8.084 ms, Average time per hit: 8.084 ms 
","N,M=[int(s) for s in input().split()]  # Hits:1.0, Total execution time: 35.792 ms, Average time per hit: 35.792 ms 


hito=[0 for i in range(N)] # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


edge=[set() for _ in range(N)] # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


for i in range(M): # Hits:11.0, Total execution time: 1.044 ms, Average time per hit: 0.0949090909090909 ms 


  a,b=[int(s) for s in input().split()] # Hits:10.0, Total execution time: 10.666 ms, Average time per hit: 1.0666 ms 


  edge[a-1].add(b-1) # Hits:10.0, Total execution time: 2.206 ms, Average time per hit: 0.2206 ms 


  edge[b-1].add(a-1) # Hits:10.0, Total execution time: 2.414 ms, Average time per hit: 0.2414 ms 






def dfs(start): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


  count=1

  reach=set()

  reach.add(start)

  hito[start]=1

  while reach:

    _from=reach.pop()

    for _to in edge[_from]:

      if not(_to in reach) and hito[_to]==0:

        reach.add(_to)

        count+=1

        hito[_to]=1

  return(count)

 



ans=set() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for h in range(N): # Hits:5.0, Total execution time: 0.416 ms, Average time per hit: 0.0832 ms 


  if hito[h]==0: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


    ans.add(dfs(h)) # Hits:1.0, Total execution time: 5.458 ms, Average time per hit: 5.458 ms 


print((max(ans))) # Hits:1.0, Total execution time: 5.542 ms, Average time per hit: 5.542 ms 
",p02573,True
"from collections import deque # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 


n,m=list(map(int,input().split())) # Hits:1.0, Total execution time: 37.416 ms, Average time per hit: 37.416 ms 


f=[[] for _ in range(n)] # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


for i in range(m): # Hits:11.0, Total execution time: 1.003 ms, Average time per hit: 0.09118181818181818 ms 


    a,b=list(map(int,input().split())) # Hits:10.0, Total execution time: 8.123 ms, Average time per hit: 0.8122999999999999 ms 


    if not (b-1) in f[a-1]: # Hits:10.0, Total execution time: 1.5 ms, Average time per hit: 0.15 ms 


        f[a-1].append(b-1) # Hits:6.0, Total execution time: 1.125 ms, Average time per hit: 0.1875 ms 


    if not (a-1) in f[b-1]: # Hits:10.0, Total execution time: 1.459 ms, Average time per hit: 0.1459 ms 


        f[b-1].append(a-1) # Hits:6.0, Total execution time: 1.375 ms, Average time per hit: 0.22916666666666666 ms 


chk=[False]*n # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


q=deque() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:5.0, Total execution time: 0.502 ms, Average time per hit: 0.1004 ms 


    if chk[i]==True: # Hits:4.0, Total execution time: 0.333 ms, Average time per hit: 0.08325 ms 


        continue # Hits:3.0, Total execution time: 0.209 ms, Average time per hit: 0.06966666666666667 ms 


    q.append(i) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    chk[i]=True # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    cnt=1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


    while q: # Hits:5.0, Total execution time: 0.415 ms, Average time per hit: 0.083 ms 


        x=q.popleft() # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


        for nx in f[x]: # Hits:16.0, Total execution time: 1.501 ms, Average time per hit: 0.0938125 ms 


            if chk[nx]==True: # Hits:12.0, Total execution time: 1.166 ms, Average time per hit: 0.09716666666666667 ms 


                continue # Hits:9.0, Total execution time: 0.583 ms, Average time per hit: 0.06477777777777777 ms 


            q.append(nx) # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


            chk[nx]=True # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


            cnt+=1 # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


    ans=max(ans,cnt) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


print(ans) # Hits:1.0, Total execution time: 4.625 ms, Average time per hit: 4.625 ms 
",,p02573,True
"import sys

sys.setrecursionlimit(10**9)





N, M = list(map(int, input().split()))

to = [[] for _ in range(N)]

count = 0



for _ in range(M):

    A, B = [int(x) - 1 for x in input().split()]

    to[A].append(B)

    to[B].append(A)





def dfs(v, to, seen):

    global count

    seen[v] = True

    count += 1

    for nv in to[v]:

        if seen[nv]:

            continue

        dfs(nv, to, seen)





def main():

    global count

    seen = [False] * N

    cnts = []

    for i in range(N):

        if not seen[i]:

            dfs(i, to, seen)

            cnts.append(count)

            count = 0

    

    print((max(cnts)))





if __name__ == ""__main__"":

    main()


",,p02573,False
"import sys # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


sys.setrecursionlimit(500*500) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




class UnionFind(): # Hits:1.0, Total execution time: 4.916 ms, Average time per hit: 4.916 ms 


    def __init__(self, n):

        self.par = [-1]*n



    def root(self, x):

        if self.par[x] < 0:

            return x

        return self.root(self.par[x])



    def unite(self, x, y):

        if x > y:

            x, y = y, x

        rx = self.root(x)

        ry = self.root(y)

        if rx != ry:

            self.par[rx] += self.par[ry]

            self.par[ry] = rx



    def size(self, x):

        return -self.par[self.root(x)]



    def same(self, x, y):

        rx = self.root(x)

        ry = self.root(y)

        return rx == ry



    def return_par(self):

        return self.par



n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 30.917 ms, Average time per hit: 30.917 ms 


uf = UnionFind(n) # Hits:1.0, Total execution time: 1.166 ms, Average time per hit: 1.166 ms 


for i in range(m): # Hits:11.0, Total execution time: 1.086 ms, Average time per hit: 0.09872727272727273 ms 


    a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 8.498 ms, Average time per hit: 0.8498 ms 


    uf.unite(a-1, b-1) # Hits:10.0, Total execution time: 12.998 ms, Average time per hit: 1.2997999999999998 ms 




ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(n): # Hits:5.0, Total execution time: 0.459 ms, Average time per hit: 0.09179999999999999 ms 


    ans = max(ans, uf.size(i)) # Hits:4.0, Total execution time: 9.791 ms, Average time per hit: 2.44775 ms 


print(ans) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 

","import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


sys.setrecursionlimit(10**8) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




class UnionFind(): # Hits:1.0, Total execution time: 6.583 ms, Average time per hit: 6.583 ms 


    def __init__(self, n):

        self.par = [-1]*n



    def find(self, x):

        if self.par[x] < 0:

            return x

        self.par[x] = self.find(self.par[x])

        return self.par[x]



    def union(self, x, y):

        if x > y:

            x, y = y, x

        rx = self.find(x)

        ry = self.find(y)

        if rx != ry:

            self.par[rx] += self.par[ry]

            self.par[ry] = rx



    def size(self, x):

        return -self.par[self.find(x)]



    def same(self, x, y):

        rx = self.find(x)

        ry = self.find(y)

        return rx == ry



    def return_par(self):

        return self.par



n, m = list(map(int, input().split())) # Hits:1.0, Total execution time: 39.041 ms, Average time per hit: 39.041 ms 


uf = UnionFind(n) # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


for i in range(m): # Hits:11.0, Total execution time: 1.25 ms, Average time per hit: 0.11363636363636365 ms 


    a, b = list(map(int, input().split())) # Hits:10.0, Total execution time: 10.625 ms, Average time per hit: 1.0625 ms 


    uf.union(a-1, b-1) # Hits:10.0, Total execution time: 16.001 ms, Average time per hit: 1.6000999999999999 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:5.0, Total execution time: 0.542 ms, Average time per hit: 0.10840000000000001 ms 


    ans = max(ans, uf.size(i)) # Hits:4.0, Total execution time: 3.375 ms, Average time per hit: 0.84375 ms 


print(ans) # Hits:1.0, Total execution time: 4.875 ms, Average time per hit: 4.875 ms 

",p02573,True
"MOD = 10**9+7 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




kaijo_memo = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def kaijo(n): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


  if(len(kaijo_memo) > n): return kaijo_memo[n]

  if(len(kaijo_memo) == 0): kaijo_memo.append(1)

  while(len(kaijo_memo) <= n): kaijo_memo.append(kaijo_memo[-1] * len(kaijo_memo) % MOD)

  return kaijo_memo[n]



gyaku_kaijo_memo = [] # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


def gyaku_kaijo(n): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  if(len(gyaku_kaijo_memo) > n): return gyaku_kaijo_memo[n]

  if(len(gyaku_kaijo_memo) == 0): gyaku_kaijo_memo.append(1)

  while(len(gyaku_kaijo_memo) <= n): gyaku_kaijo_memo.append(gyaku_kaijo_memo[-1] * pow(len(gyaku_kaijo_memo),MOD-2,MOD) % MOD)

  return gyaku_kaijo_memo[n]



def nCr(n,r): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  if n == r: return 1

  if n < r or r < 0: return 0

  ret = 1

  ret = ret * kaijo(n) % MOD

  ret = ret * gyaku_kaijo(r) % MOD

  ret = ret * gyaku_kaijo(n-r) % MOD

  return ret



N,M,L,R = list(map(int,input().split())) # Hits:1.0, Total execution time: 64.417 ms, Average time per hit: 64.417 ms 




P = [0 for i in range(R+1)] # Hits:1.0, Total execution time: 2.334 ms, Average time per hit: 2.334 ms 


for k in range(R+1): # Hits:10.0, Total execution time: 0.915 ms, Average time per hit: 0.0915 ms 


  u = (R-M*(k+1))//(k+1) # Hits:9.0, Total execution time: 1.375 ms, Average time per hit: 0.15277777777777776 ms 


  for j in range(u+1): # Hits:29.0, Total execution time: 3.749 ms, Average time per hit: 0.12927586206896552 ms 


    P[(k+1)*j+M*(k+1)] += nCr(N-M,j)*(-1)**(j%2) # Hits:20.0, Total execution time: 25.374 ms, Average time per hit: 1.2687 ms 


    P[(k+1)*j+M*(k+1)] %= MOD # Hits:20.0, Total execution time: 5.873 ms, Average time per hit: 0.29364999999999997 ms 


for k in range(1,R+1): # Hits:9.0, Total execution time: 0.875 ms, Average time per hit: 0.09722222222222222 ms 


  u = (R-M*(k+1))//k # Hits:8.0, Total execution time: 1.167 ms, Average time per hit: 0.145875 ms 


  for j in range(u+1): # Hits:24.0, Total execution time: 2.751 ms, Average time per hit: 0.114625 ms 


    P[k*j+M*(k+1)] -= nCr(N-M,j)*(-1)**(j%2) # Hits:16.0, Total execution time: 12.959 ms, Average time per hit: 0.8099375 ms 


    P[k*j+M*(k+1)] %= MOD # Hits:16.0, Total execution time: 3.166 ms, Average time per hit: 0.197875 ms 




Q = [nCr(i+N,N) for i in range(R+1)] # Hits:1.0, Total execution time: 22.083 ms, Average time per hit: 22.083 ms 




def f(MAX): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


  ans = 0

  for t in range(MAX+1):

    ans += P[t]*Q[MAX-t]

    ans %= MOD

  return ans



def F(x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  return (Q[x]-nCr(N,M)*f(x))%MOD



print(((F(R)-F(L-1))%MOD)) # Hits:1.0, Total execution time: 14.75 ms, Average time per hit: 14.75 ms 
","MOD = 10**9+7 # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




kaijo_memo = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def kaijo(n): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  if(len(kaijo_memo) > n): return kaijo_memo[n]

  if(len(kaijo_memo) == 0): kaijo_memo.append(1)

  while(len(kaijo_memo) <= n): kaijo_memo.append(kaijo_memo[-1] * len(kaijo_memo) % MOD)

  return kaijo_memo[n]



gyaku_kaijo_memo = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def gyaku_kaijo(n): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  if(len(gyaku_kaijo_memo) > n): return gyaku_kaijo_memo[n]

  if(len(gyaku_kaijo_memo) == 0): gyaku_kaijo_memo.append(1)

  while(len(gyaku_kaijo_memo) <= n): gyaku_kaijo_memo.append(gyaku_kaijo_memo[-1] * pow(len(gyaku_kaijo_memo),MOD-2,MOD) % MOD)

  return gyaku_kaijo_memo[n]



def nCr(n,r): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


  if n == r: return 1

  if n < r or r < 0: return 0

  ret = 1

  ret = ret * kaijo(n) % MOD

  ret = ret * gyaku_kaijo(r) % MOD

  ret = ret * gyaku_kaijo(n-r) % MOD

  return ret



N,M,L,R = list(map(int,input().split())) # Hits:1.0, Total execution time: 51.125 ms, Average time per hit: 51.125 ms 




P = [0 for i in range(R+1)] # Hits:1.0, Total execution time: 1.958 ms, Average time per hit: 1.958 ms 


Q = [0 for i in range(R+1)] # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


Z = [0 for i in range(R+1)] # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


for k in range(1,R+1): # Hits:9.0, Total execution time: 0.96 ms, Average time per hit: 0.10666666666666667 ms 


  u = (R-M*k)//k # Hits:8.0, Total execution time: 1.124 ms, Average time per hit: 0.1405 ms 


  for j in range(u+1): # Hits:28.0, Total execution time: 3.708 ms, Average time per hit: 0.13242857142857142 ms 


    P[k*j+M*k] += nCr(N-M,j)*(-1)**(j%2) # Hits:20.0, Total execution time: 23.874 ms, Average time per hit: 1.1937 ms 


    P[k*j+M*k] %= MOD # Hits:20.0, Total execution time: 5.208 ms, Average time per hit: 0.26039999999999996 ms 


for k in range(R+1): # Hits:10.0, Total execution time: 1.046 ms, Average time per hit: 0.1046 ms 


  Q[k] += nCr(k+N,N) # Hits:9.0, Total execution time: 23.043 ms, Average time per hit: 2.5603333333333333 ms 


  Q[k] %= MOD # Hits:9.0, Total execution time: 1.459 ms, Average time per hit: 0.16211111111111112 ms 


  Z[k] += nCr(k+N,N) # Hits:9.0, Total execution time: 10.584 ms, Average time per hit: 1.176 ms 


  Z[k] %= MOD # Hits:9.0, Total execution time: 1.456 ms, Average time per hit: 0.16177777777777777 ms 


for k in range(R-M+1): # Hits:9.0, Total execution time: 0.875 ms, Average time per hit: 0.09722222222222222 ms 


  Q[k+M] -= nCr(k+N,N) # Hits:8.0, Total execution time: 9.291 ms, Average time per hit: 1.161375 ms 


  Q[k+M] %= MOD # Hits:8.0, Total execution time: 1.417 ms, Average time per hit: 0.177125 ms 




def f(MAX): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


  ans = 0

  for t in range(MAX+1):

    ans += P[t]*Q[MAX-t]

    ans %= MOD

  return ans



def F(x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  return (Z[x]-nCr(N,M)*f(x))%MOD



print(((F(R)-F(L-1))%MOD)) # Hits:1.0, Total execution time: 22.666 ms, Average time per hit: 22.666 ms 
",p02932,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 70.334 ms, Average time per hit: 70.334 ms 


A = [int(i) for i in input().split()]  # Hits:1.0, Total execution time: 7.667 ms, Average time per hit: 7.667 ms 


mod = 10**9 + 7 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




b = [0]*N # Hits:1.0, Total execution time: 10.208 ms, Average time per hit: 10.208 ms 


b[0] = A[0] # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


for n in range(1,N): # Hits:24.0, Total execution time: 3.249 ms, Average time per hit: 0.135375 ms 


    b[n] = A[n] ^ b[n-1] # Hits:23.0, Total execution time: 5.668 ms, Average time per hit: 0.24643478260869567 ms 




dp = [[not j for i in range(1<<20)] for j in range(2)] # Hits:1.0, Total execution time: 125661.709 ms, Average time per hit: 125661.709 ms 


cnt = [0 for i in range(1<<20)] # Hits:1.0, Total execution time: 57242.541 ms, Average time per hit: 57242.541 ms 


z = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(N): # Hits:25.0, Total execution time: 2.501 ms, Average time per hit: 0.10004 ms 


    if b[i] == 0: # Hits:24.0, Total execution time: 3.165 ms, Average time per hit: 0.131875 ms 


        z +=1 # Hits:9.0, Total execution time: 0.835 ms, Average time per hit: 0.09277777777777776 ms 


    dp[0][b[i]] += dp[1][b[i]]*(z-cnt[b[i]]) # Hits:24.0, Total execution time: 8.374 ms, Average time per hit: 0.3489166666666667 ms 


    dp[0][b[i]] %= mod # Hits:24.0, Total execution time: 5.21 ms, Average time per hit: 0.21708333333333335 ms 


    dp[1][b[i]] += dp[0][b[i]] # Hits:24.0, Total execution time: 5.25 ms, Average time per hit: 0.21875 ms 


    dp[1][b[i]] %= mod # Hits:24.0, Total execution time: 4.205 ms, Average time per hit: 0.17520833333333335 ms 


    cnt[b[i]] = z # Hits:24.0, Total execution time: 3.001 ms, Average time per hit: 0.12504166666666666 ms 




if b[N-1]: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print((dp[0][b[N-1]])) # Hits:1.0, Total execution time: 17.416 ms, Average time per hit: 17.416 ms 


else:

    ans = pow(2, z-1, mod) # Hits:1.0, Total execution time: 2.25 ms, Average time per hit: 2.25 ms 


    for i in range(1, 1<<20): # Hits:1048576.0, Total execution time: 91431.29 ms, Average time per hit: 0.0871956729888916 ms 


        ans += dp[1][i] # Hits:1048575.0, Total execution time: 130779.023 ms, Average time per hit: 0.1247207143027442 ms 


        ans %= mod # Hits:1048575.0, Total execution time: 109236.099 ms, Average time per hit: 0.10417576139045848 ms 


    print(ans) # Hits:1.0, Total execution time: 30.0 ms, Average time per hit: 30.0 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 44.959 ms, Average time per hit: 44.959 ms 


A = [int(i) for i in input().split()]  # Hits:1.0, Total execution time: 5.958 ms, Average time per hit: 5.958 ms 


mod = 10**9 + 7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




b = [0]*N # # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


b[0] = A[0] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for n in range(1,N): # Hits:24.0, Total execution time: 2.291 ms, Average time per hit: 0.09545833333333333 ms 


    b[n] = A[n] ^ b[n-1] # Hits:23.0, Total execution time: 4.709 ms, Average time per hit: 0.2047391304347826 ms 


#print('累積論理和',b)

m = max(b) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


dp = [[0]*(m+1) for j in range(2)] # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 


dp[0] = [True]*(m+1) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


dp[1] = [False]*(m+1) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


cnt = [0]*(m+1) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


z = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(N): # Hits:25.0, Total execution time: 2.208 ms, Average time per hit: 0.08832 ms 


    if b[i] == 0: # Hits:24.0, Total execution time: 2.584 ms, Average time per hit: 0.10766666666666667 ms 


        z +=1 # Hits:9.0, Total execution time: 0.749 ms, Average time per hit: 0.08322222222222223 ms 


    dp[0][b[i]] += dp[1][b[i]]*(z-cnt[b[i]]) # Hits:24.0, Total execution time: 6.914 ms, Average time per hit: 0.2880833333333333 ms 


    dp[0][b[i]] %= mod # Hits:24.0, Total execution time: 4.374 ms, Average time per hit: 0.18225 ms 


    dp[1][b[i]] += dp[0][b[i]] # Hits:24.0, Total execution time: 5.044 ms, Average time per hit: 0.21016666666666667 ms 


    dp[1][b[i]] %= mod # Hits:24.0, Total execution time: 4.041 ms, Average time per hit: 0.168375 ms 


    cnt[b[i]] = z # Hits:24.0, Total execution time: 2.666 ms, Average time per hit: 0.11108333333333333 ms 






if b[N-1]: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print((dp[0][b[N-1]])) # Hits:1.0, Total execution time: 5.958 ms, Average time per hit: 5.958 ms 


else:

    ans = pow(2, z-1, mod) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


    for i in range(1,m+1): # Hits:9.0, Total execution time: 0.917 ms, Average time per hit: 0.10188888888888889 ms 


        ans += dp[1][i] # Hits:8.0, Total execution time: 1.084 ms, Average time per hit: 0.1355 ms 


        ans %= mod # Hits:8.0, Total execution time: 0.958 ms, Average time per hit: 0.11975 ms 


    print(ans) # Hits:1.0, Total execution time: 6.458 ms, Average time per hit: 6.458 ms 
",p03051,True
"from collections import defaultdict # Hits:1.0, Total execution time: 2.25 ms, Average time per hit: 2.25 ms 


from itertools import accumulate # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


from operator import xor # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 






def solve(acc): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    MOD = 10 ** 9 + 7

    cnt0 = 0

    dp0 = defaultdict(lambda: 1)

    dp1 = defaultdict(lambda: 0)

    last_0 = defaultdict(lambda: 0)

    for a in acc:

        if a == 0:

            cnt0 += 1

        else:

            if a not in dp1:

                dp1[a] = 1

                last_0[a] = cnt0

            else:

                bw0 = cnt0 - last_0[a]

                if bw0 > 0:

                    dp0[a] = (dp0[a] + dp1[a] * bw0) % MOD

                    last_0[a] = cnt0

                dp1[a] = (dp1[a] + dp0[a]) % MOD



    if acc[-1] == 0:

        return (pow(2, cnt0 - 1, MOD) + sum(dp1.values())) % MOD

    else:

        return dp0[acc[-1]]





n = int(eval(input())) # Hits:1.0, Total execution time: 43.0 ms, Average time per hit: 43.0 ms 


aaa = list(map(int, input().split())) # Hits:1.0, Total execution time: 3.208 ms, Average time per hit: 3.208 ms 


acc = list(accumulate(aaa, func=xor)) # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


print((solve(acc))) # Hits:1.0, Total execution time: 18.458 ms, Average time per hit: 18.458 ms 

","from itertools import accumulate # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


from operator import xor # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 






def solve(acc): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    MOD = 10 ** 9 + 7

    cnt0 = 0

    dp0 = {}

    dp1 = {}

    last_0 = {}

    for a in acc:

        if a == 0:

            cnt0 += 1

        else:

            if a not in dp1:

                dp0[a] = 1

                dp1[a] = 1

                last_0[a] = cnt0

            else:

                bw0 = cnt0 - last_0[a]

                if bw0 > 0:

                    dp0[a] = (dp0[a] + dp1[a] * bw0) % MOD

                    last_0[a] = cnt0

                dp1[a] = (dp1[a] + dp0[a]) % MOD



    if acc[-1] == 0:

        return (pow(2, cnt0 - 1, MOD) + sum(dp1.values())) % MOD

    else:

        return dp0[acc[-1]]





n = int(eval(input())) # Hits:1.0, Total execution time: 41.959 ms, Average time per hit: 41.959 ms 


aaa = list(map(int, input().split())) # Hits:1.0, Total execution time: 3.458 ms, Average time per hit: 3.458 ms 


acc = list(accumulate(aaa, func=xor)) # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 


print((solve(acc))) # Hits:1.0, Total execution time: 18.666 ms, Average time per hit: 18.666 ms 

",p03051,True
"x,a,b=list(map(int,input().split()));print((['delicious',['safe','dangerous'][b-a>x]][a-b<0])) # Hits:1.0, Total execution time: 42.916 ms, Average time per hit: 42.916 ms 
","x,a,b=list(map(int,input().split())) # Hits:1.0, Total execution time: 30.167 ms, Average time per hit: 30.167 ms 


print((('delicious',('safe','dangerous')[b-a>x])[a<b])) # Hits:1.0, Total execution time: 6.291 ms, Average time per hit: 6.291 ms 
",p03679,True
"import collections # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




h, w, n = list(map(int, input().split())) # Hits:1.0, Total execution time: 48.625 ms, Average time per hit: 48.625 ms 


y, x = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.791 ms, Average time per hit: 2.791 ms 


s = input().rstrip() # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


t = input().rstrip() # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


counter = collections.Counter() # Hits:1.0, Total execution time: 2.875 ms, Average time per hit: 2.875 ms 


for c in s: # Hits:12.0, Total execution time: 1.249 ms, Average time per hit: 0.10408333333333333 ms 


    counter[c] += 1 # Hits:11.0, Total execution time: 4.416 ms, Average time per hit: 0.40145454545454545 ms 






def check(counts, direction, opposite_direction, pos, target): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    for i in range(n):

        counts[direction] -= 1

        if s[i] == direction:

            pos += 1

        if pos == target:

            return False

        if t[i] == opposite_direction and pos > 1 and counts[

                opposite_direction] < pos:

            pos -= 1



    return True





for d, od, pos, target in [ # Hits:2.0, Total execution time: 0.624 ms, Average time per hit: 0.312 ms 


    ('R', 'L', x, w + 1), # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    ('L', 'R', w + 1 - x, w + 1), # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    ('D', 'U', y, h + 1), # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ('U', 'D', h + 1 - y, h + 1), # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


]:

    ok = check(collections.Counter(list(counter.items())), d, od, pos, target) # Hits:2.0, Total execution time: 15.375 ms, Average time per hit: 7.6875 ms 


    if not ok: # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


        print('NO') # Hits:1.0, Total execution time: 5.791 ms, Average time per hit: 5.791 ms 


        break # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


else:

    print('YES') # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 
","h, w, n = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.75 ms, Average time per hit: 37.75 ms 


y, x = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.958 ms, Average time per hit: 1.958 ms 


s = input().rstrip() # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


t = input().rstrip() # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 






def check(direction, opposite_direction, pos, target): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    for i in range(n):

        if s[i] == direction:

            pos += 1

        if pos == target:

            return False

        if t[i] == opposite_direction and pos > 1:

            pos -= 1

    return True





for d, od, pos, target in [ # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


    ('R', 'L', x, w + 1), # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ('L', 'R', w + 1 - x, w + 1), # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ('D', 'U', y, h + 1), # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ('U', 'D', h + 1 - y, h + 1), # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


]:

    ok = check(d, od, pos, target) # Hits:2.0, Total execution time: 5.041 ms, Average time per hit: 2.5205 ms 


    if not ok: # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


        print('NO') # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 


        break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


else:

    print('YES') # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 
",p03054,True
"import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


from collections import defaultdict # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 




sys.setrecursionlimit(2 * 10 ** 5) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




(N,) = [int(x) for x in input().split()] # Hits:1.0, Total execution time: 43.75 ms, Average time per hit: 43.75 ms 


colors = [int(x) for x in input().split()] # Hits:1.0, Total execution time: 3.5 ms, Average time per hit: 3.5 ms 


edges = [[int(x) for x in input().split()] for i in range(N - 1)] # Hits:1.0, Total execution time: 8.375 ms, Average time per hit: 8.375 ms 


graph = defaultdict(list) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


for u, v in edges: # Hits:8.0, Total execution time: 0.916 ms, Average time per hit: 0.1145 ms 


    graph[u].append(v) # Hits:7.0, Total execution time: 1.375 ms, Average time per hit: 0.19642857142857142 ms 


    graph[v].append(u) # Hits:7.0, Total execution time: 2.836 ms, Average time per hit: 0.4051428571428572 ms 


parent = {1: None} # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


children = defaultdict(list) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 






def rootTree(node): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    for nbr in graph[node]:

        if nbr not in parent:

            parent[nbr] = node

            children[node].append(nbr)

            rootTree(nbr)





rootTree(1) # Hits:1.0, Total execution time: 5.417 ms, Average time per hit: 5.417 ms 






colorlessCount = [0 for c in range(N + 1)] # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


colorlessTime = [0 for c in range(N + 1)] # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


t = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 






def buildComps(node): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    global t

    t += 1

    currColor = colors[node - 1]

    colorlessTime[currColor] += 1

    for child in children[node]:

        oldCount = t - colorlessTime[currColor]

        colorlessTime[currColor] = t

        buildComps(child)

        s = t - colorlessTime[currColor]

        colorlessTime[currColor] = t - oldCount

        colorlessCount[currColor] += s * (s + 1) // 2





buildComps(1) # Hits:1.0, Total execution time: 1.917 ms, Average time per hit: 1.917 ms 




for c in range(1, N + 1):

    s = t - colorlessTime[c]

    colorlessCount[c] += s * (s + 1) // 2

maxPairs = N * (N + 1) // 2

for c in range(1, N + 1):

    print((maxPairs - colorlessCount[c]))
","import sys # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




sys.setrecursionlimit(2 * 10 ** 5) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 43.791 ms, Average time per hit: 43.791 ms 


colors = [int(x) for x in input().split()] # Hits:1.0, Total execution time: 4.0 ms, Average time per hit: 4.0 ms 


edges = [[int(x) for x in input().split()] for i in range(N - 1)] # Hits:1.0, Total execution time: 12.75 ms, Average time per hit: 12.75 ms 


graph = [[] for i in range(N + 1)] # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 


for u, v in edges: # Hits:8.0, Total execution time: 0.833 ms, Average time per hit: 0.104125 ms 


    graph[u].append(v) # Hits:7.0, Total execution time: 1.042 ms, Average time per hit: 0.14885714285714285 ms 


    graph[v].append(u) # Hits:7.0, Total execution time: 2.167 ms, Average time per hit: 0.30957142857142855 ms 


parent = {1: None} # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


children = {} # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 






def rootTree(node): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    children[node] = []

    for nbr in graph[node]:

        if nbr not in parent:

            parent[nbr] = node

            children[node].append(nbr)

            rootTree(nbr)





rootTree(1) # Hits:1.0, Total execution time: 5.583 ms, Average time per hit: 5.583 ms 






# Count the paths that don't contain a particular color

# If we can find a max c-less component (in the sense that the nodes are either leaves or bordered by color c) of size s, then there are (s * s + 1 / 2) c-less paths in that component

colorlessCount = [0 for c in range(N + 1)] # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


# In our DFS we want to increment the size of each component except for the one matching current color all at once but that will TLE

# Instead implicitly increment them by tracking current size as dfs time `t` minus some offset. Then we can increment all just by adding to t or subtract from one by fiddling with the offset

colorlessTime = [0 for c in range(N + 1)] # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


t = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 






def buildComps(node): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    global t

    currColor = colors[node - 1]

    # Increment all by 1 except currColor

    t += 1

    colorlessTime[currColor] += 1

    for child in children[node]:

        # Each child forms a new currColor-less component so we need to save the old count

        oldCount = t - colorlessTime[currColor]

        # Start new comp

        colorlessTime[currColor] = t

        buildComps(child)

        # Done with child comp, count the paths and discard comp

        s = t - colorlessTime[currColor]

        colorlessCount[currColor] += s * (s + 1) // 2

        # Restore old count

        colorlessTime[currColor] = t - oldCount





buildComps(1) # Hits:1.0, Total execution time: 1.791 ms, Average time per hit: 1.791 ms 




# Count the colorless components path from root too

for c in range(1, N + 1):

    s = t - colorlessTime[c]

    colorlessCount[c] += s * (s + 1) // 2



# We counted colorless but want colored paths so take complement

maxPairs = N * (N + 1) // 2

for c in range(1, N + 1):

    print((maxPairs - colorlessCount[c]))
",p02710,True
"from typing import List # Hits:1.0, Total execution time: 1.041 ms, Average time per hit: 1.041 ms 


import sys # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




input = lambda: sys.stdin.readline().rstrip() # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 43.209 ms, Average time per hit: 43.209 ms 


c = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 


c = [x-1 for x in c] # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


# print(c)

adj = [[] for i in range(n)] # Hits:1.0, Total execution time: 1.458 ms, Average time per hit: 1.458 ms 


for i in range(n-1): # Hits:8.0, Total execution time: 0.834 ms, Average time per hit: 0.10425 ms 


    a, b = tuple(map(int, input().split())) # Hits:7.0, Total execution time: 4.875 ms, Average time per hit: 0.6964285714285714 ms 


    a -= 1 # Hits:7.0, Total execution time: 0.664 ms, Average time per hit: 0.09485714285714286 ms 


    b -= 1 # Hits:7.0, Total execution time: 0.584 ms, Average time per hit: 0.08342857142857144 ms 


    adj[a].append(b) # Hits:7.0, Total execution time: 1.083 ms, Average time per hit: 0.15471428571428572 ms 


    adj[b].append(a) # Hits:7.0, Total execution time: 2.499 ms, Average time per hit: 0.357 ms 






size: List[int] = [1 for i in range(n)] # Hits:1.0, Total execution time: 1.166 ms, Average time per hit: 1.166 ms 


stack: List[List[int]] = [[] for color in range(n)] # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


in_time: List[int] = [-1 for i in range(n)] # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


out_time: List[int] = [-1 for i in range(n)] # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


timer = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


total = n*(n+1)//2 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


ans: List[int] = [total for color in range(n)] # Hits:1.0, Total execution time: 1.041 ms, Average time per hit: 1.041 ms 


# print(ans)





def dfs(parent: int, root: int): # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


    global timer

    in_time[root] = timer

    timer += 1



    for child in adj[root]:

        if parent == child:

            continue

        dfs(root, child)

        size[root] += size[child]



        cnt = size[child]

        while stack[c[root]]:

            x = stack[c[root]][-1]

            if in_time[x] > in_time[root] and out_time[x] != -1:

                cnt -= size[x]

                stack[c[root]].pop()

            else:

                break

        ans[c[root]] -= cnt*(cnt+1)//2



    out_time[root] = timer

    timer += 1



    stack[c[root]].append(root)





sys.setrecursionlimit(10**6) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




dfs(0, 0) # Hits:1.0, Total execution time: 3.75 ms, Average time per hit: 3.75 ms 


# print(size)

for color in range(n):

    cnt = n

    while len(stack[color]) > 0:

        x = stack[color][-1]

        cnt -= size[x]

        stack[color].pop()

    # print(""node:"", -1, ""color:"", color, ""cnt:"", cnt)

    ans[color] -= cnt*(cnt+1)//2

    print((ans[color]))
","import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 






def input(): return sys.stdin.readline().rstrip() # Hits:1.0, Total execution time: 5.959 ms, Average time per hit: 5.959 ms 






n = int(eval(input())) # Hits:1.0, Total execution time: 42.833 ms, Average time per hit: 42.833 ms 


c = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.666 ms, Average time per hit: 1.666 ms 


c = [x-1 for x in c] # Hits:1.0, Total execution time: 1.709 ms, Average time per hit: 1.709 ms 


# print(c)

adj = [[] for i in range(n)] # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 


for i in range(n-1): # Hits:8.0, Total execution time: 0.959 ms, Average time per hit: 0.119875 ms 


    a, b = tuple(map(int, input().split())) # Hits:7.0, Total execution time: 4.625 ms, Average time per hit: 0.6607142857142857 ms 


    a -= 1 # Hits:7.0, Total execution time: 0.751 ms, Average time per hit: 0.10728571428571429 ms 


    b -= 1 # Hits:7.0, Total execution time: 0.582 ms, Average time per hit: 0.08314285714285714 ms 


    adj[a].append(b) # Hits:7.0, Total execution time: 1.125 ms, Average time per hit: 0.16071428571428573 ms 


    adj[b].append(a) # Hits:7.0, Total execution time: 2.457 ms, Average time per hit: 0.351 ms 






size = [1 for i in range(n)] # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


stack = [[] for color in range(n)] # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


in_time = [-1 for i in range(n)] # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


out_time = [-1 for i in range(n)] # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


timer = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


total = n*(n+1)//2 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


ans = [total for color in range(n)] # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


# print(ans)





def dfs(parent, root): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    global timer

    in_time[root] = timer

    timer += 1



    for child in adj[root]:

        if parent == child:

            continue

        dfs(root, child)

        size[root] += size[child]



        cnt = size[child]

        while stack[c[root]]:

            x = stack[c[root]][-1]

            if in_time[x] > in_time[root] and out_time[x] != -1:

                cnt -= size[x]

                stack[c[root]].pop()

            else:

                break

        ans[c[root]] -= cnt*(cnt+1)//2



    out_time[root] = timer

    timer += 1



    stack[c[root]].append(root)





sys.setrecursionlimit(10**6) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




dfs(0, 0) # Hits:1.0, Total execution time: 3.042 ms, Average time per hit: 3.042 ms 


# print(size)

for color in range(n):

    cnt = n

    while len(stack[color]) > 0:

        x = stack[color][-1]

        cnt -= size[x]

        stack[color].pop()

    # print(""node:"", -1, ""color:"", color, ""cnt:"", cnt)

    ans[color] -= cnt*(cnt+1)//2

    print((ans[color]))
",p02710,True
"A,B,X=list(map(int,input().split())) # Hits:1.0, Total execution time: 40.25 ms, Average time per hit: 40.25 ms 


if A <= X <= (A+B): # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


  print(""YES"") # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 


else:

  print(""NO"") # Hits:1.0, Total execution time: 5.708 ms, Average time per hit: 5.708 ms 
","A,B,X=list(map(int,input().split())) # Hits:1.0, Total execution time: 38.125 ms, Average time per hit: 38.125 ms 




if A>X or A+B <X: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  print(""NO"") # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 


else:

  print(""YES"") # Hits:1.0, Total execution time: 5.458 ms, Average time per hit: 5.458 ms 
",p03377,True
"a, b, x = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.709 ms, Average time per hit: 38.709 ms 




if x <= a + b and x >= a: # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


  print('YES') # Hits:1.0, Total execution time: 5.458 ms, Average time per hit: 5.458 ms 


else:

  print('NO') # Hits:1.0, Total execution time: 5.709 ms, Average time per hit: 5.709 ms 
","a, b, x = list(map(int, input().split())) # Hits:1.0, Total execution time: 32.625 ms, Average time per hit: 32.625 ms 


print(('YES' if a <= x <= a + b else 'NO')) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 
",p03377,True
"from itertools import product





def solve(n, a_list, b_list):

    res = 10 ** 9 + 7

    v_dict_from = dict()

    v_dict_to = dict()



    for p in product([0, 1], repeat=n):

        q = [0] * n

        position_now = list(range(n))

        r = 0



        c_list = a_list.copy()

        for i in range(n):

            if p[i] == 1:

                c_list[i] = b_list[i]

        c_list_s = list(sorted(c_list))

        for v in range(1, 51):

            v_dict_from[v] = []

            v_dict_to[v] = []

        for i in range(n):

            v_dict_from[c_list[i]].append(i)

            v_dict_to[c_list_s[i]].append(i)

        # print(v_dict_from)

        # print(v_dict_to)

        for v in range(1, 51):

            for j, k in zip(list(sorted(v_dict_from[v])), v_dict_to[v]):

                for i in range(n):

                    if k <= position_now[i] < position_now[j]:

                        q[i] += 1

                        q[j] += 1

                        position_now[i] += 1

                        r += 1

                position_now[j] = k



            d = 0

            for j in v_dict_from[v]:

                if q[j] % 2 != p[j]:

                    d += 1

            if d % 2 == 0:

                r += d // 2

            else:

                r += 10 ** 9 + 7



        res = min(res, r)

    if res < 10 ** 9 + 7:

        return res

    else:

        return -1





def main():

    n = int(eval(input()))

    a_list = list(map(int, input().split()))

    b_list = list(map(int, input().split()))

    res = solve(n, a_list, b_list)

    print(res)





def test():

    assert solve(3, [3, 4, 3], [3, 2, 3]) == 1

    assert solve(2, [2, 1], [1, 2]) == -1

    assert solve(4, [1, 2, 3, 4], [5, 6, 7, 8]) == 0





if __name__ == ""__main__"":

    test()

    main()
",,p02798,False
"from itertools import permutations, combinations, chain

from collections import defaultdict

N = int(eval(input()))

A = list(map(int,input().split()))

B = list(map(int,input().split()))



def dpinit(ps, val=0):

    import copy

    res = [val for i in [0]*ps[-1]]

    for i in ps[:-1][::-1]:

        res = [copy.deepcopy(res) for k in [0]*i]

    return res



inf = 10**10

dp = [defaultdict(lambda : inf) for i in range(2**N+1)]

dp[0][0] = 0



for b in range(2**N):

    c = bin(b).count('1')

    for i in range(1,N+1):

        p = N-i

        f = 1<<p

        if b & f:

            continue

        nb = b | f

        k = bin(b % f).count('1')

        v = A[i-1] if (i-c) % 2 == 1 else B[i-1]

        for val, inv in list(dp[b].items()):

            if val <= v:

                dp[nb][v] = min(dp[nb][v], inv+abs(c+1-(i+k)))



if not dp[2**N-1]:

    print((-1))

    exit()

ans = min(dp[2**N-1].values())

print((ans if ans != inf else -1))




","from itertools import chain # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 43.166 ms, Average time per hit: 43.166 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 2.583 ms, Average time per hit: 2.583 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 




def count_bit(x): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    res = 0

    while x:

        res += x % 2

        x >>= 1

    return res



def int2bin(x,N):  # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    res = [0]*N

    for i in range(N):

        res[N-1-i] = x % 2

        x >>= 1

    return res



inf = 10**10 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


M = N//2 # the n of odd index # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ans = inf # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for b in range(2**N): # Hits:33.0, Total execution time: 3.289 ms, Average time per hit: 0.09966666666666667 ms 


    valid = True  # Hits:32.0, Total execution time: 2.416 ms, Average time per hit: 0.0755 ms 


    if count_bit(b) == M: # Hits:32.0, Total execution time: 26.791 ms, Average time per hit: 0.83721875 ms 


        odd_index = int2bin(b,N) # 1 : odd # Hits:10.0, Total execution time: 13.499 ms, Average time per hit: 1.3499 ms 


        evens = [] # Hits:10.0, Total execution time: 0.79 ms, Average time per hit: 0.079 ms 


        odds = [] # Hits:10.0, Total execution time: 0.836 ms, Average time per hit: 0.0836 ms 


        for i in range(N): # Hits:60.0, Total execution time: 6.288 ms, Average time per hit: 0.10479999999999999 ms 


            if odd_index[i]: # Hits:50.0, Total execution time: 4.383 ms, Average time per hit: 0.08766 ms 


                if i % 2: # Hits:20.0, Total execution time: 1.874 ms, Average time per hit: 0.0937 ms 


                    odds.append((A[i],i)) # Hits:8.0, Total execution time: 1.875 ms, Average time per hit: 0.234375 ms 


                else:

                    odds.append((B[i],i)) # Hits:12.0, Total execution time: 1.707 ms, Average time per hit: 0.14225 ms 


            else:

                if i % 2: # Hits:30.0, Total execution time: 2.914 ms, Average time per hit: 0.09713333333333334 ms 


                    evens.append((B[i],i)) # Hits:12.0, Total execution time: 1.749 ms, Average time per hit: 0.14575 ms 


                else:

                    evens.append((A[i],i)) # Hits:18.0, Total execution time: 2.709 ms, Average time per hit: 0.1505 ms 


        SE = sorted(evens) # Hits:10.0, Total execution time: 2.041 ms, Average time per hit: 0.2041 ms 


        SO = sorted(odds) # Hits:10.0, Total execution time: 1.584 ms, Average time per hit: 0.1584 ms 


        L = [None]*N # Hits:10.0, Total execution time: 1.458 ms, Average time per hit: 0.1458 ms 


        L[::2] = SE # Hits:10.0, Total execution time: 1.499 ms, Average time per hit: 0.1499 ms 


        L[1::2] = SO # Hits:10.0, Total execution time: 1.334 ms, Average time per hit: 0.13340000000000002 ms 


        for (a,_),(b,_) in zip(L,L[1:]): # Hits:25.0, Total execution time: 5.211 ms, Average time per hit: 0.20844 ms 


            if a > b: # Hits:24.0, Total execution time: 2.168 ms, Average time per hit: 0.09033333333333333 ms 


                valid = False # Hits:9.0, Total execution time: 0.582 ms, Average time per hit: 0.06466666666666668 ms 


                break # Hits:9.0, Total execution time: 0.875 ms, Average time per hit: 0.09722222222222222 ms 


        if valid: # Hits:10.0, Total execution time: 0.79 ms, Average time per hit: 0.079 ms 


            L = list(zip(L,list(range(N)))) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


            L = sorted(L,key=lambda x : x[0][1]) # Hits:1.0, Total execution time: 1.416 ms, Average time per hit: 1.416 ms 


            L = [(a,c) for (a,b),c in L] # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 


            temp = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


            for i in range(N): # Hits:6.0, Total execution time: 0.582 ms, Average time per hit: 0.097 ms 


                for j in range(i): # Hits:15.0, Total execution time: 1.833 ms, Average time per hit: 0.1222 ms 


                    if L[j] > L[i]: # Hits:10.0, Total execution time: 1.292 ms, Average time per hit: 0.12919999999999998 ms 


                        temp += 1 # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


            ans = min(temp,ans) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 




if ans == inf: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    ans = -1 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


print(ans) # Hits:1.0, Total execution time: 5.083 ms, Average time per hit: 5.083 ms 







",p02798,False
"import sys # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


input=sys.stdin.readline # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


class BinaryIndexedTree(): # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 


  def __init__(self,n):self.bit=[0]*n

  def add(self,i,x):

    i+=1

    while i<=len(self.bit):

      self.bit[i-1]+=x

      i+=i&-i

  def sum_1(self,i):

    a=0

    i+=1

    while i:

      a+=self.bit[i-1]

      i-=i&-i

    return a

  def sum(self,i,j):

    a=self.sum_1(j-1)

    if i!=0:a-=self.sum_1(i-1)

    return a

def tentousu(a): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


  bit=BinaryIndexedTree(n)

  b=[0]*n

  for i in range(n):

    b[a[i]]=i

  ans=0

  for i in range(n):

    j=b[i]+bit.sum(b[i]+1,n)

    ans+=j-i

    bit.add(b[i],1)

  return ans

n=int(eval(input())) # Hits:1.0, Total execution time: 38.583 ms, Average time per hit: 38.583 ms 


a=list(map(int,input().split())) # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 


b=list(map(int,input().split())) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


import itertools # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


c=set() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:6.0, Total execution time: 0.876 ms, Average time per hit: 0.146 ms 


  if i%2:c.add((b[i],a[i],i)) # Hits:5.0, Total execution time: 0.875 ms, Average time per hit: 0.175 ms 


  else:c.add((a[i],b[i],i)) # Hits:3.0, Total execution time: 0.917 ms, Average time per hit: 0.3056666666666667 ms 


ans=inf=float('inf') # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


for i in itertools.combinations(c,(n+1)//2): # Hits:11.0, Total execution time: 1.627 ms, Average time per hit: 0.1479090909090909 ms 


  ii=c-set(i) # Hits:10.0, Total execution time: 3.333 ms, Average time per hit: 0.3333 ms 


  ac=[(j[0],j[2])for j in i] # Hits:10.0, Total execution time: 5.5 ms, Average time per hit: 0.55 ms 


  bc=[(j[1],j[2])for j in ii] # Hits:10.0, Total execution time: 4.835 ms, Average time per hit: 0.4835 ms 


  ac.sort() # Hits:10.0, Total execution time: 1.834 ms, Average time per hit: 0.1834 ms 


  bc.sort() # Hits:10.0, Total execution time: 1.418 ms, Average time per hit: 0.1418 ms 


  x=[] # Hits:10.0, Total execution time: 0.873 ms, Average time per hit: 0.0873 ms 


  for j in range(n): # Hits:60.0, Total execution time: 5.917 ms, Average time per hit: 0.09861666666666666 ms 


    if j%2:x.append(bc[j//2]) # Hits:50.0, Total execution time: 7.333 ms, Average time per hit: 0.14665999999999998 ms 


    else:x.append(ac[j//2]) # Hits:30.0, Total execution time: 4.579 ms, Average time per hit: 0.15263333333333332 ms 


  f=False # Hits:10.0, Total execution time: 0.791 ms, Average time per hit: 0.07909999999999999 ms 


  for j in range(1,n): # Hits:50.0, Total execution time: 4.834 ms, Average time per hit: 0.09668 ms 


    if x[j-1][0]>x[j][0]:f=True # Hits:40.0, Total execution time: 6.631 ms, Average time per hit: 0.165775 ms 


  if f:continue # Hits:10.0, Total execution time: 0.708 ms, Average time per hit: 0.0708 ms 


  m=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


  for j in range(n):m.append(x[j][1]) # Hits:6.0, Total execution time: 0.999 ms, Average time per hit: 0.1665 ms 


  ans=min(ans,tentousu(m)) # Hits:1.0, Total execution time: 17.333 ms, Average time per hit: 17.333 ms 


if ans==inf:ans=-1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


print(ans) # Hits:1.0, Total execution time: 5.416 ms, Average time per hit: 5.416 ms 
","def tentousu(a): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  ans=0

  for i in range(len(a)):

    for j in range(i+1,len(a)):

      if a[i]>a[j]:ans+=1

  return ans

n=int(eval(input())) # Hits:1.0, Total execution time: 29.834 ms, Average time per hit: 29.834 ms 


a=list(map(int,input().split())) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


b=list(map(int,input().split())) # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


for i in range(1,n,2):a[i],b[i]=b[i],a[i] # Hits:3.0, Total execution time: 1.042 ms, Average time per hit: 0.3473333333333333 ms 


ans=inf=float('inf') # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for i in range(2**n): # Hits:33.0, Total execution time: 3.247 ms, Average time per hit: 0.0983939393939394 ms 


  s=bin(i)[2:].zfill(n) # Hits:32.0, Total execution time: 7.876 ms, Average time per hit: 0.246125 ms 


  if s.count(""0"")!=n//2:continue # Hits:32.0, Total execution time: 8.123 ms, Average time per hit: 0.25384375 ms 


  ac=[] # Hits:10.0, Total execution time: 0.834 ms, Average time per hit: 0.0834 ms 


  bc=[] # Hits:10.0, Total execution time: 0.874 ms, Average time per hit: 0.0874 ms 


  for j in range(n): # Hits:60.0, Total execution time: 6.337 ms, Average time per hit: 0.10561666666666666 ms 


    if s[j]==""1"":ac.append((a[j],j)) # Hits:50.0, Total execution time: 8.459 ms, Average time per hit: 0.16918 ms 


    else:bc.append((b[j],j)) # Hits:20.0, Total execution time: 3.583 ms, Average time per hit: 0.17915 ms 


  ac.sort() # Hits:10.0, Total execution time: 1.541 ms, Average time per hit: 0.1541 ms 


  bc.sort() # Hits:10.0, Total execution time: 1.292 ms, Average time per hit: 0.12919999999999998 ms 


  x=[] # Hits:10.0, Total execution time: 1.043 ms, Average time per hit: 0.1043 ms 


  for j in range(n): # Hits:60.0, Total execution time: 6.128 ms, Average time per hit: 0.10213333333333334 ms 


    if j%2:x.append(bc[j//2]) # Hits:50.0, Total execution time: 6.753 ms, Average time per hit: 0.13506 ms 


    else:x.append(ac[j//2]) # Hits:30.0, Total execution time: 4.999 ms, Average time per hit: 0.16663333333333333 ms 


  f=False # Hits:10.0, Total execution time: 0.708 ms, Average time per hit: 0.0708 ms 


  for j in range(1,n): # Hits:50.0, Total execution time: 4.956 ms, Average time per hit: 0.09912 ms 


    if x[j-1][0]>x[j][0]:f=True # Hits:40.0, Total execution time: 6.834 ms, Average time per hit: 0.17085 ms 


  if f:continue # Hits:10.0, Total execution time: 0.791 ms, Average time per hit: 0.07909999999999999 ms 


  m=[] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


  for j in range(n):m.append(x[j][1]) # Hits:6.0, Total execution time: 1.125 ms, Average time per hit: 0.1875 ms 


  ans=min(ans,tentousu(m)) # Hits:1.0, Total execution time: 4.208 ms, Average time per hit: 4.208 ms 


if ans==inf:ans=-1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


print(ans) # Hits:1.0, Total execution time: 8.125 ms, Average time per hit: 8.125 ms 
",p02798,True
"



def main():

    import sys

    input = sys.stdin.readline

    n = int(eval(input()))

    a = tuple(map(int,input().split()))

    b = tuple(map(int,input().split()))



    dg = 20



    pp = 20



    dp = [10**5]*(10**7)



    new = set([])

    for i in range(n):

        s = (1<<i)

        dp[s*pp+i] = i

        new.add(s*dg+i)



    for k in range(n-1):

        tank = set([])

        if len(new) == 0:

            break

        for popelt in new:

            s,idx = popelt//dg,popelt%dg

            if (k-idx)%2 == 0:

                fr = a[idx]

            else:

                fr = b[idx]

            cnt = 0

            for j in range(n):

                if (s>>j)&1 == 0:

                    if (j-k)%2 == 1:

                        val = a[j]

                    else:

                        val = b[j]

                    if val >= fr and dp[(s+(1<<j))*pp+j] > dp[s*pp+idx]+j-cnt:

                        dp[(s+(1<<j))*pp+j] = dp[s*pp+idx]+j-cnt

                        tank.add((s+(1<<j))*dg + j)

                else:

                    cnt += 1

        new = tank

    

    res = 10**5

    s = (2**n-1)*pp

    for i in range(n):

        if res > dp[s+i]:

            res = dp[s+i]

    if res == 10**5:

        print((-1))

    else:

        print(res)





if __name__ == '__main__':

    main()","import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




def count(P): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    res = 0

    #A1 ... AnのBIT(1-indexed)

    BIT = [0]*(N+1)



    #A1 ~ Aiまでの和 O(logN)

    def BIT_query(idx):

        res_sum = 0

        while idx > 0:

            res_sum += BIT[idx]

            idx -= idx&(-idx)

        return res_sum



    #Ai += x O(logN)

    def BIT_update(idx,x):

        while idx <= N:

            BIT[idx] += x

            idx += idx&(-idx)

        return





    Pi = [None]*N

    for i in range(N):

        Pi[P[i]] = i

    for i in range(N):

        p = Pi[i]

        res += i-BIT_query(p+1)

        BIT_update(p+1, 1)

    return res

 



N = int(eval(input())) # Hits:1.0, Total execution time: 42.875 ms, Average time per hit: 42.875 ms 


A = tuple(map(int,input().split())) # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 


B = tuple(map(int,input().split())) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


uhalf = -(-N//2) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


dhalf = N - uhalf # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


inf = 10**9+7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans = inf # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for S in range(1<<N): # Hits:33.0, Total execution time: 3.421 ms, Average time per hit: 0.10366666666666667 ms 


    card = [A[i] if S&(1<<i) else B[i] for i in range(N)] # Hits:32.0, Total execution time: 31.954 ms, Average time per hit: 0.9985625 ms 


    parity = [(1&(S>>i))^(i&1) for i in range(N)] # Hits:32.0, Total execution time: 31.665 ms, Average time per hit: 0.98953125 ms 


    even = [(card[i], i) for i in range(N) if parity[i]] # Hits:32.0, Total execution time: 25.544 ms, Average time per hit: 0.79825 ms 


    odd = [(card[i], i) for i in range(N) if not parity[i]] # Hits:32.0, Total execution time: 24.708 ms, Average time per hit: 0.772125 ms 


    if len(even) != uhalf or len(odd) != dhalf: # Hits:32.0, Total execution time: 4.542 ms, Average time per hit: 0.1419375 ms 


        continue # Hits:22.0, Total execution time: 2.996 ms, Average time per hit: 0.13618181818181818 ms 


    even.sort() # Hits:10.0, Total execution time: 1.707 ms, Average time per hit: 0.1707 ms 


    odd.sort() # Hits:10.0, Total execution time: 1.333 ms, Average time per hit: 0.1333 ms 


    if any(e[0] > o[0] for e, o in zip(even, odd)) or any(e[0] < o[0] for e, o in zip(even[1:], odd)): # Hits:10.0, Total execution time: 24.499 ms, Average time per hit: 2.4499 ms 


        continue # Hits:9.0, Total execution time: 0.833 ms, Average time per hit: 0.09255555555555556 ms 


    perm = [even[i//2][1] if not i&1 else odd[i//2][1] for i in range(N)] # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


    ans = min(ans, count(perm)) # Hits:1.0, Total execution time: 12.167 ms, Average time per hit: 12.167 ms 


print((ans if ans < inf else -1)) # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 

",p02798,False
"from collections import defaultdict,deque

import sys,heapq,bisect,math,itertools,string,queue,copy,time

sys.setrecursionlimit(10**8)

INF = float('inf')

mod = 10**9+7

eps = 10**-7

def inp(): return int(sys.stdin.readline())

def inpl(): return list(map(int, sys.stdin.readline().split()))

def inpl_str(): return list(sys.stdin.readline().split())





N = inp()

AA = inpl()

BB = inpl()



# In[]:

# N = 3

# AA = [3, 4, 3]

# BB = [3, 2, 3]



cards = []

for i,(a,b) in enumerate(zip(AA,BB)):

    if i%2 == 0:

        cards.append((a, b, i))

    else:

        cards.append((b, a, i))





n = (N+1)//2



# In[]:

def solve(ii):

    tmp = 0

    # print(ii)

    for _ in range(N):

        next = []

        for k, i in enumerate(ii):

            if i == 0:

                tmp += k

            else:

                next.append(i-1)

        ii = next[:]

    # print(tmp)

    return tmp







# In[]:

ans = INF

for Acards in itertools.combinations(cards, n):

    Ais = sorted([(Acard[0], Acard[2]) for Acard in Acards])



    ii = set([i for A,i in Ais])

    Bis = []

    for a,b,i in cards:

        if i not in ii:

            Bis.append((b,i))

    Bis.sort()



    nums = []

    ii = []

    for i in range(N):

        if i%2 == 0:

            n,i = Ais[i//2]

        else:

            n,i = Bis[i//2]

        nums.append(n)

        ii.append(i)



    # print(nums,ii)

    if nums != sorted(nums):

        continue

    else:

        ans = min(ans,solve(ii))

        if ans == 0:

          print((0))

          sys.exit()





if ans == INF:

    print((-1))

else:

    print(ans)
",,p02798,False
"#!/usr/bin/env python3

from collections import defaultdict,deque

from heapq import heappush, heappop

from bisect import bisect_left, bisect_right

import sys, random, itertools, math

sys.setrecursionlimit(10**5)

input = sys.stdin.readline

sqrt = math.sqrt

def LI(): return list(map(int, input().split()))

def LF(): return list(map(float, input().split()))

def LI_(): return list([int(x)-1 for x in input().split()])

def II(): return int(eval(input()))

def IF(): return float(eval(input()))

def LS(): return list(map(list, input().split()))

def S(): return list(input().rstrip())

def IR(n): return [II() for _ in range(n)]

def LIR(n): return [LI() for _ in range(n)]

def FR(n): return [IF() for _ in range(n)]

def LFR(n): return [LI() for _ in range(n)]

def LIR_(n): return [LI_() for _ in range(n)]

def SR(n): return [S() for _ in range(n)]

def LSR(n): return [LS() for _ in range(n)]

mod = 1000000007

inf = 1e10



""""""

URL : https://atcoder.jp/contests/keyence2020/tasks/keyence2020_d

解説AC



きもすぎBit全探索および転倒数

    （転倒数に結びついたら強い

    　隣通しを入れ替えてsortの操作数→バブルソートの操作数→転倒数

    　これの徹底）



AC例1: 最初に考え付いたのはこっち

    maskでどのindexが裏返しになっているかを保持。

    その状況下で生成される表面の数の配列を作成し(これをLとする)ソート。

    iを[0,n)で回して各A[i],B[i]に対して

    maskをもとにAかBが使用されているかを見る。

    Lにおけるその数のindexとiの差の偶奇は奇数B偶数ならA。

    defalutdictかなんかで各Lの数字とそのindexの偶奇の数とそのindexを保持

    indexとiの差の偶奇とdictからLの各indexが元どの番号にいたかを保持。

    あとは元の番号の配列の転倒数を求めればそのmaskにおける操作数が出る



AC例2: 解説はこっち

    maskではどのindexがすでに左側で固定化されたかを保持。

    巡回セールスマンのようにどこを決めて最後に決めたindexは何か

    というDPでいける。（は？）

    というのもmaskだけではそのマスク内の順番はわからないからね。

    欲しいのはその固定化された物の最大の値なので最悪なんかうまくできるかも

    すごすぎ

    こっちを実装します

    700点をACしたいね(2020/3/25/ 20:05)



    Reference: https://atcoder.jp/contests/keyence2020/submissions/9567775 By:yutaka1999

""""""



#solve

def solve():

    n = II()

    A = LI()

    B = LI()

    bit_length = [0] 

    for i in range(n):

        bit_length += [x + 1 for x in bit_length]

    dp = [[-1] * n for _ in range(1 << n)]

    for i in range(n):

        dp[1 << i][i] = 0

    for mask in range(1 << n):

        dpm = dp[mask]

        c = bit_length[mask]

        for i in range(n):

            if not((1 << i) & mask) or dpm[i] == -1: continue

            w = B[i] if 1 & i == c & 1 else A[i]

            cost = c

            for j in range(n):

                if 1 & (mask >> j):

                    cost -= 1

                else:

                    v = B[j] if 1 & j != c & 1 else A[j]

                    if v >= w:

                        vl = dpm[i] + cost

                        if dp[mask | (1 << j)][j] == -1 or dp[mask | (1 << j)][j] > vl:

                            dp[mask | (1 << j)][j] = vl



    ans = -1

    for i in range(n):

        if dp[-1][i] != -1:

            if ans == -1 or ans > dp[-1][i]:

                ans = dp[-1][i]

    print(ans)



    return





#main

if __name__ == '__main__':

    solve()
","import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


read = sys.stdin.buffer.read # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


readline = sys.stdin.buffer.readline # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


readlines = sys.stdin.buffer.readlines # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




import itertools # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




N = int(readline()) # Hits:1.0, Total execution time: 34.542 ms, Average time per hit: 34.542 ms 


A = list(map(int,readline().split())) # Hits:1.0, Total execution time: 1.792 ms, Average time per hit: 1.792 ms 


B = list(map(int,readline().split())) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 




class BinaryIndexedTree(): # Hits:1.0, Total execution time: 8.667 ms, Average time per hit: 8.667 ms 


    def __init__(self, seq):

        self.size = len(seq)

        self.depth = self.size.bit_length()

        self.build(seq)

        

    def build(self,seq):

        data = seq

        size = self.size

        for i,x in enumerate(data):

            j = i+(i&(-i))

            if j < size:

                data[j] += data[i]

        self.data = data

        

    def __repr__(self):

        return self.data.__repr__()

        

    def get_sum(self,i):

        data = self.data

        s = 0

        while i:

            s += data[i]

            i -= i & -i

        return s

 

    def add(self, i, x):

        data = self.data

        size = self.size

        while i < size:

            data[i] += x

            i += i & -i

    

    def find_kth_element(self,k):

        data = self.data; size = self.size

        x,sx = 0,0

        dx = 1 << (self.depth)

        for i in range(self.depth - 1, -1, -1):

            dx = (1 << i)

            if x + dx >= size:

                continue

            y = x + dx

            sy = sx + data[y]

            if sy < k:

                x,sx = y,sy

        return x + 1



def Inversion(seq): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    # seqは、1,2,...,Nの順列

    N = len(seq)

    bit = BinaryIndexedTree([0] * (N+1))

    inv = N*(N-1)//2

    for x in seq:

        inv -= bit.get_sum(x)

        bit.add(x,1)

    return inv



INF = 10 ** 9 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


answer = INF # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for I in itertools.combinations(list(range(N)),(N+1)//2): # Hits:11.0, Total execution time: 2.5 ms, Average time per hit: 0.2272727272727273 ms 


    J = [j for j in range(N) if j not in I] # Hits:10.0, Total execution time: 7.749 ms, Average time per hit: 0.7748999999999999 ms 


    ODD = [(B[i] if i&1 else A[i],i) for i in I] # Hits:10.0, Total execution time: 7.25 ms, Average time per hit: 0.725 ms 


    EV = [(A[i] if i&1 else B[i],i) for i in J] # Hits:10.0, Total execution time: 5.292 ms, Average time per hit: 0.5292 ms 


    ODD.sort() # Hits:10.0, Total execution time: 1.835 ms, Average time per hit: 0.1835 ms 


    EV.sort() # Hits:10.0, Total execution time: 1.333 ms, Average time per hit: 0.1333 ms 


    ind = [0] * N # Hits:10.0, Total execution time: 1.459 ms, Average time per hit: 0.1459 ms 


    seq = [0] * N # Hits:10.0, Total execution time: 1.167 ms, Average time per hit: 0.1167 ms 


    for i in range(0,N,2): # Hits:40.0, Total execution time: 4.334 ms, Average time per hit: 0.10834999999999999 ms 


        seq[i], ind[i] = ODD[i//2] # Hits:30.0, Total execution time: 6.75 ms, Average time per hit: 0.225 ms 


    for i in range(1,N,2): # Hits:30.0, Total execution time: 3.292 ms, Average time per hit: 0.10973333333333334 ms 


        seq[i], ind[i] = EV[i//2] # Hits:20.0, Total execution time: 3.29 ms, Average time per hit: 0.1645 ms 


    if not all(x<= y for x,y in zip(seq,seq[1:])): # Hits:10.0, Total execution time: 9.626 ms, Average time per hit: 0.9626 ms 


        continue # Hits:9.0, Total execution time: 0.624 ms, Average time per hit: 0.06933333333333333 ms 


    ind = [x+1 for x in ind] # Hits:1.0, Total execution time: 1.041 ms, Average time per hit: 1.041 ms 


    n = Inversion(ind) # Hits:1.0, Total execution time: 19.167 ms, Average time per hit: 19.167 ms 


    if answer > n: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        answer = n # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




if answer == INF: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    answer = -1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


print(answer) # Hits:1.0, Total execution time: 8.75 ms, Average time per hit: 8.75 ms 

",p02798,False
"from itertools import combinations # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 42.5 ms, Average time per hit: 42.5 ms 


As = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.208 ms, Average time per hit: 2.208 ms 


Bs = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 




even = []   #偶数番目で表になる # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


odd = []    #奇数番目で表になる # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i,(a,b) in enumerate(zip(As,Bs)): # Hits:6.0, Total execution time: 1.417 ms, Average time per hit: 0.23616666666666666 ms 


    if i%2 == 0: # Hits:5.0, Total execution time: 0.665 ms, Average time per hit: 0.133 ms 


        even.append(a) # Hits:3.0, Total execution time: 0.584 ms, Average time per hit: 0.19466666666666665 ms 


        odd.append(b) # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    else:

        even.append(b) # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


        odd.append(a) # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 








def check(n, even, odd): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    prev = -10**10

    ps = []

    for i in range(n):

        if i%2 == 0:

            if prev > even[i//2][0]:

                return False,-1

            else:

                ps.append(even[i//2][1])

            prev = even[i//2][0]

        else:

            if prev > odd[i//2][0]:

                return  False, -1

            else:

                ps.append(odd[i//2][1])

            prev = odd[i//2][0]

    return True, ps

    





def inversion(a): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    n = len(a)

    cnt = 0

    for i in range(n):

        for j in range(i+1,n):

            if a[i] > a[j]:

                cnt +=1

    return cnt

 

#偶数としてpickupするやつ

INF = 10**10 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans = 10**10 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for l in combinations(list(range(n)), (n-1)//2+1): # Hits:11.0, Total execution time: 1.708 ms, Average time per hit: 0.15527272727272728 ms 


    cnt = 0 # Hits:10.0, Total execution time: 0.751 ms, Average time per hit: 0.0751 ms 


    even_selected = [(even[i],i) for i in range(n) if i in l] # Hits:10.0, Total execution time: 8.669 ms, Average time per hit: 0.8669 ms 


    odd_selected = [(odd[i],i) for i in range(n) if i not in l] # Hits:10.0, Total execution time: 19.374 ms, Average time per hit: 1.9374 ms 


    # こいつらを昇順に並べられるか

    even_selected.sort() # Hits:10.0, Total execution time: 2.001 ms, Average time per hit: 0.2001 ms 


    odd_selected.sort() # Hits:10.0, Total execution time: 1.375 ms, Average time per hit: 0.1375 ms 


    is_possible, a = check(n, even_selected, odd_selected) # Hits:10.0, Total execution time: 18.917 ms, Average time per hit: 1.8917 ms 


    # 並び順が正しければ

    if is_possible: # Hits:10.0, Total execution time: 1.375 ms, Average time per hit: 0.1375 ms 


        cnt = inversion(a) # Hits:1.0, Total execution time: 3.583 ms, Average time per hit: 3.583 ms 


        ans = min(cnt, ans) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


        

if ans == INF: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print((-1)) # Hits:1.0, Total execution time: 8.292 ms, Average time per hit: 8.292 ms 


else:

    print(ans)         # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 43.375 ms, Average time per hit: 43.375 ms 


As = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.5 ms, Average time per hit: 2.5 ms 


Bs = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 




INF = 1<<20 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




dp = [[INF] * 55 for i in range(1<<n)] # Hits:1.0, Total execution time: 4.25 ms, Average time per hit: 4.25 ms 


dp[0][0] = 0 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




for b in range(1<<n): # Hits:33.0, Total execution time: 2.745 ms, Average time per hit: 0.08318181818181819 ms 


    # 使ったカードの枚数

    bitcnt = bin(b).count(""1"") # Hits:32.0, Total execution time: 8.333 ms, Average time per hit: 0.26040625 ms 


    cur = bitcnt  # Hits:32.0, Total execution time: 2.539 ms, Average time per hit: 0.07934375 ms 


    rest = []  # Hits:32.0, Total execution time: 3.085 ms, Average time per hit: 0.09640625 ms 


    for i in range(n): # Hits:192.0, Total execution time: 19.206 ms, Average time per hit: 0.10003125 ms 


        # i番目のbitが立っているかの判定

        if not (b & (1 << i)): # Hits:160.0, Total execution time: 18.164 ms, Average time per hit: 0.113525 ms 


            rest.append((i,cur)) # Hits:80.0, Total execution time: 10.627 ms, Average time per hit: 0.1328375 ms 


            cur += 1 # Hits:80.0, Total execution time: 7.416 ms, Average time per hit: 0.0927 ms 


    

    for s in range(51): # Hits:1664.0, Total execution time: 143.791 ms, Average time per hit: 0.08641286057692309 ms 


        if dp[b][s] >= INF: # Hits:1632.0, Total execution time: 181.21 ms, Average time per hit: 0.11103553921568628 ms 


            continue # Hits:1594.0, Total execution time: 116.996 ms, Average time per hit: 0.07339774153074027 ms 


        # 残ったカードで更新

        for i,cur in rest: # Hits:134.0, Total execution time: 14.208 ms, Average time per hit: 0.10602985074626865 ms 


            if abs(bitcnt - i) % 2 == 0: # Hits:96.0, Total execution time: 14.752 ms, Average time per hit: 0.15366666666666665 ms 


                num = As[i] # Hits:53.0, Total execution time: 5.168 ms, Average time per hit: 0.09750943396226415 ms 


            else:

                num = Bs[i] # Hits:43.0, Total execution time: 4.249 ms, Average time per hit: 0.09881395348837209 ms 


            if num >= s: # Hits:96.0, Total execution time: 9.085 ms, Average time per hit: 0.09463541666666667 ms 


                d = abs(bitcnt - cur)  # Hits:39.0, Total execution time: 4.917 ms, Average time per hit: 0.1260769230769231 ms 


                dp[b|(1<<i)][num] = min(dp[b|(1<<i)][num], dp[b][s] + d) # Hits:39.0, Total execution time: 13.087 ms, Average time per hit: 0.3355641025641025 ms 


            



ans = min(dp[(1<<n)-1]) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


print((ans if ans != INF else -1))     # Hits:1.0, Total execution time: 4.833 ms, Average time per hit: 4.833 ms 


        

    
",p02798,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 42.791 ms, Average time per hit: 42.791 ms 


a = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 3.584 ms, Average time per hit: 3.584 ms 


b = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.834 ms, Average time per hit: 1.834 ms 






class BIT: # Hits:1.0, Total execution time: 8.291 ms, Average time per hit: 8.291 ms 


    def __init__(self, a, func=int.__add__, one=0):

        self.n = len(a)

        self.func = func

        self.one = one

        self.a = [0] * (self.n + 1)



        for i, j in enumerate(a):

            self.update(i, j)



    def update(self, i, x):

        i += 1

        while i <= self.n:

            self.a[i] = self.func(self.a[i], x)

            i += i & (-i)



    def get(self, i):

        i += 1

        s = self.one

        while i != 0:

            s = self.func(s, self.a[i])

            i -= i & (-i)

        return s





ans = 10 ** 18 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(1 << n): # Hits:33.0, Total execution time: 3.083 ms, Average time per hit: 0.09342424242424242 ms 


    c = [] # Hits:32.0, Total execution time: 2.666 ms, Average time per hit: 0.0833125 ms 


    for j in range(n): # Hits:192.0, Total execution time: 19.084 ms, Average time per hit: 0.09939583333333332 ms 


        if i >> j & 1 == 0: # Hits:160.0, Total execution time: 20.084 ms, Average time per hit: 0.125525 ms 


            c.append(a[j]) # Hits:80.0, Total execution time: 11.04 ms, Average time per hit: 0.138 ms 


        else:

            c.append(b[j]) # Hits:80.0, Total execution time: 10.54 ms, Average time per hit: 0.13175 ms 


    d = sorted(c) # Hits:32.0, Total execution time: 6.54 ms, Average time per hit: 0.204375 ms 




    ind = {} # Hits:32.0, Total execution time: 3.125 ms, Average time per hit: 0.09765625 ms 


    for j, k in enumerate(d): # Hits:192.0, Total execution time: 21.051 ms, Average time per hit: 0.109640625 ms 


        if (j % 2, k) not in ind: # Hits:160.0, Total execution time: 20.668 ms, Average time per hit: 0.129175 ms 


            ind[(j % 2, k)] = j # Hits:160.0, Total execution time: 23.247 ms, Average time per hit: 0.14529375 ms 




    e = [] # Hits:32.0, Total execution time: 2.582 ms, Average time per hit: 0.0806875 ms 


    ok = True # Hits:32.0, Total execution time: 2.415 ms, Average time per hit: 0.07546875 ms 


    for j, k in enumerate(c): # Hits:67.0, Total execution time: 8.711 ms, Average time per hit: 0.13001492537313433 ms 


        j = ((i >> j & 1) + j) % 2 # Hits:66.0, Total execution time: 10.796 ms, Average time per hit: 0.16357575757575757 ms 


        if (j, k) not in ind: # Hits:66.0, Total execution time: 8.205 ms, Average time per hit: 0.12431818181818181 ms 


            ok = False # Hits:31.0, Total execution time: 2.334 ms, Average time per hit: 0.07529032258064516 ms 


            break # Hits:31.0, Total execution time: 2.624 ms, Average time per hit: 0.08464516129032258 ms 


        l = ind[(j, k)] # Hits:35.0, Total execution time: 5.083 ms, Average time per hit: 0.14522857142857143 ms 


        if l >= n or d[l] != k: # Hits:35.0, Total execution time: 4.583 ms, Average time per hit: 0.13094285714285714 ms 


            ok = False # Hits:2.0, Total execution time: 0.126 ms, Average time per hit: 0.063 ms 


            break # Hits:2.0, Total execution time: 0.124 ms, Average time per hit: 0.062 ms 


        e.append(l) # Hits:35.0, Total execution time: 4.624 ms, Average time per hit: 0.13211428571428574 ms 


        ind[(j, k)] += 2 # Hits:35.0, Total execution time: 7.123 ms, Average time per hit: 0.2035142857142857 ms 




    if ok: # Hits:32.0, Total execution time: 2.5 ms, Average time per hit: 0.078125 ms 


        count = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


        bit = BIT([0] * (n+1)) # Hits:1.0, Total execution time: 9.042 ms, Average time per hit: 9.042 ms 


        for j in e: # Hits:6.0, Total execution time: 0.542 ms, Average time per hit: 0.09033333333333333 ms 


            count += bit.get(n - j) # Hits:5.0, Total execution time: 4.791 ms, Average time per hit: 0.9582 ms 


            bit.update(n-j, 1) # Hits:5.0, Total execution time: 3.958 ms, Average time per hit: 0.7916 ms 


        ans = min(ans, count) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


if ans == 10 ** 18: # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    print((-1)) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 


else:

    print(ans) # Hits:1.0, Total execution time: 5.542 ms, Average time per hit: 5.542 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 33.042 ms, Average time per hit: 33.042 ms 


a = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 2.792 ms, Average time per hit: 2.792 ms 


b = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.791 ms, Average time per hit: 1.791 ms 




ans = 10 ** 18 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1 << n): # Hits:33.0, Total execution time: 3.126 ms, Average time per hit: 0.09472727272727273 ms 


    c = [] # Hits:32.0, Total execution time: 2.874 ms, Average time per hit: 0.0898125 ms 


    for j in range(n): # Hits:192.0, Total execution time: 20.084 ms, Average time per hit: 0.10460416666666666 ms 


        if i >> j & 1 == 0: # Hits:160.0, Total execution time: 20.79 ms, Average time per hit: 0.1299375 ms 


            c.append(a[j]) # Hits:80.0, Total execution time: 11.541 ms, Average time per hit: 0.1442625 ms 


        else:

            c.append(b[j]) # Hits:80.0, Total execution time: 11.38 ms, Average time per hit: 0.14225 ms 


    d = sorted(c) # Hits:32.0, Total execution time: 6.918 ms, Average time per hit: 0.2161875 ms 




    ind = {} # Hits:32.0, Total execution time: 3.21 ms, Average time per hit: 0.1003125 ms 


    for j, k in enumerate(d): # Hits:192.0, Total execution time: 22.337 ms, Average time per hit: 0.11633854166666667 ms 


        if (j % 2, k) not in ind: # Hits:160.0, Total execution time: 21.084 ms, Average time per hit: 0.131775 ms 


            ind[(j % 2, k)] = j # Hits:160.0, Total execution time: 24.707 ms, Average time per hit: 0.15441875 ms 




    e = [] # Hits:32.0, Total execution time: 2.542 ms, Average time per hit: 0.0794375 ms 


    ok = True # Hits:32.0, Total execution time: 2.416 ms, Average time per hit: 0.0755 ms 


    for j, k in enumerate(c): # Hits:67.0, Total execution time: 9.08 ms, Average time per hit: 0.1355223880597015 ms 


        j = ((i >> j & 1) + j) % 2 # Hits:66.0, Total execution time: 10.788 ms, Average time per hit: 0.16345454545454546 ms 


        if (j, k) not in ind: # Hits:66.0, Total execution time: 8.371 ms, Average time per hit: 0.12683333333333333 ms 


            ok = False # Hits:31.0, Total execution time: 2.29 ms, Average time per hit: 0.07387096774193548 ms 


            break # Hits:31.0, Total execution time: 2.791 ms, Average time per hit: 0.09003225806451613 ms 


        l = ind[(j, k)] # Hits:35.0, Total execution time: 5.045 ms, Average time per hit: 0.14414285714285713 ms 


        if l >= n or d[l] != k: # Hits:35.0, Total execution time: 4.753 ms, Average time per hit: 0.1358 ms 


            ok = False # Hits:2.0, Total execution time: 0.125 ms, Average time per hit: 0.0625 ms 


            break # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


        e.append(l) # Hits:35.0, Total execution time: 4.791 ms, Average time per hit: 0.13688571428571428 ms 


        ind[(j, k)] += 2 # Hits:35.0, Total execution time: 7.289 ms, Average time per hit: 0.20825714285714286 ms 




    if ok: # Hits:32.0, Total execution time: 2.71 ms, Average time per hit: 0.0846875 ms 


        count = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        for k in range(n): # Hits:6.0, Total execution time: 0.626 ms, Average time per hit: 0.10433333333333333 ms 


            for j in range(n - 1 - k): # Hits:15.0, Total execution time: 2.084 ms, Average time per hit: 0.13893333333333333 ms 


                if e[j] > e[j + 1]: # Hits:10.0, Total execution time: 1.583 ms, Average time per hit: 0.15830000000000002 ms 


                    count += 1 # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


                    e[j], e[j + 1] = e[j + 1], e[j] # Hits:3.0, Total execution time: 0.667 ms, Average time per hit: 0.22233333333333336 ms 


        ans = min(ans, count) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


if ans == 10 ** 18: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print((-1)) # Hits:1.0, Total execution time: 4.75 ms, Average time per hit: 4.75 ms 


else:

    print(ans) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 

",p02798,True
"# Binary Indexed Tree (Fenwick Tree)

class BIT(): # Hits:1.0, Total execution time: 8.0 ms, Average time per hit: 8.0 ms 


    """"""一点加算、区間取得クエリをそれぞれO(logN)で答える

    add: i番目にvalを加える

    get_sum: 区間[l, r)の和を求める

    i, l, rは0-indexed

    """"""

    def __init__(self, n):

        self.n = n

        self.bit = [0] * (n + 1)



    def _sum(self, i):

        s = 0

        while i > 0:

            s += self.bit[i]

            i -= i & -i

        return s



    def add(self, i, val):

        """"""i番目にvalを加える""""""

        i = i + 1

        while i <= self.n:

            self.bit[i] += val

            i += i & -i



    def get_sum(self, l, r):

        """"""区間[l, r)の和を求める""""""

        return self._sum(r) - self._sum(l)





from operator import itemgetter # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


from collections import deque # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 41.709 ms, Average time per hit: 41.709 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.708 ms, Average time per hit: 2.708 ms 


b = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


ans = 10**18 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for bit_state in range(1 << n): # Hits:33.0, Total execution time: 3.544 ms, Average time per hit: 0.10739393939393939 ms 


    pattern = [deque([]) for i in range(2)] # Hits:32.0, Total execution time: 23.961 ms, Average time per hit: 0.74878125 ms 


    for i in range(n): # Hits:192.0, Total execution time: 21.526 ms, Average time per hit: 0.11211458333333332 ms 


        if bit_state & (1 << i) and i % 2 == 0: # Hits:160.0, Total execution time: 22.384 ms, Average time per hit: 0.1399 ms 


            pattern[0].append((a[i], i)) # Hits:48.0, Total execution time: 8.67 ms, Average time per hit: 0.180625 ms 


        elif bit_state & (1 << i) and i % 2 == 1: # Hits:112.0, Total execution time: 22.002 ms, Average time per hit: 0.19644642857142858 ms 


            pattern[1].append((a[i], i)) # Hits:32.0, Total execution time: 5.29 ms, Average time per hit: 0.1653125 ms 


        elif i % 2 == 0: # Hits:80.0, Total execution time: 8.918 ms, Average time per hit: 0.11147499999999999 ms 


            pattern[1].append((b[i], i)) # Hits:48.0, Total execution time: 8.96 ms, Average time per hit: 0.18666666666666665 ms 


        else:

            pattern[0].append((b[i], i)) # Hits:32.0, Total execution time: 5.669 ms, Average time per hit: 0.17715625 ms 


     

    for i in range(2): # Hits:96.0, Total execution time: 10.789 ms, Average time per hit: 0.11238541666666667 ms 


        pattern[i] = sorted(pattern[i], key = itemgetter(1)) # Hits:64.0, Total execution time: 24.713 ms, Average time per hit: 0.386140625 ms 


        pattern[i] = sorted(pattern[i]) # Hits:64.0, Total execution time: 17.755 ms, Average time per hit: 0.277421875 ms 




    if len(pattern[0]) == len(pattern[1]) or len(pattern[0]) - 1 == len(pattern[1]): # Hits:32.0, Total execution time: 10.627 ms, Average time per hit: 0.33209375 ms 


        bit = BIT(n) # Hits:10.0, Total execution time: 6.208 ms, Average time per hit: 0.6207999999999999 ms 


        ans_tmp = 0 # Hits:10.0, Total execution time: 0.793 ms, Average time per hit: 0.0793 ms 


        prev_num = 10**8 # Hits:10.0, Total execution time: 0.705 ms, Average time per hit: 0.0705 ms 


        for i in range(n)[::-1]: # Hits:28.0, Total execution time: 5.169 ms, Average time per hit: 0.18460714285714286 ms 


            pal = i % 2 # Hits:27.0, Total execution time: 2.878 ms, Average time per hit: 0.1065925925925926 ms 


            num, ind = pattern[pal].pop() # Hits:27.0, Total execution time: 5.619 ms, Average time per hit: 0.2081111111111111 ms 


            if prev_num < num: # Hits:27.0, Total execution time: 2.626 ms, Average time per hit: 0.09725925925925925 ms 


                break # Hits:9.0, Total execution time: 0.833 ms, Average time per hit: 0.09255555555555556 ms 


            prev_num = num # Hits:18.0, Total execution time: 1.502 ms, Average time per hit: 0.08344444444444445 ms 


            bit.add(ind, 1) # Hits:18.0, Total execution time: 13.919 ms, Average time per hit: 0.7732777777777778 ms 


            ans_tmp += bit.get_sum(0, ind) # Hits:18.0, Total execution time: 20.375 ms, Average time per hit: 1.1319444444444444 ms 


        else:

            ans = min(ans, ans_tmp) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




if ans == 10**18: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    print((-1)) # Hits:1.0, Total execution time: 4.958 ms, Average time per hit: 4.958 ms 


else:

    print(ans) # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 

","# Binary Indexed Tree (Fenwick Tree)

class BIT(): # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 


    """"""一点加算、区間取得クエリをそれぞれO(logN)で答える

    add: i番目にvalを加える

    get_sum: 区間[l, r)の和を求める

    i, l, rは0-indexed

    """"""

    def __init__(self, n):

        self.n = n

        self.bit = [0] * (n + 1)



    def _sum(self, i):

        s = 0

        while i > 0:

            s += self.bit[i]

            i -= i & -i

        return s



    def add(self, i, val):

        """"""i番目にvalを加える""""""

        i = i + 1

        while i <= self.n:

            self.bit[i] += val

            i += i & -i



    def get_sum(self, l, r):

        """"""区間[l, r)の和を求める""""""

        return self._sum(r) - self._sum(l)





from operator import itemgetter # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


from collections import deque # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 34.833 ms, Average time per hit: 34.833 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.042 ms, Average time per hit: 2.042 ms 


b = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


ans = 10**18 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 






for bit_state in range(1 << n): # Hits:33.0, Total execution time: 3.205 ms, Average time per hit: 0.09712121212121212 ms 


    pattern = [[] for i in range(2)] # Hits:32.0, Total execution time: 15.915 ms, Average time per hit: 0.49734375 ms 


    for i in range(n): # Hits:192.0, Total execution time: 20.174 ms, Average time per hit: 0.10507291666666667 ms 


        if bit_state & (1 << i) and i % 2 == 0: # Hits:160.0, Total execution time: 20.618 ms, Average time per hit: 0.12886250000000002 ms 


            pattern[0].append(a[i]*100 + i) # Hits:48.0, Total execution time: 10.34 ms, Average time per hit: 0.21541666666666665 ms 


        elif bit_state & (1 << i) and i % 2 == 1: # Hits:112.0, Total execution time: 12.251 ms, Average time per hit: 0.10938392857142856 ms 


            pattern[1].append(a[i]*100 + i) # Hits:32.0, Total execution time: 5.709 ms, Average time per hit: 0.17840625 ms 


        elif i % 2 == 0: # Hits:80.0, Total execution time: 8.159 ms, Average time per hit: 0.1019875 ms 


            pattern[1].append(b[i]*100 + i) # Hits:48.0, Total execution time: 8.879 ms, Average time per hit: 0.18497916666666667 ms 


        else:

            pattern[0].append(b[i]*100 + i) # Hits:32.0, Total execution time: 5.584 ms, Average time per hit: 0.1745 ms 




    if len(pattern[0]) == len(pattern[1]) or len(pattern[0]) - 1 == len(pattern[1]): # Hits:32.0, Total execution time: 10.046 ms, Average time per hit: 0.3139375 ms 


        for i in range(2): # Hits:30.0, Total execution time: 3.212 ms, Average time per hit: 0.10706666666666666 ms 


            pattern[i] = sorted(pattern[i]) # Hits:20.0, Total execution time: 4.54 ms, Average time per hit: 0.227 ms 


        bit = BIT(n) # Hits:10.0, Total execution time: 5.585 ms, Average time per hit: 0.5585 ms 


        ans_tmp = 0 # Hits:10.0, Total execution time: 0.706 ms, Average time per hit: 0.0706 ms 


        prev_num = 10**8 # Hits:10.0, Total execution time: 0.751 ms, Average time per hit: 0.0751 ms 


        for i in range(n)[::-1]: # Hits:28.0, Total execution time: 4.714 ms, Average time per hit: 0.16835714285714287 ms 


            pal = i % 2 # Hits:27.0, Total execution time: 2.541 ms, Average time per hit: 0.09411111111111112 ms 


            num = pattern[pal].pop() # Hits:27.0, Total execution time: 4.209 ms, Average time per hit: 0.15588888888888888 ms 


            ind = num % 100 # Hits:27.0, Total execution time: 2.583 ms, Average time per hit: 0.09566666666666668 ms 


            num = num // 100 # Hits:27.0, Total execution time: 2.42 ms, Average time per hit: 0.08962962962962963 ms 


            if prev_num < num: # Hits:27.0, Total execution time: 2.333 ms, Average time per hit: 0.0864074074074074 ms 


                break # Hits:9.0, Total execution time: 0.791 ms, Average time per hit: 0.08788888888888889 ms 


            prev_num = num # Hits:18.0, Total execution time: 1.334 ms, Average time per hit: 0.07411111111111111 ms 


            bit.add(ind, 1) # Hits:18.0, Total execution time: 12.543 ms, Average time per hit: 0.6968333333333334 ms 


            ans_tmp += bit.get_sum(0, ind) # Hits:18.0, Total execution time: 17.914 ms, Average time per hit: 0.9952222222222221 ms 


        else:

            ans = min(ans, ans_tmp) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




if ans == 10**18: # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    print((-1)) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 


else:

    print(ans) # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 

",p02798,True
"from collections import deque



N=int(eval(input()))

A=list(map(int,input().split()))

B=list(map(int,input().split()))



def judge(L):

    for i in range(N-1):

        if L[i]>L[i+1]:

            return False

    return True



def swap(LA,LB,i):

    LA[i],LB[i+1]=LB[i+1],LA[i]

    LA[i+1],LB[i]=LB[i],LA[i+1]



def hash(LA,LB):

    v=0

    for a in LA:

        v+=a

        v*=51

    for b in LB:

        v+=b

        v*=51

    return v



if judge(A):

    print((0))

    exit()



Q=deque()

for i in range(N-1):

    Q.append((0,i,A[:],B[:]))

ans=0

V=set()

while Q:

    d,i,LA,LB=Q.popleft()

    if i>18:

        print((-1))

        exit()

    swap(LA,LB,i)

    h=hash(LA,LB)

    if h in V:

        continue

    if judge(LA):

        print((d+1))

        exit()

    V.add(h)

    for i in range(N-1):

        Q.append((d+1,i,LA[:],LB[:]))

print((-1))

exit()
","N=int(eval(input())) # Hits:1.0, Total execution time: 41.666 ms, Average time per hit: 41.666 ms 


A=list(map(int,input().split())) # Hits:1.0, Total execution time: 2.417 ms, Average time per hit: 2.417 ms 


B=list(map(int,input().split())) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 




#0-indexed



#カードiが左からjの位置にあるときの表の数字

def getNum(i,j): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    return B[i] if abs(i-j)&1 else A[i]



#dp[使用済みカードを表すbit列][いちばん右のカードNo]=最小操作回数

INF=10**9 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


dp=[[INF for _ in range(N)] for __ in range(1<<N)] # Hits:1.0, Total execution time: 18.667 ms, Average time per hit: 18.667 ms 


for i in range(N): # Hits:6.0, Total execution time: 0.583 ms, Average time per hit: 0.09716666666666667 ms 


    dp[1<<i][i] = i # Hits:5.0, Total execution time: 0.667 ms, Average time per hit: 0.13340000000000002 ms 




for m in range(1,1<<N): #配置済みカードパターン # Hits:32.0, Total execution time: 2.541 ms, Average time per hit: 0.07940625 ms 


    cnt=bin(m).count('1') #配置済みカード数 # Hits:31.0, Total execution time: 7.707 ms, Average time per hit: 0.24861290322580645 ms 


    idx=dict() #未配置カードの位置 # Hits:31.0, Total execution time: 3.708 ms, Average time per hit: 0.11961290322580645 ms 


    tmp=cnt # Hits:31.0, Total execution time: 2.21 ms, Average time per hit: 0.07129032258064517 ms 


    for i in range(N): # Hits:186.0, Total execution time: 17.915 ms, Average time per hit: 0.09631720430107527 ms 


        if m & (1<<i) == 0: # Hits:155.0, Total execution time: 19.169 ms, Average time per hit: 0.12367096774193548 ms 


            idx[i]=tmp # Hits:75.0, Total execution time: 7.247 ms, Average time per hit: 0.09662666666666667 ms 


            tmp+=1 # Hits:75.0, Total execution time: 7.253 ms, Average time per hit: 0.09670666666666666 ms 


    for j in range(N): #新たに並べるカード # Hits:186.0, Total execution time: 18.329 ms, Average time per hit: 0.09854301075268818 ms 


        if m & (1<<j): # Hits:155.0, Total execution time: 18.204 ms, Average time per hit: 0.11744516129032258 ms 


            #もう使ったやつです

            continue # Hits:80.0, Total execution time: 5.498 ms, Average time per hit: 0.068725 ms 


        num_j=getNum(j,cnt) # Hits:75.0, Total execution time: 22.421 ms, Average time per hit: 0.29894666666666664 ms 


        for i in range(N): #配置済みのいちばん右にあるカード # Hits:450.0, Total execution time: 46.04 ms, Average time per hit: 0.10231111111111112 ms 


            if m & (1<<i) == 0: # Hits:375.0, Total execution time: 43.916 ms, Average time per hit: 0.11710933333333334 ms 


                #まだ配置済みじゃないです

                continue # Hits:215.0, Total execution time: 15.083 ms, Average time per hit: 0.07015348837209302 ms 


            num_i=getNum(i,cnt-1) # Hits:160.0, Total execution time: 46.75 ms, Average time per hit: 0.2921875 ms 


            if num_i>num_j: # Hits:160.0, Total execution time: 14.292 ms, Average time per hit: 0.089325 ms 


                #単調増加になりません

                continue # Hits:80.0, Total execution time: 5.582 ms, Average time per hit: 0.069775 ms 


            dp[m|(1<<j)][j] = min(dp[m|(1<<j)][j], dp[m][i] + idx[j]-cnt) # Hits:80.0, Total execution time: 27.918 ms, Average time per hit: 0.34897500000000004 ms 




ans=INF # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in range(N): # Hits:6.0, Total execution time: 0.583 ms, Average time per hit: 0.09716666666666667 ms 


    ans=min(ans,dp[(1<<N)-1][i]) # Hits:5.0, Total execution time: 1.124 ms, Average time per hit: 0.2248 ms 


print((ans if ans<INF else -1)) # Hits:1.0, Total execution time: 8.041 ms, Average time per hit: 8.041 ms 

",p02798,False
"s = input() # Hits:1.0, Total execution time: 34.917 ms, Average time per hit: 34.917 ms 




n = len(s) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


K = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


s_i1="""" # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


size=1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




while len(s.strip(s[0]))>0 or len(s)>2: # Hits:5.0, Total execution time: 1.375 ms, Average time per hit: 0.275 ms 


    s_i=s[0:size] # Hits:4.0, Total execution time: 0.499 ms, Average time per hit: 0.12475 ms 




    if s_i1 == s_i: # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


        size = size + 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    else:

        s_i1=s_i # Hits:3.0, Total execution time: 0.208 ms, Average time per hit: 0.06933333333333333 ms 


        s = s[size:] # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        size = 1 # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


        K = K + 1 # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 




print(K+1) # Hits:1.0, Total execution time: 8.25 ms, Average time per hit: 8.25 ms 

","s = input() # Hits:1.0, Total execution time: 34.875 ms, Average time per hit: 34.875 ms 




n = len(s) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


K = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


s_i1="""" # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


size=1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




#while len(s.strip(s[0]))>0 or len(s)>2:

while len(s)>2: # Hits:5.0, Total execution time: 0.917 ms, Average time per hit: 0.1834 ms 


    s_i=s[0:size] # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 




    if s_i1 == s_i: # Hits:4.0, Total execution time: 0.376 ms, Average time per hit: 0.094 ms 


        size = size + 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    else:

        s_i1=s_i # Hits:3.0, Total execution time: 0.251 ms, Average time per hit: 0.08366666666666667 ms 


        s = s[size:] # Hits:3.0, Total execution time: 0.499 ms, Average time per hit: 0.16633333333333333 ms 


        size = 1 # Hits:3.0, Total execution time: 0.209 ms, Average time per hit: 0.06966666666666667 ms 


        K = K + 1 # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


if not s_i1==s[0]: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if len(s.strip(s[0]))>0: # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


        K=K+1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


K=K+1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


print(K) # Hits:1.0, Total execution time: 8.875 ms, Average time per hit: 8.875 ms 

",p02939,True
"a,b,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 43.0 ms, Average time per hit: 43.0 ms 


num=[i for i in range(a,b+1)] # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


ans=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans.extend(num[:k]) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


ans.extend(num[-k:]) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


ans=sorted(list(set(ans))) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


for ansi in ans: # Hits:6.0, Total execution time: 0.709 ms, Average time per hit: 0.11816666666666667 ms 


    print(ansi) # Hits:5.0, Total execution time: 8.751 ms, Average time per hit: 1.7502 ms 
","a,b,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 34.25 ms, Average time per hit: 34.25 ms 


ans=[i for i in range(a,min(b,a+k))] # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 


ans.extend([i for i in range(max(a,b-k+1),b+1)]) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


ans=sorted(list(set(ans))) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


for ansi in ans: # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


    print(ansi) # Hits:5.0, Total execution time: 9.25 ms, Average time per hit: 1.85 ms 
",p03386,True
"A,B,K = list(map(int,input().split()))



s = [i for i in range(A,B+1)]





if 2 * K >= len(s):

    for j in range(len(s)):

        print((s[j]))



    exit()



l = [s[i] for i in range(0,K)]

k = [s[h] for h in range(len(s) - K, len(s))]



for a in range(len(l)):

    print((l[a]))

for b in range(len(k)):

    print((k[b]))



#for t in range(0,K):

#    print(s[t])



# s.reverse()



#for h in range(len(s) - K,len(s)):

#    print(s[h])


",,p03386,False
"A,B,K=map(int,input().split()) # Hits:1.0, Total execution time: 34.0 ms, Average time per hit: 34.0 ms 


tmp = set(range(A,B+1)) & (set(range(A,A+K)) | set(range(B-K+1,B+1))) # Hits:1.0, Total execution time: 1.584 ms, Average time per hit: 1.584 ms 


[print(s) for s in sorted(tmp)] # Hits:1.0, Total execution time: 10.291 ms, Average time per hit: 10.291 ms 

","A,B,K=map(int,input().split()) # Hits:1.0, Total execution time: 35.375 ms, Average time per hit: 35.375 ms 


tmp = set(range(A,min(B+1,A+K))) | set(range(max(A, B-K+1),B+1)) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


[print(s) for s in sorted(tmp)] # Hits:1.0, Total execution time: 11.25 ms, Average time per hit: 11.25 ms 

",p03386,True
"a,b,k = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.791 ms, Average time per hit: 35.791 ms 


for i in range(a,b+1): # Hits:6.0, Total execution time: 1.125 ms, Average time per hit: 0.1875 ms 


    if i<a+k or b-k<i: # Hits:5.0, Total execution time: 1.126 ms, Average time per hit: 0.22519999999999998 ms 


        print(i) # Hits:5.0, Total execution time: 10.751 ms, Average time per hit: 2.1502 ms 
","a,b,k = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.5 ms, Average time per hit: 34.5 ms 


for i in range(a,min(a+k,b+1)): # Hits:4.0, Total execution time: 1.125 ms, Average time per hit: 0.28125 ms 


    print(i) # Hits:3.0, Total execution time: 7.417 ms, Average time per hit: 2.4723333333333333 ms 


    p=i # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


for i in range(max(p+1,b-k+1),b+1): # Hits:3.0, Total execution time: 1.0 ms, Average time per hit: 0.3333333333333333 ms 


    print(i) # Hits:2.0, Total execution time: 1.541 ms, Average time per hit: 0.7705 ms 
",p03386,True
"a,b,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 24.792 ms, Average time per hit: 24.792 ms 




for i in range(a, b+1): # Hits:6.0, Total execution time: 1.249 ms, Average time per hit: 0.20816666666666667 ms 


  if i<a+k or b-k<i: # Hits:5.0, Total execution time: 1.124 ms, Average time per hit: 0.2248 ms 


    print(i) # Hits:5.0, Total execution time: 15.626 ms, Average time per hit: 3.1252 ms 
","a,b,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 36.084 ms, Average time per hit: 36.084 ms 




if b-a < 2*k: # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


  for i in range(a, b+1): # Hits:6.0, Total execution time: 1.25 ms, Average time per hit: 0.20833333333333334 ms 


    print(i) # Hits:5.0, Total execution time: 9.916 ms, Average time per hit: 1.9832 ms 


else:

  for i in range(k): # Hits:3.0, Total execution time: 0.666 ms, Average time per hit: 0.222 ms 


    print((a+i)) # Hits:2.0, Total execution time: 6.417 ms, Average time per hit: 3.2085 ms 


  for i in range(k): # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


    print((b-k+1+i)) # Hits:2.0, Total execution time: 2.291 ms, Average time per hit: 1.1455 ms 
",p03386,True
"# ABC93, B - small and large integers

a, b, k = map(int, input().split(' ')) # Hits:1.0, Total execution time: 35.125 ms, Average time per hit: 35.125 ms 




X = [i for i in range(a, b+1)] # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 




if k >= len(X)/2: # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


    [print(x) for x in X] # Hits:1.0, Total execution time: 9.792 ms, Average time per hit: 9.792 ms 


else:

    for i in range(k): # Hits:3.0, Total execution time: 0.543 ms, Average time per hit: 0.181 ms 


        print(X[i]) # Hits:2.0, Total execution time: 9.334 ms, Average time per hit: 4.667 ms 


    for i in range(k, 0, -1): # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


        print(X[len(X)-i]) # Hits:2.0, Total execution time: 2.208 ms, Average time per hit: 1.104 ms 

","# ABC93, B - small and large integers

a, b, k = map(int, input().split(' ')) # Hits:1.0, Total execution time: 36.25 ms, Average time per hit: 36.25 ms 






if k >= (b-a+1)/2: # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


    [print(x) for x in range(a, b+1)] # Hits:1.0, Total execution time: 11.917 ms, Average time per hit: 11.917 ms 


else:

    [print(x) for x in range(a, a+k)] # Hits:1.0, Total execution time: 7.459 ms, Average time per hit: 7.459 ms 


    [print(x) for x in range(b-k+1, b+1)] # Hits:1.0, Total execution time: 3.25 ms, Average time per hit: 3.25 ms 

",p03386,True
"a,b,k=list(map(int,input().split()));k-=1 # Hits:1.0, Total execution time: 32.792 ms, Average time per hit: 32.792 ms 


for i in range(a,b+1): # Hits:6.0, Total execution time: 1.334 ms, Average time per hit: 0.22233333333333336 ms 


  if i<=a+k or b-k<=i:print(i) # Hits:5.0, Total execution time: 11.252 ms, Average time per hit: 2.2504 ms 
","a,b,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 37.209 ms, Average time per hit: 37.209 ms 


for i in range(k): # Hits:4.0, Total execution time: 0.96 ms, Average time per hit: 0.24 ms 


  if a+i<=b:print((a+i)) # Hits:3.0, Total execution time: 7.625 ms, Average time per hit: 2.5416666666666665 ms 


for i in range(k): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


  if a+k<=b-k+1+i:print((b-k+1+i)) # Hits:3.0, Total execution time: 2.458 ms, Average time per hit: 0.8193333333333334 ms 
",p03386,True
"a, b, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.542 ms, Average time per hit: 34.542 ms 


if a + 2 * k > 1 + b: # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    for i in range(a, b + 1): # Hits:6.0, Total execution time: 0.916 ms, Average time per hit: 0.15266666666666664 ms 


        print(i) # Hits:5.0, Total execution time: 9.501 ms, Average time per hit: 1.9002000000000001 ms 


else:

    for i in range(a, a + k): # Hits:3.0, Total execution time: 0.832 ms, Average time per hit: 0.2773333333333333 ms 


        print(i) # Hits:2.0, Total execution time: 6.916 ms, Average time per hit: 3.458 ms 


    for i in range(b - k + 1, b + 1): # Hits:3.0, Total execution time: 0.75 ms, Average time per hit: 0.25 ms 


        print(i) # Hits:2.0, Total execution time: 1.708 ms, Average time per hit: 0.854 ms 
","a, b, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.833 ms, Average time per hit: 33.833 ms 


for i in sorted(list(set(range(a, min(a + k, b + 1))) | set(range(max(a, b - k + 1), b + 1)))): # Hits:6.0, Total execution time: 3.166 ms, Average time per hit: 0.5276666666666666 ms 


    print(i) # Hits:5.0, Total execution time: 9.416 ms, Average time per hit: 1.8832 ms 
",p03386,True
"A, B, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.25 ms, Average time per hit: 34.25 ms 


l = [int(x) for x in range(A, B + 1)] # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 


if 2 * K > B - A + 1: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


	for i in l: # Hits:6.0, Total execution time: 0.666 ms, Average time per hit: 0.111 ms 


		print(i) # Hits:5.0, Total execution time: 9.583 ms, Average time per hit: 1.9165999999999999 ms 


else:

	for i in range(A, A + K): # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


		print(i) # Hits:2.0, Total execution time: 8.5 ms, Average time per hit: 4.25 ms 


	for j in range(B - K + 1, B + 1): # Hits:3.0, Total execution time: 0.499 ms, Average time per hit: 0.16633333333333333 ms 


		print(j) # Hits:2.0, Total execution time: 1.626 ms, Average time per hit: 0.813 ms 
","A, B, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.667 ms, Average time per hit: 34.667 ms 


if 2 * K > B - A + 1: # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


	for i in range(A, B + 1): # Hits:6.0, Total execution time: 1.208 ms, Average time per hit: 0.20133333333333334 ms 


		print(i) # Hits:5.0, Total execution time: 9.75 ms, Average time per hit: 1.95 ms 


else:

	for i in range(A, A + K): # Hits:3.0, Total execution time: 0.709 ms, Average time per hit: 0.23633333333333334 ms 


		print(i) # Hits:2.0, Total execution time: 5.834 ms, Average time per hit: 2.917 ms 


	for j in range(B - K + 1, B + 1): # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


		print(j) # Hits:2.0, Total execution time: 1.916 ms, Average time per hit: 0.958 ms 
",p03386,True
"from collections import OrderedDict

if __name__ == ""__main__"":

    a, b, k = list(map(int, input().split()))



    output = OrderedDict()



    for i in range(k):

        if a<= a+i <= b:

            output[a+i] = a+i

    

    for i in range(-k+1,1):

        if a<= b+i <= b:

            output[b+i] = b+i

    

    for o in list(output.keys()):

        print(o)
",,p03386,False
"#!/usr/bin/env python3

a,b,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 35.792 ms, Average time per hit: 35.792 ms 


for i in range(a,b+1): # Hits:6.0, Total execution time: 1.167 ms, Average time per hit: 0.1945 ms 


    if a <= i <= a+k-1 or b-k+1 <= i <= b: print(i) # Hits:5.0, Total execution time: 10.792 ms, Average time per hit: 2.1584 ms 
","#!/usr/bin/env python3

a,b,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 34.25 ms, Average time per hit: 34.25 ms 


for i in range(a,min(b+1,a+k)): # Hits:4.0, Total execution time: 1.084 ms, Average time per hit: 0.271 ms 


    if a <= i <= a+k-1: print(i) # Hits:3.0, Total execution time: 7.625 ms, Average time per hit: 2.5416666666666665 ms 


for i in range(b-k+1,b+1): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


    if a+k-1 < i:print(i) # Hits:3.0, Total execution time: 1.916 ms, Average time per hit: 0.6386666666666666 ms 
",p03386,True
"A,B,K=list(map(int,input().split())) # Hits:1.0, Total execution time: 35.5 ms, Average time per hit: 35.5 ms 


L=list(i for i in range(A,B+1)) # Hits:1.0, Total execution time: 2.208 ms, Average time per hit: 2.208 ms 


for i in range(B-A+1): # Hits:6.0, Total execution time: 0.792 ms, Average time per hit: 0.132 ms 


    if L[i] in L[:K] or L[i] in L[-K:]: # Hits:5.0, Total execution time: 1.915 ms, Average time per hit: 0.383 ms 


        print((L[i])) # Hits:5.0, Total execution time: 9.459 ms, Average time per hit: 1.8918 ms 
","a,b,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 31.584 ms, Average time per hit: 31.584 ms 


r1=[i for i in range(a,min(b+1,a+k))] # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


r2=[i for i in range(max(a,b-k+1),b+1)] # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


r1.extend(r2) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


result=set(r1) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


for i in sorted(result): # Hits:6.0, Total execution time: 1.083 ms, Average time per hit: 0.1805 ms 


    print(i) # Hits:5.0, Total execution time: 8.919 ms, Average time per hit: 1.7838 ms 
",p03386,True
"def main():

  A, B, K = [int(x) for x in input().split()]

  l = [str(i) for i in range(A, B + 1) if i < A + K or i > B - K]

  print(('\n'.join(l)))





if __name__ == ""__main__"":

  main()
",,p03386,False
"a,b,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 33.0 ms, Average time per hit: 33.0 ms 


l = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(a,b+1): # Hits:6.0, Total execution time: 0.79 ms, Average time per hit: 0.13166666666666665 ms 


    l.append(i) # Hits:5.0, Total execution time: 0.668 ms, Average time per hit: 0.1336 ms 


for j in sorted(set(l[:k]) | set(l[-k:])): # Hits:6.0, Total execution time: 1.917 ms, Average time per hit: 0.3195 ms 


    print(j) # Hits:5.0, Total execution time: 9.457 ms, Average time per hit: 1.8914000000000002 ms 
","a,b,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.5 ms, Average time per hit: 37.5 ms 


l = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


if b-a >= k: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    for i in range(k): # Hits:4.0, Total execution time: 0.999 ms, Average time per hit: 0.24975 ms 


        l.append(a+i) # Hits:3.0, Total execution time: 0.667 ms, Average time per hit: 0.22233333333333336 ms 


    for i in range(k): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


        l.append(b-i) # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


    l = sorted(set(l)) # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 


    for i in range(len(l)): # Hits:6.0, Total execution time: 0.918 ms, Average time per hit: 0.153 ms 


        print((l[i])) # Hits:5.0, Total execution time: 11.708 ms, Average time per hit: 2.3416 ms 


else:

    for i in range(b-a+1): # Hits:9.0, Total execution time: 1.374 ms, Average time per hit: 0.15266666666666664 ms 


        print((a+i)) # Hits:8.0, Total execution time: 12.709 ms, Average time per hit: 1.588625 ms 
",p03386,True
"import math # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


import sys # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


from functools import reduce # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




def main(): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    A, B, K = list(map(int, input().split()))



    for i in range(A, B+1):

        if i - A < K or B - i < K:

            print(i)



main() # Hits:1.0, Total execution time: 40.708 ms, Average time per hit: 40.708 ms 
","a, b, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.417 ms, Average time per hit: 33.417 ms 




def it(): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    for i in range(a, min(a+k, b)):

        yield i



    for i in range(max(b-k+1, a), b+1):

        yield i



for i in sorted(set(it())): # Hits:6.0, Total execution time: 5.168 ms, Average time per hit: 0.8613333333333334 ms 


    print(i) # Hits:5.0, Total execution time: 9.334 ms, Average time per hit: 1.8668 ms 
",p03386,True
"A, B, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


list = [i for i in range(A, B+1)]

list1 = list[:K]

list2 = list[(B-K-A+1):]

lists = sorted(set(list1 + list2))

for i in lists:

    print(i)","A, B, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.667 ms, Average time per hit: 33.667 ms 


set1 = set([i for i in range(A, A+K)]) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


set2 = set([i for i in range(B+1-K, B+1)]) # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


set3 = sorted((set1|set2)) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


for i in set3: # Hits:6.0, Total execution time: 0.626 ms, Average time per hit: 0.10433333333333333 ms 


    if A<=i<=B: # Hits:5.0, Total execution time: 0.79 ms, Average time per hit: 0.158 ms 


        print(i) # Hits:5.0, Total execution time: 9.085 ms, Average time per hit: 1.817 ms 
",p03386,True
"A, B, K = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 36.334 ms, Average time per hit: 36.334 ms 


for i in range(A, B+1): # Hits:6.0, Total execution time: 1.375 ms, Average time per hit: 0.22916666666666666 ms 


    if i < A + K or B - K < i: # Hits:5.0, Total execution time: 1.0 ms, Average time per hit: 0.2 ms 


        print(i) # Hits:5.0, Total execution time: 10.543 ms, Average time per hit: 2.1086 ms 

","A, B, K = map(int, input().split()) # Hits:1.0, Total execution time: 36.959 ms, Average time per hit: 36.959 ms 


if B - A < 2 * K: # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    print(*range(A, B + 1), sep=""\n"") # Hits:1.0, Total execution time: 10.583 ms, Average time per hit: 10.583 ms 


else:

    print(*range(A, A + K), sep=""\n"") # Hits:1.0, Total execution time: 7.25 ms, Average time per hit: 7.25 ms 


    print(*range(B - K + 1,  B + 1), sep=""\n"") # Hits:1.0, Total execution time: 2.5 ms, Average time per hit: 2.5 ms 

",p03386,True
"#import numpy as np

import sys, math # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


from itertools import permutations, combinations # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


from collections import defaultdict, Counter, deque # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


from math import factorial#, gcd # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


from bisect import bisect_left #bisect_left(list, value) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


sys.setrecursionlimit(10**7) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


enu = enumerate # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


MOD = 10**9+7 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


def input(): return sys.stdin.readline()[:-1] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


pl = lambda x: print(*x, sep='\n') # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




A, B, K = map(int, input().split()) # Hits:1.0, Total execution time: 34.292 ms, Average time per hit: 34.292 ms 




for val in range(A, B+1): # Hits:6.0, Total execution time: 0.959 ms, Average time per hit: 0.15983333333333336 ms 


    if val<=A+K-1 or B-K+1<=val: # Hits:5.0, Total execution time: 1.167 ms, Average time per hit: 0.2334 ms 


        print(val) # Hits:5.0, Total execution time: 9.583 ms, Average time per hit: 1.9165999999999999 ms 

",,p03386,True
"from collections import deque # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


 

A, B, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.708 ms, Average time per hit: 34.708 ms 


 

value = deque() # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


s = [i for i in range(A, B+1)] # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 


 

value.extend(s[0:K]) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


value.extend(s[len(s)-K:len(s)]) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


 

num = list(set(value)) # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


num.sort() # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


for i in range(len(num)): # Hits:6.0, Total execution time: 0.834 ms, Average time per hit: 0.139 ms 


    print((num[i])) # Hits:5.0, Total execution time: 9.335 ms, Average time per hit: 1.867 ms 
","A, B, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.625 ms, Average time per hit: 37.625 ms 




value = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




if B - A < K or B <= K: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    value.extend([i for i in range(A, B+1)]) # Hits:1.0, Total execution time: 2.084 ms, Average time per hit: 2.084 ms 


    

else:

    value.extend([i for i in range(A, A+K)]) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


    value.extend([i for i in range(B-K+1, B+1)])     # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




num = list(set(value)) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


num.sort() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




for i in range(len(num)): # Hits:6.0, Total execution time: 0.794 ms, Average time per hit: 0.13233333333333333 ms 


    print((num[i])) # Hits:5.0, Total execution time: 8.834 ms, Average time per hit: 1.7668 ms 
",p03386,True
"a, b, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.875 ms, Average time per hit: 34.875 ms 




ans = list(range(a, a+k)) + list(range(b-k+1, b+1)) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


ans.sort() # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


ans2 = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in ans: # Hits:7.0, Total execution time: 0.667 ms, Average time per hit: 0.09528571428571429 ms 


    if a<=i<=b and i not in ans2: # Hits:6.0, Total execution time: 1.001 ms, Average time per hit: 0.16683333333333333 ms 


        ans2.append(i) # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 




for j in ans2: # Hits:6.0, Total execution time: 0.707 ms, Average time per hit: 0.11783333333333333 ms 


    print(j) # Hits:5.0, Total execution time: 9.374 ms, Average time per hit: 1.8748 ms 
","a, b, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 29.333 ms, Average time per hit: 29.333 ms 




li = list(range(a, b+1)) # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


for i in sorted(set(li[:k]) | set(li[-k:])): # Hits:6.0, Total execution time: 3.584 ms, Average time per hit: 0.5973333333333334 ms 


    print(i) # Hits:5.0, Total execution time: 46.958 ms, Average time per hit: 9.3916 ms 
",p03386,True
"a,b,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.542 ms, Average time per hit: 37.542 ms 


for i in range(a, b + 1): # Hits:6.0, Total execution time: 1.207 ms, Average time per hit: 0.20116666666666666 ms 


    if i - a <= k - 1: # Hits:5.0, Total execution time: 0.709 ms, Average time per hit: 0.1418 ms 


        print(i) # Hits:3.0, Total execution time: 8.376 ms, Average time per hit: 2.792 ms 


    elif b - i <= k - 1: # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


        print(i) # Hits:2.0, Total execution time: 1.542 ms, Average time per hit: 0.771 ms 
","a,b,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 34.542 ms, Average time per hit: 34.542 ms 


li = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


if 2 * k > b - a: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    for x in range(a,b+1): # Hits:6.0, Total execution time: 1.084 ms, Average time per hit: 0.18066666666666667 ms 


        print(x) # Hits:5.0, Total execution time: 9.25 ms, Average time per hit: 1.85 ms 


else:

    for i in range(k): # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


        li.append(a + i) # Hits:2.0, Total execution time: 0.499 ms, Average time per hit: 0.2495 ms 


    for i in range(k): # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        li.append(b - i) # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    for i in sorted(set(li)): # Hits:5.0, Total execution time: 1.167 ms, Average time per hit: 0.2334 ms 


        print(i) # Hits:4.0, Total execution time: 9.375 ms, Average time per hit: 2.34375 ms 
",p03386,True
"a,b,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 36.667 ms, Average time per hit: 36.667 ms 


n =[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(a,b+1): # Hits:6.0, Total execution time: 1.291 ms, Average time per hit: 0.21516666666666664 ms 


    n.append(i) # Hits:5.0, Total execution time: 1.083 ms, Average time per hit: 0.2166 ms 


nf=n[:k] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


nb=n[len(n)-k:] # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


n=nf+nb # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


n=list(set(n)) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


n.sort() # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for i in n: # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


    print(i) # Hits:5.0, Total execution time: 11.125 ms, Average time per hit: 2.225 ms 
","a,b,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 27.375 ms, Average time per hit: 27.375 ms 


n =[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(a,a+k if k<(b-a) else b+1): # Hits:4.0, Total execution time: 1.333 ms, Average time per hit: 0.33325 ms 


    n.append(i) # Hits:3.0, Total execution time: 0.709 ms, Average time per hit: 0.23633333333333334 ms 


for i in range(b-k+1 if k<(b-a) else b+1,b+1): # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


    if(i not in n): # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


        n.append(i) # Hits:2.0, Total execution time: 0.291 ms, Average time per hit: 0.1455 ms 


for i in n: # Hits:6.0, Total execution time: 0.624 ms, Average time per hit: 0.104 ms 


    print(i) # Hits:5.0, Total execution time: 9.167 ms, Average time per hit: 1.8334000000000001 ms 
",p03386,True
"a,b,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 34.25 ms, Average time per hit: 34.25 ms 


if k>b-a: # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    for i in range(a,b+1): # Hits:9.0, Total execution time: 1.375 ms, Average time per hit: 0.15277777777777776 ms 


        print(i) # Hits:8.0, Total execution time: 12.085 ms, Average time per hit: 1.510625 ms 


else:

    l=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    s=set() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    for i in range(a,b+1): # Hits:6.0, Total execution time: 0.876 ms, Average time per hit: 0.146 ms 


        l.append(i) # Hits:5.0, Total execution time: 0.833 ms, Average time per hit: 0.1666 ms 


    for i in range(k): # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


        s.add(l[i]) # Hits:3.0, Total execution time: 0.833 ms, Average time per hit: 0.2776666666666667 ms 


        s.add(l[-i-1]) # Hits:3.0, Total execution time: 1.333 ms, Average time per hit: 0.4443333333333333 ms 


    s_l=list(s) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    s_l.sort() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    for i in range(len(s_l)): # Hits:6.0, Total execution time: 0.916 ms, Average time per hit: 0.15266666666666664 ms 


        print((s_l[i])) # Hits:5.0, Total execution time: 9.707 ms, Average time per hit: 1.9414 ms 
","a,b,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 33.75 ms, Average time per hit: 33.75 ms 




ans=list(range(a,min(a+k,b)))+list(range(max(a,b-k+1),b+1)) # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


ans=set(ans) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


ans=list(ans) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


ans.sort() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in range(len(ans)): # Hits:6.0, Total execution time: 0.833 ms, Average time per hit: 0.13883333333333334 ms 


    print((ans[i])) # Hits:5.0, Total execution time: 9.418 ms, Average time per hit: 1.8836 ms 
",p03386,True
"a,b,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 27.708 ms, Average time per hit: 27.708 ms 


x=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


y=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(a,b+1): # Hits:6.0, Total execution time: 1.082 ms, Average time per hit: 0.18033333333333335 ms 


    x.append(i) # Hits:5.0, Total execution time: 1.083 ms, Average time per hit: 0.2166 ms 


if len(x)<k: # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    k=len(x) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(k): # Hits:4.0, Total execution time: 0.376 ms, Average time per hit: 0.094 ms 


    y.append(x[i]) # Hits:3.0, Total execution time: 0.791 ms, Average time per hit: 0.26366666666666666 ms 


for i in range(1,k+1): # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    y.append(x[-i]) # Hits:3.0, Total execution time: 0.543 ms, Average time per hit: 0.181 ms 


y=list(set(y)) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


y.sort() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(len(y)): # Hits:6.0, Total execution time: 0.875 ms, Average time per hit: 0.14583333333333334 ms 


    print((y[i])) # Hits:5.0, Total execution time: 9.5 ms, Average time per hit: 1.9 ms 
","a,b,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 34.958 ms, Average time per hit: 34.958 ms 


x=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


y=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


if b-a<k: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    k=b-a+1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(a,a+k): # Hits:4.0, Total execution time: 0.875 ms, Average time per hit: 0.21875 ms 


    x.append(i) # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


for i in range(b-k+1,b+1): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    x.append(i) # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


x=list(set(x)) # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


x.sort() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(len(x)): # Hits:6.0, Total execution time: 0.917 ms, Average time per hit: 0.15283333333333335 ms 


    print((x[i])) # Hits:5.0, Total execution time: 9.708 ms, Average time per hit: 1.9416 ms 
",p03386,True
"A, B, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.208 ms, Average time per hit: 38.208 ms 




def get_candidates(A, B, K): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    """"""Find matching numbers, return as list""""""

    L = B - A + 1 # length of list

    c = set()

    for index, val in enumerate(range(A,B+1)):

        #print(index,val)

        if index < K:

            c.add(val)

        elif index >= max(0, L-K):

            c.add(val)

    #c = sorted(list(c))

    return sorted(list(c))



for n in get_candidates(A, B, K): # Hits:6.0, Total execution time: 6.665 ms, Average time per hit: 1.1108333333333333 ms 


    print(n) # Hits:5.0, Total execution time: 9.625 ms, Average time per hit: 1.925 ms 
","A, B, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.584 ms, Average time per hit: 33.584 ms 




l1 = list(range(A,min(B+1,A+K))) # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


l2_lower = max(A,(B+1) - K) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


l2 = list(range(l2_lower, B+1)) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for n in sorted(list(set(l1+l2))): # Hits:6.0, Total execution time: 1.46 ms, Average time per hit: 0.24333333333333335 ms 


    print(n) # Hits:5.0, Total execution time: 8.791 ms, Average time per hit: 1.7582 ms 
",p03386,True
"re = list() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


a,b,k = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.333 ms, Average time per hit: 35.333 ms 


li = [i for i in range(a,b+1)] # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 


re += li[:k] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


li.sort(reverse=True) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


re += li[:k] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in sorted(list(set(re))): # Hits:6.0, Total execution time: 1.209 ms, Average time per hit: 0.2015 ms 


    print(i) # Hits:5.0, Total execution time: 8.5 ms, Average time per hit: 1.7 ms 

","a,b,k = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.583 ms, Average time per hit: 33.583 ms 


li = [i for i in range(a,b+1)] if (b-a+1)/2 < float(k) else [i for i in range(a,a+k)]+[i for i in range(b-k+1,b+1)] # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


for i in sorted(list(set(li))): # Hits:6.0, Total execution time: 1.5 ms, Average time per hit: 0.25 ms 


    print(i) # Hits:5.0, Total execution time: 9.209 ms, Average time per hit: 1.8417999999999999 ms 



",p03386,True
"from collections import deque # Hits:1.0, Total execution time: 2.292 ms, Average time per hit: 2.292 ms 


def main(): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    A, B, K = list(map(int, input().split()))

    number = deque()

    for i in range(A, B+1):

        number.append(i)

    for i in range(K):

        if len(number) > 0:

            print((number.popleft()))

    l = deque()

    for i in range(K):

        if len(number) > 0:

            l.append(number.pop())

    for i in range(len(l)):

        if len(l) > 0:

            print((l.pop()))

main() # Hits:1.0, Total execution time: 51.166 ms, Average time per hit: 51.166 ms 
","def main(): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    A, B, K = list(map(int, input().split()))

    count = 0

    for i in range(A, B+1):

        if count < K or  (B-A)-K < count:        

            print(i)

        count += 1

main() # Hits:1.0, Total execution time: 38.167 ms, Average time per hit: 38.167 ms 
",p03386,True
"A, B, K = map(int, input().split()) # Hits:1.0, Total execution time: 37.084 ms, Average time per hit: 37.084 ms 


[print(i) for i in range(A, B+1) if i-A <= K-1 or B-i <= K-1] # Hits:1.0, Total execution time: 12.792 ms, Average time per hit: 12.792 ms 

","A, B, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.291 ms, Average time per hit: 37.291 ms 


for a in sorted(list(set([i for i in range(A, min(A + K, B+1))]) | set([i for i in range(max(A, B-K+1), B+1)]))): # Hits:6.0, Total execution time: 6.123 ms, Average time per hit: 1.0205 ms 


    print(a) # Hits:5.0, Total execution time: 10.498 ms, Average time per hit: 2.0995999999999997 ms 
",p03386,True
"# -*- coding: utf-8 -*-

a,b,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 34.792 ms, Average time per hit: 34.792 ms 




"""""" # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(a, b + 1):

    if a + k - 1 >= i or b - k + 1 <= i:

        print(i)

""""""

tmp = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(k): # Hits:4.0, Total execution time: 0.834 ms, Average time per hit: 0.2085 ms 


    if a + i <= b: # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


        print((a + i)) # Hits:3.0, Total execution time: 8.541 ms, Average time per hit: 2.847 ms 


        tmp.append(a + i) # Hits:3.0, Total execution time: 0.833 ms, Average time per hit: 0.2776666666666667 ms 


for i in range(k): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    i = k - i - 1 # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


    if (b - i >= a) and (not((b - i) in tmp)): # Hits:3.0, Total execution time: 0.792 ms, Average time per hit: 0.264 ms 


        print((b - i)) # Hits:2.0, Total execution time: 2.083 ms, Average time per hit: 1.0415 ms 

","# -*- coding: utf-8 -*-

a,b,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 36.833 ms, Average time per hit: 36.833 ms 




"""""" # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(a, b + 1):

    if a + k - 1 >= i or b - k + 1 <= i:

        print(i)

""""""

"""""" # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


tmp = []

for i in range(k):

    if a + i <= b:

        print(a + i)

        tmp.append(a + i)

for i in range(k):

    i = k - i - 1

    if (b - i >= a) and (not((b - i) in tmp)):

        print(b - i)

""""""



#くれないさんのわかりやすい解答

ans = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(k): # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


    number = a + i # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    if a <= a + i <= b: # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


        ans.append(number) # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


    number = b - i # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    if a <= number <= b: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        ans.append(number) # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


ans = list(set(ans)) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


ans.sort() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(len(ans)): # Hits:6.0, Total execution time: 0.958 ms, Average time per hit: 0.15966666666666665 ms 


    print((ans[i])) # Hits:5.0, Total execution time: 11.291 ms, Average time per hit: 2.2582 ms 

",p03386,True
"a,b,k=input().split() # Hits:1.0, Total execution time: 35.834 ms, Average time per hit: 35.834 ms 


a,b,k=int(a),int(b),int(k) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




for i in range(b-a+1): # Hits:6.0, Total execution time: 1.209 ms, Average time per hit: 0.2015 ms 


    if i<k: # Hits:5.0, Total execution time: 0.624 ms, Average time per hit: 0.1248 ms 


        print((a+i)) # Hits:3.0, Total execution time: 8.293 ms, Average time per hit: 2.7643333333333335 ms 


    elif i>b-a-k: # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


        print((a+i)) # Hits:2.0, Total execution time: 1.875 ms, Average time per hit: 0.9375 ms 

","#from collections import deque

a,b,k=input().split() # Hits:1.0, Total execution time: 32.833 ms, Average time per hit: 32.833 ms 


a,b,k=int(a),int(b),int(k) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




#多分両端からアクセスしないとTLEになる

''' # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(b-a+1):

    if i<k:

        print(a+i)

    elif i>b-a-k:

        print(a+i)

'''



d=[] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


if a+(k-1)>b: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    k=b-a+1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(k): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


        d.append(a+i) # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


        d.append(b-i) # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


#辞書もsort可能

for i in sorted(set(d)): # Hits:6.0, Total execution time: 1.417 ms, Average time per hit: 0.23616666666666666 ms 


    print(i) # Hits:5.0, Total execution time: 9.916 ms, Average time per hit: 1.9832 ms 

",p03386,True
"a, b, k = list(map(int,input().split())) # Hits:1.0, Total execution time: 29.917 ms, Average time per hit: 29.917 ms 


lst = [i for i in range(a, b+1) if i <(a+k) or i > (b-k)] # Hits:1.0, Total execution time: 3.041 ms, Average time per hit: 3.041 ms 




for i in range(len(lst)): # Hits:6.0, Total execution time: 1.125 ms, Average time per hit: 0.1875 ms 


    print((lst[i])) # Hits:5.0, Total execution time: 10.459 ms, Average time per hit: 2.0918 ms 
","a, b, k = list(map(int,input().split())) # Hits:1.0, Total execution time: 29.292 ms, Average time per hit: 29.292 ms 


maximum = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




if(a+k <= b): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    for i in range(a, a+k): # Hits:4.0, Total execution time: 0.875 ms, Average time per hit: 0.21875 ms 


        print(i) # Hits:3.0, Total execution time: 7.792 ms, Average time per hit: 2.5973333333333333 ms 


        maximum = i # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    for j in range(b-k+1, b+1): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


        if(maximum < j): # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


            print(j) # Hits:2.0, Total execution time: 1.583 ms, Average time per hit: 0.7915 ms 


        

else:

    for i in range(a, b+1): # Hits:9.0, Total execution time: 1.25 ms, Average time per hit: 0.1388888888888889 ms 


        print(i) # Hits:8.0, Total execution time: 13.125 ms, Average time per hit: 1.640625 ms 
",p03386,True
"for e in iter(input,'0'): # Hits:3.0, Total execution time: 37.999 ms, Average time per hit: 12.666333333333334 ms 


 R=[[]for _ in[0]*-~int(e)] # Hits:2.0, Total execution time: 3.792 ms, Average time per hit: 1.896 ms 


 for _ in[0]*int(eval(input())): # Hits:12.0, Total execution time: 13.043 ms, Average time per hit: 1.0869166666666668 ms 


  a,b=list(map(int,input().split())) # Hits:10.0, Total execution time: 9.584 ms, Average time per hit: 0.9584 ms 


  R[a]+=[b];R[b]+=[a] # Hits:10.0, Total execution time: 3.29 ms, Average time per hit: 0.329 ms 


 for m in R[1][:]:R[1]+=R[m] # Hits:4.0, Total execution time: 2.0 ms, Average time per hit: 0.5 ms 


 print((len({*R[1]}-{1}))) # Hits:2.0, Total execution time: 10.875 ms, Average time per hit: 5.4375 ms 

","import sys # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


r=sys.stdin.readline # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for e in iter(r,'0\n'): # Hits:3.0, Total execution time: 35.584 ms, Average time per hit: 11.861333333333334 ms 


 R=[[]for _ in[0]*-~int(e)] # Hits:2.0, Total execution time: 3.458 ms, Average time per hit: 1.729 ms 


 for _ in[0]*int(r()): # Hits:12.0, Total execution time: 1.877 ms, Average time per hit: 0.15641666666666665 ms 


  a,b=list(map(int,r().split())) # Hits:10.0, Total execution time: 5.04 ms, Average time per hit: 0.504 ms 


  R[a]+=[b];R[b]+=[a] # Hits:10.0, Total execution time: 2.874 ms, Average time per hit: 0.2874 ms 


 for m in R[1][:]:R[1]+=R[m] # Hits:4.0, Total execution time: 1.541 ms, Average time per hit: 0.38525 ms 


 print((len({*R[1]}-{1}))) # Hits:2.0, Total execution time: 24.917 ms, Average time per hit: 12.4585 ms 

",p00468,True
"while True: # Hits:7.0, Total execution time: 0.832 ms, Average time per hit: 0.11885714285714286 ms 


    e = int(eval(input())) # Hits:7.0, Total execution time: 65.708 ms, Average time per hit: 9.386857142857144 ms 


    if e == 0: # Hits:7.0, Total execution time: 1.166 ms, Average time per hit: 0.1665714285714286 ms 


        break # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    z, ans = 0, float('inf') # Hits:6.0, Total execution time: 1.668 ms, Average time per hit: 0.278 ms 


    for z in range(e): # Hits:33.0, Total execution time: 12.916 ms, Average time per hit: 0.39139393939393935 ms 


        if z ** 3 > e: # Hits:31.0, Total execution time: 14.248 ms, Average time per hit: 0.45961290322580645 ms 


            break # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


        else:

            r = e - z ** 3 # Hits:27.0, Total execution time: 4.084 ms, Average time per hit: 0.15125925925925926 ms 


            y = int(r ** 0.5) # Hits:27.0, Total execution time: 6.499 ms, Average time per hit: 0.2407037037037037 ms 


            x = r - y ** 2 # Hits:27.0, Total execution time: 3.795 ms, Average time per hit: 0.14055555555555554 ms 


            ans = min(ans, x + y + z) # Hits:27.0, Total execution time: 7.164 ms, Average time per hit: 0.2653333333333333 ms 


    print(ans) # Hits:6.0, Total execution time: 67.541 ms, Average time per hit: 11.256833333333335 ms 

","while True: # Hits:7.0, Total execution time: 0.709 ms, Average time per hit: 0.1012857142857143 ms 


    e = int(eval(input())) # Hits:7.0, Total execution time: 66.334 ms, Average time per hit: 9.476285714285714 ms 


    if e == 0: # Hits:7.0, Total execution time: 1.124 ms, Average time per hit: 0.1605714285714286 ms 


        break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    z, ans = 0, float('inf') # Hits:6.0, Total execution time: 1.749 ms, Average time per hit: 0.2915 ms 


    while z ** 3 <= e: # Hits:34.0, Total execution time: 5.083 ms, Average time per hit: 0.1495 ms 


        r = e - z ** 3 # Hits:28.0, Total execution time: 4.123 ms, Average time per hit: 0.14725 ms 


        y = int(r ** 0.5) # Hits:28.0, Total execution time: 6.33 ms, Average time per hit: 0.2260714285714286 ms 


        x = r - y ** 2 # Hits:28.0, Total execution time: 3.629 ms, Average time per hit: 0.12960714285714287 ms 


        ans = min(ans, x + y + z) # Hits:28.0, Total execution time: 7.164 ms, Average time per hit: 0.25585714285714284 ms 


        z += 1 # Hits:28.0, Total execution time: 2.918 ms, Average time per hit: 0.1042142857142857 ms 


    print(ans) # Hits:6.0, Total execution time: 29.709 ms, Average time per hit: 4.9515 ms 

",p01137,True
"from collections import defaultdict # Hits:1.0, Total execution time: 1.583 ms, Average time per hit: 1.583 ms 


counts = defaultdict(int) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


for c in input(): # Hits:6.0, Total execution time: 41.625 ms, Average time per hit: 6.9375 ms 


  counts[c] += 1 # Hits:5.0, Total execution time: 1.167 ms, Average time per hit: 0.2334 ms 


allgood = True # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for k in counts: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


  allgood &= (counts[k] % 2 == 0) # Hits:2.0, Total execution time: 0.916 ms, Average time per hit: 0.458 ms 


print(""Yes"" if allgood else ""No"") # Hits:1.0, Total execution time: 7.0 ms, Average time per hit: 7.0 ms 
","from collections import defaultdict # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 


counts=defaultdict(int) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


for c in input():counts[c]+=1 # Hits:6.0, Total execution time: 36.25 ms, Average time per hit: 6.041666666666667 ms 


print(""Yes""if all(counts[k]%2<1 for k in counts)else""No"") # Hits:1.0, Total execution time: 7.166 ms, Average time per hit: 7.166 ms 
",p04012,True
"from collections import defaultdict # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 


counts=defaultdict(int) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for c in input():counts[c]+=1 # Hits:6.0, Total execution time: 30.958 ms, Average time per hit: 5.159666666666667 ms 


print(""Yes""if all(counts[k]%2<1 for k in counts)else""No"") # Hits:1.0, Total execution time: 7.75 ms, Average time per hit: 7.75 ms 
","c={} # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for k in input():c[k]=(c[k]if k in c else 0)+1 # Hits:6.0, Total execution time: 40.833 ms, Average time per hit: 6.8055 ms 


print(""Yes""if all(c[k]%2<1 for k in c)else""No"") # Hits:1.0, Total execution time: 9.459 ms, Average time per hit: 9.459 ms 
",p04012,True
"import sys

read = sys.stdin.buffer.read

readline = sys.stdin.buffer.readline

readlines = sys.stdin.buffer.readlines

sys.setrecursionlimit(10 ** 7)



from collections import Counter



for check in list(Counter(read().rstrip().decode()).values()):

    if check % 2 == 1:

        print('No')

        exit()

print('Yes')
","import sys # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


read = sys.stdin.buffer.read # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




from collections import Counter # Hits:1.0, Total execution time: 1.542 ms, Average time per hit: 1.542 ms 




print(('Yes' if all(v % 2 == 0 for v in list(Counter(read().rstrip().decode()).values())) else 'No')) # Hits:1.0, Total execution time: 40.667 ms, Average time per hit: 40.667 ms 

",p04012,False
"from collections import Counter # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 






print('No') if any(v % 2 for v in Counter(input()).values()) else print('Yes') # Hits:1.0, Total execution time: 48.917 ms, Average time per hit: 48.917 ms 

","cntr = [0] * 26 # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


for c in input(): # Hits:6.0, Total execution time: 35.959 ms, Average time per hit: 5.993166666666667 ms 


    cntr[ord(c) - 97] += 1 # Hits:5.0, Total execution time: 1.542 ms, Average time per hit: 0.30839999999999995 ms 


print('No') if any(v % 2 for v in cntr) else print('Yes') # Hits:1.0, Total execution time: 10.292 ms, Average time per hit: 10.292 ms 

",p04012,True
"import string

import sys



input = sys.stdin.readline

AL = string.ascii_lowercase





def main():

    w = input().rstrip()

    ans = ""Yes""

    for s in AL:

        cnt = w.count(s)

        if cnt % 2 == 1:

            ans = ""No""

    print(ans)





if __name__ == ""__main__"":

    main()
",,p04012,False
"from collections import deque # Hits:1.0, Total execution time: 1.583 ms, Average time per hit: 1.583 ms 


n=deque(int(eval(input())) for _ in range(int(eval(input())))) # Hits:1.0, Total execution time: 53.916 ms, Average time per hit: 53.916 ms 


for _ in range(len(n)): m=n.popleft();print((max(n)));n.append(m) # Hits:4.0, Total execution time: 11.499 ms, Average time per hit: 2.87475 ms 
","n=[int(eval(input())) for _ in range(int(eval(input())))] # Hits:1.0, Total execution time: 52.166 ms, Average time per hit: 52.166 ms 


N1,N2=max(n),sorted(n)[-2] # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


for i in n: # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


  if i<N1: print(N1) # Hits:3.0, Total execution time: 6.209 ms, Average time per hit: 2.0696666666666665 ms 


  elif i==N1: print(N2) # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 38.584 ms, Average time per hit: 38.584 ms 


a=[int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 9.666 ms, Average time per hit: 9.666 ms 


t=copy.deepcopy(a) # Hits:1.0, Total execution time: 7.542 ms, Average time per hit: 7.542 ms 


t.sort() # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


for i in a: # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


  if i==t[-1]: # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


    print((t[-2])) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


    

  else:

    print((t[-1])) # Hits:2.0, Total execution time: 6.251 ms, Average time per hit: 3.1255 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 178.625 ms, Average time per hit: 178.625 ms 


a=[int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 11.291 ms, Average time per hit: 11.291 ms 


sa=sorted(a) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




for i in a: # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


  if sa[-1]==i: # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


    print((sa[-2])) # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


  else:

    print((sa[-1])) # Hits:2.0, Total execution time: 6.958 ms, Average time per hit: 3.479 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 43.834 ms, Average time per hit: 43.834 ms 


A = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    A.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.915 ms, Average time per hit: 3.305 ms 


c = [] # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


mL = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


mR = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


# m = 0

m = max(A) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


S = copy.copy(A) # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 


for s in S: # Hits:3.0, Total execution time: 0.418 ms, Average time per hit: 0.13933333333333334 ms 


    if s == m: # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


        S.remove(s) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    # print(S[i])

s = max(S)     # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


# print(s)

for i, a in enumerate(A): # Hits:4.0, Total execution time: 1.125 ms, Average time per hit: 0.28125 ms 


    # print(a)

    if a == m: # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


        print(s) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


    else:

        print(m) # Hits:2.0, Total execution time: 6.042 ms, Average time per hit: 3.021 ms 


    # if i == 0:

    #     mR = max(A[i + 1 :])

    #     print(mR)

    # elif i == len(A) - 1:

    #     mL = max(A[0: i])

    #     print(mL)

    # else:

    #     mL = max(A[0: i])

    #     mR = max(A[i + 1 :])

    #     m = max(mL, mR)

    #     print(m)

    ","import copy # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 30.709 ms, Average time per hit: 30.709 ms 


A = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


m = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


S = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


    a = int(eval(input())) # Hits:3.0, Total execution time: 8.875 ms, Average time per hit: 2.9583333333333335 ms 


    A.append(a) # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


    if m < a: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        s = m # Hits:2.0, Total execution time: 0.125 ms, Average time per hit: 0.0625 ms 


        m = a # Hits:2.0, Total execution time: 0.125 ms, Average time per hit: 0.0625 ms 


    elif s < a: # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


        s = a # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 




c = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


mL = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


mR = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


# m = 0





for i, a in enumerate(A): # Hits:4.0, Total execution time: 0.959 ms, Average time per hit: 0.23975 ms 


    # print(a)

    if a == m: # Hits:3.0, Total execution time: 0.46 ms, Average time per hit: 0.15333333333333335 ms 


        print(s) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


    else:

        print(m) # Hits:2.0, Total execution time: 6.124 ms, Average time per hit: 3.062 ms 


    # if i == 0:

    #     mR = max(A[i + 1 :])

    #     print(mR)

    # elif i == len(A) - 1:

    #     mL = max(A[0: i])

    #     print(mL)

    # else:

    #     mL = max(A[0: i])

    #     mR = max(A[i + 1 :])

    #     m = max(mL, mR)

    #     print(m)

    ",p02971,True
"import sys

# import numpy as np

from copy import deepcopy

input = sys.stdin.readline





def main():

    N = int(eval(input()))

    # A = np.array([int(input()) for _ in range(N)])

    A = [int(eval(input())) for _ in range(N)]

    # print(A)



    for j in range(N):

        B = deepcopy(A)

        del B[j]

        print((max(B)))

        # if j != A.index(max(A)):

        #     print(max(A))

        # else:

        #     ans = [x for i, x in enumerate(A) if i != j]

        #     print(max(ans))





if __name__ == ""__main__"":

    main()
",,p02971,False
"import copy # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 38.667 ms, Average time per hit: 38.667 ms 


a_lst = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


    a = int(eval(input())) # Hits:3.0, Total execution time: 9.792 ms, Average time per hit: 3.264 ms 


    a_lst.append(a) # Hits:3.0, Total execution time: 0.584 ms, Average time per hit: 0.19466666666666665 ms 




sorted_a_lst = sorted(a_lst) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


max_a = sorted_a_lst[-1] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




for a in a_lst: # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    if a == max_a: # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


        tmp = copy.copy(a_lst) # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


        tmp.remove(a) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


        tmp = sorted(tmp) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


        print((tmp[-1])) # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 


    else:

        print(max_a) # Hits:2.0, Total execution time: 9.334 ms, Average time per hit: 4.667 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 35.583 ms, Average time per hit: 35.583 ms 


a_lst = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    a = int(eval(input())) # Hits:3.0, Total execution time: 8.915 ms, Average time per hit: 2.9716666666666667 ms 


    a_lst.append(a) # Hits:3.0, Total execution time: 0.584 ms, Average time per hit: 0.19466666666666665 ms 




sorted_a_lst = sorted(a_lst) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


max_a = sorted_a_lst[-1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for a in a_lst: # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    if a == max_a: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        print((sorted_a_lst[-2])) # Hits:1.0, Total execution time: 1.041 ms, Average time per hit: 1.041 ms 


    else:

        print(max_a) # Hits:2.0, Total execution time: 5.959 ms, Average time per hit: 2.9795 ms 
",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 50.333 ms, Average time per hit: 50.333 ms 




Alist = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.834 ms, Average time per hit: 9.834 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    print((max(Alist[:i]+Alist[i+1:]))) # Hits:3.0, Total execution time: 7.916 ms, Average time per hit: 2.6386666666666665 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 39.0 ms, Average time per hit: 39.0 ms 




Alist = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.625 ms, Average time per hit: 9.625 ms 




Blist = sorted(Alist, reverse=True) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    if Alist[i] == Blist[0]: # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


        print((Blist[1])) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


    else:

        print((Blist[0])) # Hits:2.0, Total execution time: 6.208 ms, Average time per hit: 3.104 ms 

",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 32.917 ms, Average time per hit: 32.917 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.791 ms, Average time per hit: 9.791 ms 




ANS = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


  Alist = A[:i]+A[i+1:] # Hits:3.0, Total execution time: 1.125 ms, Average time per hit: 0.375 ms 


  ANS.append(max(Alist)) # Hits:3.0, Total execution time: 1.0 ms, Average time per hit: 0.3333333333333333 ms 




for i in ANS: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


    print(i) # Hits:3.0, Total execution time: 7.167 ms, Average time per hit: 2.389 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 40.458 ms, Average time per hit: 40.458 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 11.083 ms, Average time per hit: 11.083 ms 




maxA = max(A) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


max_in = A.index(max(A)) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


ANS = [maxA]*N # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


ANS[max_in] = max(A[:max_in]+A[max_in+1:]) # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 




for i in ANS: # Hits:4.0, Total execution time: 0.585 ms, Average time per hit: 0.14625 ms 


    print(i) # Hits:3.0, Total execution time: 8.916 ms, Average time per hit: 2.972 ms 

",p02971,True
"import copy # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 37.875 ms, Average time per hit: 37.875 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.333 ms, Average time per hit: 9.333 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.623 ms, Average time per hit: 0.15575 ms 


    a_copy = copy.deepcopy(a) # Hits:3.0, Total execution time: 17.793 ms, Average time per hit: 5.931 ms 


    a_copy.pop(i) # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 


    print((max(a_copy))) # Hits:3.0, Total execution time: 10.583 ms, Average time per hit: 3.5276666666666667 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 37.667 ms, Average time per hit: 37.667 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.25 ms, Average time per hit: 9.25 ms 


a_sort = sorted(a, reverse=True) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    if a[i] == a_sort[0]: # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


        print((a_sort[1])) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


    else:

        print((a_sort[0])) # Hits:2.0, Total execution time: 6.292 ms, Average time per hit: 3.146 ms 

",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 29.417 ms, Average time per hit: 29.417 ms 


A = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 11.209 ms, Average time per hit: 11.209 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


  print((max(A[:i] + A[i+1:]))) # Hits:3.0, Total execution time: 7.583 ms, Average time per hit: 2.5276666666666667 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 33.291 ms, Average time per hit: 33.291 ms 


A = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 8.417 ms, Average time per hit: 8.417 ms 


max_num, second_num = sorted(A, reverse=True)[:2] # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 




for a in A: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


  if a==max_num: print(second_num) # Hits:3.0, Total execution time: 1.25 ms, Average time per hit: 0.4166666666666667 ms 


  else: print(max_num) # Hits:2.0, Total execution time: 5.959 ms, Average time per hit: 2.9795 ms 
",p02971,True
"from collections import Counter # Hits:1.0, Total execution time: 1.416 ms, Average time per hit: 1.416 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 36.333 ms, Average time per hit: 36.333 ms 


al = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 8.875 ms, Average time per hit: 8.875 ms 


al_s = sorted(al, reverse=True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


c = Counter(al_s) # Hits:1.0, Total execution time: 2.834 ms, Average time per hit: 2.834 ms 


ck = list(c.keys()) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


cv = list(c.values()) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 






for a in al: # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    if a == ck[0]: # Hits:3.0, Total execution time: 0.501 ms, Average time per hit: 0.167 ms 


        if cv[0] == 1: # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


            print((ck[1])) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


        else:

            print((ck[0])) # Hits:2.0, Total execution time: 6.333 ms, Average time per hit: 3.1665 ms 


    else:

        print((ck[0])) # Hits:2.0, Total execution time: 9.083 ms, Average time per hit: 4.5415 ms 



","n = int(eval(input())) # Hits:1.0, Total execution time: 41.75 ms, Average time per hit: 41.75 ms 


al = list(int(eval(input())) for _ in range(n)) # Hits:1.0, Total execution time: 10.042 ms, Average time per hit: 10.042 ms 




al_s = sorted(al) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


fir = al_s[-1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


sec = al_s[-2] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for a in al: # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    if a == fir: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


        print(sec) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


    else:

        print(fir) # Hits:2.0, Total execution time: 6.333 ms, Average time per hit: 3.1665 ms 

",p02971,True
"import copy # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 37.667 ms, Average time per hit: 37.667 ms 


s = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for _ in range(n): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    s.append(int(eval(input()))) # Hits:3.0, Total execution time: 8.792 ms, Average time per hit: 2.9306666666666663 ms 


max_s = max(s) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


d = copy.copy(s) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    if max_s != s[i]: # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


        print(max_s) # Hits:2.0, Total execution time: 6.083 ms, Average time per hit: 3.0415 ms 


    else:

        d = copy.copy(s) # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


        del d[i] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


        print((max(d))) # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 32.0 ms, Average time per hit: 32.0 ms 


s = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


second = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


max_k = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for _ in range(n): # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


    k = int(eval(input())) # Hits:3.0, Total execution time: 10.0 ms, Average time per hit: 3.3333333333333335 ms 


    max_k, min_k = max(k, max_k), min(k, max_k) # Hits:3.0, Total execution time: 1.124 ms, Average time per hit: 0.3746666666666667 ms 


    second = max(min_k, second) # Hits:3.0, Total execution time: 0.54 ms, Average time per hit: 0.18 ms 


    s.append(k) # Hits:3.0, Total execution time: 0.709 ms, Average time per hit: 0.23633333333333334 ms 


kk = s.index(max_k) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    if i != kk: # Hits:3.0, Total execution time: 0.499 ms, Average time per hit: 0.16633333333333333 ms 


        print(max_k) # Hits:2.0, Total execution time: 6.375 ms, Average time per hit: 3.1875 ms 


    else:

        print(second) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 
",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 38.875 ms, Average time per hit: 38.875 ms 


s = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.417 ms, Average time per hit: 9.417 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


  temp=[s[x] for x in range(i)]+[s[x] for x in range(i+1, N)] # Hits:3.0, Total execution time: 4.333 ms, Average time per hit: 1.4443333333333332 ms 


  print((max(temp))) # Hits:3.0, Total execution time: 7.917 ms, Average time per hit: 2.639 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 42.375 ms, Average time per hit: 42.375 ms 


s=[int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 12.458 ms, Average time per hit: 12.458 ms 




temp=s.copy() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


s_max=max(temp) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


temp.remove(s_max) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


s_max2=max(temp) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


  if s[i]<s_max: # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


    print(s_max) # Hits:2.0, Total execution time: 8.584 ms, Average time per hit: 4.292 ms 


  else:

    print(s_max2) # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 38.25 ms, Average time per hit: 38.25 ms 




A = [0]*N # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




for r in range(N): # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


  A[r] = int(eval(input())) # Hits:3.0, Total execution time: 9.416 ms, Average time per hit: 3.1386666666666665 ms 


Elias_A = copy.copy(A) # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


A.sort() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


Sorted_A = copy.copy(A) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


  

for r in range(N): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


  A.remove(Elias_A[r]) # Hits:3.0, Total execution time: 0.875 ms, Average time per hit: 0.2916666666666667 ms 


  print((A[N-2])) # Hits:3.0, Total execution time: 7.209 ms, Average time per hit: 2.403 ms 


  A = copy.copy(Sorted_A) # Hits:3.0, Total execution time: 2.042 ms, Average time per hit: 0.6806666666666666 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 46.75 ms, Average time per hit: 46.75 ms 


A = [0]*N # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




for r in range(N): A[r] = int(eval(input())) # Hits:4.0, Total execution time: 13.543 ms, Average time per hit: 3.38575 ms 


A_max = max(A) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


A_sec = sorted(A)[-2] # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




for r in range(N): # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


  if A[r] == A_max: print(A_sec) # Hits:3.0, Total execution time: 1.333 ms, Average time per hit: 0.4443333333333333 ms 


  elif A[r] == A_sec: print(A_max) # Hits:2.0, Total execution time: 1.125 ms, Average time per hit: 0.5625 ms 


  else: print(A_max) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 
",p02971,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 41.041 ms, Average time per hit: 41.041 ms 


a=[int(eval(input()))for _ in range(n)] # Hits:1.0, Total execution time: 9.542 ms, Average time per hit: 9.542 ms 


maxmax=max(a) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.668 ms, Average time per hit: 0.167 ms 


  if a[i]==maxmax: # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


    print((sorted(a)[-2])) # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 


  else:

    print(maxmax) # Hits:2.0, Total execution time: 6.208 ms, Average time per hit: 3.104 ms 

","n=int(eval(input())) # Hits:1.0, Total execution time: 38.709 ms, Average time per hit: 38.709 ms 


a=[int(eval(input()))for _ in range(n)] # Hits:1.0, Total execution time: 9.0 ms, Average time per hit: 9.0 ms 


b=sorted(a) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




for i in a: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


  if i==b[-1]: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


    print((b[-2])) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


  else:

    print((b[-1])) # Hits:2.0, Total execution time: 5.834 ms, Average time per hit: 2.917 ms 
",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 48.167 ms, Average time per hit: 48.167 ms 


a = list(int(eval(input())) for i in range(n)) # Hits:1.0, Total execution time: 11.417 ms, Average time per hit: 11.417 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


    l = a[:] # Hits:3.0, Total execution time: 0.792 ms, Average time per hit: 0.264 ms 


    l.pop(i) # Hits:3.0, Total execution time: 0.916 ms, Average time per hit: 0.3053333333333333 ms 


    print((max(l))) # Hits:3.0, Total execution time: 8.666 ms, Average time per hit: 2.8886666666666665 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 37.5 ms, Average time per hit: 37.5 ms 


a = list(int(eval(input())) for i in range(n)) # Hits:1.0, Total execution time: 9.875 ms, Average time per hit: 9.875 ms 


l = a[:] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


l.sort(reverse=True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


x = l[0] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


y = l[1] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    if a[i] == x: # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


        ans = y # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    else:

        ans = x # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


    print(ans) # Hits:3.0, Total execution time: 7.125 ms, Average time per hit: 2.375 ms 
",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 30.0 ms, Average time per hit: 30.0 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.125 ms, Average time per hit: 9.125 ms 


n = A.index(max(A)) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 




for i in range(n):     # Hits:2.0, Total execution time: 0.459 ms, Average time per hit: 0.2295 ms 


    print((max(A)))  # Hits:1.0, Total execution time: 5.167 ms, Average time per hit: 5.167 ms 


print((sorted(A)[-2])) # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


for i in range(N-n-1): # Hits:2.0, Total execution time: 0.458 ms, Average time per hit: 0.229 ms 


    print((max(A)))    # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 37.125 ms, Average time per hit: 37.125 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.0 ms, Average time per hit: 9.0 ms 


n = A.index(max(A)) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


m = max(A) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


A.remove(max(A)) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




for i in range(n):     # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


    print(m) # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 


print((max(A))) # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


for i in range(N-n-1): # Hits:2.0, Total execution time: 0.458 ms, Average time per hit: 0.229 ms 


    print(m)    # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 44.458 ms, Average time per hit: 44.458 ms 


a = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.665 ms, Average time per hit: 0.16625 ms 


    a.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.417 ms, Average time per hit: 3.139 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    buf = copy.deepcopy(a) # Hits:3.0, Total execution time: 21.042 ms, Average time per hit: 7.014 ms 


    buf.pop(i) # Hits:3.0, Total execution time: 0.75 ms, Average time per hit: 0.25 ms 


    print((""{}"".format(max(buf)))) # Hits:3.0, Total execution time: 14.292 ms, Average time per hit: 4.764 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 42.958 ms, Average time per hit: 42.958 ms 


a = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    a.append(int(eval(input()))) # Hits:3.0, Total execution time: 8.917 ms, Average time per hit: 2.9723333333333333 ms 




_max = max(a) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


max_idx = a.index(_max) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


a.remove(_max) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


second = max(a) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    if i == max_idx: # Hits:3.0, Total execution time: 0.374 ms, Average time per hit: 0.12466666666666668 ms 


        print((""{}"".format(second))) # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 


    else:

        print((""{}"".format(_max))) # Hits:2.0, Total execution time: 5.792 ms, Average time per hit: 2.896 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 37.875 ms, Average time per hit: 37.875 ms 


l=[int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.25 ms, Average time per hit: 9.25 ms 






k=sorted(l) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


dic_lst={} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in l: # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


  if i not in dic_lst: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    dic_lst[i]=1 # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


  else:

    dic_lst[i]+=1 # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


for i in l: # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


  max_num=max(dic_lst.keys()) # Hits:3.0, Total execution time: 1.041 ms, Average time per hit: 0.347 ms 


  if i<max_num: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    print(max_num) # Hits:2.0, Total execution time: 6.542 ms, Average time per hit: 3.271 ms 


  if i==max_num: # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


    if dic_lst[i]>1: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


      print(max_num) # Hits:2.0, Total execution time: 6.75 ms, Average time per hit: 3.375 ms 


    elif dic_lst[i]==1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


      print((k[-2])) # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 

","n=int(eval(input())) # Hits:1.0, Total execution time: 40.667 ms, Average time per hit: 40.667 ms 


l=[int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 10.584 ms, Average time per hit: 10.584 ms 


k=sorted(l) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




for i in l: # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


	if i<k[-1]: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


		print((k[-1])) # Hits:2.0, Total execution time: 5.583 ms, Average time per hit: 2.7915 ms 


	if i==k[-1]: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


		print((k[-2])) # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 

",p02971,True
"import copy # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 27.541 ms, Average time per hit: 27.541 ms 


l1=[int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 10.791 ms, Average time per hit: 10.791 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


  l2 = copy.copy(l1) # Hits:3.0, Total execution time: 2.458 ms, Average time per hit: 0.8193333333333334 ms 


  del l2[i] # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


  print((max(l2))) # Hits:3.0, Total execution time: 14.958 ms, Average time per hit: 4.986 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 38.208 ms, Average time per hit: 38.208 ms 


l1=[int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 9.167 ms, Average time per hit: 9.167 ms 


l2=sorted(l1) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


max1=l2[-1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


max2=l2[-2] # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in l1: # Hits:4.0, Total execution time: 0.376 ms, Average time per hit: 0.094 ms 


  if i == max1: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    print(max2) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


  else:

    print(max1) # Hits:2.0, Total execution time: 5.666 ms, Average time per hit: 2.833 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 37.584 ms, Average time per hit: 37.584 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.083 ms, Average time per hit: 9.083 ms 




jumpIndex = -1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    if i < jumpIndex: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        A.remove(A[i])

        print(tmpMax)

        continue

    tmp = copy.copy(A) # Hits:3.0, Total execution time: 2.5 ms, Average time per hit: 0.8333333333333334 ms 


    tmp.remove(A[i]) # Hits:3.0, Total execution time: 0.75 ms, Average time per hit: 0.25 ms 


    tmpMax = max(tmp) # Hits:3.0, Total execution time: 0.875 ms, Average time per hit: 0.2916666666666667 ms 


    for j in range(i + 1, N): # Hits:6.0, Total execution time: 1.208 ms, Average time per hit: 0.20133333333333334 ms 


        if A[i] == tmpMax: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


            jumpIndex = i # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    print(tmpMax) # Hits:3.0, Total execution time: 7.001 ms, Average time per hit: 2.3336666666666663 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 38.5 ms, Average time per hit: 38.5 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.959 ms, Average time per hit: 9.959 ms 




maxNum = max(A) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


index = -1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


    if A[i] == maxNum: # Hits:3.0, Total execution time: 0.501 ms, Average time per hit: 0.167 ms 


        index = i # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    if i != index: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


        print(maxNum) # Hits:2.0, Total execution time: 6.416 ms, Average time per hit: 3.208 ms 


        continue # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


    else:

        A.remove(maxNum) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


        print((max(A))) # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 
",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 38.583 ms, Average time per hit: 38.583 ms 


from collections import Counter # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


A = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


  A.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.626 ms, Average time per hit: 3.2086666666666663 ms 




sorted_A = sorted(A, reverse=True)   # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


for a in A: # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


  tmp_A = list(sorted_A) # Hits:3.0, Total execution time: 0.667 ms, Average time per hit: 0.22233333333333336 ms 


  tmp_A.remove(a) # Hits:3.0, Total execution time: 0.792 ms, Average time per hit: 0.264 ms 


  print((tmp_A[0])) # Hits:3.0, Total execution time: 7.749 ms, Average time per hit: 2.583 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 36.084 ms, Average time per hit: 36.084 ms 


A = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


largest = -1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


second_largest = -1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


more_than_one_largetst = False # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


  a = int(eval(input())) # Hits:3.0, Total execution time: 8.917 ms, Average time per hit: 2.9723333333333333 ms 


  A.append(a) # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


  if largest == a: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    more_than_one_largest = True # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


  else:

    if largest < a: # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


      second_largest = largest # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


      largest = a # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


      more_than_one_largest = False # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


    else:

      if second_largest < a: # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


        second_largest = a # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


      else:

        pass



for a in A: # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


  if a != largest: # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


    print(largest) # Hits:2.0, Total execution time: 6.126 ms, Average time per hit: 3.063 ms 


  else:

    if more_than_one_largest: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


      print(largest) # Hits:2.0, Total execution time: 5.833 ms, Average time per hit: 2.9165 ms 


    else:

      print(second_largest) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 

",p02971,True
"import copy # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


a = int(eval(input())) # Hits:1.0, Total execution time: 38.583 ms, Average time per hit: 38.583 ms 


a_list = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(a): # Hits:4.0, Total execution time: 0.875 ms, Average time per hit: 0.21875 ms 


    a_list.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.75 ms, Average time per hit: 3.25 ms 


b_list = copy.copy(a_list) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


for i in range(len(a_list)): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


    b_list.pop(i) # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


    print((max(b_list))) # Hits:3.0, Total execution time: 6.668 ms, Average time per hit: 2.2226666666666666 ms 


    b_list = copy.copy(a_list) # Hits:3.0, Total execution time: 1.499 ms, Average time per hit: 0.4996666666666667 ms 
","import sys # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


a = int(eval(input())) # Hits:1.0, Total execution time: 37.625 ms, Average time per hit: 37.625 ms 


a_list = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(a): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    a_list.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.167 ms, Average time per hit: 3.0556666666666663 ms 


max_num = max(a_list) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


if a_list.count(max_num) != 1: # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    for i in range(a): # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


        print(max_num) # Hits:2.0, Total execution time: 5.832 ms, Average time per hit: 2.916 ms 


else:

    sec_num = sorted(a_list)[-2] # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


    for i in a_list: # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


        if i == max_num: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


            print(sec_num) # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


        else:

            print(max_num) # Hits:2.0, Total execution time: 5.916 ms, Average time per hit: 2.958 ms 
",p02971,True
"import math # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


import copy # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


def py(): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print(""Yes"")

def pn(): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    print(""No"")

def iin(): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    x = int(eval(input()))

    return x



neko = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


nya = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


nuko = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




a = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


n = iin() # Hits:1.0, Total execution time: 41.084 ms, Average time per hit: 41.084 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.875 ms, Average time per hit: 0.21875 ms 


    a.append(iin()) # Hits:3.0, Total execution time: 11.208 ms, Average time per hit: 3.736 ms 


    if neko < a[i]: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


        neko = a[i] # Hits:2.0, Total execution time: 0.334 ms, Average time per hit: 0.167 ms 


b = copy.copy(a) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


a.remove(neko) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


nya = max(a) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    if b[i] == neko: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


        print(nya) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


    else:

        print(neko) # Hits:2.0, Total execution time: 5.75 ms, Average time per hit: 2.875 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 39.625 ms, Average time per hit: 39.625 ms 


a = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.751 ms, Average time per hit: 0.18775 ms 


    a.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.374 ms, Average time per hit: 3.1246666666666667 ms 


b = sorted(a,reverse = True) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


max1 = b[0] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


max2 = b[1] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in a: # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    print((max2 if i == max1 else max1)) # Hits:3.0, Total execution time: 7.416 ms, Average time per hit: 2.472 ms 

",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 35.458 ms, Average time per hit: 35.458 ms 


a = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 9.708 ms, Average time per hit: 9.708 ms 


b = [num for num in a] # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


x = max(a) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


for i in range(n) : # Hits:4.0, Total execution time: 0.71 ms, Average time per hit: 0.1775 ms 


    if a[i] != x : # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


        print(x) # Hits:2.0, Total execution time: 6.0 ms, Average time per hit: 3.0 ms 


    else :

        b.remove(a[i]) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


        print((max(b))) # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


        b.append(a[i]) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 29.042 ms, Average time per hit: 29.042 ms 


a = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 8.417 ms, Average time per hit: 8.417 ms 


x = max(a) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


m = a.index(x) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


a.remove(x) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


y = max(a) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(n) : # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


    if i == m : # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        print(y) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


    else :

        print(x) # Hits:2.0, Total execution time: 5.792 ms, Average time per hit: 2.896 ms 
",p02971,True
"import heapq # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 40.333 ms, Average time per hit: 40.333 ms 


a=[-int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 9.667 ms, Average time per hit: 9.667 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


  x=a[:i]+a[i+1:] # Hits:3.0, Total execution time: 1.418 ms, Average time per hit: 0.4726666666666667 ms 


  heapq.heapify(x) # Hits:3.0, Total execution time: 0.875 ms, Average time per hit: 0.2916666666666667 ms 


  print((-heapq.heappop(x))) # Hits:3.0, Total execution time: 7.584 ms, Average time per hit: 2.528 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 36.375 ms, Average time per hit: 36.375 ms 


a=[int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 9.667 ms, Average time per hit: 9.667 ms 


b=[a[i] for i in range(n)] # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


b.sort() # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


m=b[n-1] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


m2=b[n-2] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


  if a[i]==m: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


    print(m2) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


  else:

    print(m) # Hits:2.0, Total execution time: 6.375 ms, Average time per hit: 3.1875 ms 
",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 39.792 ms, Average time per hit: 39.792 ms 




A = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    A.append(int(eval(input()))) # Hits:3.0, Total execution time: 8.626 ms, Average time per hit: 2.8753333333333333 ms 


    

for i in range(N): # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


    tmp = A[i] # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


    A[i] = 0 # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    print((max(A))) # Hits:3.0, Total execution time: 7.333 ms, Average time per hit: 2.4443333333333337 ms 


    A[i] = tmp # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 38.167 ms, Average time per hit: 38.167 ms 




A = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.748 ms, Average time per hit: 0.187 ms 


    A.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.333 ms, Average time per hit: 3.111 ms 




M = sorted(A) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


    if A[i] == M[-1]: # Hits:3.0, Total execution time: 0.707 ms, Average time per hit: 0.23566666666666666 ms 


        print((M[-2])) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


    else:

        print((M[-1])) # Hits:2.0, Total execution time: 6.125 ms, Average time per hit: 3.0625 ms 
",p02971,True
"import sys # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


sys.setrecursionlimit(10**6) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


from collections import deque # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 37.25 ms, Average time per hit: 37.25 ms 


l = deque([int(eval(input())) for _ in range(n)][::-1]) # Hits:1.0, Total execution time: 9.709 ms, Average time per hit: 9.709 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.543 ms, Average time per hit: 0.13575 ms 


    num = l.pop() # Hits:3.0, Total execution time: 0.498 ms, Average time per hit: 0.166 ms 


    print((max(l))) # Hits:3.0, Total execution time: 6.916 ms, Average time per hit: 2.3053333333333335 ms 


    l.appendleft(num) # Hits:3.0, Total execution time: 0.709 ms, Average time per hit: 0.23633333333333334 ms 


        

        ","n = int(eval(input())) # Hits:1.0, Total execution time: 37.917 ms, Average time per hit: 37.917 ms 


l = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.542 ms, Average time per hit: 9.542 ms 


max_num = max(l) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


second_num = sorted(l)[-2] # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


   if l[i] == max_num: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


       print(second_num) # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


   else:

       print(max_num) # Hits:2.0, Total execution time: 9.0 ms, Average time per hit: 4.5 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 37.833 ms, Average time per hit: 37.833 ms 


A = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


  a = int(eval(input())) # Hits:3.0, Total execution time: 9.249 ms, Average time per hit: 3.083 ms 


  A.append(a) # Hits:3.0, Total execution time: 0.582 ms, Average time per hit: 0.194 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


  A_ = copy.deepcopy(A) # Hits:3.0, Total execution time: 17.25 ms, Average time per hit: 5.75 ms 


  A_.pop(i) # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


  print((max(A_))) # Hits:3.0, Total execution time: 13.792 ms, Average time per hit: 4.597333333333333 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 38.792 ms, Average time per hit: 38.792 ms 


A = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


  a = int(eval(input())) # Hits:3.0, Total execution time: 9.167 ms, Average time per hit: 3.0556666666666663 ms 


  A.append(a) # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


m = max(A) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


c = A.count(m) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




if len(set(A)) > 1: # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


	m2 = sorted(set(A))[-2] # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




bool = False # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


if c == 1: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


  bool = True # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 




for i in A: # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


  if bool and i==m: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


    print(m2) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


  else:

    print(m) # Hits:2.0, Total execution time: 8.333 ms, Average time per hit: 4.1665 ms 
",p02971,True
"import math # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


import copy # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 




def first(a): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


 a=A



N=int(eval(input())) # Hits:1.0, Total execution time: 38.25 ms, Average time per hit: 38.25 ms 


A=list(map(int,[eval(input()) for i in range(N)])) # Hits:1.0, Total execution time: 10.25 ms, Average time per hit: 10.25 ms 






for i in range(N): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


  temp=copy.copy(A) # Hits:3.0, Total execution time: 2.416 ms, Average time per hit: 0.8053333333333333 ms 


  temp.pop(i) # Hits:3.0, Total execution time: 0.667 ms, Average time per hit: 0.22233333333333336 ms 


  print((max(temp))) # Hits:3.0, Total execution time: 7.375 ms, Average time per hit: 2.4583333333333335 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 41.333 ms, Average time per hit: 41.333 ms 


list = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 10.458 ms, Average time per hit: 10.458 ms 


list2 = sorted(list) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


m1 = list2[-1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


m2 = list2[-2] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


 

for i in list: # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


    if i == m1: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        print(m2) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


    else:

        print(m1) # Hits:2.0, Total execution time: 5.792 ms, Average time per hit: 2.896 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




N = eval(input()) # Hits:1.0, Total execution time: 37.584 ms, Average time per hit: 37.584 ms 


A = [0]*N # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


tmp = [0]*N # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(0,N): # Hits:4.0, Total execution time: 0.791 ms, Average time per hit: 0.19775 ms 


  tmp[i]=int(input()) # Hits:3.0, Total execution time: 2.96 ms, Average time per hit: 0.9866666666666666 ms 


for i in range(0,N): # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


  A[i] = copy.deepcopy(tmp) # Hits:3.0, Total execution time: 15.584 ms, Average time per hit: 5.1946666666666665 ms 




for i in range(0,N): # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


  A[i].pop(i) # Hits:3.0, Total execution time: 0.792 ms, Average time per hit: 0.264 ms 


  print(max(A[i])) # Hits:3.0, Total execution time: 11.293 ms, Average time per hit: 3.7643333333333335 ms 
","N = int(input()) # Hits:1.0, Total execution time: 40.917 ms, Average time per hit: 40.917 ms 


A = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(0,N): # Hits:4.0, Total execution time: 0.834 ms, Average time per hit: 0.2085 ms 


  A.append(int(input())) # Hits:3.0, Total execution time: 3.749 ms, Average time per hit: 1.2496666666666667 ms 


A = list(enumerate(A)) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


A = sorted(A, key=lambda x: x[1]) # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 


max_A = A[N-1][1] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


second_max_A = A[N-2][1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


A = sorted(A,key=lambda x: x[0]) # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


for i in range(0,N): # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


  if A[i][1] == max_A: # Hits:3.0, Total execution time: 0.626 ms, Average time per hit: 0.20866666666666667 ms 


    print(second_max_A) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


  else:

    print(max_A) # Hits:2.0, Total execution time: 9.417 ms, Average time per hit: 4.7085 ms 

",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 38.333 ms, Average time per hit: 38.333 ms 


A = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.542 ms, Average time per hit: 9.542 ms 


max_id = A.index(max(A)) # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


A = sorted(A, reverse=True) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    if i == max_id: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        # 最大値が取り除かれるので2番目に大きい数値を出力

        print((A[1])) # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


    else:

        # 最大値が残っているので，最大値を出力

        print((A[0])) # Hits:2.0, Total execution time: 6.208 ms, Average time per hit: 3.104 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 36.375 ms, Average time per hit: 36.375 ms 


A = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.0 ms, Average time per hit: 9.0 ms 


maxA = max(A) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


maxIdx = A.index(maxA) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


  if i != maxIdx: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    print(maxA) # Hits:2.0, Total execution time: 5.707 ms, Average time per hit: 2.8535 ms 


  else:

    print((max(A[:i] + A[i + 1:]))) # Hits:1.0, Total execution time: 1.542 ms, Average time per hit: 1.542 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


N=int(eval(input())) # Hits:1.0, Total execution time: 37.625 ms, Average time per hit: 37.625 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.583 ms, Average time per hit: 9.583 ms 


big=max(A) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


flag=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    if A[i]==big: # Hits:3.0, Total execution time: 0.584 ms, Average time per hit: 0.19466666666666665 ms 


        if flag==0: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


            flag==1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


            hoge=copy.copy(A) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


            hoge.pop(i) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


            bigger=max(hoge) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


            if bigger==big: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


                print(big) # Hits:2.0, Total execution time: 6.126 ms, Average time per hit: 3.063 ms 


            else:

                print(bigger) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


        else:

            print(bigger)

    else:

        print(big) # Hits:2.0, Total execution time: 5.874 ms, Average time per hit: 2.937 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 37.417 ms, Average time per hit: 37.417 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.083 ms, Average time per hit: 9.083 ms 


B=sorted(A) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


big=max(A) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


flag=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


big2=B[-2] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in A: # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    if i==big: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


        print(big2) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


    else:

        print(big) # Hits:2.0, Total execution time: 5.958 ms, Average time per hit: 2.979 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 36.416 ms, Average time per hit: 36.416 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.458 ms, Average time per hit: 9.458 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


  tmp = copy.deepcopy(a) # Hits:3.0, Total execution time: 17.209 ms, Average time per hit: 5.736333333333333 ms 


  tmp[i] = 0 # Hits:3.0, Total execution time: 0.457 ms, Average time per hit: 0.15233333333333335 ms 


  print((max(tmp))) # Hits:3.0, Total execution time: 11.292 ms, Average time per hit: 3.764 ms 


  tmp = a # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 37.166 ms, Average time per hit: 37.166 ms 


a  =[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.665 ms, Average time per hit: 0.16625 ms 


  x = int(eval(input())) # Hits:3.0, Total execution time: 8.791 ms, Average time per hit: 2.9303333333333335 ms 


  a.append(x) # Hits:3.0, Total execution time: 0.668 ms, Average time per hit: 0.22266666666666665 ms 


ma = max(a) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


b = sorted(a) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


  if a[i] != ma: # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


    print(ma) # Hits:2.0, Total execution time: 6.208 ms, Average time per hit: 3.104 ms 


  else:

    print((b[-2])) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


    

  
",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 39.792 ms, Average time per hit: 39.792 ms 


A = list() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


B = [0] * 200000 # Hits:1.0, Total execution time: 27.208 ms, Average time per hit: 27.208 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


  i = int(eval(input())) # Hits:3.0, Total execution time: 8.875 ms, Average time per hit: 2.9583333333333335 ms 


  A.append(i) # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 




for k in range(N): # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


  if max(A) != A[k]: # Hits:3.0, Total execution time: 0.834 ms, Average time per hit: 0.278 ms 


    print((max(A))) # Hits:2.0, Total execution time: 5.959 ms, Average time per hit: 2.9795 ms 


  else:

    B[k] = A[k] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    A[k] = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print((max(A))) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


    A[k] = B[k] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 36.333 ms, Average time per hit: 36.333 ms 


A = list() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


  i = int(eval(input())) # Hits:3.0, Total execution time: 8.584 ms, Average time per hit: 2.8613333333333335 ms 


  A.append(i) # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


  

ma = max(A) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


sa = sorted(A) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




for k in range(N): # Hits:4.0, Total execution time: 0.665 ms, Average time per hit: 0.16625 ms 


  if ma != A[k]: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


    print(ma) # Hits:2.0, Total execution time: 6.25 ms, Average time per hit: 3.125 ms 


  else:

    print((sa[-2])) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 
",p02971,True
"

n = int(eval(input())) # Hits:1.0, Total execution time: 40.542 ms, Average time per hit: 40.542 ms 


a = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 9.083 ms, Average time per hit: 9.083 ms 




a_max = max(a) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


b = a.copy() # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


b.remove(a_max) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


a_max_second = max(b) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




for a_i in a: # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    if a_i != a_max: # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


        print(a_max) # Hits:2.0, Total execution time: 5.917 ms, Average time per hit: 2.9585 ms 


    else:

        print(a_max_second) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 
",,p02971,True
"from collections import deque # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


import sys # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 38.834 ms, Average time per hit: 38.834 ms 


A = deque([int(eval(input())) for _ in range(N)]) # Hits:1.0, Total execution time: 10.0 ms, Average time per hit: 10.0 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    tmp = A.popleft() # Hits:3.0, Total execution time: 0.835 ms, Average time per hit: 0.2783333333333333 ms 


    print((max(A))) # Hits:3.0, Total execution time: 9.833 ms, Average time per hit: 3.2776666666666667 ms 


    A.append(tmp) # Hits:3.0, Total execution time: 0.584 ms, Average time per hit: 0.19466666666666665 ms 
","import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 29.208 ms, Average time per hit: 29.208 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 7.292 ms, Average time per hit: 7.292 ms 


B = sorted(A) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for x in A: # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    if x == B[-1]: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


        print((B[-2])) # Hits:1.0, Total execution time: 1.041 ms, Average time per hit: 1.041 ms 


    else:

        print((B[-1])) # Hits:2.0, Total execution time: 6.333 ms, Average time per hit: 3.1665 ms 
",p02971,True
"import copy

N,*D=list(map(int,open(0).read().split()))

for i in range(N):

  A=copy.deepcopy(D)

  del A[i]

  print((max(A)))","N,*D=map(int,open(0).read().split())

S=sorted(D,reverse=True)

if S[1]==S[0]:

  [print(S[0]) for i in range(N)]

else:

  import numpy as np

  max_i=np.arange(N)[np.array(D)==S[0]]

  for i in range(N):

    if i==max_i:

      print(S[1])

    else:

      print(S[0])
",p02971,False
"N = int(eval(input())) # Hits:1.0, Total execution time: 36.708 ms, Average time per hit: 36.708 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 9.875 ms, Average time per hit: 9.875 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    tmp = A.copy() # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 


    tmp.pop(i) # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


    tmp.sort() # Hits:3.0, Total execution time: 0.751 ms, Average time per hit: 0.25033333333333335 ms 


    print((tmp[-1])) # Hits:3.0, Total execution time: 7.625 ms, Average time per hit: 2.5416666666666665 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 39.834 ms, Average time per hit: 39.834 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 9.542 ms, Average time per hit: 9.542 ms 


As = sorted(A) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.668 ms, Average time per hit: 0.167 ms 


    if A[i] == As[-1]: # Hits:3.0, Total execution time: 0.75 ms, Average time per hit: 0.25 ms 


        print((As[-2])) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


    else:

        print((As[-1])) # Hits:2.0, Total execution time: 6.292 ms, Average time per hit: 3.146 ms 

",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 36.916 ms, Average time per hit: 36.916 ms 


A = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


  a = int(eval(input())) # Hits:3.0, Total execution time: 8.709 ms, Average time per hit: 2.903 ms 


  A.append(a) # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


  

A2 = sorted(A) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


mx1 = A2[-1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


mx2 = A2[-2] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


  if i == A.index(mx1): # Hits:3.0, Total execution time: 0.75 ms, Average time per hit: 0.25 ms 


    print(mx2) # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 


  else:

    print(mx1) # Hits:2.0, Total execution time: 18.042 ms, Average time per hit: 9.021 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 37.208 ms, Average time per hit: 37.208 ms 


A = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


  a = int(eval(input())) # Hits:3.0, Total execution time: 8.874 ms, Average time per hit: 2.958 ms 


  A.append(a) # Hits:3.0, Total execution time: 0.668 ms, Average time per hit: 0.22266666666666665 ms 


  

A2 = sorted(A) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


mx1 = A2[-1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


mx2 = A2[-2] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ind = A.index(mx1) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


  if i != ind: # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


    print(mx1) # Hits:2.0, Total execution time: 9.25 ms, Average time per hit: 4.625 ms 


  else:

    print(mx2) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 

",p02971,True
"a=int(eval(input())) # Hits:1.0, Total execution time: 32.083 ms, Average time per hit: 32.083 ms 


b=[int(eval(input())) for i in range(a)] # Hits:1.0, Total execution time: 8.958 ms, Average time per hit: 8.958 ms 


m=max(b)  # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




if b.count(m)>=2: # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    for i in range(a): # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


        print (m) # Hits:2.0, Total execution time: 5.667 ms, Average time per hit: 2.8335 ms 


else:

    c=b.copy() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    c.sort(reverse=True) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


    m2=c[1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    for i in range(a): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


        if b[i]==m: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


            print(m2) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


        else:

            print (m) # Hits:2.0, Total execution time: 5.958 ms, Average time per hit: 2.979 ms 


            


","n = int(eval(input())) # Hits:1.0, Total execution time: 34.583 ms, Average time per hit: 34.583 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.416 ms, Average time per hit: 9.416 ms 


maxa = max(a) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


# print(maxa)

if a.count(maxa) == 1: # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    b = sorted(a, reverse=True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




    maxa2 = b[1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    for i in range(n): # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


        if a[i] == maxa: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


            print(maxa2) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


        else:

            print(maxa) # Hits:2.0, Total execution time: 6.167 ms, Average time per hit: 3.0835 ms 




else:

    for i in range(n): # Hits:3.0, Total execution time: 0.668 ms, Average time per hit: 0.22266666666666665 ms 


        print(maxa) # Hits:2.0, Total execution time: 7.916 ms, Average time per hit: 3.958 ms 

",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 37.834 ms, Average time per hit: 37.834 ms 


numList  = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.5 ms, Average time per hit: 9.5 ms 


maxVal = max(numList) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


workList = numList[:] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


workList.remove(maxVal) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


secondVal = max(workList) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for num in numList: # Hits:4.0, Total execution time: 0.54 ms, Average time per hit: 0.135 ms 


  if num != maxVal: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    print(maxVal) # Hits:2.0, Total execution time: 6.042 ms, Average time per hit: 3.021 ms 


  else:

    print(secondVal) # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 
",,p02971,True
"import copy # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 36.917 ms, Average time per hit: 36.917 ms 


A_list= [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for _ in range(N): # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


    A_list.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.207 ms, Average time per hit: 3.069 ms 




for i, a in enumerate(A_list): # Hits:4.0, Total execution time: 0.959 ms, Average time per hit: 0.23975 ms 


    temp_A_list = copy.copy(A_list) # Hits:3.0, Total execution time: 2.083 ms, Average time per hit: 0.6943333333333334 ms 


    temp_A_list.pop(i) # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


    print((max(temp_A_list))) # Hits:3.0, Total execution time: 7.249 ms, Average time per hit: 2.4163333333333337 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 36.5 ms, Average time per hit: 36.5 ms 


A_list= [] # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for _ in range(N): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    A_list.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.042 ms, Average time per hit: 3.014 ms 




sorted_A_list = sorted(A_list, reverse=True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




for a in A_list: # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


    if a == sorted_A_list[0]: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


        ans = sorted_A_list[1] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    else:

        ans = sorted_A_list[0] # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


    print(ans) # Hits:3.0, Total execution time: 6.708 ms, Average time per hit: 2.236 ms 
",p02971,True
"import sys # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


n = int(sys.stdin.readline()) # Hits:1.0, Total execution time: 36.25 ms, Average time per hit: 36.25 ms 


A = [int(sys.stdin.readline()) for _ in range(n)] # Hits:1.0, Total execution time: 3.041 ms, Average time per hit: 3.041 ms 


tmp = sorted(A) # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.792 ms, Average time per hit: 0.198 ms 


    if A[i] == max(A): # Hits:3.0, Total execution time: 1.458 ms, Average time per hit: 0.486 ms 


        print((tmp[-2])) # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 


    else:

        print((max(A))) # Hits:2.0, Total execution time: 8.25 ms, Average time per hit: 4.125 ms 
","import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


n = int(sys.stdin.readline()) # Hits:1.0, Total execution time: 34.083 ms, Average time per hit: 34.083 ms 


A = [int(sys.stdin.readline()) for _ in range(n)] # Hits:1.0, Total execution time: 3.0 ms, Average time per hit: 3.0 ms 


tmp = sorted(A) # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


maxa = max(A) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    if A[i] == maxa: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


        print((tmp[-2])) # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 


    else:

        print(maxa) # Hits:2.0, Total execution time: 6.542 ms, Average time per hit: 3.271 ms 
",p02971,True
"def returnmax(numbers, i, N): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    nowmax = 0

    for j in range(N):

        if j != i:

            if nowmax < numbers[j]:

                nowmax = numbers[j]

    return nowmax

    

numbers = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 38.917 ms, Average time per hit: 38.917 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.875 ms, Average time per hit: 0.21875 ms 


    numbers.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.708 ms, Average time per hit: 3.236 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    print((returnmax(numbers, i, N))) # Hits:3.0, Total execution time: 11.791 ms, Average time per hit: 3.9303333333333335 ms 

","def returnsecond(numbers, N): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    first = 0

    firc = 0;

    second = 0

    for j in range(N):

        if first < numbers[j]:

            first = numbers[j]

            firc = j

    for j in range(N):

        if(j != firc and second <= numbers[j]):

            second = numbers[j]



    return first, second;





numbers = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 37.416 ms, Average time per hit: 37.416 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    numbers.append(int(eval(input()))) # Hits:3.0, Total execution time: 8.792 ms, Average time per hit: 2.9306666666666663 ms 


first, second = returnsecond(numbers, N) # Hits:1.0, Total execution time: 2.5 ms, Average time per hit: 2.5 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    if numbers[i] != first: # Hits:3.0, Total execution time: 0.457 ms, Average time per hit: 0.15233333333333335 ms 


        print(first) # Hits:2.0, Total execution time: 5.834 ms, Average time per hit: 2.917 ms 


    else:

        print(second) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 

",p02971,True
"#C - Exception Handling

N = int(eval(input())) # Hits:1.0, Total execution time: 40.25 ms, Average time per hit: 40.25 ms 


A = list(int(eval(input())) for _ in range(N)) # Hits:1.0, Total execution time: 10.583 ms, Average time per hit: 10.583 ms 


A_sorted = list(set(sorted(A, reverse = False))) # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 




ans = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in A: # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


    A_copy = A.copy() # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


    A_copy.remove(i) # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


    ans.append(max(A_copy)) # Hits:3.0, Total execution time: 0.792 ms, Average time per hit: 0.264 ms 




for i in ans: # Hits:4.0, Total execution time: 0.543 ms, Average time per hit: 0.13575 ms 


    print(i) # Hits:3.0, Total execution time: 10.375 ms, Average time per hit: 3.4583333333333335 ms 
","# C - Exception Handling

N = int(eval(input())) # Hits:1.0, Total execution time: 37.083 ms, Average time per hit: 37.083 ms 


A = list(int(eval(input())) for _ in range(N)) # Hits:1.0, Total execution time: 9.792 ms, Average time per hit: 9.792 ms 


A_sorted = list((sorted(A, reverse = True))) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


A_sorted = A_sorted[0:2] # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




ans = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in A: # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


    if i == A_sorted[0]: # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


        ans.append(A_sorted[1]) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    else:

        ans.append(A_sorted[0]) # Hits:2.0, Total execution time: 0.417 ms, Average time per hit: 0.2085 ms 




for j in ans: # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


    print(j) # Hits:3.0, Total execution time: 10.0 ms, Average time per hit: 3.3333333333333335 ms 
",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 33.625 ms, Average time per hit: 33.625 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 9.583 ms, Average time per hit: 9.583 ms 




L = [0] * (200000+1) # Hits:1.0, Total execution time: 20.917 ms, Average time per hit: 20.917 ms 


R = [0] * (200000+1) # Hits:1.0, Total execution time: 20.708 ms, Average time per hit: 20.708 ms 




L[0] = 0 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(1, N+1): # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


    L[i] = max(A[i-1], L[i-1]) # Hits:3.0, Total execution time: 1.209 ms, Average time per hit: 0.403 ms 




R[N] = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N-1, 0, -1): # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


    R[i] = max(R[i+1], A[i]) # Hits:2.0, Total execution time: 0.542 ms, Average time per hit: 0.271 ms 




#print(L)

#print(R)



for i in range(N): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    ans = max(L[i], R[i+1]) # Hits:3.0, Total execution time: 1.0 ms, Average time per hit: 0.3333333333333333 ms 


    print(ans) # Hits:3.0, Total execution time: 11.0 ms, Average time per hit: 3.6666666666666665 ms 
","

import sys # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


sys.setrecursionlimit(10**6) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


##############################



N = int(eval(input())) # Hits:1.0, Total execution time: 30.5 ms, Average time per hit: 30.5 ms 


A = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.791 ms, Average time per hit: 0.19775 ms 


    a = int(eval(input())) # Hits:3.0, Total execution time: 7.375 ms, Average time per hit: 2.4583333333333335 ms 


    A.append(a) # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 




B = list(reversed(sorted(A))) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


    # 最大か二番目を出せばいい

    if A[i] == B[0]: # Hits:3.0, Total execution time: 0.666 ms, Average time per hit: 0.222 ms 


        print((B[1])) # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


    else:

        print((B[0])) # Hits:2.0, Total execution time: 6.291 ms, Average time per hit: 3.1455 ms 
",p02971,True
"from collections import deque # Hits:1.0, Total execution time: 2.292 ms, Average time per hit: 2.292 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 41.708 ms, Average time per hit: 41.708 ms 


d = deque([int(eval(input())) for i in range(n)]) # Hits:1.0, Total execution time: 11.375 ms, Average time per hit: 11.375 ms 




for _ in range(n): # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    x = d.popleft() # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


    print((max(d))) # Hits:3.0, Total execution time: 10.625 ms, Average time per hit: 3.5416666666666665 ms 


    d.append(x) # Hits:3.0, Total execution time: 0.624 ms, Average time per hit: 0.208 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 42.042 ms, Average time per hit: 42.042 ms 


t = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 12.292 ms, Average time per hit: 12.292 ms 


tt = sorted(t) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


m = tt[-1] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


mm = tt[-2] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    if t[i] == m: # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


        print(mm) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


    else:

        print(m) # Hits:2.0, Total execution time: 5.917 ms, Average time per hit: 2.9585 ms 
",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 37.667 ms, Average time per hit: 37.667 ms 


max_1 = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


max_2 = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


nums = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for _ in range(N): # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


    n = int(eval(input())) # Hits:3.0, Total execution time: 9.042 ms, Average time per hit: 3.014 ms 


    if n >= max_1: # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


        max_2 = max_1 # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


        max_1 = n # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


    if n < max_1: # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


        if n >= max_2: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


            max_2 = n # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    nums.append(n) # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 




for n in nums: # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    if n == max_1: # Hits:3.0, Total execution time: 0.332 ms, Average time per hit: 0.11066666666666668 ms 


        print(max_2) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


    else:

        print(max_1) # Hits:2.0, Total execution time: 20.251 ms, Average time per hit: 10.1255 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 38.084 ms, Average time per hit: 38.084 ms 


nums = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 9.0 ms, Average time per hit: 9.0 ms 


nums_copy = sorted(nums[:], reverse=True) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


max_1 = nums_copy[0] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


max_2 = nums_copy[1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for n in nums: # Hits:4.0, Total execution time: 0.501 ms, Average time per hit: 0.12525 ms 


    if n == max_1: # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


        print(max_2) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


    else:

        print(max_1) # Hits:2.0, Total execution time: 6.083 ms, Average time per hit: 3.0415 ms 
",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 39.084 ms, Average time per hit: 39.084 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 10.0 ms, Average time per hit: 10.0 ms 




for i in range(n) : # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


  at = a[i] # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


  a[i] = 0 # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


  print((max(a))) # Hits:3.0, Total execution time: 8.042 ms, Average time per hit: 2.6806666666666663 ms 


  a[i] = at # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 36.542 ms, Average time per hit: 36.542 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 8.875 ms, Average time per hit: 8.875 ms 


a_max = max(a) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


max_c = a.count(a_max) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




for i in range(n) : # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


  if a[i] != a_max : # Hits:3.0, Total execution time: 0.501 ms, Average time per hit: 0.167 ms 


    print(a_max) # Hits:2.0, Total execution time: 5.708 ms, Average time per hit: 2.854 ms 


  else :

    if max_c == 1 : # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


      a[i] = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


      print((max(a))) # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


    else :

      print(a_max) # Hits:2.0, Total execution time: 6.083 ms, Average time per hit: 3.0415 ms 
",p02971,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 40.834 ms, Average time per hit: 40.834 ms 


a = [eval(input()) for _ in range(n)] # Hits:1.0, Total execution time: 9.375 ms, Average time per hit: 9.375 ms 


c=[0]*n # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.457 ms, Average time per hit: 0.11425 ms 


	b=a.copy() # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


	b.remove(a[i]) # Hits:3.0, Total execution time: 0.751 ms, Average time per hit: 0.25033333333333335 ms 


	c[i]=sorted(b)[-1] # Hits:3.0, Total execution time: 1.0 ms, Average time per hit: 0.3333333333333333 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.457 ms, Average time per hit: 0.11425 ms 


	print((c[i])) # Hits:3.0, Total execution time: 7.625 ms, Average time per hit: 2.5416666666666665 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 33.083 ms, Average time per hit: 33.083 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 8.917 ms, Average time per hit: 8.917 ms 


b=sorted(a) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


c=[0]*n # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


	if a[i]==b[-1]: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


		c[i]=b[-2] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


	else:

		c[i]=b[-1] # Hits:2.0, Total execution time: 0.291 ms, Average time per hit: 0.1455 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.499 ms, Average time per hit: 0.12475 ms 


	print((c[i])) # Hits:3.0, Total execution time: 12.875 ms, Average time per hit: 4.291666666666667 ms 
",p02971,True
"N=int(eval(input())) # Hits:1.0, Total execution time: 37.208 ms, Average time per hit: 37.208 ms 


A=list(range(N)) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


S=list(range(N-1)) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    A[i]=int(eval(input())) # Hits:3.0, Total execution time: 9.001 ms, Average time per hit: 3.0003333333333333 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    r=0 # Hits:3.0, Total execution time: 0.249 ms, Average time per hit: 0.083 ms 


    for j in range(N): # Hits:12.0, Total execution time: 1.544 ms, Average time per hit: 0.12866666666666665 ms 


     if j!=i: # Hits:9.0, Total execution time: 0.999 ms, Average time per hit: 0.111 ms 


       if A[j]>r: # Hits:6.0, Total execution time: 0.917 ms, Average time per hit: 0.15283333333333335 ms 


          r=A[j] # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 




    print(r) # Hits:3.0, Total execution time: 8.0 ms, Average time per hit: 2.6666666666666665 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 191.792 ms, Average time per hit: 191.792 ms 


A=list(range(N)) # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 






r=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


count=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    A[i]=int(eval(input())) # Hits:3.0, Total execution time: 14.416 ms, Average time per hit: 4.8053333333333335 ms 


    if A[i]>r: # Hits:3.0, Total execution time: 0.624 ms, Average time per hit: 0.208 ms 


     r=A[i] # Hits:2.0, Total execution time: 0.291 ms, Average time per hit: 0.1455 ms 


     count=i # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    if i==count: # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


     del A[i] # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


     print((max(A))) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


    else:

     print(r) # Hits:2.0, Total execution time: 7.625 ms, Average time per hit: 3.8125 ms 

",p02971,True
"import copy # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 32.167 ms, Average time per hit: 32.167 ms 




lst = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


    lst.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.0 ms, Average time per hit: 3.0 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    lstAns = copy.copy(lst) # Hits:3.0, Total execution time: 2.333 ms, Average time per hit: 0.7776666666666666 ms 


    a = lstAns.pop(i) # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 


    print((max(lstAns))) # Hits:3.0, Total execution time: 7.459 ms, Average time per hit: 2.4863333333333335 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 36.208 ms, Average time per hit: 36.208 ms 




lst = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.54 ms, Average time per hit: 0.135 ms 


    lst.append(int(eval(input()))) # Hits:3.0, Total execution time: 8.667 ms, Average time per hit: 2.889 ms 




lstA = sorted(lst,reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


    if lst[i] == lstA[0]: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


        print((lstA[1])) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


    else:

        print((lstA[0])) # Hits:2.0, Total execution time: 13.957 ms, Average time per hit: 6.9785 ms 

",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 37.625 ms, Average time per hit: 37.625 ms 


A_List =[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.791 ms, Average time per hit: 0.19775 ms 


    A = int(eval(input())) # Hits:3.0, Total execution time: 9.083 ms, Average time per hit: 3.0276666666666667 ms 


    A_List.append(A) # Hits:3.0, Total execution time: 0.626 ms, Average time per hit: 0.20866666666666667 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.501 ms, Average time per hit: 0.12525 ms 


    print((max(A_List[:i]+A_List[i+1:]))) # Hits:3.0, Total execution time: 8.5 ms, Average time per hit: 2.8333333333333335 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 36.583 ms, Average time per hit: 36.583 ms 


A_List =[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.544 ms, Average time per hit: 0.136 ms 


    A = int(eval(input())) # Hits:3.0, Total execution time: 8.874 ms, Average time per hit: 2.958 ms 


    A_List.append(A) # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


A_List2 = A_List.copy() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


A_List2 = sorted(A_List2) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




A_max = A_List2[-1] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


A_max2 = A_List2[-2] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for a in A_List: # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    if a ==A_max: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


        print(A_max2) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


    else:

        print(A_max) # Hits:2.0, Total execution time: 5.833 ms, Average time per hit: 2.9165 ms 

",p02971,True
"from copy import deepcopy # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 




N=int(eval(input())) # Hits:1.0, Total execution time: 38.042 ms, Average time per hit: 38.042 ms 


A=[int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 11.0 ms, Average time per hit: 11.0 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.751 ms, Average time per hit: 0.18775 ms 


  a=deepcopy(A) # Hits:3.0, Total execution time: 17.668 ms, Average time per hit: 5.889333333333333 ms 


  del a[i] # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


  print((max(a))) # Hits:3.0, Total execution time: 14.541 ms, Average time per hit: 4.847 ms 

","N=int(eval(input())) # Hits:1.0, Total execution time: 40.584 ms, Average time per hit: 40.584 ms 


A=[int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.958 ms, Average time per hit: 9.958 ms 


max_val1=sorted(A)[-1] # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


max_val2=sorted(A)[-2] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for x in A: # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


  print((max_val2 if x==max_val1 else max_val1)) # Hits:3.0, Total execution time: 7.708 ms, Average time per hit: 2.5693333333333337 ms 

",p02971,True
"from collections import deque # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 36.208 ms, Average time per hit: 36.208 ms 


d = deque() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for _ in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


  d.append(int(eval(input()))) # Hits:3.0, Total execution time: 8.834 ms, Average time per hit: 2.9446666666666665 ms 


for _ in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


  b = d.popleft() # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


  print((max(d))) # Hits:3.0, Total execution time: 7.125 ms, Average time per hit: 2.375 ms 


  d.append(b) # Hits:3.0, Total execution time: 0.499 ms, Average time per hit: 0.16633333333333333 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 37.75 ms, Average time per hit: 37.75 ms 


d = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for _ in range(n): # Hits:4.0, Total execution time: 0.751 ms, Average time per hit: 0.18775 ms 


  d.append(int(eval(input()))) # Hits:3.0, Total execution time: 11.042 ms, Average time per hit: 3.6806666666666663 ms 


a = sorted(d) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


  if a[-1] == d[i]: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    print((a[-2])) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


  else:

    print((a[-1])) # Hits:2.0, Total execution time: 5.917 ms, Average time per hit: 2.9585 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 35.375 ms, Average time per hit: 35.375 ms 


A = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.0 ms, Average time per hit: 9.0 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


    tmp_list = copy.deepcopy(A) # Hits:3.0, Total execution time: 15.541 ms, Average time per hit: 5.1803333333333335 ms 


    tmp_list.pop(i) # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


    print((max(tmp_list))) # Hits:3.0, Total execution time: 9.792 ms, Average time per hit: 3.264 ms 

","import copy # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 44.292 ms, Average time per hit: 44.292 ms 


A = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 12.375 ms, Average time per hit: 12.375 ms 




A_sorted = sorted(A, reverse=True) # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    if A[i] == A_sorted[0]: # Hits:3.0, Total execution time: 0.667 ms, Average time per hit: 0.22233333333333336 ms 


        print((A_sorted[1])) # Hits:1.0, Total execution time: 1.291 ms, Average time per hit: 1.291 ms 


    else:

        print((A_sorted[0])) # Hits:2.0, Total execution time: 7.208 ms, Average time per hit: 3.604 ms 

",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 37.875 ms, Average time per hit: 37.875 ms 


a = [int(eval(input())) for x in range(n)] # Hits:1.0, Total execution time: 9.875 ms, Average time per hit: 9.875 ms 




import copy # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


   b = copy.deepcopy(a) # Hits:3.0, Total execution time: 17.332 ms, Average time per hit: 5.777333333333333 ms 


   b.pop(i) # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


   print((max(b))) # Hits:3.0, Total execution time: 13.708 ms, Average time per hit: 4.569333333333333 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 37.292 ms, Average time per hit: 37.292 ms 


A = [int(eval(input())) for x in range(n)] # Hits:1.0, Total execution time: 9.333 ms, Average time per hit: 9.333 ms 




right = [0] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


left = [0] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for a in A: # Hits:4.0, Total execution time: 0.375 ms, Average time per hit: 0.09375 ms 


   left.append(max(a, left[-1])) # Hits:3.0, Total execution time: 1.167 ms, Average time per hit: 0.389 ms 




for a in reversed(A): # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


   right.append(max(a, right[-1])) # Hits:3.0, Total execution time: 5.832 ms, Average time per hit: 1.944 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


   print((max(left[i], right[n-i-1]))) # Hits:3.0, Total execution time: 8.876 ms, Average time per hit: 2.9586666666666663 ms 

",p02971,True
"import copy # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 35.375 ms, Average time per hit: 35.375 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.5 ms, Average time per hit: 9.5 ms 


b = copy.deepcopy(a) # Hits:1.0, Total execution time: 7.5 ms, Average time per hit: 7.5 ms 


a.sort(reverse=True) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


for v in b: # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


  if v==a[0]: # Hits:3.0, Total execution time: 0.584 ms, Average time per hit: 0.19466666666666665 ms 


    print((a[1])) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


  else:

    print((a[0])) # Hits:2.0, Total execution time: 7.917 ms, Average time per hit: 3.9585 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 39.792 ms, Average time per hit: 39.792 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.375 ms, Average time per hit: 9.375 ms 


b = sorted(a) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


for v in a: # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


  print((b[(v<b[-1])-2])) # Hits:3.0, Total execution time: 8.167 ms, Average time per hit: 2.7223333333333333 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 39.0 ms, Average time per hit: 39.0 ms 




a_list = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


    a_list.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.125 ms, Average time per hit: 3.0416666666666665 ms 




max_value = max(a_list) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


  if a_list.count(max_value) > 1: # Hits:3.0, Total execution time: 0.792 ms, Average time per hit: 0.264 ms 


    print(max_value) # Hits:2.0, Total execution time: 5.834 ms, Average time per hit: 2.917 ms 


  else:

    if a_list[i] == max_value: # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


      print((sorted(a_list)[-2])) # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 


    else:

      print(max_value) # Hits:2.0, Total execution time: 6.041 ms, Average time per hit: 3.0205 ms 


  
","N = int(eval(input())) # Hits:1.0, Total execution time: 36.5 ms, Average time per hit: 36.5 ms 




a_list = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    a_list.append(int(eval(input()))) # Hits:3.0, Total execution time: 8.917 ms, Average time per hit: 2.9723333333333333 ms 




max_value = max(a_list) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




if a_list.count(max_value) > 1: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  for i in range(N): # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    print(max_value) # Hits:2.0, Total execution time: 6.083 ms, Average time per hit: 3.0415 ms 


else:

  for i in range(N): # Hits:4.0, Total execution time: 0.46 ms, Average time per hit: 0.115 ms 


    if a_list[i] == max_value: # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


      print((sorted(a_list)[-2])) # Hits:1.0, Total execution time: 1.458 ms, Average time per hit: 1.458 ms 


    else:

      print(max_value) # Hits:2.0, Total execution time: 5.791 ms, Average time per hit: 2.8955 ms 


  
",p02971,True
"from collections import deque # Hits:1.0, Total execution time: 1.291 ms, Average time per hit: 1.291 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 37.375 ms, Average time per hit: 37.375 ms 


a = deque() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for _ in range(n): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    a.append(int(eval(input()))) # Hits:3.0, Total execution time: 8.959 ms, Average time per hit: 2.9863333333333335 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    tmp = a.popleft() # Hits:3.0, Total execution time: 0.582 ms, Average time per hit: 0.194 ms 


    print((max(a))) # Hits:3.0, Total execution time: 7.291 ms, Average time per hit: 2.4303333333333335 ms 


    a.append(tmp) # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 38.708 ms, Average time per hit: 38.708 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.625 ms, Average time per hit: 9.625 ms 


sort_a = sorted(a, reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


amax = sort_a[0] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


asecond = sort_a[1] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    tmp = a[i] # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    if tmp == amax: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


        print(asecond) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


    else:

        print(amax) # Hits:2.0, Total execution time: 6.583 ms, Average time per hit: 3.2915 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




n=int(eval(input())) # Hits:1.0, Total execution time: 43.666 ms, Average time per hit: 43.666 ms 


info=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


    info.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.875 ms, Average time per hit: 3.2916666666666665 ms 


   

for i in range(n): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    info2=copy.deepcopy(info) # Hits:3.0, Total execution time: 16.291 ms, Average time per hit: 5.4303333333333335 ms 


    del info2[i] # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


    print((max(info2))) # Hits:3.0, Total execution time: 13.417 ms, Average time per hit: 4.472333333333333 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 38.375 ms, Average time per hit: 38.375 ms 


info=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    info.append(int(eval(input()))) # Hits:3.0, Total execution time: 8.709 ms, Average time per hit: 2.903 ms 




info2=sorted(info,reverse=True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


max1=info2[0] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


max2=info2[1] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    if info[i]==max1: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


        print(max2) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


    else:

        print(max1) # Hits:2.0, Total execution time: 5.792 ms, Average time per hit: 2.896 ms 
",p02971,True
"from collections import deque # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 38.416 ms, Average time per hit: 38.416 ms 


alist = deque() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.791 ms, Average time per hit: 0.19775 ms 


    alist.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.25 ms, Average time per hit: 3.0833333333333335 ms 








anslist = deque() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for _ in range(n): # Hits:4.0, Total execution time: 0.457 ms, Average time per hit: 0.11425 ms 


    ai = alist.popleft() # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    anslist.append(max(alist)) # Hits:3.0, Total execution time: 0.792 ms, Average time per hit: 0.264 ms 


    alist.append(ai) # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 




for i in anslist: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


    print(i) # Hits:3.0, Total execution time: 7.458 ms, Average time per hit: 2.486 ms 


    

    ",,p02971,True
"N=int(eval(input())) # Hits:1.0, Total execution time: 34.791 ms, Average time per hit: 34.791 ms 


A=[int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 8.875 ms, Average time per hit: 8.875 ms 


ll=sorted(A) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


  

for n in A: # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


  if n==max(A): # Hits:3.0, Total execution time: 1.042 ms, Average time per hit: 0.3473333333333333 ms 


    print((ll[-2])) # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


  else:

    print((max(A))) # Hits:2.0, Total execution time: 6.417 ms, Average time per hit: 3.2085 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 38.042 ms, Average time per hit: 38.042 ms 


A=[int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 8.958 ms, Average time per hit: 8.958 ms 


ll=sorted(A) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


a=max(A) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


b=ll[-2] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


  

for n in A: # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


  if n==a: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    print(b) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


  else:

    print(a) # Hits:2.0, Total execution time: 6.083 ms, Average time per hit: 3.0415 ms 
",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 39.167 ms, Average time per hit: 39.167 ms 


nums = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.584 ms, Average time per hit: 9.584 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


  print((max(nums[0: i] + nums[i + 1:]))) # Hits:3.0, Total execution time: 8.291 ms, Average time per hit: 2.7636666666666665 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 38.458 ms, Average time per hit: 38.458 ms 


nums = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.459 ms, Average time per hit: 9.459 ms 


max_num = max(nums) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


max_cnt = len([i for i in nums if i == max_num]) # Hits:1.0, Total execution time: 1.291 ms, Average time per hit: 1.291 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


  if nums[i] < max_num or max_cnt > 1: # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


    print(max_num) # Hits:2.0, Total execution time: 6.458 ms, Average time per hit: 3.229 ms 


  else:

    print((max(set(nums) - set([nums[i]])))) # Hits:1.0, Total execution time: 2.583 ms, Average time per hit: 2.583 ms 

",p02971,True
"from collections import deque # Hits:1.0, Total execution time: 1.458 ms, Average time per hit: 1.458 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 35.708 ms, Average time per hit: 35.708 ms 


a = deque() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    tmp = int(eval(input())) # Hits:3.0, Total execution time: 8.458 ms, Average time per hit: 2.8193333333333337 ms 


    a.append(tmp) # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


#print(a)

for i in range(n): # Hits:4.0, Total execution time: 0.499 ms, Average time per hit: 0.12475 ms 


    tmp = a.popleft() # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


    print((max(a))) # Hits:3.0, Total execution time: 7.708 ms, Average time per hit: 2.5693333333333337 ms 


    a.append(tmp) # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 43.292 ms, Average time per hit: 43.292 ms 


max_1 = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


max_2 = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


a_list = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.499 ms, Average time per hit: 0.12475 ms 


    a = int(eval(input())) # Hits:3.0, Total execution time: 8.708 ms, Average time per hit: 2.9026666666666667 ms 


    a_list.append(a) # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


    if max_1 < a: # Hits:3.0, Total execution time: 0.374 ms, Average time per hit: 0.12466666666666668 ms 


        max_2 = max_1 # Hits:2.0, Total execution time: 0.124 ms, Average time per hit: 0.062 ms 


        max_1 = a # Hits:2.0, Total execution time: 0.168 ms, Average time per hit: 0.084 ms 


    elif max_2 < a: # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


        max_2 = a # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


#print(max_1,max_2)

for i in range(n): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    if a_list[i] == max_1: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


        print(max_2) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


    else:

        print(max_1) # Hits:2.0, Total execution time: 5.541 ms, Average time per hit: 2.7705 ms 

",p02971,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 32.833 ms, Average time per hit: 32.833 ms 


a=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


    a.append(int(eval(input()))) # Hits:3.0, Total execution time: 8.958 ms, Average time per hit: 2.986 ms 




Max=max(a) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


    b=a[:] # Hits:3.0, Total execution time: 0.667 ms, Average time per hit: 0.22233333333333336 ms 


    if(b[i]==Max): # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


        del b[i] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


        print((max(b))) # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


    else:

        print(Max) # Hits:2.0, Total execution time: 5.875 ms, Average time per hit: 2.9375 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 33.333 ms, Average time per hit: 33.333 ms 


a = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    a.append(int(eval(input()))) # Hits:3.0, Total execution time: 8.751 ms, Average time per hit: 2.917 ms 




Max = max(a) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


if(a.count(Max)>1): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    for _ in range(n): # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


        print(Max) # Hits:2.0, Total execution time: 5.582 ms, Average time per hit: 2.791 ms 


else:

    for i in range(n): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


        if(a[i]==Max): # Hits:3.0, Total execution time: 0.582 ms, Average time per hit: 0.194 ms 


            a[i]=0 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


            print((max(a))) # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 


        else:

            print(Max) # Hits:2.0, Total execution time: 6.25 ms, Average time per hit: 3.125 ms 
",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 38.334 ms, Average time per hit: 38.334 ms 


a = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 10.916 ms, Average time per hit: 10.916 ms 


ahead = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


back = max(a[1:]) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


result = [back] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,n-1): # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


    ahead = max(ahead,a[i-1]) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    if back == a[i]: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        back = max(a[(i+1):]) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    result.append(max(ahead,back)) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


ahead = max(ahead,a[n-2]) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


result.append(ahead) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


for j in range(n): # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


    print((result[j])) # Hits:3.0, Total execution time: 7.0 ms, Average time per hit: 2.3333333333333335 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 38.083 ms, Average time per hit: 38.083 ms 


a = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 9.084 ms, Average time per hit: 9.084 ms 


a2 = sorted(a) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


ma = a2[-1] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


se = a2[-2] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


result = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.501 ms, Average time per hit: 0.12525 ms 


    if a[i] == ma: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


        result.append(se) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    else:

        result.append(ma) # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


for j in range(n): # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    print((result[j])) # Hits:3.0, Total execution time: 7.085 ms, Average time per hit: 2.3616666666666664 ms 
",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 47.208 ms, Average time per hit: 47.208 ms 


ai = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


max1 = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


max2 = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, n+1): # Hits:4.0, Total execution time: 0.874 ms, Average time per hit: 0.2185 ms 


    tmp = int(eval(input())) # Hits:3.0, Total execution time: 11.876 ms, Average time per hit: 3.9586666666666663 ms 


    ai.setdefault(i, tmp) # Hits:3.0, Total execution time: 0.666 ms, Average time per hit: 0.222 ms 


    if tmp > max1: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


        max1 = tmp # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    elif tmp > max2: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        max2 = tmp # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(1, n+1): # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


    if ai[i] == max1: # Hits:3.0, Total execution time: 0.499 ms, Average time per hit: 0.16633333333333333 ms 


        print(max2) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


    else:

        print(max1) # Hits:2.0, Total execution time: 7.584 ms, Average time per hit: 3.792 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 37.084 ms, Average time per hit: 37.084 ms 


ai = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


max1 = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


max2 = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in range(1, n+1): # Hits:4.0, Total execution time: 0.876 ms, Average time per hit: 0.219 ms 


    tmp = int(eval(input())) # Hits:3.0, Total execution time: 9.166 ms, Average time per hit: 3.0553333333333335 ms 


    ai.setdefault(i, tmp) # Hits:3.0, Total execution time: 0.667 ms, Average time per hit: 0.22233333333333336 ms 


    if tmp > max1: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


        max2 = max1 # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


        max1 = tmp # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


    elif tmp > max2: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        max2 = tmp # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 




for i in range(1, n+1): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    if ai[i] == max1: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


        print(max2) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


    else:

        print(max1) # Hits:2.0, Total execution time: 6.584 ms, Average time per hit: 3.292 ms 

",p02971,True
"import copy # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 36.125 ms, Average time per hit: 36.125 ms 


a=[0]*n # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(0,n): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


  a[i]=int(eval(input())) # Hits:3.0, Total execution time: 8.417 ms, Average time per hit: 2.8056666666666663 ms 


temp=copy.copy(a) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


for i in range(0,n): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


  temp[i]=0 # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


  print((max(temp))) # Hits:3.0, Total execution time: 7.375 ms, Average time per hit: 2.4583333333333335 ms 


  temp=copy.copy(a) # Hits:3.0, Total execution time: 1.791 ms, Average time per hit: 0.597 ms 


        ","n=int(eval(input())) # Hits:1.0, Total execution time: 38.917 ms, Average time per hit: 38.917 ms 


a=[0]*n # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(0,n): # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


  a[i]=int(eval(input())) # Hits:3.0, Total execution time: 8.75 ms, Average time per hit: 2.9166666666666665 ms 


temp=sorted(a,reverse=True) # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


for i in range(0,n): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


  if a[i]==temp[0]: # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


    print((temp[1])) # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


  else:

    print((temp[0])) # Hits:2.0, Total execution time: 6.75 ms, Average time per hit: 3.375 ms 


        ",p02971,True
"import copy # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 37.042 ms, Average time per hit: 37.042 ms 


a = [list(map(int, input().split())) for _ in range(n)] # Hits:1.0, Total execution time: 4.25 ms, Average time per hit: 4.25 ms 


a=sum(a,[]) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


a_sort=copy.copy(a) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


a_sort.sort() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


a_last,a_last2=a_sort[-1],a_sort[-2] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


if a_last==a_last2: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  for i in range(n): # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


    print(a_last) # Hits:2.0, Total execution time: 6.542 ms, Average time per hit: 3.271 ms 


else:

  for i in range(n): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    if a[i]!=a_last: # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


      print(a_last) # Hits:2.0, Total execution time: 5.958 ms, Average time per hit: 2.979 ms 


    else:

      print(a_last2) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 39.917 ms, Average time per hit: 39.917 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.541 ms, Average time per hit: 9.541 ms 


a_max=max(a) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


a_max2=sorted(a)[-2] # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


if a_max!=a_max2: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  for i in range(n): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    if a[i]!=a_max: # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


      print(a_max) # Hits:2.0, Total execution time: 6.583 ms, Average time per hit: 3.2915 ms 


    else:

      print(a_max2) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


else:

  for i in range(n): # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


    print(a_max) # Hits:2.0, Total execution time: 6.375 ms, Average time per hit: 3.1875 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


length = int(eval(input())) # Hits:1.0, Total execution time: 30.458 ms, Average time per hit: 30.458 ms 


suretsu=[int(eval(input())) for i in range(length)] # Hits:1.0, Total execution time: 9.0 ms, Average time per hit: 9.0 ms 


result = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


zantei_max = max(suretsu) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


for i in range(length): # Hits:4.0, Total execution time: 0.499 ms, Average time per hit: 0.12475 ms 


    if (zantei_max == suretsu[i]): # Hits:3.0, Total execution time: 0.499 ms, Average time per hit: 0.16633333333333333 ms 


        copy_suretsu = copy.deepcopy(suretsu) # Hits:1.0, Total execution time: 7.0 ms, Average time per hit: 7.0 ms 


        del copy_suretsu[i] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


        new_max = max(copy_suretsu) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


        result.append(str(new_max)) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    else:

        result.append(str(zantei_max)) # Hits:2.0, Total execution time: 0.666 ms, Average time per hit: 0.333 ms 


print(('\n'.join(result))) # Hits:1.0, Total execution time: 6.291 ms, Average time per hit: 6.291 ms 
","length = int(eval(input())) # Hits:1.0, Total execution time: 39.75 ms, Average time per hit: 39.75 ms 


suretsu=[int(eval(input())) for i in range(length)] # Hits:1.0, Total execution time: 8.875 ms, Average time per hit: 8.875 ms 


result = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


sorted_suretsu = sorted(suretsu,reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


zantei_max = sorted_suretsu[0] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(length): # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


    if (zantei_max == suretsu[i]): # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


        result.append(str(sorted_suretsu[1])) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    else:

        result.append(str(zantei_max)) # Hits:2.0, Total execution time: 0.417 ms, Average time per hit: 0.2085 ms 


print(('\n'.join(result))) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 38.25 ms, Average time per hit: 38.25 ms 


la = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 8.958 ms, Average time per hit: 8.958 ms 




s_la = sorted(la, reverse=True) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




for a in la: # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


	max_la = copy.copy(s_la) # Hits:3.0, Total execution time: 2.001 ms, Average time per hit: 0.667 ms 


	max_la.remove(a) # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


	print((max_la[0])) # Hits:3.0, Total execution time: 7.25 ms, Average time per hit: 2.4166666666666665 ms 
","

n = int(eval(input())) # Hits:1.0, Total execution time: 36.667 ms, Average time per hit: 36.667 ms 


la = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 9.833 ms, Average time per hit: 9.833 ms 




s_la = sorted(la, reverse=True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




for a in la: # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


	if a == s_la[0]: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


		print((s_la[1])) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


	else:

		print((s_la[0])) # Hits:2.0, Total execution time: 7.083 ms, Average time per hit: 3.5415 ms 
",p02971,True
"from collections import deque # Hits:1.0, Total execution time: 1.458 ms, Average time per hit: 1.458 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 37.583 ms, Average time per hit: 37.583 ms 


a = deque( int(eval(input())) for i in range(n)) # Hits:1.0, Total execution time: 10.542 ms, Average time per hit: 10.542 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    s = a.popleft() # Hits:3.0, Total execution time: 0.668 ms, Average time per hit: 0.22266666666666665 ms 


    m = max(a) # Hits:3.0, Total execution time: 0.833 ms, Average time per hit: 0.2776666666666667 ms 


    print(m) # Hits:3.0, Total execution time: 6.833 ms, Average time per hit: 2.2776666666666667 ms 


    a.append(s) # Hits:3.0, Total execution time: 0.626 ms, Average time per hit: 0.20866666666666667 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 33.167 ms, Average time per hit: 33.167 ms 


a = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 8.958 ms, Average time per hit: 8.958 ms 


m = max(a) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


p = a.index(m) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


a.remove(m) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


s = max(a) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    if i != p: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        print(m) # Hits:2.0, Total execution time: 5.667 ms, Average time per hit: 2.8335 ms 


    else:

        print(s) # Hits:1.0, Total execution time: 1.041 ms, Average time per hit: 1.041 ms 

",p02971,True
"import copy as cp # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 36.042 ms, Average time per hit: 36.042 ms 


numbers = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 22.209 ms, Average time per hit: 22.209 ms 




max_num = max(numbers) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




for i in range(len(numbers)): # Hits:4.0, Total execution time: 0.876 ms, Average time per hit: 0.219 ms 


    if numbers[i] == max_num: # Hits:3.0, Total execution time: 0.666 ms, Average time per hit: 0.222 ms 


        temp_numbers = cp.copy(numbers) # Hits:1.0, Total execution time: 1.542 ms, Average time per hit: 1.542 ms 


        temp_numbers.pop(i) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


        print((max(temp_numbers))) # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


    else :

        print(max_num) # Hits:2.0, Total execution time: 6.958 ms, Average time per hit: 3.479 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 37.166 ms, Average time per hit: 37.166 ms 


numbers = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.042 ms, Average time per hit: 9.042 ms 




# 最大値を取得

max_num = max(numbers) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




# 最大値を同じ値がいくつ在るかを確認

max_nums = numbers.count(max_num) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




if max_nums >= 2: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    for i in range(len(numbers)): # Hits:3.0, Total execution time: 0.709 ms, Average time per hit: 0.23633333333333334 ms 


        print(max_num) # Hits:2.0, Total execution time: 6.375 ms, Average time per hit: 3.1875 ms 


else :

    max_index = numbers.index(max(numbers)) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    for i in range(len(numbers)): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


        if i == max_index: # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


            second_max = sorted(numbers)[-2] # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


            print(second_max) # Hits:1.0, Total execution time: 1.041 ms, Average time per hit: 1.041 ms 


        else :

            print(max_num) # Hits:2.0, Total execution time: 5.959 ms, Average time per hit: 2.9795 ms 
",p02971,True
"import collections # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 31.834 ms, Average time per hit: 31.834 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.0 ms, Average time per hit: 9.0 ms 


set_A = list(set(A)) # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


set_A.sort(reverse=True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


c = collections.Counter(A) # Hits:1.0, Total execution time: 3.708 ms, Average time per hit: 3.708 ms 


Max = max(A) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


Max_list = [i for i, v in enumerate(A) if v == max(A)] # Hits:1.0, Total execution time: 1.958 ms, Average time per hit: 1.958 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


    if A[i] == Max: # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


            if len(Max_list) > 1: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


                print((A[i])) # Hits:2.0, Total execution time: 6.625 ms, Average time per hit: 3.3125 ms 


            else:

                print((set_A[1])) # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


    else:

        print(Max) # Hits:2.0, Total execution time: 6.207 ms, Average time per hit: 3.1035 ms 

","import copy # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 38.292 ms, Average time per hit: 38.292 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.625 ms, Average time per hit: 9.625 ms 


set_A = list(set(A)) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


set_A.sort(reverse=True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


A_copy = copy.deepcopy(A) # Hits:1.0, Total execution time: 6.459 ms, Average time per hit: 6.459 ms 


A_copy.sort(reverse=True) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


Max = max(A) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


    if A[i] == Max: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


        cnt += 1 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    if A[i] == Max: # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


        if cnt > 1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


            print(Max) # Hits:2.0, Total execution time: 6.958 ms, Average time per hit: 3.479 ms 


        else:

            print((set_A[1])) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


    else:

        print(Max) # Hits:2.0, Total execution time: 6.293 ms, Average time per hit: 3.1465 ms 

",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 38.916 ms, Average time per hit: 38.916 ms 


#A = [int(i) for i in input().split()]

A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 9.167 ms, Average time per hit: 9.167 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


	tmp = A[i] # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


	A[i] = 0 # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


	print((max(A))) # Hits:3.0, Total execution time: 7.249 ms, Average time per hit: 2.4163333333333337 ms 


	A[i] = tmp # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 40.792 ms, Average time per hit: 40.792 ms 


#A = [int(i) for i in input().split()]

A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 9.041 ms, Average time per hit: 9.041 ms 




idx1, ma1 = A.index(max(A)), max(A) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




tmp = A[idx1] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


A[idx1] = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


idx2, ma2 = A.index(max(A)), max(A) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




A[idx1] = tmp # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in A: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


	if i == ma1: # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


		print(ma2) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


	else:

		print(ma1) # Hits:2.0, Total execution time: 5.917 ms, Average time per hit: 2.9585 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 37.625 ms, Average time per hit: 37.625 ms 


a = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 12.375 ms, Average time per hit: 12.375 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


  b = copy.deepcopy(a) # Hits:3.0, Total execution time: 17.083 ms, Average time per hit: 5.694333333333333 ms 


  del b[i] # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


  print((sorted(b, reverse=True)[0])) # Hits:3.0, Total execution time: 13.333 ms, Average time per hit: 4.444333333333333 ms 

","from heapq import *



N=int(eval(input()))

A=[int(eval(input())) for i in range(N)]

h=[]

for i in A:

    heappush(h, -i)

maxh = -heappop(h)

secondh = -heappop(h)

for i in A:

    print((maxh if i != maxh else secondh))
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 








N = int(eval(input())) # Hits:1.0, Total execution time: 39.125 ms, Average time per hit: 39.125 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.875 ms, Average time per hit: 9.875 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


   # B = copy.deepcopy(A)

    tmp = A[i] # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    A[i] = 0 # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    ans = max(A) # Hits:3.0, Total execution time: 0.917 ms, Average time per hit: 0.3056666666666667 ms 


    A[i] = tmp # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    print(ans) # Hits:3.0, Total execution time: 7.374 ms, Average time per hit: 2.458 ms 


             
","N = int(eval(input())) # Hits:1.0, Total execution time: 37.125 ms, Average time per hit: 37.125 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.125 ms, Average time per hit: 9.125 ms 


B = [ [0] * 2 for i in range(N)] # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.501 ms, Average time per hit: 0.12525 ms 


    B[i][0] = A[i] # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    B[i][1] = i # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 




B.sort(reverse=True) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    if B[0][1] == i: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


        print((B[1][0])) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


    else:

        print((B[0][0])) # Hits:2.0, Total execution time: 5.875 ms, Average time per hit: 2.9375 ms 

",p02971,True
"#C

import copy # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 36.541 ms, Average time per hit: 36.541 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 12.333 ms, Average time per hit: 12.333 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    tmp = copy.copy(a) # Hits:3.0, Total execution time: 2.833 ms, Average time per hit: 0.9443333333333334 ms 


    tmp.pop(i) # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 


    tmp.sort() # Hits:3.0, Total execution time: 0.709 ms, Average time per hit: 0.23633333333333334 ms 


    print((tmp[-1])) # Hits:3.0, Total execution time: 8.376 ms, Average time per hit: 2.792 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 35.375 ms, Average time per hit: 35.375 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.041 ms, Average time per hit: 9.041 ms 


max_a = max(a) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


max_idx = a.index(max_a) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    if i == max_idx: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        tmp = a # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        tmp.sort(reverse=True) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


        print((tmp[1])) # Hits:1.0, Total execution time: 1.166 ms, Average time per hit: 1.166 ms 


    else:

        print(max_a) # Hits:2.0, Total execution time: 6.0 ms, Average time per hit: 3.0 ms 
",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 34.375 ms, Average time per hit: 34.375 ms 


data = [int(eval(input())) for k in range(n)] # Hits:1.0, Total execution time: 9.459 ms, Average time per hit: 9.459 ms 


m1,m2 = sorted(data, reverse=1)[:2] # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


b = [m2 if x==m1 else m1 for x in data] # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


print(('\n'.join(map(str,b)))) # Hits:1.0, Total execution time: 6.833 ms, Average time per hit: 6.833 ms 
","import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 28.916 ms, Average time per hit: 28.916 ms 


data = [int(eval(input())) for k in range(n)] # Hits:1.0, Total execution time: 8.125 ms, Average time per hit: 8.125 ms 


m1,m2 = sorted(data, reverse=1)[:2] # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


b = [m2 if x==m1 else m1 for x in data] # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


print(('\n'.join(map(str,b)))) # Hits:1.0, Total execution time: 6.958 ms, Average time per hit: 6.958 ms 
",p02971,True
"from collections import deque # Hits:1.0, Total execution time: 1.291 ms, Average time per hit: 1.291 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 37.834 ms, Average time per hit: 37.834 ms 


a = deque([int(eval(input())) for _ in range(n)]) # Hits:1.0, Total execution time: 10.125 ms, Average time per hit: 10.125 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    ak = a[i] # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


    del a[i] # Hits:3.0, Total execution time: 0.501 ms, Average time per hit: 0.167 ms 


    print((max(a))) # Hits:3.0, Total execution time: 7.332 ms, Average time per hit: 2.444 ms 


    a.appendleft(ak) # Hits:3.0, Total execution time: 0.626 ms, Average time per hit: 0.20866666666666667 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 36.75 ms, Average time per hit: 36.75 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.125 ms, Average time per hit: 9.125 ms 


max_a = max(a) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


set_a = set(a) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


max_n = a.count(max_a) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


if len(set_a) == 1: # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    s_set_a = max_a # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


else:

    if max_n > 1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        s_set_a = max_a

    else:

        s_set_a = sorted(set_a)[-2] # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    if max_a == a[i]: # Hits:3.0, Total execution time: 0.501 ms, Average time per hit: 0.167 ms 


        print(s_set_a) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


    else:

        print(max_a) # Hits:2.0, Total execution time: 6.041 ms, Average time per hit: 3.0205 ms 

",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 36.333 ms, Average time per hit: 36.333 ms 


li = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


    li.append(int(eval(input()))) # Hits:3.0, Total execution time: 8.999 ms, Average time per hit: 2.9996666666666667 ms 


m = max(li) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


li2 = li.copy() # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


li2.remove(max(li2)) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


d = max(li2) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    if li[i] == max(li): # Hits:3.0, Total execution time: 0.792 ms, Average time per hit: 0.264 ms 


        print(d) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


    else:

        print(m) # Hits:2.0, Total execution time: 5.75 ms, Average time per hit: 2.875 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 41.167 ms, Average time per hit: 41.167 ms 


li = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    x = int(eval(input())) # Hits:3.0, Total execution time: 8.584 ms, Average time per hit: 2.8613333333333335 ms 


    li.append(x) # Hits:3.0, Total execution time: 0.584 ms, Average time per hit: 0.19466666666666665 ms 


p = max(li) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


r = li.index(p) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


li.remove(p) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


q = max(li) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    if i == r: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        print(q) # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


    else:

        print(p) # Hits:2.0, Total execution time: 5.874 ms, Average time per hit: 2.937 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




N=int(eval(input())) # Hits:1.0, Total execution time: 34.792 ms, Average time per hit: 34.792 ms 


L=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


tmp=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for _ in range(N): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


  L.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.168 ms, Average time per hit: 3.056 ms 




T=sorted(copy.deepcopy(L)) # Hits:1.0, Total execution time: 5.708 ms, Average time per hit: 5.708 ms 


h=max(L) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


h2=T[len(T)-2] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


  if L[i]!=h: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    print(h) # Hits:2.0, Total execution time: 8.667 ms, Average time per hit: 4.3335 ms 


  elif L[i]!=h2: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print(h2) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


  else:

    tmp=copy.deepcopy(L) # Hits:2.0, Total execution time: 8.834 ms, Average time per hit: 4.417 ms 


    del tmp[i] # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


    print((max(tmp))) # Hits:2.0, Total execution time: 9.292 ms, Average time per hit: 4.646 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 39.791 ms, Average time per hit: 39.791 ms 


L=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for _ in range(N): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


  L.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.249 ms, Average time per hit: 3.083 ms 


sL=sorted(L) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


sL.reverse() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


m=max(L) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


m2=sL[1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


  if L[i]==m: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    print(m2) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


  else:

    print(m) # Hits:2.0, Total execution time: 5.583 ms, Average time per hit: 2.7915 ms 
",p02971,True
"def slove():

    import sys

    import copy

    input = sys.stdin.readline

    n = int(input().rstrip('\n'))

    a = [int(input().rstrip('\n')) for _ in range(n)]

    b = copy.deepcopy(a)

    b.sort(reverse=True)

    for v in a:

        if v == b[0]:

            print((b[1]))

        else:

            print((b[0]))





if __name__ == '__main__':

    slove()
",,p02971,False
"def p_c():

    N = int(eval(input()))

    A = [int(eval(input())) for _ in range(N)]



    for i in range(N):

        a = A.copy()

        a.pop(i)

        print((max(a)))





if __name__ == '__main__':

    p_c()",,p02971,False
"import copy # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


s=int(eval(input())) # Hits:1.0, Total execution time: 40.917 ms, Average time per hit: 40.917 ms 


list1=[eval(input()) for _ in range(s)] # Hits:1.0, Total execution time: 9.625 ms, Average time per hit: 9.625 ms 


for i in range(len(list1)): # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


  list2=copy.copy(list1) # Hits:3.0, Total execution time: 2.459 ms, Average time per hit: 0.8196666666666667 ms 


  list2.remove(list2[i]) # Hits:3.0, Total execution time: 0.832 ms, Average time per hit: 0.2773333333333333 ms 


  list2=sorted(list2,key=lambda x:-int(x)) # Hits:3.0, Total execution time: 2.917 ms, Average time per hit: 0.9723333333333334 ms 


  print((list2[0])) # Hits:3.0, Total execution time: 7.5 ms, Average time per hit: 2.5 ms 

","import copy # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


s=int(eval(input())) # Hits:1.0, Total execution time: 39.625 ms, Average time per hit: 39.625 ms 


list1=[eval(input()) for _ in range(s)] # Hits:1.0, Total execution time: 11.041 ms, Average time per hit: 11.041 ms 


list2=copy.copy(list1) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


list2=sorted(list2,key=lambda x:-int(x)) # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


for i in list1: # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    if list2[0]==i: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


      print((list2[1])) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


    else:

      print((list2[0])) # Hits:2.0, Total execution time: 5.708 ms, Average time per hit: 2.854 ms 
",p02971,True
"import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


import heapq # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


import copy # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 37.666 ms, Average time per hit: 37.666 ms 


a = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for _ in range(n): # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


	a.append(-1 * int(eval(input()))) # Hits:3.0, Total execution time: 9.917 ms, Average time per hit: 3.3056666666666663 ms 




b = copy.deepcopy(a) # Hits:1.0, Total execution time: 6.958 ms, Average time per hit: 6.958 ms 


heapq.heapify(b) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


	maximum = heapq.heappop(b) # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 


	if maximum == a[i]: # Hits:3.0, Total execution time: 0.585 ms, Average time per hit: 0.195 ms 


		tmp = maximum # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


		maximum = heapq.heappop(b) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


		print((maximum * (-1))) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


		heapq.heappush(b,tmp) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


	else:

		print((maximum * (-1))) # Hits:2.0, Total execution time: 5.75 ms, Average time per hit: 2.875 ms 


	heapq.heappush(b,maximum) # Hits:3.0, Total execution time: 0.917 ms, Average time per hit: 0.3056666666666667 ms 

","import bisect # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 38.459 ms, Average time per hit: 38.459 ms 




a = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for _ in range(n): # Hits:4.0, Total execution time: 0.958 ms, Average time per hit: 0.2395 ms 


  a.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.708 ms, Average time per hit: 3.236 ms 




a2 = sorted(a) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




max_a = a2[-1] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


index = bisect.bisect_left(a2,max_a) # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


num = n-index # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




if num > 1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  for _ in range(n): # Hits:3.0, Total execution time: 0.376 ms, Average time per hit: 0.12533333333333332 ms 


    print((a2[-1])) # Hits:2.0, Total execution time: 5.25 ms, Average time per hit: 2.625 ms 


else:

  for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    if a[i] == a2[-1]: # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


      print((a2[-2])) # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


    else:

      print((a2[-1])) # Hits:2.0, Total execution time: 6.208 ms, Average time per hit: 3.104 ms 

",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 39.5 ms, Average time per hit: 39.5 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.583 ms, Average time per hit: 9.583 ms 


ma = max(a) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


  if a[i] != ma: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


    print(ma) # Hits:2.0, Total execution time: 6.167 ms, Average time per hit: 3.0835 ms 


  elif a.count(ma) > 1: # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    print(ma) # Hits:2.0, Total execution time: 6.0 ms, Average time per hit: 3.0 ms 


  else:

    temp = a[:] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    del temp[i] # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    print((max(temp))) # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 35.333 ms, Average time per hit: 35.333 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 10.917 ms, Average time per hit: 10.917 ms 


ma = max(a) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


sma = sorted(a)[-2] # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


  if a[i] != ma: # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


    print(ma) # Hits:2.0, Total execution time: 6.209 ms, Average time per hit: 3.1045 ms 


  else:

    print(sma) # Hits:1.0, Total execution time: 1.041 ms, Average time per hit: 1.041 ms 

",p02971,True
"N=int(eval(input())) # Hits:1.0, Total execution time: 34.417 ms, Average time per hit: 34.417 ms 


L=[int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.083 ms, Average time per hit: 9.083 ms 


index1=L.index(max(L)) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


index2=L.index(sorted(L)[-2]) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for i in range(N-1): # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


	if i==index1: # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


		print((sorted(L)[-2])) # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


	print((max(L))) # Hits:2.0, Total execution time: 5.75 ms, Average time per hit: 2.875 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 32.167 ms, Average time per hit: 32.167 ms 


L=[int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 11.709 ms, Average time per hit: 11.709 ms 


tl=sorted(L) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


index1=L.index(tl[-1]) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


index2=L.index(tl[-2]) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


	if i==index1: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


		print((L[index2])) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


	else:

		print((L[index1])) # Hits:2.0, Total execution time: 7.25 ms, Average time per hit: 3.625 ms 
",p02971,True
"n,*a = list(map(int,open(0).read().split()))

b = sorted(a)

max = b[-1]

maxs= b[-2]



for i in range(n):

    if a[i] == max:

        print(maxs)

    else:

        print(max)
",,p02971,False
"N = int(eval(input())) # Hits:1.0, Total execution time: 38.5 ms, Average time per hit: 38.5 ms 


a = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(0, N): # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


  a.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.375 ms, Average time per hit: 3.125 ms 




first_max = max(a) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




former_arr = [0] + a[0:a.index(first_max)] # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


latter_arr = [0] + a[a.index(first_max) + 1:] # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


second_max = (max(max(former_arr), max(latter_arr))) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




for i in range(0, N):   # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


  if (a.index(first_max) == i): # Hits:3.0, Total execution time: 0.666 ms, Average time per hit: 0.222 ms 


    print(second_max) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


  else:

    print(first_max) # Hits:2.0, Total execution time: 6.25 ms, Average time per hit: 3.125 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 38.959 ms, Average time per hit: 38.959 ms 


a = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(0, N): # Hits:4.0, Total execution time: 0.792 ms, Average time per hit: 0.198 ms 


  a.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.167 ms, Average time per hit: 3.0556666666666663 ms 




first_max = max(a) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 




former_arr = [0] + a[0:a.index(first_max)] # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


latter_arr = [0] + a[a.index(first_max) + 1:] # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


second_max = (max(max(former_arr), max(latter_arr))) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




ans = """" # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans += (str(first_max) + '\n') * (a.index(first_max)) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


ans += (str(second_max) + '\n') # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


ans += (str(first_max) + '\n') * (N - a.index(first_max) - 1) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


print((ans.rstrip('\n'))) # Hits:1.0, Total execution time: 6.792 ms, Average time per hit: 6.792 ms 
",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 30.375 ms, Average time per hit: 30.375 ms 


a = list() # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


for x in range(n): # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


    a.append(int(eval(input()))) # Hits:3.0, Total execution time: 8.832 ms, Average time per hit: 2.944 ms 




for x in range(n): # Hits:4.0, Total execution time: 0.499 ms, Average time per hit: 0.12475 ms 


    tmp = a.pop(x) # Hits:3.0, Total execution time: 0.751 ms, Average time per hit: 0.25033333333333335 ms 


    print((max(a))) # Hits:3.0, Total execution time: 8.208 ms, Average time per hit: 2.736 ms 


    a.insert(x, tmp) # Hits:3.0, Total execution time: 0.751 ms, Average time per hit: 0.25033333333333335 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 37.667 ms, Average time per hit: 37.667 ms 


a = list() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for x in range(n): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    a.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.333 ms, Average time per hit: 3.111 ms 




copy_a = sorted(a, reverse=True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




A_Max = copy_a[0] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


A_Second = copy_a[1] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




for x in range(n): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    if a[x] == A_Max: # Hits:3.0, Total execution time: 0.543 ms, Average time per hit: 0.181 ms 


        print(A_Second) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


    else:

        print(A_Max) # Hits:2.0, Total execution time: 6.167 ms, Average time per hit: 3.0835 ms 

",p02971,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 35.917 ms, Average time per hit: 35.917 ms 




import heapq # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


a=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


a_heap=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    tmp=int(eval(input())) # Hits:3.0, Total execution time: 8.251 ms, Average time per hit: 2.7503333333333333 ms 


    a.append(tmp) # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


    heapq.heappush(a_heap,(-1)*tmp) # Hits:3.0, Total execution time: 0.626 ms, Average time per hit: 0.20866666666666667 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    max_1=heapq.heappop(a_heap) # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


    if max_1==(-1)*a[i]: # Hits:3.0, Total execution time: 0.666 ms, Average time per hit: 0.222 ms 


        max_2=heapq.heappop(a_heap) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


        print(((-1)*max_2)) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


        heapq.heappush(a_heap,max_2) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    else:print(((-1)*max_1)) # Hits:2.0, Total execution time: 6.292 ms, Average time per hit: 3.146 ms 


    heapq.heappush(a_heap,max_1) # Hits:3.0, Total execution time: 0.666 ms, Average time per hit: 0.222 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 37.959 ms, Average time per hit: 37.959 ms 




a=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


a_sort=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    tmp=int(eval(input())) # Hits:3.0, Total execution time: 8.542 ms, Average time per hit: 2.8473333333333333 ms 


    a.append(tmp) # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    a_sort.append(tmp) # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


a_sort.sort(reverse=True) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    if a_sort[0]==a[i]:print((a_sort[1])) # Hits:3.0, Total execution time: 1.334 ms, Average time per hit: 0.4446666666666667 ms 


    else:print((a_sort[0])) # Hits:2.0, Total execution time: 6.208 ms, Average time per hit: 3.104 ms 
",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 38.208 ms, Average time per hit: 38.208 ms 




A = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    A.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.166 ms, Average time per hit: 3.0553333333333335 ms 




B = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    B = A[:i] + A[i+1:] # Hits:3.0, Total execution time: 1.208 ms, Average time per hit: 0.4026666666666667 ms 


    #print(B)

    print((max(B))) # Hits:3.0, Total execution time: 8.084 ms, Average time per hit: 2.6946666666666665 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 37.916 ms, Average time per hit: 37.916 ms 




A = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    A.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.208 ms, Average time per hit: 3.0693333333333337 ms 


    

B = sorted(A,reverse = True) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 




for i in A: # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    if i == B[0]: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


        print((B[1])) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


    else:

        print((B[0])) # Hits:2.0, Total execution time: 6.042 ms, Average time per hit: 3.021 ms 
",p02971,True
"import copy  # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 33.042 ms, Average time per hit: 33.042 ms 


        

a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 11.917 ms, Average time per hit: 11.917 ms 


        

for i in range(n): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


  temp = copy.deepcopy(a) # Hits:3.0, Total execution time: 19.666 ms, Average time per hit: 6.5553333333333335 ms 


  temp[i] = 0 # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


  print((max(temp))) # Hits:3.0, Total execution time: 10.999 ms, Average time per hit: 3.6663333333333337 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 34.833 ms, Average time per hit: 34.833 ms 


        

a = [(int(eval(input())), i) for i in range(n)] # Hits:1.0, Total execution time: 8.792 ms, Average time per hit: 8.792 ms 


a.sort() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


max_, max_index = a[-1] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


  if i != max_index: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


  	print(max_) # Hits:2.0, Total execution time: 5.875 ms, Average time per hit: 2.9375 ms 


  else:

  	print((a[-2][0])) # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 36.584 ms, Average time per hit: 36.584 ms 


arr = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.417 ms, Average time per hit: 9.417 ms 


ans = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for ele in arr: # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    tmp = copy.copy(arr) # Hits:3.0, Total execution time: 2.374 ms, Average time per hit: 0.7913333333333333 ms 


    tmp.remove(ele) # Hits:3.0, Total execution time: 0.751 ms, Average time per hit: 0.25033333333333335 ms 


    print((max(tmp))) # Hits:3.0, Total execution time: 7.416 ms, Average time per hit: 2.472 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 34.5 ms, Average time per hit: 34.5 ms 


arr = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 12.917 ms, Average time per hit: 12.917 ms 


ar = sorted(arr) # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


mx = ar[-1] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


sc = ar[-2] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for ele in arr: # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    if ele == mx: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


        print(sc) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


    else:

        print(mx) # Hits:2.0, Total execution time: 6.5 ms, Average time per hit: 3.25 ms 

",p02971,True
"import copy # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 38.833 ms, Average time per hit: 38.833 ms 


a = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 9.917 ms, Average time per hit: 9.917 ms 


a_max = max(a) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.793 ms, Average time per hit: 0.19825 ms 


    if a_max == a[i]: # Hits:3.0, Total execution time: 0.543 ms, Average time per hit: 0.181 ms 


        a_ = copy.deepcopy(a) # Hits:1.0, Total execution time: 9.709 ms, Average time per hit: 9.709 ms 


        del a_[i] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


        print((max(a_))) # Hits:1.0, Total execution time: 6.417 ms, Average time per hit: 6.417 ms 


    else:

        print(a_max) # Hits:2.0, Total execution time: 10.166 ms, Average time per hit: 5.083 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 38.292 ms, Average time per hit: 38.292 ms 


a = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 9.0 ms, Average time per hit: 9.0 ms 


a_sorted = sorted(a) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


a_max = a_sorted[-1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


a_sec = a_sorted[-2] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    if a_max == a[i]: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


        print(a_sec) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


    else:

        print(a_max) # Hits:2.0, Total execution time: 6.166 ms, Average time per hit: 3.083 ms 
",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 37.458 ms, Average time per hit: 37.458 ms 


A = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


t = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    A.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.209 ms, Average time per hit: 3.0696666666666665 ms 


while t != N: # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


    B = [0] * N # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 


    for i in range(N): # Hits:12.0, Total execution time: 1.585 ms, Average time per hit: 0.13208333333333333 ms 


        if t != i: # Hits:9.0, Total execution time: 0.999 ms, Average time per hit: 0.111 ms 


            B[i] = A[i] # Hits:6.0, Total execution time: 1.624 ms, Average time per hit: 0.27066666666666667 ms 


    print((max(B))) # Hits:3.0, Total execution time: 11.041 ms, Average time per hit: 3.6803333333333335 ms 


    t += 1 # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 41.541 ms, Average time per hit: 41.541 ms 


A = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


B = [0] * N # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.79 ms, Average time per hit: 0.1975 ms 


    A.append(int(eval(input()))) # Hits:3.0, Total execution time: 22.082 ms, Average time per hit: 7.360666666666667 ms 


max = max(A) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


B = sorted(A, reverse = True)

count = A.count(max)

if count > 1:

    for i in range(N):

        print(max)

else:

    for i in range(N):

        if A[i] != max:

            print(max)

        else:

            print((B[1]))
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 42.084 ms, Average time per hit: 42.084 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 10.708 ms, Average time per hit: 10.708 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    a_ = copy.copy(a) # Hits:3.0, Total execution time: 2.21 ms, Average time per hit: 0.7366666666666666 ms 


    a_.pop(i) # Hits:3.0, Total execution time: 0.624 ms, Average time per hit: 0.208 ms 


    print((max(a_))) # Hits:3.0, Total execution time: 7.625 ms, Average time per hit: 2.5416666666666665 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 34.875 ms, Average time per hit: 34.875 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 8.792 ms, Average time per hit: 8.792 ms 


a_ = sorted(a) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


a_max = a_[-1] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


a_sec = a_[-2] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    if a[i] == a_max: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        print(a_sec) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


    else:

        print(a_max) # Hits:2.0, Total execution time: 6.167 ms, Average time per hit: 3.0835 ms 
",p02971,True
"import copy





def main():

    n = int(eval(input()))

    a = []

    for _ in range(n):

        a.append(int(eval(input())))

    for i in range(len(a)):

        b = copy.deepcopy(a)

        b.pop(i)

        print((max(b)))





if __name__ == ""__main__"":

    main()
",,p02971,False
"n = int(input()) # Hits:1.0, Total execution time: 37.541 ms, Average time per hit: 37.541 ms 


nums = [input() for i in range(n)] # Hits:1.0, Total execution time: 4.333 ms, Average time per hit: 4.333 ms 


m = max(nums) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


m2 = sorted(nums)[-2] # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




[print(m) if nums.count(m) >=2 or nums[i] != m else print(m2) for i in range(n)] # Hits:1.0, Total execution time: 11.583 ms, Average time per hit: 11.583 ms 

","n = int(input()) # Hits:1.0, Total execution time: 35.375 ms, Average time per hit: 35.375 ms 


nums = [int(input()) for i in range(n)] # Hits:1.0, Total execution time: 3.666 ms, Average time per hit: 3.666 ms 


m = max(nums) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


m2 = sorted(nums)[-2] # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


[print(m) if nums[i] != m else print(m2) for i in range(n)] # Hits:1.0, Total execution time: 8.833 ms, Average time per hit: 8.833 ms 

",p02971,True
"import copy # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 39.917 ms, Average time per hit: 39.917 ms 


a_list = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


out_list = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


    a_list.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.25 ms, Average time per hit: 3.0833333333333335 ms 




is_max = False # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


#print(a_list)    

for i in range(n): # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


    if not is_max: # Hits:3.0, Total execution time: 0.208 ms, Average time per hit: 0.06933333333333333 ms 


        a_copy = copy.copy(a_list) # Hits:3.0, Total execution time: 1.791 ms, Average time per hit: 0.597 ms 


        a_copy.pop(i) # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


        #print(a_copy)

        a_max = max(a_copy) # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


        #print(a_max)

        out_list.append(a_max) # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


        if a_list[i] == a_max: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


            is_max = True # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


            out_list += [a_max for i in range(n-i-1)] # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 


#print(out_list)        

print((""\n"".join(map(str, out_list)))) # Hits:1.0, Total execution time: 6.209 ms, Average time per hit: 6.209 ms 
","

n = int(eval(input())) # Hits:1.0, Total execution time: 37.75 ms, Average time per hit: 37.75 ms 


a = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.791 ms, Average time per hit: 0.19775 ms 


    a.append(int(eval(input()))) # Hits:3.0, Total execution time: 14.917 ms, Average time per hit: 4.972333333333333 ms 


    

a_copy = list(a) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


a.sort(reverse=True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




max_1 = a[0] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


max_count = a.count(max_1) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




for i in a: # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    if i < max_1: # Hits:2.0, Total execution time: 0.374 ms, Average time per hit: 0.187 ms 


        max_2 = i # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        break # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


        

for a in a_copy: # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


    if a == max_1 and max_count == 1: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


        print(max_2) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


    else:

        print(max_1) # Hits:2.0, Total execution time: 7.083 ms, Average time per hit: 3.5415 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 196.333 ms, Average time per hit: 196.333 ms 


a = [0]*n # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


    a[i] = int(eval(input())) # Hits:3.0, Total execution time: 11.626 ms, Average time per hit: 3.8753333333333333 ms 


b = copy.deepcopy(a) # Hits:1.0, Total execution time: 7.125 ms, Average time per hit: 7.125 ms 


amax = max(a) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


b.remove(amax) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


amax2 = max(b) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


    if a[i] == amax: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


        print(amax2) # Hits:1.0, Total execution time: 1.166 ms, Average time per hit: 1.166 ms 


    else:

        print(amax) # Hits:2.0, Total execution time: 9.792 ms, Average time per hit: 4.896 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 38.5 ms, Average time per hit: 38.5 ms 


a = [0]*n # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.834 ms, Average time per hit: 0.2085 ms 


    a[i] = int(eval(input())) # Hits:3.0, Total execution time: 9.708 ms, Average time per hit: 3.236 ms 


amax = sorted(a)[-1] # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


amax2 = sorted(a)[-2] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    if a[i] == amax: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


        print(amax2) # Hits:1.0, Total execution time: 1.041 ms, Average time per hit: 1.041 ms 


    else:

        print(amax) # Hits:2.0, Total execution time: 6.417 ms, Average time per hit: 3.2085 ms 

",p02971,True
"import copy # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 37.375 ms, Average time per hit: 37.375 ms 


A_ = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 9.542 ms, Average time per hit: 9.542 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


    A = copy.copy(A_) # Hits:3.0, Total execution time: 2.207 ms, Average time per hit: 0.7356666666666666 ms 


    A.pop(i) # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


    print((max(A))) # Hits:3.0, Total execution time: 7.875 ms, Average time per hit: 2.625 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 38.583 ms, Average time per hit: 38.583 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.334 ms, Average time per hit: 9.334 ms 


A_ = sorted(A) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


max1 = A_[-1] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


max2 = A_[-2] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    if A[i] == max1: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


        print(max2) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


    else:

        print(max1) # Hits:2.0, Total execution time: 5.834 ms, Average time per hit: 2.917 ms 
",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 38.541 ms, Average time per hit: 38.541 ms 


a = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 9.292 ms, Average time per hit: 9.292 ms 




m = max(a) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


count = a.count(m) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




if count != 1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    for i in range(n): # Hits:3.0, Total execution time: 0.668 ms, Average time per hit: 0.22266666666666665 ms 


        print(m) # Hits:2.0, Total execution time: 5.834 ms, Average time per hit: 2.917 ms 




else:

    switch = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    for i in range(n-1): # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


        if a[i] == m: # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


            a.remove(m) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


            m2max = max(a) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


            print(m2max) # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


            a.append(m) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


            switch = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        else:

            print(m) # Hits:1.0, Total execution time: 4.583 ms, Average time per hit: 4.583 ms 


    

    if switch == 1: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        print(m) # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 


    else:

        a.remove(m)

        m2max = max(a)

        print(m2max)","n=int(eval(input())) # Hits:1.0, Total execution time: 40.917 ms, Average time per hit: 40.917 ms 


s=[int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 10.375 ms, Average time per hit: 10.375 ms 


lst=sorted(s,reverse=True) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


max1=lst[0] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


max2=lst[1] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


    if s[i]==max1: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


        print(max2) # Hits:1.0, Total execution time: 11.375 ms, Average time per hit: 11.375 ms 


    else:

        print(max1) # Hits:2.0, Total execution time: 5.791 ms, Average time per hit: 2.8955 ms 
",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 31.458 ms, Average time per hit: 31.458 ms 


list_A = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for _ in range(N): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


    A = int(eval(input())) # Hits:3.0, Total execution time: 8.166 ms, Average time per hit: 2.722 ms 


    list_A.append(A) # Hits:3.0, Total execution time: 0.501 ms, Average time per hit: 0.167 ms 


    

A = max(list_A) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


index_A = list_A.index(A) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    if list_A[i] == A: # Hits:3.0, Total execution time: 0.501 ms, Average time per hit: 0.167 ms 


        list_A[i] = 0 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


        print((max(list_A))) # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


        list_A[i] = A # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    else:

        print(A) # Hits:2.0, Total execution time: 5.834 ms, Average time per hit: 2.917 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 37.417 ms, Average time per hit: 37.417 ms 


list_A = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for _ in range(N): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


    A = int(eval(input())) # Hits:3.0, Total execution time: 8.834 ms, Average time per hit: 2.9446666666666665 ms 


    list_A.append(A) # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


    

A = max(list_A) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


index_A = list_A.index(A) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




list_B = sorted(list_A, reverse=True) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


B = list_B[1] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




for i in range(N):     # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    if list_A[i] == A: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


        print(B) # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


    else:

        print(A) # Hits:2.0, Total execution time: 6.042 ms, Average time per hit: 3.021 ms 
",p02971,True
"#c

n = int(eval(input())) # Hits:1.0, Total execution time: 38.958 ms, Average time per hit: 38.958 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.542 ms, Average time per hit: 9.542 ms 


import copy # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


ans = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


a_max = max(a) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in range(len(a)): # Hits:4.0, Total execution time: 0.875 ms, Average time per hit: 0.21875 ms 


    if a[i]==a_max: # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


        tmp = copy.deepcopy(a) # Hits:1.0, Total execution time: 8.208 ms, Average time per hit: 8.208 ms 


        tmp.pop(i) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


        print((max(tmp))) # Hits:1.0, Total execution time: 5.167 ms, Average time per hit: 5.167 ms 


    else:

        print(a_max) # Hits:2.0, Total execution time: 10.459 ms, Average time per hit: 5.2295 ms 
","#c

n = int(eval(input())) # Hits:1.0, Total execution time: 31.208 ms, Average time per hit: 31.208 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 8.5 ms, Average time per hit: 8.5 ms 


b = sorted(a, reverse=True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


a_max = b[0] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(len(a)): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    if a[i] == a_max: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


        print((b[1])) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


    else:

        print(a_max) # Hits:2.0, Total execution time: 6.0 ms, Average time per hit: 3.0 ms 
",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 31.542 ms, Average time per hit: 31.542 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.791 ms, Average time per hit: 9.791 ms 


b = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


    b = sorted(a.copy(), reverse=True) # Hits:3.0, Total execution time: 1.208 ms, Average time per hit: 0.4026666666666667 ms 


    if a[i] == b[0]: # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


        print((b[1])) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


    else:

        print((b[0])) # Hits:2.0, Total execution time: 6.208 ms, Average time per hit: 3.104 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 38.375 ms, Average time per hit: 38.375 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.583 ms, Average time per hit: 9.583 ms 


b = sorted(a.copy(), reverse=True) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


    if a[i] == b[0]: # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


        print((b[1])) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


    else:

        print((b[0])) # Hits:2.0, Total execution time: 5.958 ms, Average time per hit: 2.979 ms 

",p02971,True
"import copy # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 37.208 ms, Average time per hit: 37.208 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 9.25 ms, Average time per hit: 9.25 ms 




B = copy.copy(A) # B=AとするだけではAを変更した時にBも変更してしまう # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    A[i] = 0 # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


    print((max(A))) # Hits:3.0, Total execution time: 7.459 ms, Average time per hit: 2.4863333333333335 ms 


    A[i] = B[i] # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 
","#import copy



N = int(eval(input())) # Hits:1.0, Total execution time: 33.542 ms, Average time per hit: 33.542 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 9.083 ms, Average time per hit: 9.083 ms 




B = sorted(A, reverse=True) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


m1 = B[0] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


m2 = B[1] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    if A[i] == m1: # Hits:3.0, Total execution time: 0.499 ms, Average time per hit: 0.16633333333333333 ms 


        print(m2) # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


    else:

        print(m1) # Hits:2.0, Total execution time: 6.124 ms, Average time per hit: 3.062 ms 




"""""" # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


# TLE

B = copy.copy(A) # B=AとするだけではAを変更した時にBも変更してしまう

for i in range(N):

    A[i] = 0

    print(max(A))

    A[i] = B[i]

""""""",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 41.167 ms, Average time per hit: 41.167 ms 


l = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 10.958 ms, Average time per hit: 10.958 ms 


for i in l: # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


  if i == max(l): # Hits:3.0, Total execution time: 0.875 ms, Average time per hit: 0.2916666666666667 ms 


    print((sorted(l)[-2])) # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


  else:

    print((max(l))) # Hits:2.0, Total execution time: 6.166 ms, Average time per hit: 3.083 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 38.625 ms, Average time per hit: 38.625 ms 


l = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 8.875 ms, Average time per hit: 8.875 ms 


a = max(l) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


b = sorted(l)[-2] # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


for i in l: # Hits:4.0, Total execution time: 0.499 ms, Average time per hit: 0.12475 ms 


  print((b if i == a else a)) # Hits:3.0, Total execution time: 7.166 ms, Average time per hit: 2.3886666666666665 ms 

",p02971,True
"import copy # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 38.917 ms, Average time per hit: 38.917 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 11.458 ms, Average time per hit: 11.458 ms 


ex_a = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


  ex_a = copy.deepcopy(a) # Hits:3.0, Total execution time: 15.5 ms, Average time per hit: 5.166666666666667 ms 


  ex_a[i] = -1 # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


  print((max(ex_a))) # Hits:3.0, Total execution time: 9.959 ms, Average time per hit: 3.3196666666666665 ms 
","#import copy

# 最大値が2つ以上あるものと1つしかないもので場合分けをする

n = int(eval(input())) # Hits:1.0, Total execution time: 36.209 ms, Average time per hit: 36.209 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 8.791 ms, Average time per hit: 8.791 ms 


b = sorted(a) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


if b[-1] == b[-2]: # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


  for i in range(n): # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


    print((b[-1])) # Hits:2.0, Total execution time: 6.708 ms, Average time per hit: 3.354 ms 


else:

  p = a.index(b[-1]) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  for i in range(n): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    if i == p: # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


      print((b[-2])) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


    else:

      print((b[-1])) # Hits:2.0, Total execution time: 5.417 ms, Average time per hit: 2.7085 ms 


#deepcopy is so slow!!

# ex_a = []

# for i in range(n):

#   ex_a = copy.deepcopy(a)

#   ex_a[i] = -1

#   print(max(ex_a))",p02971,True
"from copy import copy # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


from collections import deque # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 37.5 ms, Average time per hit: 37.5 ms 




A = [None]*N # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.751 ms, Average time per hit: 0.18775 ms 


    A[i] = int(eval(input())) # Hits:3.0, Total execution time: 8.792 ms, Average time per hit: 2.9306666666666663 ms 




Asorted = deque(sorted(A)) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


    

for i in range(N): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    Ai = A[i] # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    Asortedcopy = copy(Asorted) # Hits:3.0, Total execution time: 3.541 ms, Average time per hit: 1.1803333333333332 ms 


    Amax = Asortedcopy.pop() # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


    if Amax == Ai: # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


        Amax = Asortedcopy.pop() # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    print(Amax) # Hits:3.0, Total execution time: 6.624 ms, Average time per hit: 2.208 ms 

","from copy import copy # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


from collections import deque # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 34.083 ms, Average time per hit: 34.083 ms 




A = [None]*N # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


Adict = {} # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    Ai = int(eval(input())) # Hits:3.0, Total execution time: 8.75 ms, Average time per hit: 2.9166666666666665 ms 


    A[i] = Ai # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


    Adict[i] = Ai # Hits:3.0, Total execution time: 0.374 ms, Average time per hit: 0.12466666666666668 ms 




Asorted = deque(sorted(A)) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


first = Asorted.pop() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


second = Asorted.pop() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    Ai = Adict[i] # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


    Amax = first # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


    if Amax == Ai: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        Amax = second # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    print(Amax) # Hits:3.0, Total execution time: 6.626 ms, Average time per hit: 2.2086666666666663 ms 

",p02971,True
"import heapq # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


N = int(input().strip()) # Hits:1.0, Total execution time: 33.625 ms, Average time per hit: 33.625 ms 


a = [list([int(x)*(-1) for x in input().split()]) for i in range(N)] # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    tmp=a[:i]+a[i+1:] # Hits:3.0, Total execution time: 1.0 ms, Average time per hit: 0.3333333333333333 ms 


    heapq.heapify(tmp) # Hits:3.0, Total execution time: 1.001 ms, Average time per hit: 0.33366666666666667 ms 


    ans=heapq.heappop(tmp)[0]*(-1) # Hits:3.0, Total execution time: 0.707 ms, Average time per hit: 0.23566666666666666 ms 


    print(ans) # Hits:3.0, Total execution time: 6.709 ms, Average time per hit: 2.2363333333333335 ms 
","N = int(input().strip()) # Hits:1.0, Total execution time: 30.833 ms, Average time per hit: 30.833 ms 


a = [int(input().strip()) for i in range(N)] # Hits:1.0, Total execution time: 3.75 ms, Average time per hit: 3.75 ms 




a_s=sorted(a,reverse=True) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


mx=a_s[0] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i, val in enumerate(a): # Hits:4.0, Total execution time: 1.083 ms, Average time per hit: 0.27075 ms 


    if val!=mx: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


        print(mx) # Hits:2.0, Total execution time: 6.417 ms, Average time per hit: 3.2085 ms 


    else:

        print((a_s[1])) # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 
",p02971,True
"import copy # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 37.334 ms, Average time per hit: 37.334 ms 


a = list(map(int,[eval(input()) for i in range(n)])) # Hits:1.0, Total execution time: 9.166 ms, Average time per hit: 9.166 ms 


a_copy = copy.copy(a) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


  a=copy.copy(a_copy) # Hits:3.0, Total execution time: 1.542 ms, Average time per hit: 0.514 ms 


  a.remove(a[i]) # Hits:3.0, Total execution time: 0.666 ms, Average time per hit: 0.222 ms 


  print((max(a))) # Hits:3.0, Total execution time: 10.084 ms, Average time per hit: 3.3613333333333335 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 37.208 ms, Average time per hit: 37.208 ms 


A = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.585 ms, Average time per hit: 0.14625 ms 


    A.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.25 ms, Average time per hit: 3.0833333333333335 ms 


max_A = max(A) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


max_num = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


    if A[i] == max_A: # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


        # 最大値が複数ある場合の計算削減

        max_num += 1 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


        if max_num > 1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


            print(max_A) # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


        else:

            print((max(A[:i] + A[i + 1:]))) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


    else:

        print(max_A) # Hits:2.0, Total execution time: 9.166 ms, Average time per hit: 4.583 ms 
",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 40.042 ms, Average time per hit: 40.042 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 9.084 ms, Average time per hit: 9.084 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    A_copy = A[:] # Hits:3.0, Total execution time: 0.457 ms, Average time per hit: 0.15233333333333335 ms 


    removed_A = A_copy.pop(i) # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    print((max(A_copy))) # Hits:3.0, Total execution time: 7.0 ms, Average time per hit: 2.3333333333333335 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 41.041 ms, Average time per hit: 41.041 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 9.833 ms, Average time per hit: 9.833 ms 


sorted_A = sorted(A[:]) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.582 ms, Average time per hit: 0.1455 ms 


    if A[i] == sorted_A[-1]: # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


        print((sorted_A[-2])) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


    else:

        print((sorted_A[-1])) # Hits:2.0, Total execution time: 6.084 ms, Average time per hit: 3.042 ms 

",p02971,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 38.583 ms, Average time per hit: 38.583 ms 


array = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    array.append(int(eval(input()))) # Hits:3.0, Total execution time: 10.083 ms, Average time per hit: 3.361 ms 




m = max(array) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


c = array.count(m) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




for e in array: # Hits:4.0, Total execution time: 0.499 ms, Average time per hit: 0.12475 ms 


    sa = array[:] # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


    if e != m: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


        print(m) # Hits:2.0, Total execution time: 9.208 ms, Average time per hit: 4.604 ms 


    else:

        if 1 < c: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


            print(m) # Hits:2.0, Total execution time: 5.917 ms, Average time per hit: 2.9585 ms 


        else:

            sa.remove(m) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


            print((max(sa))) # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 38.208 ms, Average time per hit: 38.208 ms 


array = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


    array.append(int(eval(input()))) # Hits:3.0, Total execution time: 10.583 ms, Average time per hit: 3.5276666666666667 ms 




m = max(array) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


c = array.count(m) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


sa = array[:] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


sa.remove(m) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


m2 = max(sa) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




for e in array: # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 




    if e != m: # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


        print(m) # Hits:2.0, Total execution time: 5.917 ms, Average time per hit: 2.9585 ms 


    else:

        if 1 < c: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


            print(m) # Hits:2.0, Total execution time: 5.249 ms, Average time per hit: 2.6245 ms 


        else:

            print(m2) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 

",p02971,True
"N=int(eval(input())) # Hits:1.0, Total execution time: 36.625 ms, Average time per hit: 36.625 ms 


A=[int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 8.959 ms, Average time per hit: 8.959 ms 


A_sub = A.copy() # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


A_sub.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


#print(A)



for i in range(N): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    # print(A[i])

    A_sub2 = A_sub.copy() # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    A_sub2.remove(A[i]) # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


    print((A_sub2[0])) # Hits:3.0, Total execution time: 6.75 ms, Average time per hit: 2.25 ms 


    
","N=int(eval(input())) # Hits:1.0, Total execution time: 31.5 ms, Average time per hit: 31.5 ms 


A=[int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 11.917 ms, Average time per hit: 11.917 ms 


A_sub = A.copy() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


MAX = max(A) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


A_sub.remove(MAX) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


MAX2 = max(A_sub) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


    if A[i] < MAX: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


        print(MAX) # Hits:2.0, Total execution time: 6.75 ms, Average time per hit: 3.375 ms 


    elif A[i] == MAX: # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


        print(MAX2) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 
",p02971,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 37.167 ms, Average time per hit: 37.167 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 9.042 ms, Average time per hit: 9.042 ms 




ans = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


front_max_list, back_max_list = [0], [0] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.543 ms, Average time per hit: 0.13575 ms 


    front_max_list.append(max(front_max_list[i], A[i])) # Hits:3.0, Total execution time: 0.958 ms, Average time per hit: 0.3193333333333333 ms 


    back_max_list.append(max(back_max_list[i], A[N - i - 1])) # Hits:3.0, Total execution time: 0.917 ms, Average time per hit: 0.3056666666666667 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    print((max(front_max_list[i], back_max_list[N - i - 1]))) # Hits:3.0, Total execution time: 7.501 ms, Average time per hit: 2.5003333333333333 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 38.084 ms, Average time per hit: 38.084 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 9.125 ms, Average time per hit: 9.125 ms 




A_ = sorted(A.copy(), reverse=True) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


max_num = [A_[0], A_[1]] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    if A[i] != max_num[0]: # Hits:3.0, Total execution time: 0.543 ms, Average time per hit: 0.181 ms 


        print((max_num[0])) # Hits:2.0, Total execution time: 6.208 ms, Average time per hit: 3.104 ms 


    else:

        print((max_num[1])) # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 

",p02971,True
"from collections import defaultdict



N = int(eval(input()))

A = list(map(int, input().split()))

B = list(map(int, input().split()))



for a, b in zip(sorted(A), sorted(B)):

    if a > b:

        print('No')

        exit()



AI = [(a, i) for i, a in enumerate(A)]

BI = [(b, i) for i, b in enumerate(B)]

AI.sort()

BI.sort()



orderA = {}

orderB = {}



for k, ((_, i), (_, j)) in enumerate(zip(AI, BI)):

    orderA[i] = k

    orderB[j] = k



path = 0

visited = [False] * N

for i, a in enumerate(orderA):

    if visited[i]:

        continue

    visited[i] = True

    length = 0

    now = orderB[i]

    while now != a:

        now = orderA[now]

        visited[now] = True

        now = orderB[now]

        length += 1

    path = max(path, length)



if path <= N - 2:

    print('Yes')

else:

    print('No')",,p02867,False
"def main(): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    n = int(eval(input()))

    a = list(map(int, input().split()))

    b = list(map(int, input().split()))

    ab = sorted([[a[i], b[i]] for i in range(n)],key=lambda x:x[1])

    num=131071



    m=num+n

    segtree=[10**9+1]*m

    for i in range(num,m):

        segtree[i] = ab[i - num][0]

    for i in range(num-1,-1,-1):

        j=2*i+1

        if j>=m:

            segtree[i]=10**9+1

        elif j+1>=m:

            segtree[i]=segtree[j]

        else:

            segtree[i] = min(segtree[j], segtree[j + 1])



    #探す

    def search(i, s):

        if i >= num:

            return i - num

        k = 2 * i + 1

        if k+2<=m:

            if segtree[k+1] <= s:

                return search(k+1, s)

        if 2*i+2<=m:

            if segtree[k] <= s:

                return search(k, s)

        return -1

    

    #更新

    def update_good(i, s):

        if segtree[i] > s:

            segtree[i] = s

            update_good((i - 1) // 2, s)

    

    def update_bad(i):

        k=(i - 1) // 2

        if i % 2 == 1:

            if m > i + 1:

                temp=min(segtree[i+1],segtree[i])

                if segtree[k]<temp:

                    segtree[k] = temp

                    update_bad(k)

            else:

                segtree[k] = segtree[i]

                update_bad(k)

        else:

            if i != 0:

                temp=min(segtree[i-1],segtree[i])

                if segtree[k]<temp:

                    segtree[k] = temp

                    update_bad(k)



    cnt = 0

    for i in range(n):

        a,b=ab[i][0],ab[i][1]

        if a > b:

            t = search(0, b)

            if t <= i:

                print(""No"")

                return 0

            update_good(num + i, a)

            segtree[num + t] = a

            update_bad(num + t)

            ab[i][0], ab[t][0] = ab[t][0], a

            cnt+=1

    if cnt <= n - 2:

        print(""Yes"")

    else:

        print(""No"")

    

main() # Hits:1.0, Total execution time: 39852.417 ms, Average time per hit: 39852.417 ms 
","def main(): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    n = int(eval(input()))

    a = list(map(int, input().split()))

    b = list(map(int, input().split()))

    ab = sorted([[a[i], b[i]] for i in range(n)], key=lambda x: x[1])



    num=1

    while num < n:

        num *= 2

    num-=1

    inf=10**9+1



    m=num+n

    segtree=[inf]*m

    for i in range(num,m):

        segtree[i] = ab[i - num][0]

    for i in range(num-1,-1,-1):

        j=2*i+1

        if j>=m:

            segtree[i]=inf

        elif j+1>=m:

            segtree[i]=segtree[j]

        else:

            segtree[i] = min(segtree[j], segtree[j + 1])



    #探す

    def search(i, s):

        if i >= num:

            return i - num

        k = 2 * i + 1

        if k+2<=m:

            if segtree[k+1] <= s:

                return search(k+1, s)

        if 2*i+2<=m:

            if segtree[k] <= s:

                return search(k, s)

        return -1

    

    #更新

    def update_good(i, s):

        if segtree[i] > s:

            segtree[i] = s

            update_good((i - 1) // 2, s)

    

    def update_bad(i):

        k=(i - 1) // 2

        if i % 2 == 1:

            if m > i + 1:

                temp=min(segtree[i+1],segtree[i])

                if segtree[k]<temp:

                    segtree[k] = temp

                    update_bad(k)

            else:

                segtree[k] = segtree[i]

                update_bad(k)

        else:

            if i != 0:

                temp=min(segtree[i-1],segtree[i])

                if segtree[k]<temp:

                    segtree[k] = temp

                    update_bad(k)



    cnt = 0

    for i in range(n):

        a,b=ab[i][0],ab[i][1]

        if a > b:

            t = search(0, b)

            if t <= i:

                print(""No"")

                return 0

            update_good(num + i, a)

            segtree[num + t] = a

            update_bad(num + t)

            ab[i][0], ab[t][0] = ab[t][0], a

            cnt+=1

    if cnt <= n - 2:

        print(""Yes"")

    else:

        print(""No"")

    

main() # Hits:1.0, Total execution time: 73.209 ms, Average time per hit: 73.209 ms 
",p02867,True
"def main(): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    from functools import lru_cache

    n = int(eval(input()))

    a = list(map(int, input().split()))

    b = list(map(int, input().split()))

    ab = sorted([[a[i], b[i]] for i in range(n)], key=lambda x: x[1])



    #セグ木の要素数（num）および階層（fl）を計算

    num = 1

    fl = 1

    while num < n:

        num *= 2

        fl+=1

    num -= 1



    #上限（inf）を決定(下限とかに適宜変える)

    inf = 10 ** 9 + 1



    #関数（モノイド、今回はmin）を設定

    monoid=min



    #セグ木を構築

    m=num+n

    segtree = [None] * m

    #segtree[m]以降に代入したい配列を入力していく

    for i in range(num, m):

        segtree[i] = ab[i - num][0]

    #segtree[m]以降の情報を使って、0に向かってセグ木を構築していく

    for i in range(num - 1, -1, -1):

        j=2*i+1

        if j>=m:

            segtree[i]=inf

        else:

            segtree[i] = monoid(segtree[j], segtree[min(j + 1, m - 1)])



    #条件を満たす(サンプルの条件はs以下になること)最大のインデックスを返す関数

    @lru_cache(maxsize=None)

    def max_index(s):

        #条件の定義

        func = lambda x: x <= s

        #探していく

        i=0

        while i < num:

            k = 2 * i + 1

            if k + 1 < m:

                if func(segtree[k + 1]):

                    i = k + 1

                    continue

            if k < m:

                if func(segtree[k]):

                    i = k

                    continue

            return - 1

        return i - num

            

    #半開区間[lower,upper)の最小値（とか）を探す関数

    @lru_cache(maxsize=None)

    def search_new(lower, upper):

        q = [[0, 1]]  #インデックス、階層

        #返り値を初期化

        ret = inf      

        while q:

            i, f = q.pop()

            #popしたインデックスと階層から、求める下限と上限を算出する

            #幅

            width = pow(2, fl - f)

            #下限と中央と上限

            kagen = (i - pow(2, f - 1) + 1) * width

            chuo = kagen + width // 2

            jogen = kagen + width

            k = 2 * i + 1

            if lower <= kagen and jogen <= upper:

                ret = monoid(ret, segtree[i])

                continue

            if k < m:

                if lower <= kagen and chuo <= upper:

                    ret = monoid(ret, segtree[k])

                elif lower <= chuo:

                    q.append([k, f + 1])

            if k + 1 < m:

                if lower <= chuo and jogen <= upper:

                    ret = monoid(ret, segtree[k + 1])

                elif chuo <= upper:

                    q.append([k + 1, f + 1])

        return ret



    #segtree[i]をsに更新したときにセグ木全体を更新する関数

    @lru_cache(maxsize=None)

    def update(i, s):

        segtree[i] = s

        temp = s

        while i!=0:

            k = (i - 1) // 2

            if i % 2 == 1:

                temp = monoid(segtree[min(i + 1, m - 1)], temp)

            else:

                temp = monoid(segtree[i - 1], temp)

            if segtree[k]!=temp:

                segtree[k] = temp

                i = k

                continue

            break



    cnt = 0

    for i in range(n):

        a,b=ab[i][0],ab[i][1]

        if a > b:

            t = max_index(b)

            if t <= i:

                print(""No"")

                return 0

            update(num + i, a)

            update(num + t, a)

            ab[i][0], ab[t][0] = ab[t][0], a

            cnt+=1

    if cnt <= n - 2:

        print(""Yes"")

    else:

        print(""No"")

    

main() # Hits:1.0, Total execution time: 82.917 ms, Average time per hit: 82.917 ms 

","def main(): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    n = int(eval(input()))

    a = list(map(int, input().split()))

    b = list(map(int, input().split()))

    ab = sorted([[a[i], b[i]] for i in range(n)], key=lambda x: x[1])



    class segtree():

        def __init__(self,base,monoid,ini):#self,モノイド,元の配列

            #ini：上限（下限）,base：元の配列,monoid：モノイド,tree：セグ木,depth：treeの深さ,

            #basesize：baseの要素数,treesize：treeの要素数,num：treesize-basesize

            # 初期値（上限とか下限）を決定

            self.ini=ini

            #セグ木の要素数（num）および深さ（depth）を計算

            self.basesize=len(base)

            self.num,self.depth=1,1

            while self.num<self.basesize:

                self.num*=2

                self.depth+=1

            self.num-=1

            #関数（モノイド、今回はmin）を設定

            self.monoid=monoid

            #セグ木を構築

            self.treesize=self.num*2+1

            self.tree=[None]*self.treesize

            #segtree[m]以降に代入したい配列を入力していく

            for i in range(self.num, self.num+self.basesize):self.tree[i]=base[i-self.num]

            for i in range(self.num+self.basesize, self.treesize):self.tree[i]=ini

            #segtree[m]以降の情報を使って、0に向かってセグ木を構築していく

            for i in range(self.num-1,-1,-1):

                self.tree[i]=monoid(self.tree[2*i+1],self.tree[2*i+2])

        

        #条件を満たす(サンプルの条件はs以下になること)最大のインデックスを返す関数

        def max_index(self,index_func):

            #探していく

            i=0

            while i<self.num:

                k=2*i+1

                if index_func(self.tree[k+1]):

                    i=k+1

                    continue

                if index_func(self.tree[k]):

                    i=k

                    continue

                return -1

            return i-self.num

    

        #条件を満たす(サンプルの条件はs以下になること)最小のインデックスを返す関数

        def min_index(self,index_func):

            #探していく

            i=0

            while i<self.num:

                k=2*i+1

                if index_func(self.tree[k]):

                    i=k

                    continue

                if index_func(self.tree[k+1]):

                    i=k+1

                    continue

                return -1

            return i-self.num

    

        #半開区間[lower,upper)の最小値（とか）を探す関数

        def search(self,lower,upper):

            #返り値を初期化

            ret=self.ini

            l=lower+self.num

            r=upper+self.num

            while l<r:

                if r%2==0:

                    r-=1

                    ret=self.monoid(ret,self.tree[r])

                if l%2==0:

                    ret=self.monoid(ret,self.tree[l])

                    l+=1

                l//=2

                r//=2

            return ret

    

        #base[i]をsに更新したときにセグ木全体を更新する関数

        def update(self,index,new_value):

            i=index+self.num

            self.tree[i]=new_value

            while i!=0:

                i=(i-1)//2

                temp=self.monoid(self.tree[2*i+1],self.tree[2*i+2])

                if self.tree[i]!=temp:

                    self.tree[i]=temp

                    continue

                break

    

    s=segtree([a for a,b in ab],min,10**9+1)

    cnt = 0

    for i in range(n):

        a,b=ab[i][0],ab[i][1]

        if a > b:

            t = s.max_index(lambda x:x<=b)

            if t <= i:

                print(""No"")

                return 0

            s.update(i, a)

            s.update(t, a)

            ab[i][0], ab[t][0] = ab[t][0], a

            cnt+=1

    if cnt <= n - 2:

        print(""Yes"")

    else:

        print(""No"")

    

main() # Hits:1.0, Total execution time: 76.958 ms, Average time per hit: 76.958 ms 

",p02867,True
"while True: # Hits:4.0, Total execution time: 0.375 ms, Average time per hit: 0.09375 ms 


    (m, f, r) = [int(i) for i in input().split()] # Hits:4.0, Total execution time: 45.001 ms, Average time per hit: 11.25025 ms 


    if m == f == r == -1: # Hits:4.0, Total execution time: 0.834 ms, Average time per hit: 0.2085 ms 


        break # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 




    total = m + f # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


    if m == -1 or f == -1 or total < 30: # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


        print('F') # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 


    elif total < 50 and r < 50: # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


        print('D')

    elif total < 65: # Hits:2.0, Total execution time: 0.291 ms, Average time per hit: 0.1455 ms 


        print('C') # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


    elif total < 80: # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


        print('B')

    else:

        print('A') # Hits:1.0, Total execution time: 5.542 ms, Average time per hit: 5.542 ms 
","while True: # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


    m, f, r = [int(i) for i in input().split()] # Hits:4.0, Total execution time: 39.542 ms, Average time per hit: 9.8855 ms 




    if m == f == r == -1: # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


        break # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




    total = m + f # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    if m == -1 or f == -1 or total < 30: # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


        print('F') # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




    elif total < 50 and r < 50: # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


        print('D')



    elif total < 65: # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


        print('C') # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 




    elif total < 80: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        print('B')

        

    else:

        print('A') # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 
",p02411,True
"while 1: # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


 m,f,r=list(map(int,input().split()));s=m+f # Hits:4.0, Total execution time: 37.249 ms, Average time per hit: 9.31225 ms 


 if m==f==r<0:break # Hits:4.0, Total execution time: 0.582 ms, Average time per hit: 0.1455 ms 


 if(m*f<0)|(s<30):print('F') # Hits:3.0, Total execution time: 1.167 ms, Average time per hit: 0.389 ms 


 elif(s<50)*(r<50):print('D') # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


 elif s<65:print('C') # Hits:2.0, Total execution time: 1.125 ms, Average time per hit: 0.5625 ms 


 elif s<80:print('B') # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


 else:print('A') # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 

","while 1: # Hits:4.0, Total execution time: 0.377 ms, Average time per hit: 0.09425 ms 


 m,f,r=list(map(int,input().split()));s=m+f # Hits:4.0, Total execution time: 38.749 ms, Average time per hit: 9.68725 ms 


 if m==f==r<0:break # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


 if m*f<0 or s<30:print('F') # Hits:3.0, Total execution time: 1.168 ms, Average time per hit: 0.3893333333333333 ms 


 elif(s<50)*(r<50):print('D') # Hits:2.0, Total execution time: 0.291 ms, Average time per hit: 0.1455 ms 


 elif s<65:print('C') # Hits:2.0, Total execution time: 1.125 ms, Average time per hit: 0.5625 ms 


 elif s<80:print('B') # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


 else:print('A') # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 

",p02411,True
"def print_list_split_whitespace(a): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    for x in a[:-1]:

        print(x, end=' ')

    print(a[-1])





def calc_puddle(map, l, r): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    ans = 0

    top = map[l]

    before = map[l]

    for i in range(l + 1, r + 1):

        be_ans = ans

        if map[i] == before:

           ans += top - map[i]

        elif map[i] < before:

            ans += top - map[i] - 0.5

            before = map[i]

        else:

            ans += top - map[i] + 0.5

            before = map[i]

        #print(ans - be_ans)

    return int(ans)





cross_section = list(input()) # Hits:1.0, Total execution time: 40.25 ms, Average time per hit: 40.25 ms 


map = [0] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


y = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for c in cross_section: # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 


    if c == ""/"": # Hits:4.0, Total execution time: 0.501 ms, Average time per hit: 0.12525 ms 


        y += 1 # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


        map.append(y) # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    elif c == ""\\"": # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


        y += -1 # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


        map.append(y) # Hits:2.0, Total execution time: 0.5 ms, Average time per hit: 0.25 ms 


    else:

        map.append(y) # Hits:7.0, Total execution time: 1.959 ms, Average time per hit: 0.27985714285714286 ms 


max_right = len(map) - 1 # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


#print(map)

#print(len(map))



left = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


right = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while left < max_right: # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 


    #print(left, right)

    if map[left] <= map[right]: # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


        left = right # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        right += 1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


        if right == max_right: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


            left = max_right # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    elif right == max_right: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


        break

    else:

        right += 1 # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


        if map[left] == map[right]: # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


            ans.append(calc_puddle(map, left, right)) # Hits:1.0, Total execution time: 4.458 ms, Average time per hit: 4.458 ms 


        elif right == max_right: # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


            left += 1 # Hits:4.0, Total execution time: 0.376 ms, Average time per hit: 0.094 ms 


            right = left + 1 # Hits:4.0, Total execution time: 0.333 ms, Average time per hit: 0.08325 ms 


            if right == max_right: # Hits:4.0, Total execution time: 0.334 ms, Average time per hit: 0.0835 ms 


                left = max_right



print(sum(ans)) # Hits:1.0, Total execution time: 6.25 ms, Average time per hit: 6.25 ms 


ans.insert(0, len(ans)) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


print_list_split_whitespace(ans) # Hits:1.0, Total execution time: 3.375 ms, Average time per hit: 3.375 ms 

","def print_list_split_whitespace(a): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    for x in a[:-1]:

        print(x, end=' ')

    print(a[-1])

    

s = list(input()) # Hits:1.0, Total execution time: 28.833 ms, Average time per hit: 28.833 ms 


st1 = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


st2 = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for index, c in enumerate(s): # Hits:5.0, Total execution time: 0.999 ms, Average time per hit: 0.1998 ms 


    if c == ""\\"": # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


        st1.append(index) # Hits:2.0, Total execution time: 0.501 ms, Average time per hit: 0.2505 ms 


    elif c == ""/"": # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


        if len(st1) >= 1: # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


            pop_index = st1.pop() # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


            area = index - pop_index # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


            while True: # Hits:3.0, Total execution time: 0.166 ms, Average time per hit: 0.05533333333333334 ms 


                if len(st2) >= 1: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


                    ind, pop_area = st2.pop() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


                else:

                    st2.append((index, area)) # Hits:2.0, Total execution time: 0.582 ms, Average time per hit: 0.291 ms 


                    break # Hits:2.0, Total execution time: 0.125 ms, Average time per hit: 0.0625 ms 


                if ind < pop_index: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


                    st2.append((ind, pop_area)) # Hits:10.0, Total execution time: 1.416 ms, Average time per hit: 0.1416 ms 


                    st2.append((index, area)) # Hits:10.0, Total execution time: 1.458 ms, Average time per hit: 0.1458 ms 


                    break # Hits:10.0, Total execution time: 0.665 ms, Average time per hit: 0.0665 ms 


                else:

                    area += pop_area # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




a = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


k = len(st2) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ls = [k] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for _, s in st2: # Hits:2.0, Total execution time: 0.291 ms, Average time per hit: 0.1455 ms 


    a += s # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    ls.append(s) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




print(a) # Hits:1.0, Total execution time: 7.584 ms, Average time per hit: 7.584 ms 


print_list_split_whitespace(ls) # Hits:1.0, Total execution time: 2.834 ms, Average time per hit: 2.834 ms 

",p02266,True
"cal = {} # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


month = [[31,28,31,30,31,30,31,31,30,31,30,31], # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


         [31,29,31,30,31,30,31,31,30,31,30,31]] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


count = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for y in range(3000):# # Hits:3001.0, Total execution time: 300.041 ms, Average time per hit: 0.09998033988670443 ms 


    f = 1 if y%4 == 0 and y%100 != 0 or y%400 == 0 else 0 # Hits:3000.0, Total execution time: 548.844 ms, Average time per hit: 0.182948 ms 


    for m in range(12): # Hits:39000.0, Total execution time: 3594.781 ms, Average time per hit: 0.0921738717948718 ms 


        for d in range(month[f][m]): # Hits:1131728.0, Total execution time: 99185.559 ms, Average time per hit: 0.08764081033605248 ms 


            cal[(y,m+1,d+1)] = count # Hits:1095728.0, Total execution time: 251810.739 ms, Average time per hit: 0.22981135738066383 ms 


            count += 1 # Hits:1095728.0, Total execution time: 104465.968 ms, Average time per hit: 0.09533932508797804 ms 


while True: # Hits:6.0, Total execution time: 0.833 ms, Average time per hit: 0.13883333333333334 ms 


    y1,m1,d1,y2,m2,d2 = list(map(int,input().split())) # Hits:6.0, Total execution time: 111.042 ms, Average time per hit: 18.507 ms 


    if any(i<0 for i in (y1,m1,d1,y2,m2,d2)): # Hits:6.0, Total execution time: 11.416 ms, Average time per hit: 1.9026666666666667 ms 


        break # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


    print(cal[(y2,m2,d2)] - cal[(y1,m1,d1)]) # Hits:5.0, Total execution time: 34.793 ms, Average time per hit: 6.958600000000001 ms 
","from datetime import datetime # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


while True: # Hits:6.0, Total execution time: 0.667 ms, Average time per hit: 0.11116666666666668 ms 


    y1,m1,d1,y2,m2,d2 = list(map(int,input().split())) # Hits:6.0, Total execution time: 42.583 ms, Average time per hit: 7.097166666666667 ms 


    if any(i<0 for i in (y1,m1,d1,y2,m2,d2)): # Hits:6.0, Total execution time: 6.916 ms, Average time per hit: 1.1526666666666667 ms 


        break # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    print((datetime(y2,m2,d2) - datetime(y1,m1,d1)).days) # Hits:5.0, Total execution time: 18.249 ms, Average time per hit: 3.6498000000000004 ms 
",p00125,True
"from sys import stdin



N = int(stdin.readline())

A = [None]*N

B = [None]*N

for i in range(N):

    A[i], B[i] = list(map(int, stdin.readline().split()))



now = 0

for i in range(N):

    job = B.index(min(B))

    now += A[job]

    deadline = B[job]

    B[job] = 10000000000

    if now > deadline:

        print(""No"")

        quit()

else:

    print(""Yes"")",,p02996,False
"n = int(eval(input())) # Hits:1.0, Total execution time: 49.291 ms, Average time per hit: 49.291 ms 


a_lst = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


b_lst = [] # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


sum_lst = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




for i in range(0, n): # Hits:31.0, Total execution time: 2.916 ms, Average time per hit: 0.09406451612903226 ms 


    a, b = [int(elem) for elem in input().split()] # Hits:30.0, Total execution time: 31.292 ms, Average time per hit: 1.0430666666666666 ms 


    a_lst.append(a) # Hits:30.0, Total execution time: 3.916 ms, Average time per hit: 0.13053333333333333 ms 


    b_lst.append(b) # Hits:30.0, Total execution time: 4.249 ms, Average time per hit: 0.14163333333333333 ms 




tmp = list(zip(b_lst, a_lst)) # Hits:1.0, Total execution time: 2.333 ms, Average time per hit: 2.333 ms 


tmp = sorted(tmp) # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


b_lst, a_lst = list(zip(*tmp))    # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 




for i in range(0, len(a_lst)): # Hits:31.0, Total execution time: 2.706 ms, Average time per hit: 0.08729032258064516 ms 


    sum_lst.append(sum(a_lst[:i+1])) # Hits:30.0, Total execution time: 10.833 ms, Average time per hit: 0.36110000000000003 ms 




flag = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for a, b in zip(sum_lst, b_lst): # Hits:31.0, Total execution time: 3.706 ms, Average time per hit: 0.11954838709677419 ms 


    if a > b: # Hits:30.0, Total execution time: 2.872 ms, Average time per hit: 0.09573333333333334 ms 


        flag = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




if flag == 0: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print(""Yes"") # Hits:1.0, Total execution time: 8.625 ms, Average time per hit: 8.625 ms 


else:

    print(""No"") # Hits:1.0, Total execution time: 5.583 ms, Average time per hit: 5.583 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 39.541 ms, Average time per hit: 39.541 ms 


a_lst = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


b_lst = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(0, n): # Hits:31.0, Total execution time: 2.92 ms, Average time per hit: 0.09419354838709677 ms 


    a, b = [int(elem) for elem in input().split()] # Hits:30.0, Total execution time: 31.207 ms, Average time per hit: 1.0402333333333333 ms 


    a_lst.append(a) # Hits:30.0, Total execution time: 3.919 ms, Average time per hit: 0.13063333333333332 ms 


    b_lst.append(b) # Hits:30.0, Total execution time: 4.0 ms, Average time per hit: 0.13333333333333333 ms 




tmp = list(zip(b_lst, a_lst)) # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 


tmp = sorted(tmp) # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


b_lst, a_lst = list(zip(*tmp))    # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 




flag = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


sums = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(0, len(a_lst)): # Hits:31.0, Total execution time: 2.583 ms, Average time per hit: 0.08332258064516129 ms 


    sums += a_lst[i] # Hits:30.0, Total execution time: 3.458 ms, Average time per hit: 0.11526666666666667 ms 


    if sums > b_lst[i]: # Hits:30.0, Total execution time: 3.25 ms, Average time per hit: 0.10833333333333332 ms 


        flag = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        break # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




if flag == 0: # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    print(""Yes"") # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 


else:

    print(""No"") # Hits:1.0, Total execution time: 6.375 ms, Average time per hit: 6.375 ms 
",p02996,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 37.792 ms, Average time per hit: 37.792 ms 


AB=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for _ in range(N): # Hits:31.0, Total execution time: 2.879 ms, Average time per hit: 0.09287096774193548 ms 


    AB.append(tuple(map(int, input().split()))) # Hits:30.0, Total execution time: 25.538 ms, Average time per hit: 0.8512666666666666 ms 


#print(N, AB)



AB=sorted(AB, key=lambda val:val[1]) # Hits:1.0, Total execution time: 4.208 ms, Average time per hit: 4.208 ms 


task=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for ab in AB: # Hits:31.0, Total execution time: 2.667 ms, Average time per hit: 0.08603225806451613 ms 


    for _ in range(ab[0]): # Hits:11782.0, Total execution time: 991.065 ms, Average time per hit: 0.08411687319640129 ms 


        task.append(ab[1]) # Hits:11752.0, Total execution time: 1550.731 ms, Average time per hit: 0.1319546460176991 ms 


#print(AB)

#print(task)



for i in range(len(task)): # Hits:11753.0, Total execution time: 1028.786 ms, Average time per hit: 0.08753390623670552 ms 


    if i+1>task[i]: # Hits:11752.0, Total execution time: 1465.551 ms, Average time per hit: 0.12470651803948264 ms 


        print('No') # Hits:1.0, Total execution time: 7.209 ms, Average time per hit: 7.209 ms 


        break # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


else:

    print('Yes') # Hits:1.0, Total execution time: 8.583 ms, Average time per hit: 8.583 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 44.125 ms, Average time per hit: 44.125 ms 


AB=[] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for _ in range(N): # Hits:31.0, Total execution time: 3.336 ms, Average time per hit: 0.10761290322580645 ms 


    AB.append(list(map(int, input().split()))) # Hits:30.0, Total execution time: 27.04 ms, Average time per hit: 0.9013333333333333 ms 


#print(N, AB)



AB=sorted(AB, key=lambda val:val[1]) # Hits:1.0, Total execution time: 4.5 ms, Average time per hit: 4.5 ms 




if AB[0][0]>AB[0][1]: # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    print('No')

else:

    for i in range(N-1): # Hits:30.0, Total execution time: 2.541 ms, Average time per hit: 0.0847 ms 


        AB[i+1][0]+=AB[i][0] # Hits:29.0, Total execution time: 5.833 ms, Average time per hit: 0.20113793103448277 ms 


        if AB[i+1][0]>AB[i+1][1]: # Hits:29.0, Total execution time: 5.001 ms, Average time per hit: 0.17244827586206896 ms 


            print('No') # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 


            break # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    else:

        print('Yes') # Hits:1.0, Total execution time: 6.0 ms, Average time per hit: 6.0 ms 
",p02996,True
"# import bisect

import heapq

# import math

# import queue

import sys





def main():

    # 読み込み回数が多い場合

    input = sys.stdin.readline

    N = int(eval(input()))

    

    # heap queue

    h = []

    for i in range(N):

        A, B = list(map(int, input().split()))

        heapq.heappush(h, (B, A))

	

    time = 0

    while len(h) > 0:

        B, A = heapq.heappop(h)

        time += A

        if B < time:

            print(""No"")

            sys.exit()

    

    print(""Yes"")





if __name__ == ""__main__"":

    main()",,p02996,False
"import heapq # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


#これを加える！！！！

def _heappush_max(heap, item): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    heap.append(item)

    heapq._siftdown_max(heap, 0, len(heap)-1)

def _heappop_max(heap): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    """"""Maxheap version of a heappop.""""""

    lastelt = heap.pop()    # raises appropriate IndexError if heap is empty

    if heap:

        returnitem = heap[0]

        heap[0] = lastelt

        heapq._siftup_max(heap, 0)

        return returnitem

    return lastelt



n = int(eval(input())) # Hits:1.0, Total execution time: 37.5 ms, Average time per hit: 37.5 ms 


works = [[]] * n # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(n): # Hits:31.0, Total execution time: 2.668 ms, Average time per hit: 0.08606451612903225 ms 


  a, b = list(map(int, input().split(' '))) # Hits:30.0, Total execution time: 24.001 ms, Average time per hit: 0.8000333333333333 ms 


  works[i] = [a, b] # Hits:30.0, Total execution time: 3.915 ms, Average time per hit: 0.1305 ms 




ans = 'Yes' # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


sorted_works = sorted(works, key=lambda x: x[1], reverse=True) # Hits:1.0, Total execution time: 3.958 ms, Average time per hit: 3.958 ms 


max_deadline = sorted_works[0][1] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


# print('max_deadline', max_deadline)

h = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


deadline_i = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


work_day = max_deadline # 作業日 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


# 締め切り最終日から0日に向かってループ

for d in range(max_deadline, -1, -1): # Hits:12145.0, Total execution time: 1176.851 ms, Average time per hit: 0.09690004116920543 ms 


  # その日が締め切りの作業時間を優先度キューに追加

  for i in range(deadline_i, n): # Hits:12174.0, Total execution time: 2064.746 ms, Average time per hit: 0.16960292426482668 ms 


    work_time, deadline = sorted_works[i] # Hits:12169.0, Total execution time: 1436.635 ms, Average time per hit: 0.11805694798257868 ms 


    if deadline == d: # Hits:12169.0, Total execution time: 1101.599 ms, Average time per hit: 0.09052502259840578 ms 


      _heappush_max(h, work_time) # Hits:30.0, Total execution time: 25.126 ms, Average time per hit: 0.8375333333333334 ms 


      deadline_i += 1 # Hits:30.0, Total execution time: 3.172 ms, Average time per hit: 0.10573333333333333 ms 


    else:

      break # Hits:12139.0, Total execution time: 958.027 ms, Average time per hit: 0.07892141033034022 ms 


  # 作業ができない日であれば、次のループへ

  if d > work_day: # Hits:12144.0, Total execution time: 1118.412 ms, Average time per hit: 0.09209584980237155 ms 


    continue # Hits:11722.0, Total execution time: 905.572 ms, Average time per hit: 0.07725405220952057 ms 


  

  # 作業ができる日

  

  # 作業がなければ次のループへ

  if len(h) == 0: # Hits:422.0, Total execution time: 46.623 ms, Average time per hit: 0.11048104265402844 ms 


    continue # Hits:392.0, Total execution time: 27.995 ms, Average time per hit: 0.07141581632653062 ms 


  

  

  # その日に終了しても良い作業の中で時間が最長の作業時間を取得

  max_work_time = _heappop_max(h) # Hits:30.0, Total execution time: 21.625 ms, Average time per hit: 0.7208333333333333 ms 


  # 次の作業日を設定

  work_day = d - max_work_time # Hits:30.0, Total execution time: 3.044 ms, Average time per hit: 0.10146666666666666 ms 


  

  # 0日より前になる = 作業量が多いので実行不可

  if work_day < 0: # Hits:30.0, Total execution time: 2.789 ms, Average time per hit: 0.09296666666666667 ms 


    ans = 'No' # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


  

  



print(ans) # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 


# print(works)

# print(sorted_works)","n = int(eval(input())) # Hits:1.0, Total execution time: 37.625 ms, Average time per hit: 37.625 ms 


works = [[]] * n # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in range(n): # Hits:31.0, Total execution time: 2.786 ms, Average time per hit: 0.08987096774193548 ms 


  a, b = list(map(int, input().split(' '))) # a = 時間, b = 締め切り # Hits:30.0, Total execution time: 24.705 ms, Average time per hit: 0.8235 ms 


  works[i] = [a, b] # Hits:30.0, Total execution time: 3.917 ms, Average time per hit: 0.13056666666666666 ms 




ans = 'Yes' # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


sorted_works = sorted(works, key=lambda x: x[1]) # 締切の早い順にソート # Hits:1.0, Total execution time: 4.166 ms, Average time per hit: 4.166 ms 


total = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for work in sorted_works: # Hits:31.0, Total execution time: 2.166 ms, Average time per hit: 0.06987096774193549 ms 


  total += work[0] # Hits:30.0, Total execution time: 3.083 ms, Average time per hit: 0.10276666666666666 ms 


  if total > work[1]: # Hits:30.0, Total execution time: 3.207 ms, Average time per hit: 0.10690000000000001 ms 


    ans = 'No' # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  

print(ans) # Hits:1.0, Total execution time: 4.875 ms, Average time per hit: 4.875 ms 
",p02996,True
"import sys

from functools import cmp_to_key

n = int(eval(input()))

data = [[int(j) for j in input().split()] for i in range(n)]

t = 0

data.sort(key = cmp_to_key(lambda x, y: x[1] - y[1]))

for d in data:

  t += d[0]

  if t > d[1]:

    print('No')

    sys.exit()

print('Yes')
",,p02996,False
"from operator import itemgetter

import sys

 

N = int(eval(input()))

 

listA=[] #appendのために宣言が必要

while True:

    try:

        listA.append(list(map(int,input().split())))

 

    except:

        break;

 

#print(listA)

 

listB = sorted(listA)

la = sorted(listB, key=itemgetter(1))

 

t = 0

for i in range(N):

	s = la[i][1]

	t += la[i][0]

	if t > s:

		print(""No"")

		sys.exit()

 

print('Yes')


",,p02996,False
"def merge_sort(arr): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


 if len(arr) <= 1:

  return arr

 mid = len(arr) // 2

# ここで分割を行う

 left = arr[:mid]

 right = arr[mid:]

# 再帰的に分割を行う

 left = merge_sort(left)

 right = merge_sort(right)

# returnが返ってきたら、結合を行い、結合したものを次に渡す

 return merge(left, right)

def merge(left, right): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


 merged = []

 l_i, r_i = 0, 0

# ソート済み配列をマージするため、それぞれ左から見ていくだけで良い

 while l_i < len(left) and r_i < len(right):

    # ここで=をつけることで安定性を保っている

  if left[l_i][1] <= right[r_i][1]:

   merged.append(left[l_i])

   l_i += 1

  else:

   merged.append(right[r_i])

   r_i += 1



# 上のwhile文のどちらかがFalseになった場合終了するため、あまりをextendする

 if l_i < len(left):

  merged.extend(left[l_i:])

 if r_i < len(right):

  merged.extend(right[r_i:])

 return merged

import sys # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


N=int(eval(input())) # Hits:1.0, Total execution time: 37.958 ms, Average time per hit: 37.958 ms 


lst=[0]*N # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


lst=[list(map(int,input().split())) for i in range(N)] # Hits:1.0, Total execution time: 14.542 ms, Average time per hit: 14.542 ms 


lsta=merge_sort(lst) # Hits:1.0, Total execution time: 85.75 ms, Average time per hit: 85.75 ms 


ans=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


t=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:31.0, Total execution time: 2.583 ms, Average time per hit: 0.08332258064516129 ms 


 t+=lsta[i][0] # Hits:30.0, Total execution time: 3.876 ms, Average time per hit: 0.12919999999999998 ms 


 if t>lsta[i][1]: # Hits:30.0, Total execution time: 4.457 ms, Average time per hit: 0.14856666666666665 ms 


  ans+=1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


if ans==0: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


 print(""Yes"") # Hits:1.0, Total execution time: 5.416 ms, Average time per hit: 5.416 ms 


else:

 print(""No"") # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 

","import sys # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


N=int(eval(input())) # Hits:1.0, Total execution time: 37.042 ms, Average time per hit: 37.042 ms 


lst=[0]*N # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


lst=[list(map(int,input().split())) for i in range(N)] # Hits:1.0, Total execution time: 14.792 ms, Average time per hit: 14.792 ms 


lst.sort(key=lambda x: x[1]) # Hits:1.0, Total execution time: 3.834 ms, Average time per hit: 3.834 ms 


ans=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


t=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(N): # Hits:31.0, Total execution time: 2.496 ms, Average time per hit: 0.08051612903225806 ms 


 t+=lst[i][0] # Hits:30.0, Total execution time: 3.749 ms, Average time per hit: 0.12496666666666667 ms 


 if t>lst[i][1]: # Hits:30.0, Total execution time: 4.085 ms, Average time per hit: 0.13616666666666666 ms 


  ans+=1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


if ans==0: # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


 print(""Yes"") # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 


else:

 print(""No"") # Hits:1.0, Total execution time: 5.584 ms, Average time per hit: 5.584 ms 
",p02996,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 27.5 ms, Average time per hit: 27.5 ms 


A=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


B=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:31.0, Total execution time: 2.754 ms, Average time per hit: 0.08883870967741936 ms 


  a,b = input().split() # Hits:30.0, Total execution time: 18.917 ms, Average time per hit: 0.6305666666666667 ms 


  A.append(int(a)) # Hits:30.0, Total execution time: 5.706 ms, Average time per hit: 0.19019999999999998 ms 


  B.append(int(b)) # Hits:30.0, Total execution time: 5.751 ms, Average time per hit: 0.19169999999999998 ms 


for j in range(N-1): # Hits:30.0, Total execution time: 10.877 ms, Average time per hit: 0.36256666666666665 ms 


  for i in range(N-1): # Hits:870.0, Total execution time: 81.024 ms, Average time per hit: 0.09313103448275863 ms 


    if B[i] > B[i + 1]: # Hits:841.0, Total execution time: 112.208 ms, Average time per hit: 0.13342211652794295 ms 


      B[i], B[i + 1] = B[i + 1], B[i] # Hits:196.0, Total execution time: 31.217 ms, Average time per hit: 0.1592704081632653 ms 


      A[i], A[i + 1] = A[i + 1], A[i] # Hits:196.0, Total execution time: 32.835 ms, Average time per hit: 0.16752551020408163 ms 


count = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


sum = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:31.0, Total execution time: 2.876 ms, Average time per hit: 0.0927741935483871 ms 


  sum = sum + A[i] # Hits:30.0, Total execution time: 3.917 ms, Average time per hit: 0.13056666666666666 ms 


  if sum > B[i]: # Hits:30.0, Total execution time: 3.832 ms, Average time per hit: 0.12773333333333334 ms 


    count = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


if count == 0: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  print(""Yes"") # Hits:1.0, Total execution time: 4.916 ms, Average time per hit: 4.916 ms 


else:

  print(""No"") # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 


  ","N = int(eval(input())) # Hits:1.0, Total execution time: 32.625 ms, Average time per hit: 32.625 ms 


task = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N): # Hits:31.0, Total execution time: 2.966 ms, Average time per hit: 0.0956774193548387 ms 


  a,b = input().split() # Hits:30.0, Total execution time: 20.583 ms, Average time per hit: 0.6861 ms 


  task.append([int(a),int(b)]) # Hits:30.0, Total execution time: 9.91 ms, Average time per hit: 0.3303333333333333 ms 


task.sort(key=lambda x:x[0]) # Hits:1.0, Total execution time: 4.583 ms, Average time per hit: 4.583 ms 


task.sort(key=lambda x:x[1]) # Hits:1.0, Total execution time: 3.917 ms, Average time per hit: 3.917 ms 


count = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


sum = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:31.0, Total execution time: 3.044 ms, Average time per hit: 0.09819354838709676 ms 


  sum = sum + task[i][0] # Hits:30.0, Total execution time: 3.959 ms, Average time per hit: 0.13196666666666668 ms 


  if sum > task[i][1]: # Hits:30.0, Total execution time: 4.084 ms, Average time per hit: 0.13613333333333333 ms 


    count = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


if count == 0: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  print(""Yes"") # Hits:1.0, Total execution time: 6.375 ms, Average time per hit: 6.375 ms 


else:

  print(""No"") # Hits:1.0, Total execution time: 5.167 ms, Average time per hit: 5.167 ms 


  ",p02996,True
"import sys # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 37.083 ms, Average time per hit: 37.083 ms 


tasks = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for _ in range(n): # Hits:31.0, Total execution time: 2.83 ms, Average time per hit: 0.09129032258064516 ms 


    a,b = list(map(int, input().split())) # Hits:30.0, Total execution time: 14.254 ms, Average time per hit: 0.47513333333333335 ms 


    tasks.append((a,b)) # Hits:30.0, Total execution time: 5.0 ms, Average time per hit: 0.16666666666666666 ms 




tasks.sort() # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 


tasks = sorted( tasks, key = lambda a: a[1] ) # Hits:1.0, Total execution time: 4.167 ms, Average time per hit: 4.167 ms 




time = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


flg = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for task in tasks: # Hits:31.0, Total execution time: 2.707 ms, Average time per hit: 0.0873225806451613 ms 


    time += task[0] # Hits:30.0, Total execution time: 3.457 ms, Average time per hit: 0.11523333333333334 ms 


    if time > task[1]: # Hits:30.0, Total execution time: 3.335 ms, Average time per hit: 0.11116666666666668 ms 


        print('No') # Hits:1.0, Total execution time: 4.958 ms, Average time per hit: 4.958 ms 


        break # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


else:

    print( 'Yes' ) # Hits:1.0, Total execution time: 5.417 ms, Average time per hit: 5.417 ms 
","import sys # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 39.708 ms, Average time per hit: 39.708 ms 


tasks = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for _ in range(n): # Hits:31.0, Total execution time: 2.833 ms, Average time per hit: 0.09138709677419356 ms 


    a,b = list(map(int, input().split())) # Hits:30.0, Total execution time: 13.876 ms, Average time per hit: 0.46253333333333335 ms 


    tasks.append((a,b)) # Hits:30.0, Total execution time: 4.999 ms, Average time per hit: 0.16663333333333333 ms 




tasks = sorted( tasks, key = lambda a: a[1] ) # Hits:1.0, Total execution time: 3.709 ms, Average time per hit: 3.709 ms 




time = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for task in tasks: # Hits:31.0, Total execution time: 2.584 ms, Average time per hit: 0.08335483870967743 ms 


    time += task[0] # Hits:30.0, Total execution time: 3.21 ms, Average time per hit: 0.107 ms 


    if time > task[1]: # Hits:30.0, Total execution time: 3.209 ms, Average time per hit: 0.10696666666666667 ms 


        print('No') # Hits:1.0, Total execution time: 5.209 ms, Average time per hit: 5.209 ms 


        break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


else:

    print( 'Yes' ) # Hits:1.0, Total execution time: 5.834 ms, Average time per hit: 5.834 ms 
",p02996,True
"def solve(n: int, ab: 'list(Task)') -> bool:

    from operator import attrgetter

    ab.sort(key=attrgetter('limit'))

    cur = 0

    for ab_ in ab:

        cur += ab_.cost

        if cur > ab_.limit:

            return False

    return True





if __name__ == '__main__':

    from collections import namedtuple

    import sys



    input = sys.stdin.readline

    Task = namedtuple('Task', 'cost limit')

    n = int(eval(input()))

    ab = []

    for _ in range(n):

        cost_, limit_ = list(map(int, input().split()))

        ab.append(Task(cost=cost_, limit=limit_))

    print(('Yes' if solve(n, ab) else 'No'))
",,p02996,False
"#import sys

#input = sys.stdin.readline



n=int(eval(input())) # Hits:1.0, Total execution time: 38.125 ms, Average time per hit: 38.125 ms 


ab=[[int(i) for i in input().split()] for j in range(n)] # Hits:1.0, Total execution time: 40.334 ms, Average time per hit: 40.334 ms 


ab=sorted(ab,key=lambda x:x[1]) # Hits:1.0, Total execution time: 4.417 ms, Average time per hit: 4.417 ms 




w=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


t=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans='Yes' # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for a,b in ab: # Hits:31.0, Total execution time: 3.208 ms, Average time per hit: 0.10348387096774193 ms 


    w+=a # Hits:30.0, Total execution time: 2.668 ms, Average time per hit: 0.08893333333333334 ms 


    if b<w: # Hits:30.0, Total execution time: 3.251 ms, Average time per hit: 0.10836666666666667 ms 


        ans='No' # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    

print(ans) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 
","import sys # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




n=int(eval(input())) # Hits:1.0, Total execution time: 40.458 ms, Average time per hit: 40.458 ms 


ab=[[int(i) for i in input().split()] for j in range(n)] # Hits:1.0, Total execution time: 18.834 ms, Average time per hit: 18.834 ms 


ab=sorted(ab,key=lambda x:x[1]) # Hits:1.0, Total execution time: 4.25 ms, Average time per hit: 4.25 ms 




w=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


t=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


ans='Yes' # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for a,b in ab: # Hits:31.0, Total execution time: 2.998 ms, Average time per hit: 0.09670967741935484 ms 


    w+=a # Hits:30.0, Total execution time: 2.625 ms, Average time per hit: 0.0875 ms 


    if b<w: # Hits:30.0, Total execution time: 3.125 ms, Average time per hit: 0.10416666666666667 ms 


        ans='No' # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    

print(ans) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 
",p02996,True
"from collections import Counter,defaultdict # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 


import sys,heapq,bisect,math,itertools,string,queue,datetime # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 


mod = 10**9+7 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def inp(): return int(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def inpl(): return list(map(int, sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def inpl_str(): return list(sys.stdin.readline().split()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




n = inp() # Hits:1.0, Total execution time: 36.875 ms, Average time per hit: 36.875 ms 


tasks = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(n): # Hits:31.0, Total execution time: 3.503 ms, Average time per hit: 0.113 ms 


    a,b = inpl() # Hits:30.0, Total execution time: 22.208 ms, Average time per hit: 0.7402666666666666 ms 


    tasks.append([a,b,abs(a-b)]) # Hits:30.0, Total execution time: 7.711 ms, Average time per hit: 0.25703333333333334 ms 


tasks.sort(key=lambda x:x[1]) # Hits:1.0, Total execution time: 4.625 ms, Average time per hit: 4.625 ms 




for task in tasks: # Hits:31.0, Total execution time: 3.043 ms, Average time per hit: 0.09816129032258064 ms 


    cnt += task[0] # Hits:30.0, Total execution time: 4.21 ms, Average time per hit: 0.14033333333333334 ms 


    if cnt > task[1]: # Hits:30.0, Total execution time: 6.122 ms, Average time per hit: 0.20406666666666667 ms 


        print('No') # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 


        break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


else:

    print('Yes') # Hits:1.0, Total execution time: 6.958 ms, Average time per hit: 6.958 ms 
","from collections import Counter,defaultdict,deque # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 


from heapq import heappop,heappush,heapify # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


import sys,bisect,math,itertools,fractions,pprint # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 


sys.setrecursionlimit(10**8) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


mod = 10**9+7 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


INF = float('inf') # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


def inp(): return int(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def inpl(): return list(map(int, sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




n = inp() # Hits:1.0, Total execution time: 32.792 ms, Average time per hit: 32.792 ms 


ab = [inpl() for _ in range(n)] # Hits:1.0, Total execution time: 17.584 ms, Average time per hit: 17.584 ms 


now = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


ab.sort(key = lambda x:x[1]) # Hits:1.0, Total execution time: 3.75 ms, Average time per hit: 3.75 ms 


# ab.sort()

# print(ab)

for i in range(n): # Hits:31.0, Total execution time: 2.537 ms, Average time per hit: 0.08183870967741937 ms 


    a,b = ab[i] # Hits:30.0, Total execution time: 3.583 ms, Average time per hit: 0.11943333333333334 ms 


    now += a # Hits:30.0, Total execution time: 2.579 ms, Average time per hit: 0.08596666666666666 ms 


    if now > b: # Hits:30.0, Total execution time: 3.542 ms, Average time per hit: 0.11806666666666667 ms 


        print('No') # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 


        # print(i)

        break # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


else:

    print('Yes') # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 

",p02996,True
"import heapq



N = int(eval(input()))

tasks = []

for _ in range(N):

  a,b = list(map(int,input().split()))

  if b-a < 0:

    print('No')

    exit()

  else:

    heapq.heappush(tasks,[b,-a])

    

day = 0

while len(tasks) != 0:

  b, neg_a = heapq.heappop(tasks)

  if day - neg_a > b:

    print('No')

    exit()

  else: day -= neg_a

print('Yes')","N = int(eval(input())) # Hits:1.0, Total execution time: 34.208 ms, Average time per hit: 34.208 ms 


deadlines = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(N): # Hits:31.0, Total execution time: 2.704 ms, Average time per hit: 0.0872258064516129 ms 


    a, b = list(map(int, input().split())) # Hits:30.0, Total execution time: 24.5 ms, Average time per hit: 0.8166666666666667 ms 


    deadlines.append([b, a]) # Hits:30.0, Total execution time: 4.501 ms, Average time per hit: 0.15003333333333332 ms 


deadlines.sort() # Hits:1.0, Total execution time: 2.208 ms, Average time per hit: 2.208 ms 




time = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for deadline, task_time in deadlines: # Hits:31.0, Total execution time: 2.916 ms, Average time per hit: 0.09406451612903226 ms 


    if time + task_time <= deadline: # Hits:30.0, Total execution time: 3.041 ms, Average time per hit: 0.10136666666666666 ms 


        time += task_time # Hits:30.0, Total execution time: 2.665 ms, Average time per hit: 0.08883333333333333 ms 


    else:

        time = None # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        break # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


print(('Yes' if time is not None else 'No')) # Hits:1.0, Total execution time: 5.667 ms, Average time per hit: 5.667 ms 
",p02996,False
"N=int(eval(input())) # Hits:1.0, Total execution time: 38.334 ms, Average time per hit: 38.334 ms 


task=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for _ in range(N): # Hits:31.0, Total execution time: 2.878 ms, Average time per hit: 0.09283870967741936 ms 


    task.append([int(i) for i in input().split()]) # Hits:30.0, Total execution time: 33.208 ms, Average time per hit: 1.1069333333333333 ms 




task=sorted(task, key=lambda x: x[1]) # Hits:1.0, Total execution time: 4.0 ms, Average time per hit: 4.0 ms 




spent_time1=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


spent_time2=0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in range(N): # Hits:31.0, Total execution time: 2.333 ms, Average time per hit: 0.07525806451612904 ms 


    spent_time2+=task[i][0] # Hits:30.0, Total execution time: 3.584 ms, Average time per hit: 0.11946666666666667 ms 


ans='Yes' # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(N): # Hits:31.0, Total execution time: 2.583 ms, Average time per hit: 0.08332258064516129 ms 


    spent_time1+=task[i][0] # Hits:30.0, Total execution time: 3.668 ms, Average time per hit: 0.12226666666666666 ms 


    deadline1=task[i][1] # Hits:30.0, Total execution time: 2.915 ms, Average time per hit: 0.09716666666666667 ms 


    if i!=0: # Hits:30.0, Total execution time: 2.584 ms, Average time per hit: 0.08613333333333334 ms 


        spent_time2-=task[N-i][0] # Hits:29.0, Total execution time: 4.126 ms, Average time per hit: 0.14227586206896553 ms 


    deadline2=task[N-1-i][1] # Hits:30.0, Total execution time: 3.876 ms, Average time per hit: 0.12919999999999998 ms 


    if deadline1<spent_time1: # Hits:30.0, Total execution time: 2.793 ms, Average time per hit: 0.09309999999999999 ms 


        ans='No'

        break

    elif deadline2<spent_time2: # Hits:30.0, Total execution time: 2.955 ms, Average time per hit: 0.0985 ms 


        ans='No' # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


        break # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    



print(ans) # Hits:1.0, Total execution time: 8.292 ms, Average time per hit: 8.292 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 42.0 ms, Average time per hit: 42.0 ms 


task=[] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for _ in range(N): # Hits:31.0, Total execution time: 2.834 ms, Average time per hit: 0.09141935483870968 ms 


    task.append([int(i) for i in input().split()]) # Hits:30.0, Total execution time: 31.289 ms, Average time per hit: 1.0429666666666666 ms 




task=sorted(task, key=lambda x: x[1]) # Hits:1.0, Total execution time: 3.708 ms, Average time per hit: 3.708 ms 




spent_time1=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


ans='Yes' # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(N): # Hits:31.0, Total execution time: 2.334 ms, Average time per hit: 0.07529032258064516 ms 


    spent_time1+=task[i][0] # Hits:30.0, Total execution time: 3.415 ms, Average time per hit: 0.11383333333333333 ms 


    deadline1=task[i][1] # Hits:30.0, Total execution time: 2.875 ms, Average time per hit: 0.09583333333333333 ms 


    if deadline1<spent_time1: # Hits:30.0, Total execution time: 2.499 ms, Average time per hit: 0.0833 ms 


        ans='No' # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


        break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




print(ans) # Hits:1.0, Total execution time: 7.792 ms, Average time per hit: 7.792 ms 
",p02996,True
"import heapq # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


import copy # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


import bisect # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


from collections import deque # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 42.459 ms, Average time per hit: 42.459 ms 


a = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


b = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


tmp_a = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


tmp_b = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


flag = True # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for _ in range(n): # Hits:31.0, Total execution time: 2.755 ms, Average time per hit: 0.0888709677419355 ms 


	a_dash,b_dash = list(map(int,input().split())) # Hits:30.0, Total execution time: 24.127 ms, Average time per hit: 0.8042333333333334 ms 


	tmp_a.append(a_dash) # Hits:30.0, Total execution time: 3.751 ms, Average time per hit: 0.12503333333333333 ms 


	tmp_b.append(b_dash) # Hits:30.0, Total execution time: 4.25 ms, Average time per hit: 0.14166666666666666 ms 




k = list(zip(tmp_b,tmp_a)) # Hits:1.0, Total execution time: 2.333 ms, Average time per hit: 2.333 ms 


sorted_k = sorted(k) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


for b_dash,a_dash in sorted_k: # Hits:31.0, Total execution time: 2.963 ms, Average time per hit: 0.09558064516129032 ms 


	a.append(a_dash) # Hits:30.0, Total execution time: 3.75 ms, Average time per hit: 0.125 ms 


	b.append(b_dash) # Hits:30.0, Total execution time: 3.584 ms, Average time per hit: 0.11946666666666667 ms 




t = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


qa = deque(a) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


qb = deque(b) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




for i in range(n): # Hits:31.0, Total execution time: 2.584 ms, Average time per hit: 0.08335483870967743 ms 


	minimum_a = qa.popleft() # Hits:30.0, Total execution time: 3.501 ms, Average time per hit: 0.1167 ms 


	minimum_b = qb.popleft() # Hits:30.0, Total execution time: 3.291 ms, Average time per hit: 0.1097 ms 


	t += minimum_a # Hits:30.0, Total execution time: 2.832 ms, Average time per hit: 0.09440000000000001 ms 


	if t > minimum_b: # Hits:30.0, Total execution time: 2.918 ms, Average time per hit: 0.09726666666666667 ms 


		flag = False # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


		break # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




if flag: # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


	print('Yes') # Hits:1.0, Total execution time: 7.583 ms, Average time per hit: 7.583 ms 


else:

	print('No') # Hits:1.0, Total execution time: 4.958 ms, Average time per hit: 4.958 ms 

",,p02996,True
"from operator import itemgetter

n=int(eval(input()))

ab=[list(map(int,input().split())) for i in range(n)]

ab=sorted(ab, key=itemgetter(1,0))

#print(ab)



time=0

for todotime,deadline in ab:

    time += todotime

    if not (time <= deadline) :

        print('No')

        exit()

print('Yes')",,p02996,False
"import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


from collections import defaultdict # Hits:1.0, Total execution time: 1.583 ms, Average time per hit: 1.583 ms 


from operator import itemgetter # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 39.209 ms, Average time per hit: 39.209 ms 


d = defaultdict(int) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


for _ in range(N): # Hits:31.0, Total execution time: 2.875 ms, Average time per hit: 0.09274193548387095 ms 


    a, b = list(map(int, input().split())) # Hits:30.0, Total execution time: 12.544 ms, Average time per hit: 0.4181333333333333 ms 


    d[b] += a # Hits:30.0, Total execution time: 7.709 ms, Average time per hit: 0.2569666666666666 ms 


task = list(d.items()) # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


task.sort() # Hits:1.0, Total execution time: 1.584 ms, Average time per hit: 1.584 ms 




now = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans = ""Yes"" # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for limit, time in task: # Hits:31.0, Total execution time: 3.125 ms, Average time per hit: 0.10080645161290323 ms 


    now += time # Hits:30.0, Total execution time: 2.584 ms, Average time per hit: 0.08613333333333334 ms 


    if now > limit: # Hits:30.0, Total execution time: 2.751 ms, Average time per hit: 0.0917 ms 


        ans = ""No"" # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


        break # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




print(ans) # Hits:1.0, Total execution time: 6.333 ms, Average time per hit: 6.333 ms 

",,p02996,True
"from collections import deque

from functools import lru_cache

import bisect

import sys

sys.setrecursionlimit(10**9)



def main():

    N = int(eval(input()))

    X = []

    for _ in range(N):

        a,b = list(map(int,input().split()))

        bisect.insort(X,(b,a))



    x = 0

    X = deque(X)

    l = len(X)

    for _ in range(l):

        b,a = X.popleft()

        # print(b,a,x)

        if x + a > b:

            print(""No"")

            exit()



        x += a



    print(""Yes"")







if __name__ == ""__main__"":

  main()",,p02996,False
"n,a,b=list(map(int,input().split())) # Hits:1.0, Total execution time: 35.916 ms, Average time per hit: 35.916 ms 


h=[int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 8.375 ms, Average time per hit: 8.375 ms 


l=1;r=max(h)//b+1 # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


while l!=r: # Hits:4.0, Total execution time: 0.418 ms, Average time per hit: 0.1045 ms 


  x=(l+r)//2 # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


  ct=0 # Hits:3.0, Total execution time: 0.251 ms, Average time per hit: 0.08366666666666667 ms 


  for i in range(n): # Hits:9.0, Total execution time: 0.958 ms, Average time per hit: 0.10644444444444444 ms 


    ct+=((a-b-1)+max(0,h[i]-b*x))//(a-b) # Hits:6.0, Total execution time: 1.832 ms, Average time per hit: 0.3053333333333333 ms 


  if ct>x: # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


    l=x+1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


  else:

    r=x # Hits:2.0, Total execution time: 0.125 ms, Average time per hit: 0.0625 ms 


print(l) # Hits:1.0, Total execution time: 4.667 ms, Average time per hit: 4.667 ms 
","n,a,b=list(map(int,input().split())) # Hits:1.0, Total execution time: 35.084 ms, Average time per hit: 35.084 ms 


h=[int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 8.209 ms, Average time per hit: 8.209 ms 


l=0;r=max(h)//b+1 # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


while abs(l-r)>1: # Hits:3.0, Total execution time: 0.668 ms, Average time per hit: 0.22266666666666665 ms 


  x=(l+r)//2 # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


  ct=0 # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


  for i in range(n): # Hits:6.0, Total execution time: 0.626 ms, Average time per hit: 0.10433333333333333 ms 


    ct+=((a-b-1)+max(0,h[i]-b*x))//(a-b) # Hits:4.0, Total execution time: 1.208 ms, Average time per hit: 0.302 ms 


  if ct<=x: # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


    r=x # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


  else:

    l=x # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


print(r) # Hits:1.0, Total execution time: 5.209 ms, Average time per hit: 5.209 ms 
",p03700,True
"from copy import deepcopy # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


from math import ceil # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 




N, A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.167 ms, Average time per hit: 35.167 ms 


H = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 8.458 ms, Average time per hit: 8.458 ms 




A -= B  # 爆発は追加ダメージ扱いとする # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




# にぶたん

ok, ng = 10 ** 9, 0 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


while abs(ok - ng) > 1: # Hits:31.0, Total execution time: 4.375 ms, Average time per hit: 0.1411290322580645 ms 


    X = (ok + ng) // 2 # Hits:30.0, Total execution time: 3.086 ms, Average time per hit: 0.10286666666666666 ms 




    h = deepcopy(H) # Hits:30.0, Total execution time: 105.249 ms, Average time per hit: 3.5083 ms 


    h = [max(hi - B * X, 0) for hi in h] # Hits:30.0, Total execution time: 19.46 ms, Average time per hit: 0.6486666666666666 ms 


    h = [ceil(hi / A) for hi in h] # Hits:30.0, Total execution time: 14.286 ms, Average time per hit: 0.4762 ms 




    if sum(h) <= X: # Hits:30.0, Total execution time: 4.415 ms, Average time per hit: 0.14716666666666667 ms 


        ok = X # Hits:29.0, Total execution time: 2.248 ms, Average time per hit: 0.07751724137931035 ms 


    else:

        ng = X # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




print(ok) # Hits:1.0, Total execution time: 5.959 ms, Average time per hit: 5.959 ms 

","from math import ceil # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 




N, A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.791 ms, Average time per hit: 34.791 ms 


H = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 9.125 ms, Average time per hit: 9.125 ms 




A -= B  # 爆発は追加ダメージ扱いとする # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




# にぶたん

ok, ng = 10 ** 9, 0 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


while abs(ok - ng) > 1: # Hits:31.0, Total execution time: 4.83 ms, Average time per hit: 0.15580645161290324 ms 


    X = (ok + ng) // 2 # Hits:30.0, Total execution time: 3.503 ms, Average time per hit: 0.11676666666666667 ms 




    h = [max(hi - B * X, 0) for hi in H] # Hits:30.0, Total execution time: 29.5 ms, Average time per hit: 0.9833333333333334 ms 


    h = [ceil(hi / A) for hi in h] # Hits:30.0, Total execution time: 15.956 ms, Average time per hit: 0.5318666666666667 ms 




    if sum(h) <= X: # Hits:30.0, Total execution time: 4.876 ms, Average time per hit: 0.16253333333333334 ms 


        ok = X # Hits:29.0, Total execution time: 2.665 ms, Average time per hit: 0.09189655172413794 ms 


    else:

        ng = X # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




print(ok) # Hits:1.0, Total execution time: 8.042 ms, Average time per hit: 8.042 ms 

",p03700,True
"import copy # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


def calc(n): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    d = copy.deepcopy(h)

    d = [dd - (b * n) for dd in d if (dd - (b*n)) > 0]

    a_num = sum([dd // (a - b) if (dd % (a - b) == 0) else (dd // (a - b)) + 1 for dd in d])

    if a_num <= n:

        return True

    return False



n, a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.25 ms, Average time per hit: 34.25 ms 


h = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for _ in range(n): # Hits:3.0, Total execution time: 0.667 ms, Average time per hit: 0.22233333333333336 ms 


    h.append(int(eval(input()))) # Hits:2.0, Total execution time: 13.375 ms, Average time per hit: 6.6875 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 






left = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


right = (max(h) + 1) // (b) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


middle = (left + right) // 2 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


middle_1 = middle - 1 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


calc_middle = calc(middle) # Hits:1.0, Total execution time: 9.708 ms, Average time per hit: 9.708 ms 


calc_middle_1 = calc(middle_1) # Hits:1.0, Total execution time: 5.042 ms, Average time per hit: 5.042 ms 


while not ((calc_middle) & (not calc_middle_1)): # Hits:2.0, Total execution time: 0.376 ms, Average time per hit: 0.188 ms 


    if not calc_middle: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        left = middle # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


        middle = (left + right) // 2 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        middle_1 = middle - 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    else:

        right = middle # Hits:13.0, Total execution time: 0.999 ms, Average time per hit: 0.07684615384615384 ms 


        middle = (left + right) // 2 # Hits:13.0, Total execution time: 1.665 ms, Average time per hit: 0.12807692307692306 ms 


        middle_1 = middle - 1 # Hits:13.0, Total execution time: 1.168 ms, Average time per hit: 0.08984615384615384 ms 


    calc_middle = calc(middle) # Hits:1.0, Total execution time: 5.167 ms, Average time per hit: 5.167 ms 


    calc_middle_1 = calc(middle_1) # Hits:1.0, Total execution time: 4.666 ms, Average time per hit: 4.666 ms 


print(middle) # Hits:1.0, Total execution time: 5.167 ms, Average time per hit: 5.167 ms 
","def calc(n): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    damage = (b * n)

    d = [max(dd - damage, 0) for dd in h]

    a_num = 0

    for i in range(len(d)):

        a_num += max(0, 1 + (d[i]-1) // (a - b))

    if a_num <= n:

        return True

    return False



n, a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.625 ms, Average time per hit: 34.625 ms 


h = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for _ in range(n): # Hits:3.0, Total execution time: 0.876 ms, Average time per hit: 0.292 ms 


    h.append(int(eval(input()))) # Hits:2.0, Total execution time: 9.209 ms, Average time per hit: 4.6045 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


h.sort() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




left = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


right = 10000000000 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




while (right - left) > 1: # Hits:34.0, Total execution time: 3.795 ms, Average time per hit: 0.11161764705882353 ms 


    middle = (left + right) // 2 # Hits:33.0, Total execution time: 3.584 ms, Average time per hit: 0.10860606060606061 ms 


    if calc(middle): # Hits:33.0, Total execution time: 49.543 ms, Average time per hit: 1.5013030303030304 ms 


        right = middle # Hits:31.0, Total execution time: 2.456 ms, Average time per hit: 0.0792258064516129 ms 


    else:

        left = middle # Hits:2.0, Total execution time: 0.125 ms, Average time per hit: 0.0625 ms 


print(right) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 
",p03700,True
"def main():

    from math import ceil

    from copy import deepcopy

    n, a, b, *k = list(map(int, open(0).read().split()))

    k.sort()



    def check(x):

        q = deepcopy(k)

        cnt = 0

        while q:

            p = q.pop() - x * b

            if p <= 0:

                break

            cnt += ceil(p / (a - b))



        return cnt <= x



    l = 0

    r = k[-1]

    m = (l + r) // 2

    while l + 1 < r:

        if check(m):

            r = m

        else:

            l = m

        m = (l + r) // 2



    print((m+1))





if __name__ == '__main__':

    main()
",,p03700,False
"import heapq # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




n, a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.334 ms, Average time per hit: 35.334 ms 


h = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:3.0, Total execution time: 0.75 ms, Average time per hit: 0.25 ms 


    h.append(int(eval(input()))) # Hits:2.0, Total execution time: 159.791 ms, Average time per hit: 79.8955 ms 


ac = (max(h) - 1) // b + 1 # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


wa = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


while ac - wa > 1: # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


    wj = (ac + wa) // 2 # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    num = 0 # Hits:3.0, Total execution time: 0.208 ms, Average time per hit: 0.06933333333333333 ms 


    for i in range(n): # Hits:9.0, Total execution time: 1.083 ms, Average time per hit: 0.12033333333333333 ms 


        num += max((h[i] - b * wj - 1) // (a - b) + 1, 0) # Hits:6.0, Total execution time: 2.584 ms, Average time per hit: 0.4306666666666667 ms 


    if num <= wj: # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


        ac = wj # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    else:

        wa = wj # Hits:2.0, Total execution time: 0.125 ms, Average time per hit: 0.0625 ms 


print(ac) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 
","n, a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 29.0 ms, Average time per hit: 29.0 ms 


h = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


    h.append(int(eval(input()))) # Hits:2.0, Total execution time: 7.416 ms, Average time per hit: 3.708 ms 


ac = (max(h) - 1) // b + 1 # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


wa = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


while ac - wa > 1: # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    wj = (ac + wa) // 2 # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    num = 0 # Hits:3.0, Total execution time: 0.208 ms, Average time per hit: 0.06933333333333333 ms 


    for i in range(n): # Hits:9.0, Total execution time: 1.083 ms, Average time per hit: 0.12033333333333333 ms 


        num += max((h[i] - b * wj - 1) // (a - b) + 1, 0) # Hits:6.0, Total execution time: 2.001 ms, Average time per hit: 0.3335 ms 


    if num <= wj: # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


        ac = wj # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    else:

        wa = wj # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


print(ac) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 
",p03700,True
"import math # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


import io # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




nim, mike, kite = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.667 ms, Average time per hit: 35.667 ms 


H = [int(eval(input())) for _ in range(nim)] # Hits:1.0, Total execution time: 14.125 ms, Average time per hit: 14.125 ms 




OK = max(H)//kite+1 # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


NG = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




ans = OK # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while OK-NG > 1: # Hits:3.0, Total execution time: 0.501 ms, Average time per hit: 0.167 ms 


    mid = (OK+NG)//2  # 試行する値 # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    cnt = 0 # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 




    for h in H: # Hits:6.0, Total execution time: 0.71 ms, Average time per hit: 0.11833333333333333 ms 


        if h > mid*kite: # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


            cnt += math.ceil((h-mid*kite)/(mike-kite)) # Hits:4.0, Total execution time: 1.625 ms, Average time per hit: 0.40625 ms 




    if cnt <= mid: # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


        OK = mid # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    else:

        NG = mid # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




print(OK) # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 

","nim, mike, kite = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.209 ms, Average time per hit: 35.209 ms 


H = [int(eval(input())) for _ in range(nim)] # Hits:1.0, Total execution time: 8.583 ms, Average time per hit: 8.583 ms 


C = mike - kite # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


l, r = 0, 1<<30 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


while r - l > 1: # Hits:31.0, Total execution time: 3.172 ms, Average time per hit: 0.1023225806451613 ms 


    m = (l + r) // 2 # Hits:30.0, Total execution time: 3.245 ms, Average time per hit: 0.10816666666666667 ms 


    if sum([max((h - kite * m + C - 1) // C, 0) for h in H]) <= m: # Hits:30.0, Total execution time: 23.545 ms, Average time per hit: 0.7848333333333334 ms 


        r = m # Hits:28.0, Total execution time: 2.246 ms, Average time per hit: 0.08021428571428571 ms 


    else:

        l = m # Hits:2.0, Total execution time: 0.125 ms, Average time per hit: 0.0625 ms 


print(r) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 
",p03700,True
"def main():

    N, A, B = (int(i) for i in input().split())

    H = [int(eval(input())) for i in range(N)]



    def is_ok(x):

        y = 0  # 中心爆破必要回数

        for i, h in enumerate(H):

            if h - x*B <= 0:

                continue

            le = 0

            ri = 10**9 + 1

            while ri - le > 1:

                mid = le + ((ri - le) // 2)

                if h - B*(max(x - mid, 0)) - A*mid <= 0:

                    ri = mid

                else:

                    le = mid

            y += ri

        if y <= x:  # 魔物を消し去るのが可能

            return True

        else:

            return False



    def binary_search_meguru():

        left = -1

        right = 10**9 + 1

        while right - left > 1:

            mid = left + ((right - left) // 2)

            if is_ok(mid):

                right = mid

            else:

                left = mid

        return right



    print((binary_search_meguru()))





if __name__ == '__main__':

    main()
",,p03700,False
"import math # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




N, A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 29.5 ms, Average time per hit: 29.5 ms 


h = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 7.791 ms, Average time per hit: 7.791 ms 






def check(t): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    cnt = 0

    for i in range(N):

        cnt += max(0, math.ceil((h[i] - B * t) / (A - B)))

    return cnt <= t





left = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


right = max(h) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


while right - left > 1: # Hits:5.0, Total execution time: 0.667 ms, Average time per hit: 0.13340000000000002 ms 


    mid = (left + right) // 2 # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


    if check(mid): # Hits:4.0, Total execution time: 4.834 ms, Average time per hit: 1.2085 ms 


        right = mid # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


    else:

        left = mid # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


print(right) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 
","import math # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




N, A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.167 ms, Average time per hit: 34.167 ms 


h = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 8.25 ms, Average time per hit: 8.25 ms 






def check(t): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    cnt = 0

    bt = B * t

    for i in range(N):

        cnt += max(0, math.ceil((h[i] - bt) / (A - B)))

    return cnt <= t





left = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


right = max(h) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


while right - left > 1: # Hits:5.0, Total execution time: 0.624 ms, Average time per hit: 0.1248 ms 


    mid = (left + right) // 2 # Hits:4.0, Total execution time: 0.335 ms, Average time per hit: 0.08375 ms 


    if check(mid): # Hits:4.0, Total execution time: 4.624 ms, Average time per hit: 1.156 ms 


        right = mid # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


    else:

        left = mid # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


print(right) # Hits:1.0, Total execution time: 5.334 ms, Average time per hit: 5.334 ms 

",p03700,True
"import math # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 




N, A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 28.0 ms, Average time per hit: 28.0 ms 


h = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 8.458 ms, Average time per hit: 8.458 ms 






def check(t): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    cnt = 0

    ab = A - B

    bt = B * t

    for i in range(N):

        r = (h[i] - bt)

        if r <= 0:

            continue

        cnt += r // ab

        if r % ab:

            cnt += 1

    return cnt <= t





left = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


right = max(h) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


while right - left > 1: # Hits:5.0, Total execution time: 0.707 ms, Average time per hit: 0.1414 ms 


    mid = (left + right) // 2 # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    if check(mid): # Hits:4.0, Total execution time: 5.542 ms, Average time per hit: 1.3855 ms 


        right = mid # Hits:3.0, Total execution time: 0.208 ms, Average time per hit: 0.06933333333333333 ms 


    else:

        left = mid # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


print(right) # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 

","N, A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.667 ms, Average time per hit: 35.667 ms 


h = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 9.167 ms, Average time per hit: 9.167 ms 




ab = A - B # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 






def check(t): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    cnt = 0

    bt = B * t

    for hi in h:

        r = hi - bt

        if r <= 0:

            continue

        cnt += r // ab

        if r % ab:

            cnt += 1

    return cnt <= t





left = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


right = max(h) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


while right - left > 1: # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 


    mid = (left + right) // 2 # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    if check(mid): # Hits:4.0, Total execution time: 4.792 ms, Average time per hit: 1.198 ms 


        right = mid # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


    else:

        left = mid # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


print(right) # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 

",p03700,True
"import sys





def solve():

    input = sys.stdin.readline

    mod = 10 ** 9 + 7

    n, a, b = list(map(int, input().rstrip('\n').split()))

    h = [int(input().rstrip('\n')) for _ in range(n)]



    cor_v = 10 ** 20

    inc_v = -1

    while cor_v - inc_v > 1:

        bin_v = (cor_v + inc_v) // 2

        cost = 0

        #条件を満たすcostを全検索

        for v in h:

            if v > bin_v * b:

                cost += (v - bin_v * b + (a - b) - 1) // (a - b)

        #costが制約を満たすか

        if cost <= bin_v:

            cor_v = bin_v

        else:

            inc_v = bin_v

    print(cor_v)





if __name__ == '__main__':

    solve()
",,p03700,False
"import copy # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


import math # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


n, a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.5 ms, Average time per hit: 35.5 ms 


h = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 9.25 ms, Average time per hit: 9.25 ms 




def is_ok(x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    t = copy.deepcopy(h)

    y = x

    for i in range(n):

        t[i] -= b * x

        if t[i] > 0:

            y -= math.ceil(t[i] / (a - b))

    return y >= 0



ng = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ok = 10 ** 9 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while abs(ok - ng) > 1: # Hits:31.0, Total execution time: 4.664 ms, Average time per hit: 0.15045161290322578 ms 


    mi = (ok + ng) // 2 # Hits:30.0, Total execution time: 3.163 ms, Average time per hit: 0.10543333333333334 ms 


    if is_ok(mi): # Hits:30.0, Total execution time: 128.709 ms, Average time per hit: 4.2903 ms 


        ok = mi # Hits:29.0, Total execution time: 2.376 ms, Average time per hit: 0.08193103448275862 ms 


    else:

        ng = mi # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




print(ok) # Hits:1.0, Total execution time: 8.833 ms, Average time per hit: 8.833 ms 

","import math # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




n, a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.958 ms, Average time per hit: 36.958 ms 


h = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 8.542 ms, Average time per hit: 8.542 ms 




def is_ok(x): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    c = 0

    for i in range(n):

        t = h[i] - b * x

        if t <= 0:

            continue

        c += math.ceil(t / (a - b))

    return c <= x



ng = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


ok = 10 ** 9 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


while abs(ok - ng) > 1: # Hits:31.0, Total execution time: 4.374 ms, Average time per hit: 0.14109677419354838 ms 


    mi = (ok + ng) // 2 # Hits:30.0, Total execution time: 3.167 ms, Average time per hit: 0.10556666666666667 ms 


    if is_ok(mi): # Hits:30.0, Total execution time: 23.376 ms, Average time per hit: 0.7792 ms 


        ok = mi # Hits:29.0, Total execution time: 2.043 ms, Average time per hit: 0.07044827586206896 ms 


    else:

        ng = mi # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 




print(ok) # Hits:1.0, Total execution time: 5.083 ms, Average time per hit: 5.083 ms 

",p03700,True
"# int(input()) # 入力が1つ

from math import ceil # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


n, a, b = list(map(int, input().split())) # 入力が複数 # Hits:1.0, Total execution time: 33.166 ms, Average time per hit: 33.166 ms 


# [int(i) for i in input().split()] # 配列で数字



monster = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(n): # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


    monster.append(int(eval(input()))) # Hits:2.0, Total execution time: 8.125 ms, Average time per hit: 4.0625 ms 




def check(monster, t): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    temp = []

    for i in range(n):

        temp.append(monster[i] - b * t) 

    ans = 0

    for i in range(n):

        if temp[i] > 0:

            ans += ceil(temp[i] / (a - b))

    if ans <= t:

        return True

    return False



l = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


r = 10 ** 10 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


ans = 10 ** 10 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while l <= r: # Hits:34.0, Total execution time: 3.042 ms, Average time per hit: 0.08947058823529412 ms 


    mid = (l + r) // 2 # Hits:33.0, Total execution time: 3.375 ms, Average time per hit: 0.10227272727272727 ms 


    if check(monster, mid): # Hits:33.0, Total execution time: 35.875 ms, Average time per hit: 1.087121212121212 ms 


        ans = min(ans, mid) # Hits:32.0, Total execution time: 4.585 ms, Average time per hit: 0.14328125 ms 


        r = mid - 1 # Hits:32.0, Total execution time: 3.083 ms, Average time per hit: 0.09634375 ms 


    else:

        l = mid + 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


print(ans) # Hits:1.0, Total execution time: 5.041 ms, Average time per hit: 5.041 ms 
","# https://atcoder.jp/contests/abc063/tasks/arc075_b

n, a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.916 ms, Average time per hit: 33.916 ms 




monster = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


    monster.append(int(eval(input()))) # Hits:2.0, Total execution time: 8.125 ms, Average time per hit: 4.0625 ms 




def damage(monster, t): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    temp = []

    for hp in monster:

        s = hp - t * b

        if s > 0:

            temp.append(s)

    ans = 0

    for hp in temp:

        if hp % (a - b) != 0:

            ans += 1

        ans += hp // (a - b)

    return True if ans <= t else False



ans = float('inf') # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


l = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


r = 10 ** 9 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while l <= r: # Hits:31.0, Total execution time: 2.664 ms, Average time per hit: 0.08593548387096775 ms 


    mid = (l + r) // 2 # Hits:30.0, Total execution time: 2.958 ms, Average time per hit: 0.0986 ms 


    if damage(monster, mid): # Hits:30.0, Total execution time: 22.082 ms, Average time per hit: 0.7360666666666668 ms 


        ans = min(ans, mid) # Hits:28.0, Total execution time: 3.958 ms, Average time per hit: 0.14135714285714285 ms 


        r = mid - 1 # Hits:28.0, Total execution time: 2.667 ms, Average time per hit: 0.09525 ms 


    else:

        l = mid + 1 # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


print(ans) # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 
",p03700,True
"import math # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


N, A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.583 ms, Average time per hit: 34.583 ms 


H = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 10.125 ms, Average time per hit: 10.125 ms 


    

def f(x): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    s = sum([math.ceil(max(0, h - x * B) / (A - B)) for h in H])

    if s <= x:

        return True

    else:

        return False

    

l = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


r = 10 ** 9 + 7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while r - l > 1: # Hits:31.0, Total execution time: 3.374 ms, Average time per hit: 0.10883870967741936 ms 


    m = (l + r) // 2 # Hits:30.0, Total execution time: 3.168 ms, Average time per hit: 0.1056 ms 


    if f(m): # Hits:30.0, Total execution time: 32.246 ms, Average time per hit: 1.0748666666666666 ms 


        r = m # Hits:29.0, Total execution time: 2.207 ms, Average time per hit: 0.07610344827586206 ms 


    else:

        l = m # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


    # print(r, l, m)

        

print(r) # Hits:1.0, Total execution time: 7.0 ms, Average time per hit: 7.0 ms 
","N, A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.792 ms, Average time per hit: 35.792 ms 


H = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 8.167 ms, Average time per hit: 8.167 ms 


    

def f(x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    s = sum([- (- max(0, h - x * B) // (A - B)) for h in H])

    if s <= x:

        return True

    else:

        return False

    

l = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


r = 10 ** 9 + 7 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


while r - l > 1: # Hits:31.0, Total execution time: 3.374 ms, Average time per hit: 0.10883870967741936 ms 


    m = (l + r) // 2 # Hits:30.0, Total execution time: 3.125 ms, Average time per hit: 0.10416666666666667 ms 


    if f(m): # Hits:30.0, Total execution time: 30.375 ms, Average time per hit: 1.0125 ms 


        r = m # Hits:29.0, Total execution time: 2.296 ms, Average time per hit: 0.07917241379310344 ms 


    else:

        l = m # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    # print(r, l, m)

        

print(r) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 
",p03700,True
"""""""

AtCoder Grand Contest 041  B - Voting Judges





N個の問題があり、M人がそれぞれV問に１点足していく。同じ人が同じ問題に点は入れられない。

全員が点を入れた後、得点の大きいものからP個選ばれる。

選ばれうる可能性のある問題の個数を考える。



例えば1,2,3,4,5,6,7,8,9,10として、３人が４問に加点するのを考える。その後４問が選ばれるとする

５がえらばれうるか考えてみる。

５に３点入れて、残りは５未満に足しておけば８に並ぶので選ばれうる。

上位一位にいくより上位４位にはいる方が縛りが緩そう。１～４のどこにいてもいいので。



なので、とりあえず４位になることを目標とする。

４位になるには上位３位の10,9,8には負けててもいいが、少なくとも７に並ぶ必要がある。

また、投票者が３人なので、多くても＋３しかされない。



とりあえず５にとって最善の＋３した場合を考える。

このときに７に＋２とか６に＋３とかされて８を上回られると選ばれない。

なので、５的には、自分に最大に点を割り振って、残りは順位に影響ないところで使いつぶすのが嬉しい。



１～４について、＋３しても順位に影響ないから、これらには割り振る。

８～１０についても、５的には４位に入ることができたら問題ないので、これらについても＋３して問題ない。

ついで、６，７であるが、これが９になると５は勝てないので、こいつらには＋した結果でも８にとどまってほしい。



こんな感じで、P位になるためにある数字に最大に割り振って、残りを使いつぶす。

で、全体でM*V点持っていて、使いつぶしたときにこれを使い切っていなければ、今回でいうところの６とか７に振るしかなくなる。

そのときは選ばれる可能性がない。

みたいな？



""""""

import bisect # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 






N,M,V,P = list(map(int, input().split())) # Hits:1.0, Total execution time: 41.917 ms, Average time per hit: 41.917 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 




A.sort(reverse=True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




l = P - 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


r = N # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


while r - l > 1: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    mid = (l + r) // 2 # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 




    curr_max = A[mid] + M # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    if curr_max < A[P-1]: # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


        r = mid # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


        continue # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




    cnt = 0 # Hits:2.0, Total execution time: 0.126 ms, Average time per hit: 0.063 ms 


    # P位になれればよいので、P位以降に対して見る

    for i in range(P-1, N): # Hits:12.0, Total execution time: 1.417 ms, Average time per hit: 0.11808333333333333 ms 


        if i == mid: # Hits:10.0, Total execution time: 0.836 ms, Average time per hit: 0.0836 ms 


            continue # Hits:2.0, Total execution time: 0.499 ms, Average time per hit: 0.2495 ms 


        # A[mid]以下の値は＋MしてOK、それ以外はcurr_maxと同じ値までは＋してよい

        cnt += min(M, max(0, curr_max - A[i])) # Hits:8.0, Total execution time: 2.417 ms, Average time per hit: 0.302125 ms 




    # 上位P-1とA[mid]に振った分をのぞいて、都合いい感じに振ったものが、余りを上回れば、選ばれうる

    if cnt >= M * (V - P): # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


        l = mid # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    else:

        r = mid # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 




# lがギリギリ選ばれるもののインデックス（下限）なので、+1して要素数というか個数にする

print((l + 1)) # Hits:1.0, Total execution time: 4.625 ms, Average time per hit: 4.625 ms 
","



N,M,V,P = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.167 ms, Average time per hit: 35.167 ms 




A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.834 ms, Average time per hit: 1.834 ms 






A.sort(reverse=True) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


ok = P-1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


ng = N  # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


while abs(ok - ng) > 1: # Hits:3.0, Total execution time: 0.75 ms, Average time per hit: 0.25 ms 


    mid = (ok + ng) // 2 # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


    curr_max = A[mid] + M # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 




    if curr_max < A[P-1]: # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


        ng = mid # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        continue # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




    cnt = 0 # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


    # midと上位P-1位に＋Mした分

    cnt += M + (P-1) * M # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


    for i in range(P-1, N): # Hits:12.0, Total execution time: 1.58 ms, Average time per hit: 0.13166666666666665 ms 


        if i == mid: continue # Hits:10.0, Total execution time: 1.875 ms, Average time per hit: 0.1875 ms 




        cnt += min(M, max(0, curr_max - A[i])) # Hits:8.0, Total execution time: 2.543 ms, Average time per hit: 0.317875 ms 




    if cnt >= M*V: # Hits:2.0, Total execution time: 0.291 ms, Average time per hit: 0.1455 ms 


        ok = mid # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    else:

        ng = mid # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




print((ok + 1)) # Hits:1.0, Total execution time: 5.667 ms, Average time per hit: 5.667 ms 
",p02824,True
"import sys

from bisect import bisect_right as bi_r

from heapq import heapify, heappop, heappush



n, m, v, p, *a = list(map(int, sys.stdin.read().split()))



def main():

    a.sort()

    # return a



    for i in range(n):

        l = bi_r(a, a[i]) - 1

        r = max(0, v - l - 1)

        if r >= p:

            cand = a[l+1:n-p+1]

            ma = cand[-1]

            heapify(cand)

            remain = m * (r - (p - 1))

            while True:

                x = heappop(cand)

                if x == ma:

                    heappush(cand, x)

                    break

                d = ma - x

                if remain < d:

                    remain = 0

                    break

                remain -= d

                heappush(cand, ma)



            if not remain:

                if a[i] + m >= ma:

                    return n - i

            le = len(cand)

            ma += (remain + le - 1) // le

            if a[i] + m >= ma:

                return n - i

        else:

            if a[i] + m >= a[n-p]:

                return n - i



if __name__ == '__main__':

    ans = main()

    print(ans)",,p02824,False
"from inspect import currentframe



def chkprint(*args):

    names = {id(v):k for k,v in list(currentframe().f_back.f_locals.items())}

    print((', '.join(names.get(id(arg),'???')+' = '+repr(arg) for arg in args)))



def main():

    N, M, V, P = list(map(int, input().split()))

    A = list(map(int, input().split()))

    dic_A = {k:v for (k, v) in enumerate(A)}

    sorted_dic_A = sorted(list(dic_A.items()), key=lambda x: x[1], reverse=True)

    # chkprint(sorted_dic_A)



    B = sorted_dic_A[:P]

    P_min_val = min(B, key=lambda  x: x[1])[1]

    # chkprint(B)

    C = sorted_dic_A[P:]

    # chkprint(C)



    ans = set()



    num_vote = M * V

    # chkprint(num_vote)

    for i, v in C:

        if P_min_val > v + M:

            break

        margin = num_vote

        margin -= M * (P-1)

        margin_list = [v+M-w for (j,w) in C if j!=i]

        mod_margin_list = list([x if x < M else M for x in margin_list])

        # chkprint(margin_list)

        # chkprint(mod_margin_list)

        margin -= M

        margin -= sum(mod_margin_list)

        # chkprint(margin)

        if margin <= 0:

            ans.add(i)



    for i, _ in B:

        ans.add(i)



    print((len(ans)))





if __name__ == '__main__':

    main()
",,p02824,False
"from collections import deque # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 




N, M, V, P = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.209 ms, Average time per hit: 34.209 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.834 ms, Average time per hit: 1.834 ms 


A.sort(reverse=True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


W = N - V # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




def isOk(n): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if n < P:

        return True

    b = A[n]



    D = [max(0, a - b) for a in A][P - 1:]

    D = deque([d for d in D if d > 0])

    cnt = 0



    while D:

        cnt += 1

        E = []

        for _ in range(min(W, len(D))):

            E.append(D.pop())

        for e in E:

            e -= 1

            if e > 0:

                D.append(e)



    return cnt <= M



ok = -1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


ng = N # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while ng - ok > 1: # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


    mid = (ng + ok) // 2 # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    if isOk(mid): # Hits:3.0, Total execution time: 15.793 ms, Average time per hit: 5.264333333333333 ms 


        ok = mid # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    else:

        ng = mid # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 




print(ng) # Hits:1.0, Total execution time: 4.959 ms, Average time per hit: 4.959 ms 
","N, M, V, P = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.75 ms, Average time per hit: 33.75 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


A.sort(reverse=True) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


W = N - V # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def isOk(n): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if n < P:

        return True

    b = A[n]



    D = [max(0, a - b) for a in A][P - 1:]

    cnt = -(-(sum(D) - W) // W) + 1



    return max(max(D), cnt) <= M



ok = -1 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


ng = N # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while ng - ok > 1: # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    mid = (ng + ok) // 2 # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    if isOk(mid): # Hits:3.0, Total execution time: 7.126 ms, Average time per hit: 2.3753333333333333 ms 


        ok = mid # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


    else:

        ng = mid # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 




print(ng) # Hits:1.0, Total execution time: 4.834 ms, Average time per hit: 4.834 ms 
",p02824,True
"def check(n):



    if n <= P-1:

        return True

    

    if A[n]+M < A[P-1]:

        return False

    

    votes = (P+N-1-n)*M + sum([A[n]+M-A[i] for i in range(P-1,n)])



    if votes < M*V:

        return False

    else:

        return True



N,M,V,P = list(map(int,input().split()))

A = list(map(int,input().split()))



A.sort(reverse=True)



right = N-1

left = 0



if check(right):

    print(N)

    exit()



while abs(right-left) > 1 and check(left) and not check(right):



    mid = (right+left)//2



    if check(mid):

        left = mid

    else:

        right = mid



print((left+1))",,p02824,False
"n, m, v, p = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.042 ms, Average time per hit: 37.042 ms 


a = sorted(list(map(int, input().split())), reverse=True) # Hits:1.0, Total execution time: 2.375 ms, Average time per hit: 2.375 ms 


ans = p # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


c = [0] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:7.0, Total execution time: 0.876 ms, Average time per hit: 0.12514285714285714 ms 


  # 累積和

  cnt += a[i] # Hits:6.0, Total execution time: 0.792 ms, Average time per hit: 0.132 ms 


  c.append(cnt) # Hits:6.0, Total execution time: 0.792 ms, Average time per hit: 0.132 ms 


  

from bisect import bisect_right # Hits:1.0, Total execution time: 1.291 ms, Average time per hit: 1.291 ms 


for i in range(p,n): # Hits:5.0, Total execution time: 0.542 ms, Average time per hit: 0.10840000000000001 ms 


  h = a[i]+m # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


  free = v - (p-1) - (n-i) # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


  if free >= 0 and h >= a[p-1]: # Hits:4.0, Total execution time: 0.791 ms, Average time per hit: 0.19775 ms 


    d = h * (i-p+1) - (c[i]-c[p-1]) # 余裕 # Hits:3.0, Total execution time: 0.75 ms, Average time per hit: 0.25 ms 


    if d >= free*m: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


      ans += 1 # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


  else:

    if h >= a[p-1]: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


      ans += 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


print(ans) # Hits:1.0, Total execution time: 4.75 ms, Average time per hit: 4.75 ms 

","N, M, V, P = list(map(int, input().strip().split())) # Hits:1.0, Total execution time: 36.916 ms, Average time per hit: 36.916 ms 


A = sorted(list(map(int, input().strip().split())),reverse=True) # Hits:1.0, Total execution time: 3.708 ms, Average time per hit: 3.708 ms 


ans=P # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




sum_=[0]*N # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


sum_[0]=A[0] # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for i in range(1,N): # Hits:6.0, Total execution time: 1.25 ms, Average time per hit: 0.20833333333333334 ms 


    sum_[i]=(sum_[i-1]+A[i]) # Hits:5.0, Total execution time: 1.292 ms, Average time per hit: 0.25839999999999996 ms 


# sum_=[0]

# cnt=0

# for i in range(N):

#   # 累積和

#   cnt += A[i]

#   sum_.append(cnt)



for i in range(P,N): # Hits:5.0, Total execution time: 0.791 ms, Average time per hit: 0.15819999999999998 ms 


    thre=A[i]+M # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    if thre < A[P-1]: # Hits:4.0, Total execution time: 0.999 ms, Average time per hit: 0.24975 ms 


        continue # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




    remain=V-(P-1)-(N-i) # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


    if remain <=0: # Hits:3.0, Total execution time: 0.376 ms, Average time per hit: 0.12533333333333332 ms 


        ans+=1 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    else:

        if P!=1: # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


            if sum_[i-1]-sum_[P-2]+M*remain <= thre*(i-P+1): # Hits:2.0, Total execution time: 2.042 ms, Average time per hit: 1.021 ms 


                ans+=1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        else:

            if sum_[i-1]+M*remain <= thre*(i-P+1):

                ans+=1

print(ans) # Hits:1.0, Total execution time: 6.042 ms, Average time per hit: 6.042 ms 
",p02824,True
"from math import floor



def main(N, rate=1.08):

    ans = -1

    for x in range(1, N+1):

        if floor(x * 1.08) == N:

            ans = x

    return ans





if __name__ == ""__main__"":

    N = int(eval(input()))

    ans = main(N)

    print((ans if ans > 0 else ':('))
",,p02842,False
"n=int(eval(input()))

for i in range(1,n+1):

    if int(i*1.08) == n:

        print(i)

        exit()



print(':(')",,p02842,False
"def main():

    from math import floor

    N = int(input())

    for i in range(50000):

        if floor(i*1.08) == N:

            return print(i)

    else:

        print("":("")





if __name__ == '__main__':

    main()
",,p02842,False
"def main():

    n = int(eval(input()))



    for i in range(1, 50000):

        if i * 108 // 100 == n:

            print(i)

            break

    else:

        print("":("")





if __name__ == ""__main__"":

    main()
",,p02842,False
"N=int(eval(input())) # Hits:1.0, Total execution time: 61.375 ms, Average time per hit: 61.375 ms 


ans = -1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(50000+10): # Hits:50011.0, Total execution time: 4682.89 ms, Average time per hit: 0.09363719981604046 ms 


 x1 = int(i*1.08) # Hits:50010.0, Total execution time: 6970.605 ms, Average time per hit: 0.1393842231553689 ms 


 x2 = i*1.08 # Hits:50010.0, Total execution time: 4754.11 ms, Average time per hit: 0.0950631873625275 ms 


 #print(i,x1,x2)

 if(x1 == N): ans = i # Hits:50010.0, Total execution time: 4444.937 ms, Average time per hit: 0.08888096380723856 ms 


 elif(x2 == N): ans = i # Hits:50009.0, Total execution time: 5066.747 ms, Average time per hit: 0.10131670299346118 ms 


  

  

if(ans == -1): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


 print(':(') # Hits:1.0, Total execution time: 9.375 ms, Average time per hit: 9.375 ms 


else:

 print(ans) # Hits:1.0, Total execution time: 9.5 ms, Average time per hit: 9.5 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 41.583 ms, Average time per hit: 41.583 ms 




ans = -1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for x in range(N+1): # Hits:401.0, Total execution time: 33.956 ms, Average time per hit: 0.0846783042394015 ms 


  if(int(x*1.08) == N): # Hits:401.0, Total execution time: 61.791 ms, Average time per hit: 0.1540922693266833 ms 


    ans = x # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    

if(ans == -1): print(':(') # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


else: print(ans) # Hits:1.0, Total execution time: 8.667 ms, Average time per hit: 8.667 ms 

",p02842,True
"# sumitb2019_b_bacha.py

N = int(eval(input()))

for i in range(10000000):

    if int(i*1.08) == N:

        print(i)

        exit()

print("":("")




",,p02842,False
"import math



n=int(eval(input()))



for i in range(1,50001):

    if math.floor(i*1.08)==n:

        print(i)

        exit()

print("":("")


","n=int(eval(input())) # Hits:1.0, Total execution time: 38.0 ms, Average time per hit: 38.0 ms 




if int(n//1.08) !=int((n+1)//1.08): # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


      print((int((n+1)//1.08))) # Hits:1.0, Total execution time: 7.334 ms, Average time per hit: 7.334 ms 


else:

      print(':(') # Hits:1.0, Total execution time: 5.541 ms, Average time per hit: 5.541 ms 
",p02842,False
"n=int(eval(input()));print((([m for m in range(n+1)if int(m*1.08)==n]+[':('])[0])) # Hits:1.0, Total execution time: 101.875 ms, Average time per hit: 101.875 ms 
","n=int(eval(input()))+1;print((n%27%14and int(n/1.08)or':(')) # Hits:1.0, Total execution time: 37.875 ms, Average time per hit: 37.875 ms 
",p02842,True
"import math



n = int(eval(input()))



for i in range(1, 50001):

    if i * 1.08 == n or math.floor(i*1.08) == n:

        print(i)

        exit()



print("":("")",,p02842,False
"N = int(eval(input())) # Hits:1.0, Total execution time: 51.334 ms, Average time per hit: 51.334 ms 


import math # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 




for x in range(900000 + 1): # Hits:401.0, Total execution time: 35.543 ms, Average time per hit: 0.0886359102244389 ms 


    if math.floor(x * 1.08) == N: # Hits:401.0, Total execution time: 63.334 ms, Average time per hit: 0.15794014962593517 ms 


        print(x) # Hits:1.0, Total execution time: 10.917 ms, Average time per hit: 10.917 ms 


        break # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


else:

    print(':(') # Hits:1.0, Total execution time: 23.541 ms, Average time per hit: 23.541 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 42.916 ms, Average time per hit: 42.916 ms 


import math # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




x = math.ceil(N / 1.08) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


print((str(x) if math.floor(x * 1.08) == N else ':(')) # Hits:1.0, Total execution time: 7.084 ms, Average time per hit: 7.084 ms 
",p02842,True
"def cmb(n,r,mod): # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


  if r<0 or r>n:

    return 0

  r=min(r,n-r)

  return g1[n]*g2[r]*g2[n-r]%mod

 

n=int(eval(input())) # Hits:1.0, Total execution time: 95.958 ms, Average time per hit: 95.958 ms 


mod=998244353 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




g1=[1,1] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


g2=[1,1] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


inverse=[0,1] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


 

for i in range(2,n+1): # Hits:10.0, Total execution time: 2.082 ms, Average time per hit: 0.2082 ms 


  g1.append((g1[-1]*i)%mod) # Hits:9.0, Total execution time: 2.417 ms, Average time per hit: 0.26855555555555555 ms 


  inverse.append((-inverse[mod%i]*(mod//i))%mod) # Hits:9.0, Total execution time: 2.709 ms, Average time per hit: 0.301 ms 


  g2.append((g2[-1]*inverse[-1])%mod) # Hits:9.0, Total execution time: 3.333 ms, Average time per hit: 0.3703333333333333 ms 




a=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


b=1 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in range(n,n//2,-1): # Hits:6.0, Total execution time: 0.875 ms, Average time per hit: 0.14583333333333334 ms 


  a+=cmb(n,i,mod)*b # Hits:5.0, Total execution time: 5.584 ms, Average time per hit: 1.1168 ms 


  a%=mod # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


  b*=2 # Hits:5.0, Total execution time: 0.499 ms, Average time per hit: 0.0998 ms 


  b%=mod # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


ans=(pow(3,n,mod)-2*a)%mod # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


print(((ans+mod)%mod)) # Hits:1.0, Total execution time: 13.083 ms, Average time per hit: 13.083 ms 
","n=int(eval(input()));l=[0,1];a=0;b=c=1;p=998244353 # Hits:1.0, Total execution time: 63.0 ms, Average time per hit: 63.0 ms 


for i in range(2,n//2+1): # Hits:5.0, Total execution time: 1.542 ms, Average time per hit: 0.30839999999999995 ms 


 l+=[l[p%i]*(p-int(p/i))%p] # Hits:4.0, Total execution time: 1.75 ms, Average time per hit: 0.4375 ms 


for i in range(n,n//2,-1): # Hits:6.0, Total execution time: 0.792 ms, Average time per hit: 0.132 ms 


 a+=b*c%p;b=2*b%p;c=c*i*l[n+1-i]%p # Hits:5.0, Total execution time: 2.374 ms, Average time per hit: 0.4748 ms 


print(((pow(3,n,p)-2*a+p)%p)) # Hits:1.0, Total execution time: 8.458 ms, Average time per hit: 8.458 ms 
",p02875,True
"def prepare(n, MOD): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    f = 1

    for m in range(1, n + 1):

        f *= m

        f %= MOD

    fn = f



    inv = pow(f, MOD - 2, MOD)

    invs = [1] * (n + 1)

    invs[n] = inv

    for m in range(n, 1, -1):

        inv *= m

        inv %= MOD

        invs[m - 1] = inv



    return fn, invs





n = int(eval(input())) # Hits:1.0, Total execution time: 63.167 ms, Average time per hit: 63.167 ms 


MOD = 998244353 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


fn, invs = prepare(n, MOD) # Hits:1.0, Total execution time: 8.875 ms, Average time per hit: 8.875 ms 


ans = pow(3, n, MOD) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


impossible = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(n // 2): # Hits:6.0, Total execution time: 0.708 ms, Average time per hit: 0.118 ms 


    tmp = fn * invs[i] * invs[n - i] % MOD * pow(2, i, MOD) # Hits:5.0, Total execution time: 1.834 ms, Average time per hit: 0.3668 ms 


    impossible = (impossible + 2 * tmp) % MOD # Hits:5.0, Total execution time: 0.876 ms, Average time per hit: 0.1752 ms 


print(((ans - impossible) % MOD)) # Hits:1.0, Total execution time: 8.334 ms, Average time per hit: 8.334 ms 

","def prepare(n, MOD): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    f = 1

    for m in range(1, n + 1):

        f *= m

        f %= MOD

    fn = f



    inv = pow(f, MOD - 2, MOD)

    invs = [1] * (n + 1)

    invs[n] = inv

    for m in range(n, 1, -1):

        inv *= m

        inv %= MOD

        invs[m - 1] = inv



    return fn, invs





n = int(eval(input())) # Hits:1.0, Total execution time: 44.875 ms, Average time per hit: 44.875 ms 


MOD = 998244353 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


fn, invs = prepare(n, MOD) # Hits:1.0, Total execution time: 8.834 ms, Average time per hit: 8.834 ms 


ans = pow(3, n, MOD) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


impossible = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


mul = 2 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(n // 2): # Hits:6.0, Total execution time: 0.708 ms, Average time per hit: 0.118 ms 


    tmp = fn * invs[i] * invs[n - i] % MOD * mul # Hits:5.0, Total execution time: 1.375 ms, Average time per hit: 0.275 ms 


    impossible = (impossible + tmp) % MOD # Hits:5.0, Total execution time: 0.709 ms, Average time per hit: 0.1418 ms 


    mul = mul * 2 % MOD # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


print(((ans - impossible) % MOD)) # Hits:1.0, Total execution time: 7.166 ms, Average time per hit: 7.166 ms 

",p02875,True
"import itertools # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


import os # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


import sys # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


from functools import lru_cache # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 




if os.getenv(""LOCAL""): # Hits:1.0, Total execution time: 9.209 ms, Average time per hit: 9.209 ms 


    sys.stdin = open(""_in.txt"", ""r"")



sys.setrecursionlimit(2147483647) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


INF = float(""inf"") # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


IINF = 10 ** 18 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


MOD = 998244353 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




N = int(sys.stdin.readline()) # Hits:1.0, Total execution time: 54.292 ms, Average time per hit: 54.292 ms 






@lru_cache(maxsize=None) # Hits:2.0, Total execution time: 7.5 ms, Average time per hit: 3.75 ms 


# @debug

def is_ok(s): # Hits:2.0, Total execution time: 0.293 ms, Average time per hit: 0.1465 ms 


    if len(s) == 0:

        return True

    if len(s) == 2:

        return s not in ['AB', 'BA']

    for i in range(len(s) - 2):

        if s[i:i + 2] not in ['AB', 'BA'] and is_ok(s[:i] + s[i + 2:]):

            return True

    return False





def test(N): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    ret = 0

    for s in itertools.product('ABC', repeat=N):

        s = ''.join(s)

        ret += is_ok(s)

    return ret





def get_factorials(max, mod=None): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    """"""

    階乗 0!, 1!, 2!, ..., max!

    :param int max:

    :param int mod:

    :return:

    """"""

    ret = [1]

    n = 1

    if mod:

        for i in range(1, max + 1):

            n *= i

            n %= mod

            ret.append(n)

    else:

        for i in range(1, max + 1):

            n *= i

            ret.append(n)

    return ret





def mod_invs(max, mod): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    """"""

    逆元のリスト 0 から max まで

    :param int max:

    :param int mod:

    """"""

    invs = [1] * (max + 1)

    for x in range(2, max + 1):

        invs[x] = (-(mod // x) * invs[mod % x]) % mod

    return invs





def factorial_invs(max, mod): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    """"""

    階乗 0!, 1!, 2!, ..., max! の逆元

    :param int max:

    :param int mod:

    """"""

    ret = []

    r = 1

    for inv in mod_invs(max, mod):

        r = r * inv % mod

        ret.append(r)

    return ret





class Combination: # Hits:1.0, Total execution time: 7.209 ms, Average time per hit: 7.209 ms 


    def __init__(self, max, mod):

        """"""

        :param int max:

        :param int mod: 3 以上の素数であること

        """"""

        self._factorials = get_factorials(max, mod)

        self._finvs = factorial_invs(max, mod)

        self._mod = mod



    def ncr(self, n, r):

        """"""

        :param int n:

        :param int r:

        :rtype: int

        """"""

        if n < r:

            return 0

        return self._factorials[n] * self._finvs[r] % self._mod * self._finvs[n - r] % self._mod





# print(test(N))



# 解説AC

# 偶数番目のAとBを反転して、AAとBB以外を取り除く

# AまたはBが半分より多いときダメなので全体から引く

ans = pow(3, N, MOD) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


comb = Combination(max=N, mod=MOD) # Hits:1.0, Total execution time: 12.833 ms, Average time per hit: 12.833 ms 


for r in range(N // 2 + 1, N + 1): # Hits:6.0, Total execution time: 0.793 ms, Average time per hit: 0.13216666666666665 ms 


    ans -= comb.ncr(N, r) * pow(2, N - r, MOD) * 2 % MOD # Hits:5.0, Total execution time: 4.832 ms, Average time per hit: 0.9663999999999999 ms 


    ans %= MOD # Hits:5.0, Total execution time: 0.585 ms, Average time per hit: 0.117 ms 


print(ans) # Hits:1.0, Total execution time: 9.375 ms, Average time per hit: 9.375 ms 

","import itertools # Hits:1.0, Total execution time: 1.584 ms, Average time per hit: 1.584 ms 


import os # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


import sys # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


from functools import lru_cache # Hits:1.0, Total execution time: 1.541 ms, Average time per hit: 1.541 ms 




if os.getenv(""LOCAL""): # Hits:1.0, Total execution time: 8.167 ms, Average time per hit: 8.167 ms 


    sys.stdin = open(""_in.txt"", ""r"")



sys.setrecursionlimit(2147483647) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


INF = float(""inf"") # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 


IINF = 10 ** 18 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


MOD = 998244353 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




N = int(sys.stdin.readline()) # Hits:1.0, Total execution time: 32.834 ms, Average time per hit: 32.834 ms 






@lru_cache(maxsize=None) # Hits:2.0, Total execution time: 7.583 ms, Average time per hit: 3.7915 ms 


# @debug

def is_ok(s): # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    if len(s) == 0:

        return True

    if len(s) == 2:

        return s not in ['AB', 'BA']

    for i in range(len(s) - 2):

        if s[i:i + 2] not in ['AB', 'BA'] and is_ok(s[:i] + s[i + 2:]):

            return True

    return False





def test(N): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    ret = 0

    for s in itertools.product('ABC', repeat=N):

        s = ''.join(s)

        ret += is_ok(s)

    return ret





def mod_invs(max, mod): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    """"""

    逆元のリスト 0 から max まで

    :param int max:

    :param int mod:

    """"""

    invs = [1] * (max + 1)

    for x in range(2, max + 1):

        invs[x] = (-(mod // x) * invs[mod % x]) % mod

    return invs





# print(test(N))

# N = 10 ** 7



# 解説AC

# 偶数番目のAとBを反転して、AAとBB以外を取り除く

# AまたはBが半分より多いときダメなので全体から引く

ans = pow(3, N, MOD) # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 




invs = mod_invs(max=N, mod=MOD) # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 


ncr = 1  # NCr # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


p2r = 1  # pow(2, N - r, MOD) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for r in range(N, N // 2, -1): # Hits:6.0, Total execution time: 0.874 ms, Average time per hit: 0.14566666666666667 ms 


    # ans -= comb.ncr(N, r) * pow(2, N - r, MOD) * 2 % MOD

    ans -= ncr * p2r * 2 % MOD # Hits:5.0, Total execution time: 1.165 ms, Average time per hit: 0.233 ms 


    ans %= MOD # Hits:5.0, Total execution time: 0.584 ms, Average time per hit: 0.1168 ms 


    ncr *= r * invs[N - r + 1] # Hits:5.0, Total execution time: 1.082 ms, Average time per hit: 0.2164 ms 


    ncr %= MOD # Hits:5.0, Total execution time: 0.459 ms, Average time per hit: 0.09179999999999999 ms 


    p2r *= 2 # Hits:5.0, Total execution time: 0.417 ms, Average time per hit: 0.0834 ms 


    p2r %= MOD # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


print(ans) # Hits:1.0, Total execution time: 7.625 ms, Average time per hit: 7.625 ms 

",p02875,True
"#解説参照

#言い換えが困難



n=int(eval(input())) # Hits:1.0, Total execution time: 71.125 ms, Average time per hit: 71.125 ms 


mod=998244353 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




ans=pow(3,n,mod) # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


rmv=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


f = [1, 1]   # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


inv = [1, 1]   # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


finv=[1,1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(2, n+1): # Hits:10.0, Total execution time: 1.913 ms, Average time per hit: 0.1913 ms 


    f.append((f[-1] * i) % mod) # Hits:9.0, Total execution time: 2.377 ms, Average time per hit: 0.2641111111111111 ms 


    inv.append((-inv[mod % i] * (mod // i)) % mod) # Hits:9.0, Total execution time: 2.999 ms, Average time per hit: 0.33322222222222225 ms 


    finv.append(finv[-1]*inv[-1]%mod) # Hits:9.0, Total execution time: 3.294 ms, Average time per hit: 0.366 ms 




def ch(a,b): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    return f[a]*finv[a-b]*finv[b]

k=n//2 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


if k*2<=n: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    k+=1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




for i in range(k,n+1): # Hits:6.0, Total execution time: 0.707 ms, Average time per hit: 0.11783333333333333 ms 


    ans -= ch(n,i)*pow(2,n-i+1,mod) # Hits:5.0, Total execution time: 4.25 ms, Average time per hit: 0.85 ms 


print((ans%mod)) # Hits:1.0, Total execution time: 14.083 ms, Average time per hit: 14.083 ms 


    


","n=int(eval(input())) # Hits:1.0, Total execution time: 65.958 ms, Average time per hit: 65.958 ms 


mod=998244353 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




ans=pow(3,n,mod) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


rmv=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


f = [1, 1]   # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


inv = [1, 1]   # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


finv=[1,1] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(2, n+1): # Hits:10.0, Total execution time: 1.878 ms, Average time per hit: 0.18780000000000002 ms 


    f.append((f[-1] * i) % mod) # Hits:9.0, Total execution time: 2.208 ms, Average time per hit: 0.24533333333333335 ms 


    inv.append((-inv[mod % i] * (mod // i)) % mod) # Hits:9.0, Total execution time: 2.54 ms, Average time per hit: 0.2822222222222222 ms 


    finv.append(finv[-1]*inv[-1]%mod) # Hits:9.0, Total execution time: 3.04 ms, Average time per hit: 0.3377777777777778 ms 




k=n//2 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


if k*2<=n: # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    k+=1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


tmp=pow(2,n-k+1,mod) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


inv2=pow(2,mod-2,mod) # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 


for i in range(k,n+1): # Hits:6.0, Total execution time: 0.584 ms, Average time per hit: 0.09733333333333333 ms 


    ans -= f[n]*finv[n-i]*finv[i]*tmp # Hits:5.0, Total execution time: 1.708 ms, Average time per hit: 0.3416 ms 


    tmp*=inv2 # Hits:5.0, Total execution time: 0.457 ms, Average time per hit: 0.09140000000000001 ms 


    tmp%=mod # Hits:5.0, Total execution time: 0.541 ms, Average time per hit: 0.1082 ms 


print((ans%mod)) # Hits:1.0, Total execution time: 11.25 ms, Average time per hit: 11.25 ms 


    


",p02875,True
"N=int(eval(input())) # Hits:1.0, Total execution time: 46.917 ms, Average time per hit: 46.917 ms 


mod=998244353 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


Combi=1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


SC=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(N,N//2,-1): # Hits:6.0, Total execution time: 1.541 ms, Average time per hit: 0.2568333333333333 ms 


    SC=(SC+Combi*pow(2,N-i,mod))%mod # Hits:5.0, Total execution time: 2.042 ms, Average time per hit: 0.4084 ms 


    Combi=Combi*(i)*pow(N-i+1,mod-2,mod)%mod # Hits:5.0, Total execution time: 7.043 ms, Average time per hit: 1.4085999999999999 ms 


print(((pow(3,N,mod)-SC*2)%mod)) # Hits:1.0, Total execution time: 7.917 ms, Average time per hit: 7.917 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 68.833 ms, Average time per hit: 68.833 ms 


mod=998244353 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




FACT=[1] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(1,N+1): # Hits:11.0, Total execution time: 2.541 ms, Average time per hit: 0.231 ms 


    FACT.append(FACT[-1]*i%mod) # Hits:10.0, Total execution time: 4.043 ms, Average time per hit: 0.4043 ms 




FACT_INV=[pow(FACT[-1],mod-2,mod)] # Hits:1.0, Total execution time: 2.5 ms, Average time per hit: 2.5 ms 


for i in range(N,0,-1): # Hits:11.0, Total execution time: 1.623 ms, Average time per hit: 0.14754545454545454 ms 


    FACT_INV.append(FACT_INV[-1]*i%mod) # Hits:10.0, Total execution time: 2.416 ms, Average time per hit: 0.24159999999999998 ms 




FACT_INV.reverse() # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




POW=[1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N): # Hits:11.0, Total execution time: 1.461 ms, Average time per hit: 0.1328181818181818 ms 


    POW.append(POW[-1]*2%mod) # Hits:10.0, Total execution time: 2.458 ms, Average time per hit: 0.24580000000000002 ms 




def Combi(a,b): # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


    return FACT[a]*FACT_INV[b]*FACT_INV[a-b]%mod



SC=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N//2+1,N+1): # Hits:6.0, Total execution time: 0.748 ms, Average time per hit: 0.12466666666666668 ms 


    SC+=Combi(N,i)*POW[N-i] # Hits:5.0, Total execution time: 3.501 ms, Average time per hit: 0.7002 ms 




print(((pow(3,N,mod)-SC*2)%mod)) # Hits:1.0, Total execution time: 24.125 ms, Average time per hit: 24.125 ms 
",p02875,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 63.875 ms, Average time per hit: 63.875 ms 




nn = N + 10 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


P = 998244353 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




fa = [1] * (nn+1) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


fainv = [1] * (nn+1) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(nn): # Hits:21.0, Total execution time: 2.749 ms, Average time per hit: 0.13090476190476188 ms 


    fa[i+1] = fa[i] * (i+1) % P # Hits:20.0, Total execution time: 5.124 ms, Average time per hit: 0.2562 ms 


fainv[-1] = pow(fa[-1], P-2, P) # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 


for i in range(nn)[::-1]: # Hits:21.0, Total execution time: 2.416 ms, Average time per hit: 0.11504761904761905 ms 


    fainv[i] = fainv[i+1] * (i+1) % P # Hits:20.0, Total execution time: 3.459 ms, Average time per hit: 0.17295 ms 


C = lambda a, b: fa[a] * fainv[b] % P * fainv[a-b] % P if 0 <= b <= a else 0 # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




ans = pow(3, N, P) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for i in range(N//2 + 1, N + 1): # Hits:6.0, Total execution time: 0.834 ms, Average time per hit: 0.139 ms 


    ans = (ans - 2 * C(N, i) * pow(2, N - i, P)) % P # Hits:5.0, Total execution time: 4.709 ms, Average time per hit: 0.9418 ms 




print(ans) # Hits:1.0, Total execution time: 12.209 ms, Average time per hit: 12.209 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 74.208 ms, Average time per hit: 74.208 ms 




nn = N + 10 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


P = 998244353 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




fa = [1] * (nn+1) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


fainv = [1] * (nn+1) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(nn): # Hits:21.0, Total execution time: 2.665 ms, Average time per hit: 0.1269047619047619 ms 


    fa[i+1] = fa[i] * (i+1) % P # Hits:20.0, Total execution time: 5.628 ms, Average time per hit: 0.2814 ms 


fainv[-1] = pow(fa[-1], P-2, P) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


for i in range(nn)[::-1]: # Hits:21.0, Total execution time: 2.376 ms, Average time per hit: 0.11314285714285714 ms 


    fainv[i] = fainv[i+1] * (i+1) % P # Hits:20.0, Total execution time: 3.542 ms, Average time per hit: 0.1771 ms 


C = lambda a, b: fa[a] * fainv[b] % P * fainv[a-b] % P if 0 <= b <= a else 0 # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




ans = pow(3, N, P) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


p2 = 2 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(N, N // 2, -1): # Hits:6.0, Total execution time: 0.748 ms, Average time per hit: 0.12466666666666668 ms 


    ans = (ans - C(N, i) * p2) % P # Hits:5.0, Total execution time: 4.46 ms, Average time per hit: 0.892 ms 


    p2 = p2 * 2 % P # Hits:5.0, Total execution time: 0.707 ms, Average time per hit: 0.1414 ms 




print(ans) # Hits:1.0, Total execution time: 14.75 ms, Average time per hit: 14.75 ms 
",p02875,True
"import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


from collections import defaultdict # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 




S = input().strip() # Hits:1.0, Total execution time: 36.75 ms, Average time per hit: 36.75 ms 


l = len(S) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


no_zero_dic = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


dp = [[0 for _ in range(2019)] for i in range(l)] # Hits:1.0, Total execution time: 1179.291 ms, Average time per hit: 1179.291 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(l): # Hits:12.0, Total execution time: 0.999 ms, Average time per hit: 0.08325 ms 


    s = int(S[i]) # Hits:11.0, Total execution time: 1.958 ms, Average time per hit: 0.178 ms 


    no_zero_dic[s] = 1 # Hits:11.0, Total execution time: 1.376 ms, Average time per hit: 0.12509090909090909 ms 


    _x = set(no_zero_dic.keys()) # Hits:11.0, Total execution time: 6.248 ms, Average time per hit: 0.568 ms 


    for j in _x: # Hits:213.0, Total execution time: 18.963 ms, Average time per hit: 0.08902816901408452 ms 


        k = (10 * j + s) % 2019 # Hits:202.0, Total execution time: 25.456 ms, Average time per hit: 0.12601980198019802 ms 


        dp[i][k] = dp[i-1][j] # Hits:202.0, Total execution time: 31.172 ms, Average time per hit: 0.15431683168316832 ms 


        if dp[i-1][j] > 0: # Hits:202.0, Total execution time: 26.624 ms, Average time per hit: 0.1318019801980198 ms 


            no_zero_dic[k] = 1 # Hits:52.0, Total execution time: 6.042 ms, Average time per hit: 0.11619230769230769 ms 


        if k == 0: # Hits:202.0, Total execution time: 19.376 ms, Average time per hit: 0.09592079207920792 ms 


            ans += dp[i][k] # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    dp[i][s] += 1 # Hits:11.0, Total execution time: 1.667 ms, Average time per hit: 0.15154545454545454 ms 






print(ans) # Hits:1.0, Total execution time: 8.166 ms, Average time per hit: 8.166 ms 

","import sys # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




S = input().strip() # Hits:1.0, Total execution time: 36.666 ms, Average time per hit: 36.666 ms 


l = len(S) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


dic = {0:[-1]} # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


dp = [[0 for _ in range(2019)] for i in range(l)] # Hits:1.0, Total execution time: 1050.0 ms, Average time per hit: 1050.0 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


mod = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(0, l): # Hits:12.0, Total execution time: 1.085 ms, Average time per hit: 0.09041666666666667 ms 


    s = int(S[i:]) # Hits:11.0, Total execution time: 2.791 ms, Average time per hit: 0.25372727272727275 ms 


    mod = s % 2019 # Hits:11.0, Total execution time: 1.332 ms, Average time per hit: 0.1210909090909091 ms 


    if mod in dic: # Hits:11.0, Total execution time: 1.376 ms, Average time per hit: 0.12509090909090909 ms 


        dic[mod].append(i) # Hits:2.0, Total execution time: 1.207 ms, Average time per hit: 0.6035 ms 


    else:

        dic[mod] = [i] # Hits:9.0, Total execution time: 1.374 ms, Average time per hit: 0.15266666666666664 ms 




for key, val in list(dic.items()): # Hits:11.0, Total execution time: 2.5 ms, Average time per hit: 0.2272727272727273 ms 


    v_len = len(val) # Hits:10.0, Total execution time: 1.124 ms, Average time per hit: 0.1124 ms 


    ans += (v_len * (v_len -1))// 2 # Hits:10.0, Total execution time: 1.792 ms, Average time per hit: 0.1792 ms 




print(ans) # Hits:1.0, Total execution time: 8.875 ms, Average time per hit: 8.875 ms 



",p02702,True
"import sys # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




S = input().strip() # Hits:1.0, Total execution time: 36.375 ms, Average time per hit: 36.375 ms 


l = len(S) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


dic = {0:[-1]} # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


dp = [[0 for _ in range(2019)] for i in range(l)] # Hits:1.0, Total execution time: 1088.875 ms, Average time per hit: 1088.875 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


base = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


mod = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(0, l): # Hits:12.0, Total execution time: 1.372 ms, Average time per hit: 0.11433333333333333 ms 


    base = (10 * base) % 2019 # Hits:11.0, Total execution time: 1.458 ms, Average time per hit: 0.13254545454545452 ms 


    s = base * int(S[l-1-i]) + mod # Hits:11.0, Total execution time: 2.664 ms, Average time per hit: 0.2421818181818182 ms 


    mod = s % 2019 # Hits:11.0, Total execution time: 0.959 ms, Average time per hit: 0.0871818181818182 ms 


    if mod in dic: # Hits:11.0, Total execution time: 1.042 ms, Average time per hit: 0.09472727272727273 ms 


        dic[mod].append(i) # Hits:2.0, Total execution time: 0.583 ms, Average time per hit: 0.2915 ms 


    else:

        dic[mod] = [i] # Hits:9.0, Total execution time: 1.792 ms, Average time per hit: 0.19911111111111113 ms 




for key, val in list(dic.items()): # Hits:11.0, Total execution time: 2.001 ms, Average time per hit: 0.1819090909090909 ms 


    v_len = len(val) # Hits:10.0, Total execution time: 1.207 ms, Average time per hit: 0.1207 ms 


    ans += (v_len * (v_len -1))// 2 # Hits:10.0, Total execution time: 1.75 ms, Average time per hit: 0.175 ms 




print(ans) # Hits:1.0, Total execution time: 9.291 ms, Average time per hit: 9.291 ms 



","import sys # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




S = input().strip() # Hits:1.0, Total execution time: 40.875 ms, Average time per hit: 40.875 ms 


l = len(S) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


dic = {0:[-1]} # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


ans = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


base = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


mod = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(0, l): # Hits:12.0, Total execution time: 1.708 ms, Average time per hit: 0.14233333333333334 ms 


    base = (10 * base) % 2019 # Hits:11.0, Total execution time: 1.5 ms, Average time per hit: 0.13636363636363638 ms 


    s = base * int(S[l-1-i]) + mod # Hits:11.0, Total execution time: 2.919 ms, Average time per hit: 0.26536363636363636 ms 


    mod = s % 2019 # Hits:11.0, Total execution time: 1.123 ms, Average time per hit: 0.1020909090909091 ms 


    if mod in dic: # Hits:11.0, Total execution time: 1.377 ms, Average time per hit: 0.1251818181818182 ms 


        dic[mod].append(i) # Hits:2.0, Total execution time: 0.625 ms, Average time per hit: 0.3125 ms 


    else:

        dic[mod] = [i] # Hits:9.0, Total execution time: 2.332 ms, Average time per hit: 0.25911111111111107 ms 




for key, val in list(dic.items()): # Hits:11.0, Total execution time: 2.167 ms, Average time per hit: 0.197 ms 


    v_len = len(val) # Hits:10.0, Total execution time: 1.084 ms, Average time per hit: 0.10840000000000001 ms 


    ans += (v_len * (v_len -1))// 2 # Hits:10.0, Total execution time: 1.833 ms, Average time per hit: 0.18330000000000002 ms 




print(ans) # Hits:1.0, Total execution time: 7.042 ms, Average time per hit: 7.042 ms 



",p02702,True
"s = str(eval(input())) # Hits:1.0, Total execution time: 44.417 ms, Average time per hit: 44.417 ms 


s=s[::-1] # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


mod = 2019 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


li = [0]*(len(s)+1) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


cnt=1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(len(s)): # Hits:12.0, Total execution time: 1.373 ms, Average time per hit: 0.11441666666666667 ms 


    li[i+1]=li[i] + int(s[i]) * cnt # Hits:11.0, Total execution time: 3.082 ms, Average time per hit: 0.2801818181818182 ms 


    li[i+1]%=mod # Hits:11.0, Total execution time: 1.876 ms, Average time per hit: 0.17054545454545453 ms 


    cnt*=10 # Hits:11.0, Total execution time: 2.042 ms, Average time per hit: 0.18563636363636363 ms 


import collections # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


A=collections.Counter(li[1:]);ans=0 # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 


for u,v in list(A.items()): # Hits:11.0, Total execution time: 1.707 ms, Average time per hit: 0.1551818181818182 ms 


    ans+=v*(v-1)//2 # Hits:10.0, Total execution time: 1.5 ms, Average time per hit: 0.15 ms 


    if u==0: # Hits:10.0, Total execution time: 0.958 ms, Average time per hit: 0.0958 ms 


        ans+=v # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


print(ans) # Hits:1.0, Total execution time: 6.375 ms, Average time per hit: 6.375 ms 





","s = str(eval(input())) # Hits:1.0, Total execution time: 39.917 ms, Average time per hit: 39.917 ms 


s=s[::-1] # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


mod = 2019 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


li = [0]*(len(s)+1) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


cnt=1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(len(s)): # Hits:12.0, Total execution time: 1.212 ms, Average time per hit: 0.101 ms 


    li[i+1]=li[i] + int(s[i]) * cnt # Hits:11.0, Total execution time: 2.582 ms, Average time per hit: 0.23472727272727273 ms 


    li[i+1]%=mod # Hits:11.0, Total execution time: 1.748 ms, Average time per hit: 0.15890909090909092 ms 


    cnt*=10 # Hits:11.0, Total execution time: 0.959 ms, Average time per hit: 0.0871818181818182 ms 


    cnt%=mod # Hits:11.0, Total execution time: 1.415 ms, Average time per hit: 0.12863636363636363 ms 


import collections # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


A=collections.Counter(li[1:]);ans=0 # Hits:1.0, Total execution time: 3.334 ms, Average time per hit: 3.334 ms 


for u,v in list(A.items()): # Hits:11.0, Total execution time: 1.668 ms, Average time per hit: 0.15163636363636362 ms 


    ans+=v*(v-1)//2 # Hits:10.0, Total execution time: 1.417 ms, Average time per hit: 0.1417 ms 


    if u==0: # Hits:10.0, Total execution time: 0.833 ms, Average time per hit: 0.0833 ms 


        ans+=v # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


print(ans) # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 







",p02702,True
"def main(): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    import sys

    from collections import Counter

    S=sys.stdin.readline().strip()

    L=[0]*len(S)



    now=0

    for i in range(len(S)):

        now+=int(S[-i-1])*10**i

        L[-i-1]=now%2019



    dic=Counter(L)

    

    output=0

    for val in list(dic.values()):

        if val!=1:

            output+=val*(val-1)//2

    

    output+=dic[0]

    print(output)



main() # Hits:1.0, Total execution time: 60.0 ms, Average time per hit: 60.0 ms 

","def pow_with_mod(x, n, m): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    if n == 0:

        return 1



    K = 1

    while n > 1:

        if n % 2 != 0:

            K *= x

            K %= m

        x *= x

        x %= m

        n //= 2



    return (K * x) % m



def main(): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    import sys

    S=sys.stdin.readline().strip()

    N=len(S)

    L=[0]*2019

    now=0

    for i in range(N):

        now+=int(S[-i-1])*pow_with_mod(10, i, 2019)

        now%=2019

        L[now]+=1  

    print((L[0]+sum([x*(x-1)//2 for x in L])))

main() # Hits:1.0, Total execution time: 245.458 ms, Average time per hit: 245.458 ms 

",p02702,True
"#!/usr/bin/env python3

import sys





def solve(S: int):

    S =str(S)

    l = len(S)

    elds = [x*2019 for x in range(10000) if ""0"" not in str(x*2019)]

    # print(elds)

    s = S

    ans = []

    for t in range(5,9):

        for x in range(l-t+1):

            # print(s[x:x+t])           

            if int(s[x:x+t]) in elds:

                ans.append((x,x+t))



    p= [a_[0] for a_ in ans]

    q= [a_[1] for a_ in ans]

    

    print((len(ans)+len(set(p)&set(q))))

    



    return





# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)

def main():

    def iterate_tokens():

        for line in sys.stdin:

            for word in line.split():

                yield word

    tokens = iterate_tokens()

    S = int(next(tokens))  # type: int

    solve(S)



if __name__ == '__main__':

    main()
",,p02702,False
"from collections import deque # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 


#import time

#from sys import stdin



#start = time.time()#計測始

def main(): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


  s = str(eval(input()))

  ss = reversed(s)

  n=len(s)

  mlist=deque([0])

  slist=""""

  for sss in ss:

    slist = sss + slist

    m = int(slist)%2019

    mlist.append(m)



  ll=len(mlist)

  l=len(set(mlist))



  print((ll-l))

  

main() # Hits:1.0, Total execution time: 62.958 ms, Average time per hit: 62.958 ms 
","import time # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




s = input()[::-1] # 入力文字列を逆順でsに格納 # Hits:1.0, Total execution time: 35.666 ms, Average time per hit: 35.666 ms 




counts = [0] * 2019 # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


counts[0] = 1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




num, d = 0, 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for char in s: # Hits:12.0, Total execution time: 1.082 ms, Average time per hit: 0.09016666666666667 ms 


    num += int(char) * d # Hits:11.0, Total execution time: 2.085 ms, Average time per hit: 0.18954545454545454 ms 


    num %= 2019 # Hits:11.0, Total execution time: 1.208 ms, Average time per hit: 0.10981818181818181 ms 


    d *= 10 # Hits:11.0, Total execution time: 1.0 ms, Average time per hit: 0.09090909090909091 ms 


    d%= 2019 # Hits:11.0, Total execution time: 0.957 ms, Average time per hit: 0.087 ms 


    counts[num] += 1 # Hits:11.0, Total execution time: 2.206 ms, Average time per hit: 0.20054545454545453 ms 




#start = time.time()#計測始

ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for cnt in counts: # Hits:2020.0, Total execution time: 164.787 ms, Average time per hit: 0.08157772277227723 ms 


    ans += cnt * (cnt - 1) // 2 # Hits:2019.0, Total execution time: 266.324 ms, Average time per hit: 0.13190886577513622 ms 




print(ans) # 答えの出力 # Hits:1.0, Total execution time: 5.542 ms, Average time per hit: 5.542 ms 


#end = time.time()#計測終

#print(f""{end-start}sec."")#計測出力",p02702,True
"mul2019 = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(2, 100): # Hits:99.0, Total execution time: 8.546 ms, Average time per hit: 0.08632323232323232 ms 


    if str(i*2019).count(""0"")>0: # Hits:98.0, Total execution time: 21.964 ms, Average time per hit: 0.22412244897959183 ms 


        continue # Hits:32.0, Total execution time: 2.125 ms, Average time per hit: 0.06640625 ms 


    mul2019.append(str(i*2019)) # Hits:66.0, Total execution time: 13.292 ms, Average time per hit: 0.2013939393939394 ms 


n = str(eval(input())) # Hits:1.0, Total execution time: 39.667 ms, Average time per hit: 39.667 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for j in range(4, len(n)): # Hits:8.0, Total execution time: 1.25 ms, Average time per hit: 0.15625 ms 


    for i in range(len(n)-j+1): # Hits:42.0, Total execution time: 4.711 ms, Average time per hit: 0.11216666666666666 ms 


        for r in mul2019: # Hits:2345.0, Total execution time: 197.282 ms, Average time per hit: 0.08412878464818763 ms 


            if str(r)==n[i:i+j]: # Hits:2310.0, Total execution time: 411.794 ms, Average time per hit: 0.17826580086580085 ms 


                cnt += 1  # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


print(cnt) # Hits:1.0, Total execution time: 8.584 ms, Average time per hit: 8.584 ms 
","s = input()[::-1] # 入力文字列を逆順でsに格納 # Hits:1.0, Total execution time: 38.834 ms, Average time per hit: 38.834 ms 




counts = [0] * 2019 # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


counts[0] = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


#余りの数字がそれぞれ何回出たかカウント

#count[0]は「累積和的」に0%2019を考えるために1にしている



num, d = 0, 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


#numは余りの累積和、dはcharの桁数

for char in s: # Hits:12.0, Total execution time: 1.081 ms, Average time per hit: 0.09008333333333333 ms 


    num += int(char) * d # Hits:11.0, Total execution time: 1.833 ms, Average time per hit: 0.16663636363636364 ms 


    num %= 2019 # Hits:11.0, Total execution time: 1.001 ms, Average time per hit: 0.091 ms 


    d *= 10 # Hits:11.0, Total execution time: 1.043 ms, Average time per hit: 0.09481818181818182 ms 


    d%= 2019 # Hits:11.0, Total execution time: 0.958 ms, Average time per hit: 0.0870909090909091 ms 


    counts[num] += 1 # Hits:11.0, Total execution time: 1.666 ms, Average time per hit: 0.15145454545454548 ms 


''' # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


charに一桁ずつ取り出す。そのMOD2019を考え、累積和をとる

しかし、それぞれの数字には10の累乗がかかっているのでそれについては別途dを用意してMOD2019をとる

つまり、numは1桁目のMOD2019、2桁目のMOD2019に1桁目のMOD2019に加える

'''



ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for cnt in counts: # Hits:2020.0, Total execution time: 152.013 ms, Average time per hit: 0.0752539603960396 ms 


    ans += cnt * (cnt - 1) // 2 # Hits:2019.0, Total execution time: 265.402 ms, Average time per hit: 0.13145220406141656 ms 




print(ans) # 答えの出力 # Hits:1.0, Total execution time: 8.25 ms, Average time per hit: 8.25 ms 
",p02702,True
"def main():

    import sys

    import time

    from collections import defaultdict

    dic = defaultdict(int)



    input = sys.stdin.readline



    s = str(input().rstrip())

    m = 0



    for i in range(1,len(s)+1):

        m_ad = (int(s[-i]) * (10 ** (i - 1))) % 2019

        m = (m_ad + m) % 2019

        dic[m] += 1



    ans1 = 0



    for x in list(dic.values()):

        if x > 1:

            ans1 += x * (x - 1) // 2

    ans2 = dic[0]

    time.sleep(0.5)



    print((ans1 + ans2))



if __name__ == ""__main__"":

    main()",,p02702,False
"from sys import stdin, setrecursionlimit

import collections





def initialize_cmb(m, mod=10 ** 9 + 7):

    fac = [0] * m

    finv = [0] * m

    inv = [0] * m

    fac[0] = 1

    finv[0] = 1

    if m > 1:

        fac[1] = 1

        finv[1] = 1

        inv[1] = 1

        for i in range(2, m):

            fac[i] = fac[i-1] * i % mod

            inv[i] = mod - inv[mod % i] * (mod // i) % mod

            finv[i] = finv[i - 1] * inv[i] % mod

    return fac, finv





def cmb(n, k, fac, finv, mod=10 ** 9 + 7):

    if n < k:

        return 0

    if n < 0 or k < 0:

        return 0

    return fac[n] * (finv[k] * finv[n - k] % mod) % mod





def main():

    input = stdin.readline

    s = list(input()[:-1])

    s = list(map(int, s))

    N = len(s)

    mod = [0] * N

    mod[-1] = s[-1] % 2019

    for i in reversed(list(range(N - 1))):

        mod[i] = (mod[i + 1] + s[i] * 10 ** (N - i - 1)) % 2019



    fac, finv = initialize_cmb(N)



    counter = collections.Counter(mod)



    ans = 0



    for k, v in list(counter.items()):

        if k == 0:

            ans += v

        elif v > 1:

            ans += cmb(v, 2, fac, finv)



    print(ans)





if __name__ == ""__main__"":

    setrecursionlimit(10000)

    main()
",,p02702,False
"import math # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


from functools import reduce # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


from collections import deque,defaultdict # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 


import sys # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


sys.setrecursionlimit(10**7) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




# スペース区切りの入力を読み込んで数値リストにして返します。

def get_nums_l(): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    return [ int(s) for s in input().split("" "")]



# 改行区切りの入力をn行読み込んで数値リストにして返します。

def get_nums_n(n): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    return [ int(input()) for _ in range(n)]



# 改行またはスペース区切りの入力をすべて読み込んでイテレータを返します。

def get_all_int(): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    return map(int, open(0).read().split())



def log(*args): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print(""DEBUG:"", *args, file=sys.stderr)



def hoge(n): # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    count = 0

    i = 0

    while count < n:

        if ""0"" not in str(2019*i):

            count += 1

            print(2019*i)

        i += 1





s = input() # Hits:1.0, Total execution time: 35.625 ms, Average time per hit: 35.625 ms 


X = list(map(int, list(s))) # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 


n = len(s) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




ruiseki = [0] * (n+1) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


for i in (range(n-1, -1, -1)): # Hits:12.0, Total execution time: 1.542 ms, Average time per hit: 0.1285 ms 


    ruiseki[i] = (X[i] * 10**(n-i-1) + ruiseki[i+1]) % 2019 # Hits:11.0, Total execution time: 4.749 ms, Average time per hit: 0.43172727272727274 ms 




# log(ruiseki)



ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


count = defaultdict(int) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




for x in ruiseki: # Hits:13.0, Total execution time: 1.292 ms, Average time per hit: 0.09938461538461539 ms 


    # log(count[x])

    ans += count[x] # Hits:12.0, Total execution time: 2.834 ms, Average time per hit: 0.23616666666666666 ms 


    count[x] += 1 # Hits:12.0, Total execution time: 2.167 ms, Average time per hit: 0.18058333333333335 ms 


# log(count)

print(ans) # Hits:1.0, Total execution time: 6.166 ms, Average time per hit: 6.166 ms 

","import math # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


from functools import reduce # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


from collections import deque,defaultdict # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 


import sys # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


sys.setrecursionlimit(10**7) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




def log(*args): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print(""DEBUG:"", *args, file=sys.stderr)



s = input() # Hits:1.0, Total execution time: 32.209 ms, Average time per hit: 32.209 ms 


X = list(map(int, list(s))) # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 


n = len(s) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




ruiseki = [0] * (n+1) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in (range(n-1, -1, -1)): # Hits:12.0, Total execution time: 1.29 ms, Average time per hit: 0.1075 ms 


    ruiseki[i] = (X[i] * pow(10, (n-i-1), 2019) + ruiseki[i+1]) % 2019 # Hits:11.0, Total execution time: 4.585 ms, Average time per hit: 0.4168181818181818 ms 




# log(ruiseki)



ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


count = defaultdict(int) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




for x in ruiseki: # Hits:13.0, Total execution time: 1.001 ms, Average time per hit: 0.077 ms 


    # log(count[x])

    ans += count[x] # Hits:12.0, Total execution time: 2.251 ms, Average time per hit: 0.18758333333333335 ms 


    count[x] += 1 # Hits:12.0, Total execution time: 2.001 ms, Average time per hit: 0.16675 ms 


# log(count)

print(ans) # Hits:1.0, Total execution time: 4.959 ms, Average time per hit: 4.959 ms 

",p02702,True
"from collections import defaultdict

# from sys import stdin

# input = stdin.readline





def main():

  # S = input()[-1:0:-1]

  S = input()[::-1]

  MOD = 2019



  # dp = [0]*(len(S)+1)

  # dp[0] = 0

  dic = [0]*2019

  dic[0] = 1



  ten = 1

  pre = 0

  for i, s in enumerate(S):

    # dp[i] = (dp[i-1] + ten*int(s)) % MOD

    pre = (pre + ten*int(s)) % MOD

    dic[pre] += 1

    ten *= 10



  sum_ = 0

  # for sup in dp:

  #   dic[sup] += 1



  for v in dic:

    sum_ += v*(v-1)//2



  print(sum_)





if(__name__ == '__main__'):

  main()
",,p02702,False
"import sys

from math import sqrt, gcd, ceil, log

from bisect import bisect

from collections import defaultdict

inp = sys.stdin.readline

read = lambda: list(map(int, inp().strip().split()))



# sys.setrecursionlimit(10**6)







def solve():

	s = inp().strip();# dic = defaultdict(int)

	sett = set(); sett.add(0)

	ans = 0; cum = 0

	for i in range(len(s)-1, -1, -1):



		cum += (int(s[i])*(10**(len(s)-i-1)% 2019)) % 2019

		cum %= 2019

		# print((int(s[i])*(10**(len(s)-i-1)% 2019)) % 2019, i, cum)

		if cum in sett:

			ans += 1

		sett.add(cum)

	# print(sett)

	print(ans)













if __name__ == ""__main__"":

	solve()",,p02702,False
"import sys # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




S = sys.stdin.readline().strip() # Hits:1.0, Total execution time: 35.917 ms, Average time per hit: 35.917 ms 




N = 2019 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


L = len(S) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


dp = [[0 for _ in range(N)] for _ in range(L) ] # Hits:1.0, Total execution time: 1132.417 ms, Average time per hit: 1132.417 ms 


for i in range(L): # Hits:12.0, Total execution time: 1.165 ms, Average time per hit: 0.09708333333333333 ms 


    t = int(S[i]) # Hits:11.0, Total execution time: 2.626 ms, Average time per hit: 0.23872727272727273 ms 


    dp[i][t] = 1 # Hits:11.0, Total execution time: 1.417 ms, Average time per hit: 0.1288181818181818 ms 




    for j in range(N): # Hits:22220.0, Total execution time: 1910.349 ms, Average time per hit: 0.08597430243024302 ms 


        dp[i][(j*10 + t)%N] += dp[i-1][j] # Hits:22209.0, Total execution time: 5185.13 ms, Average time per hit: 0.23346976450988338 ms 




res = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(L): # Hits:12.0, Total execution time: 1.21 ms, Average time per hit: 0.10083333333333333 ms 


    res += dp[i][0] # Hits:11.0, Total execution time: 1.541 ms, Average time per hit: 0.1400909090909091 ms 


print(res) # Hits:1.0, Total execution time: 9.208 ms, Average time per hit: 9.208 ms 
","import sys # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




S = sys.stdin.readline().strip() # Hits:1.0, Total execution time: 32.833 ms, Average time per hit: 32.833 ms 




N = 2019 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


L = len(S) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


curr = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


seen = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


INV = 210 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


seen[curr] = 1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(L): # Hits:12.0, Total execution time: 1.252 ms, Average time per hit: 0.10433333333333333 ms 


    curr = (curr * 10 + int(S[i])) % N # Hits:11.0, Total execution time: 2.458 ms, Average time per hit: 0.22345454545454546 ms 


    t = (curr * pow(10, L-i, N)) %N # Hits:11.0, Total execution time: 2.625 ms, Average time per hit: 0.23863636363636362 ms 


    if t not in seen: seen[t] = 0 # Hits:11.0, Total execution time: 1.541 ms, Average time per hit: 0.1400909090909091 ms 


    seen[t] += 1 # Hits:11.0, Total execution time: 2.04 ms, Average time per hit: 0.18545454545454546 ms 




res = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:2020.0, Total execution time: 177.691 ms, Average time per hit: 0.0879658415841584 ms 


    if i not in seen: continue # Hits:2019.0, Total execution time: 193.537 ms, Average time per hit: 0.09585785042100049 ms 


    t = seen[i] # Hits:10.0, Total execution time: 0.957 ms, Average time per hit: 0.09570000000000001 ms 


    res += t * (t-1)//2 # Hits:10.0, Total execution time: 1.665 ms, Average time per hit: 0.1665 ms 


print(res) # Hits:1.0, Total execution time: 4.833 ms, Average time per hit: 4.833 ms 
",p02702,True
"import re # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


import sys # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 




s = sys.stdin.buffer.readline().rstrip().decode() # Hits:1.0, Total execution time: 35.5 ms, Average time per hit: 35.5 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(1, 200001): # Hits:200001.0, Total execution time: 17247.343 ms, Average time per hit: 0.0862362838185809 ms 


    tmp = str(2019*i) # Hits:200000.0, Total execution time: 30840.863 ms, Average time per hit: 0.154204315 ms 


    if tmp in s: # Hits:200000.0, Total execution time: 20075.884 ms, Average time per hit: 0.10037942 ms 


        index = -1 # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


        while True: # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


            index = s.find(tmp, index + 1) # Hits:4.0, Total execution time: 1.333 ms, Average time per hit: 0.33325 ms 


            if index == -1: # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


                break # Hits:2.0, Total execution time: 0.083 ms, Average time per hit: 0.0415 ms 


            ans += 1 # Hits:2.0, Total execution time: 0.291 ms, Average time per hit: 0.1455 ms 


    if int(tmp) > int(s): # Hits:200000.0, Total execution time: 42560.746 ms, Average time per hit: 0.21280373 ms 


        break # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


print(ans) # Hits:1.0, Total execution time: 25.084 ms, Average time per hit: 25.084 ms 

","import sys # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




s = sys.stdin.buffer.readline().rstrip().decode() # Hits:1.0, Total execution time: 40.5 ms, Average time per hit: 40.5 ms 


MOD = 2019 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


ans = [1] + [0 for i in range(MOD)] # Hits:1.0, Total execution time: 138.5 ms, Average time per hit: 138.5 ms 


t = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


r = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in reversed(s): # Hits:12.0, Total execution time: 1.583 ms, Average time per hit: 0.13191666666666665 ms 


    r = (r + int(i)*t) % MOD # Hits:11.0, Total execution time: 2.751 ms, Average time per hit: 0.2500909090909091 ms 


    t = t*10%2019 # Hits:11.0, Total execution time: 1.375 ms, Average time per hit: 0.125 ms 


    ans[r] += 1 # Hits:11.0, Total execution time: 2.583 ms, Average time per hit: 0.23481818181818181 ms 


print((sum([m*(m-1)//2 for m in ans]))) # Hits:1.0, Total execution time: 256.584 ms, Average time per hit: 256.584 ms 

",p02702,True
"from collections import Counter

import sys

read = sys.stdin.read

readline = sys.stdin.readline

readlines = sys.stdin.readlines



def main():

    S = readline().strip()[::-1]

    N = len(S)



    a = [0]

    s = 0

    for i in range(N):

        s += int(S[i]) * pow(10, i, 2019)

        a.append(s % 2019)

    

    t = Counter(a)



    ans = 0

    for _, v in list(t.items()):

        ans += v * (v-1) // 2

    

    print(ans)

    



if __name__ == ""__main__"":

    main()
",,p02702,False
"import sys

input = sys.stdin.readline

mod = 2019

def main():

    s = tuple([int(x) for x in input().rstrip()])

    n = len(s)

    ans = 0

    d = {}

    T = 0

    T1 = 0

    for i in range(n):

        T1 = s[n-1-i]*10**i+T

        T = T1

        t = T%mod

        if t in d:

            d[t] += 1

        else:

            d[t] = 1

    for k in d:

        if k != 0:

            ans += d[k]*(d[k]-1)//2

        else:

            ans += d[k]

    print(ans)

if __name__ == ""__main__"":

    main()",,p02702,False
"# -*- coding: utf-8 -*-

import sys

sys.setrecursionlimit(10**9)

INF=10**18

MOD=2019

input=lambda: sys.stdin.readline().rstrip()

YesNo=lambda b: bool([print('Yes')] if b else print('No'))

YESNO=lambda b: bool([print('YES')] if b else print('NO'))

int1=lambda x:int(x)-1



def main():

    A=list(map(int,list(input())))

    N=len(A)

    d=[0]*2019

    for i in range(2019):

        d[i]=(i*10)%MOD

    dp=[[0]*2019 for _ in range(N+1)]

    ans=0

    for i,x in enumerate(A):

        for j in range(2019):

            dp[i+1][(d[j]+x)%MOD]+=dp[i][j]

        dp[i+1][x]+=1

        ans+=dp[i+1][0]

    print(ans)



    



if __name__ == '__main__':

    main()
",,p02702,False
"# -*- coding: utf-8 -*-

import sys

from collections import defaultdict

sys.setrecursionlimit(10**9)

INF=10**18

MOD=2019

input=lambda: sys.stdin.readline().rstrip()

YesNo=lambda b: bool([print('Yes')] if b else print('No'))

YESNO=lambda b: bool([print('YES')] if b else print('NO'))

int1=lambda x:int(x)-1



def main():

    A=list(map(int,list(input())))

    N=len(A)

    d=[0]*2019

    for i in range(2019):

        d[i]=(i*10)%MOD

    dp=[defaultdict(int) for _ in range(N+1)]

    ans=0

    for i,x in enumerate(A):

        for j in dp[i]:

            dp[i+1][(d[j]+x)%MOD]+=dp[i][j]

        dp[i+1][x]+=1

        ans+=dp[i+1][0]

    print(ans)



    



if __name__ == '__main__':

    main()
",,p02702,False
"from collections import Counter # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


s = str(eval(input())) # Hits:1.0, Total execution time: 47.166 ms, Average time per hit: 47.166 ms 




si = [0] * (len(s)+1) #mod2019の累積和用に # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


tmp = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,len(s)+1): #累積和の作成 # Hits:12.0, Total execution time: 1.875 ms, Average time per hit: 0.15625 ms 


    tmp += int(s[len(s)-i])%2019 * pow(10,i-1,2019) # Hits:11.0, Total execution time: 5.333 ms, Average time per hit: 0.4848181818181818 ms 


    si[i] = tmp % 2019 # Hits:11.0, Total execution time: 2.459 ms, Average time per hit: 0.22354545454545452 ms 




c = Counter(si) # Hits:1.0, Total execution time: 4.333 ms, Average time per hit: 4.333 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for b in list(c.values()):#aがb回出てきたよ # Hits:11.0, Total execution time: 1.251 ms, Average time per hit: 0.11372727272727273 ms 


    ans += b*(b-1)//2 # Hits:10.0, Total execution time: 1.499 ms, Average time per hit: 0.1499 ms 




print(ans) # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 

","s = str(eval(input())) # Hits:1.0, Total execution time: 43.625 ms, Average time per hit: 43.625 ms 


cnt = [0]*2019 # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


cnt[0] += 1 # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




si = [0] * (len(s)+1) #mod2019の累積和用に # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


tmp = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,len(s)+1): #累積和の作成 # Hits:12.0, Total execution time: 1.418 ms, Average time per hit: 0.11816666666666667 ms 


    tmp += int(s[-i])%2019 * pow(10,i-1,2019)#ここでpowを使わないとTLEする # Hits:11.0, Total execution time: 4.083 ms, Average time per hit: 0.37118181818181817 ms 


    si[i] = tmp % 2019 # Hits:11.0, Total execution time: 1.209 ms, Average time per hit: 0.1099090909090909 ms 


    cnt[si[i]] += 1 # Hits:11.0, Total execution time: 1.957 ms, Average time per hit: 0.1779090909090909 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for b in cnt:#aがb回出てきたよ # Hits:2020.0, Total execution time: 163.881 ms, Average time per hit: 0.08112920792079209 ms 


    ans += b*(b-1)//2 # Hits:2019.0, Total execution time: 287.876 ms, Average time per hit: 0.1425834571570084 ms 




print(ans) # Hits:1.0, Total execution time: 5.291 ms, Average time per hit: 5.291 ms 

",p02702,True
"import sys,bisect,math # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


sys.setrecursionlimit(15000) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




s = sys.stdin.readline().rstrip() # Hits:1.0, Total execution time: 40.584 ms, Average time per hit: 40.584 ms 


cum = [0]*(len(s)+1)#cumulative sum # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 


import collections # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


d = collections.defaultdict(int) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


d[0] = 1 # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


ret = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


dig = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(len(s))[::-1]: # Hits:12.0, Total execution time: 2.165 ms, Average time per hit: 0.18041666666666667 ms 


    cum[i]=(int(s[i])*dig+cum[i+1])%2019 # Hits:11.0, Total execution time: 3.791 ms, Average time per hit: 0.34463636363636363 ms 


    dig *= 10 # Hits:11.0, Total execution time: 1.376 ms, Average time per hit: 0.12509090909090909 ms 


    #cum[i+1]=int(s[i:])%2019

    if cum[i] in d: # Hits:11.0, Total execution time: 1.668 ms, Average time per hit: 0.15163636363636362 ms 


        ret += d[cum[i]] # Hits:2.0, Total execution time: 0.417 ms, Average time per hit: 0.2085 ms 


    d[cum[i]] += 1 # Hits:11.0, Total execution time: 4.208 ms, Average time per hit: 0.3825454545454546 ms 


#print(d,cum,ret)

print(ret) # Hits:1.0, Total execution time: 6.584 ms, Average time per hit: 6.584 ms 
","# n = int(sys.stdin.readline())

import sys,bisect,math # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


sys.setrecursionlimit(15000) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




s = sys.stdin.readline().rstrip() # Hits:1.0, Total execution time: 29.5 ms, Average time per hit: 29.5 ms 


cum = [0]*(len(s)+1)#cumulative sum # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


import collections # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


d = collections.defaultdict(int) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


d[0] = 1 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


ret = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


dig = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(len(s))[::-1]: # Hits:12.0, Total execution time: 1.958 ms, Average time per hit: 0.16316666666666665 ms 


    cum[i]=(int(s[i])*dig+cum[i+1])%2019 # Hits:11.0, Total execution time: 3.124 ms, Average time per hit: 0.284 ms 


    dig = (dig*10)%2019 # Hits:11.0, Total execution time: 1.21 ms, Average time per hit: 0.11 ms 


    #cum[i+1]=int(s[i:])%2019

    if cum[i] in d: # Hits:11.0, Total execution time: 1.583 ms, Average time per hit: 0.1439090909090909 ms 


        ret += d[cum[i]] # Hits:2.0, Total execution time: 0.334 ms, Average time per hit: 0.167 ms 


    d[cum[i]] += 1 # Hits:11.0, Total execution time: 3.708 ms, Average time per hit: 0.33709090909090905 ms 


#print(d,cum,ret)

print(ret) # Hits:1.0, Total execution time: 5.083 ms, Average time per hit: 5.083 ms 
",p02702,True
"import sys # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 




dp=[[0]*2019 for _ in range(2)] # Hits:1.0, Total execution time: 3.417 ms, Average time per hit: 3.417 ms 


dig=[int(c) for c in sys.stdin.readline().strip()] # Hits:1.0, Total execution time: 49.917 ms, Average time per hit: 49.917 ms 


tab=[[0]*2019 for _ in range(10)] # Hits:1.0, Total execution time: 5.709 ms, Average time per hit: 5.709 ms 




for x in range(10): # Hits:11.0, Total execution time: 1.206 ms, Average time per hit: 0.10963636363636364 ms 


    for i in range(2019): # Hits:20200.0, Total execution time: 1766.338 ms, Average time per hit: 0.08744247524752476 ms 


        tab[x][i]=(i*10+x)%2019 # Hits:20190.0, Total execution time: 3196.435 ms, Average time per hit: 0.1583177315502724 ms 




p=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


cnt=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for x in dig: # Hits:12.0, Total execution time: 1.416 ms, Average time per hit: 0.118 ms 


    np=(p+1)&1 # Hits:11.0, Total execution time: 1.293 ms, Average time per hit: 0.11754545454545455 ms 


    for i in range(2019): # Hits:22220.0, Total execution time: 1939.578 ms, Average time per hit: 0.08728973897389739 ms 


        dp[np][tab[x][i]]=dp[p][i] # Hits:22209.0, Total execution time: 3665.852 ms, Average time per hit: 0.1650615516232158 ms 


    dp[np][x]+=1 # Hits:11.0, Total execution time: 2.21 ms, Average time per hit: 0.2009090909090909 ms 


    p=np # Hits:11.0, Total execution time: 0.958 ms, Average time per hit: 0.0870909090909091 ms 


    cnt+=dp[p][0] # Hits:11.0, Total execution time: 1.792 ms, Average time per hit: 0.16290909090909092 ms 




print(cnt) # Hits:1.0, Total execution time: 12.375 ms, Average time per hit: 12.375 ms 
","from collections import Counter # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


S=input()[::-1] # Hits:1.0, Total execution time: 41.041 ms, Average time per hit: 41.041 ms 




X=[0] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


md=2019 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i,s in enumerate(S): # Hits:12.0, Total execution time: 2.207 ms, Average time per hit: 0.18391666666666664 ms 


    X.append((X[-1]+int(s)*pow(10,i,md))%md) # Hits:11.0, Total execution time: 5.707 ms, Average time per hit: 0.5188181818181818 ms 




C=Counter(X) # Hits:1.0, Total execution time: 4.583 ms, Average time per hit: 4.583 ms 


ans=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for v in list(C.values()): # Hits:11.0, Total execution time: 1.25 ms, Average time per hit: 0.11363636363636365 ms 


    ans+=v*(v-1)//2 # Hits:10.0, Total execution time: 1.584 ms, Average time per hit: 0.1584 ms 




print(ans) # Hits:1.0, Total execution time: 6.167 ms, Average time per hit: 6.167 ms 
",p02702,True
"import collections # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


s = list(map(int,input())) # Hits:1.0, Total execution time: 46.375 ms, Average time per hit: 46.375 ms 




h = {} # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for jj in range(2019+1): # Hits:2021.0, Total execution time: 172.647 ms, Average time per hit: 0.08542652152399802 ms 


    for d in range(0,10): # Hits:22220.0, Total execution time: 2044.229 ms, Average time per hit: 0.09199950495049505 ms 


        h[jj,d] = (10 * jj + d) % 2019 # Hits:20200.0, Total execution time: 3878.597 ms, Average time per hit: 0.1920097524752475 ms 




dp = collections.Counter() # Hits:1.0, Total execution time: 2.625 ms, Average time per hit: 2.625 ms 


count = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for j in range(len(s)): # Hits:12.0, Total execution time: 1.415 ms, Average time per hit: 0.11791666666666667 ms 


    ndp = collections.Counter() # Hits:11.0, Total execution time: 6.67 ms, Average time per hit: 0.6063636363636363 ms 


    ndp[s[j]] += 1 # Hits:11.0, Total execution time: 4.581 ms, Average time per hit: 0.41645454545454547 ms 


    for k in dp: # Hits:63.0, Total execution time: 6.21 ms, Average time per hit: 0.09857142857142857 ms 


        ndp[h[(k,s[j])]] +=1 # Hits:52.0, Total execution time: 21.71 ms, Average time per hit: 0.4175 ms 


        #ndp[(10*k + s[j]) % 2019] += 1

    count += ndp[0] # Hits:11.0, Total execution time: 2.668 ms, Average time per hit: 0.24254545454545454 ms 


    dp = ndp # Hits:11.0, Total execution time: 1.417 ms, Average time per hit: 0.1288181818181818 ms 




print(count) # Hits:1.0, Total execution time: 8.291 ms, Average time per hit: 8.291 ms 





","import collections # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


s = list(map(int,input())) # Hits:1.0, Total execution time: 38.292 ms, Average time per hit: 38.292 ms 




dp = [0] * 2019 # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


count = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for j in range(len(s)): # Hits:12.0, Total execution time: 1.416 ms, Average time per hit: 0.118 ms 


    ndp = [0] * 2019 # Hits:11.0, Total execution time: 38.958 ms, Average time per hit: 3.5416363636363637 ms 


    ndp[s[j]] += 1 # Hits:11.0, Total execution time: 1.833 ms, Average time per hit: 0.16663636363636364 ms 


    for k in range(len(dp)): # Hits:22220.0, Total execution time: 1958.599 ms, Average time per hit: 0.08814576957695769 ms 


        ndp[(10*k + s[j]) % 2019] += dp[k] # Hits:22209.0, Total execution time: 4765.604 ms, Average time per hit: 0.21457985501373317 ms 


    count += ndp[0] # Hits:11.0, Total execution time: 1.333 ms, Average time per hit: 0.12118181818181818 ms 


    dp = ndp[::] # Hits:11.0, Total execution time: 89.207 ms, Average time per hit: 8.109727272727273 ms 




print(count) # Hits:1.0, Total execution time: 9.166 ms, Average time per hit: 9.166 ms 





",p02702,True
"import collections # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


s = list(map(int,input())) # Hits:1.0, Total execution time: 40.334 ms, Average time per hit: 40.334 ms 




dp = [0] * 2019 # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


count = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for j in range(len(s)): # Hits:12.0, Total execution time: 1.746 ms, Average time per hit: 0.1455 ms 


    ndp = [0] * 2019 # Hits:11.0, Total execution time: 40.586 ms, Average time per hit: 3.6896363636363634 ms 


    ndp[s[j]] += 1 # Hits:11.0, Total execution time: 1.917 ms, Average time per hit: 0.17427272727272727 ms 


    for k in range(len(dp)): # Hits:22220.0, Total execution time: 1871.249 ms, Average time per hit: 0.08421462646264627 ms 


        ndp[(10*k + s[j]) % 2019] += dp[k] # Hits:22209.0, Total execution time: 4647.699 ms, Average time per hit: 0.20927097122788058 ms 


    count += ndp[0] # Hits:11.0, Total execution time: 1.46 ms, Average time per hit: 0.13272727272727272 ms 


    dp = ndp[::] # Hits:11.0, Total execution time: 84.418 ms, Average time per hit: 7.674363636363636 ms 




print(count) # Hits:1.0, Total execution time: 7.542 ms, Average time per hit: 7.542 ms 





","s = list(map(int,input())) # Hits:1.0, Total execution time: 37.625 ms, Average time per hit: 37.625 ms 


dp = [0] * 2019 # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


count = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for j in range(len(s)): # Hits:12.0, Total execution time: 1.544 ms, Average time per hit: 0.12866666666666665 ms 


    ndp = [0] * 2019 # Hits:11.0, Total execution time: 3.417 ms, Average time per hit: 0.3106363636363636 ms 


    ndp[s[j]] += 1 # Hits:11.0, Total execution time: 1.623 ms, Average time per hit: 0.14754545454545454 ms 


    for k in range(len(dp)):ndp[(10*k + s[j]) % 2019] += dp[k] # Hits:22220.0, Total execution time: 4971.991 ms, Average time per hit: 0.2237619711971197 ms 


    count += ndp[0] # Hits:11.0, Total execution time: 1.375 ms, Average time per hit: 0.125 ms 


    dp = ndp # Hits:11.0, Total execution time: 36.623 ms, Average time per hit: 3.3293636363636363 ms 




print(count) # Hits:1.0, Total execution time: 6.417 ms, Average time per hit: 6.417 ms 





",p02702,True
"from collections import defaultdict # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 


from operator import mul # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


from functools import reduce # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 






memo = {} # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 






def cmb(n, r): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if (n, r) in memo:

        return memo[(n, r)]

    r = min(n - r, r)

    if r == 0:

        return 1

    over = reduce(mul, list(range(n, n - r, -1)))

    under = reduce(mul, list(range(1, r + 1)))

    memo[(n, r)] = over // under

    return over // under





s = input()[::-1] # Hits:1.0, Total execution time: 36.25 ms, Average time per hit: 36.25 ms 


acc = [int(s[0])] # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


cntr = defaultdict(int) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for i, c in enumerate(s[1:], 1): # Hits:11.0, Total execution time: 1.749 ms, Average time per hit: 0.159 ms 


    if c == '0': # Hits:10.0, Total execution time: 0.917 ms, Average time per hit: 0.0917 ms 


        continue

    next_mod = (acc[-1] + 10 ** i * int(c)) % 2019 # Hits:10.0, Total execution time: 2.832 ms, Average time per hit: 0.2832 ms 


    cntr[next_mod] += 1 # Hits:10.0, Total execution time: 2.374 ms, Average time per hit: 0.2374 ms 


    acc.append(next_mod) # Hits:10.0, Total execution time: 1.75 ms, Average time per hit: 0.175 ms 




ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for k, v in list(cntr.items()): # Hits:10.0, Total execution time: 1.751 ms, Average time per hit: 0.1751 ms 


    if k == 0: # Hits:9.0, Total execution time: 0.835 ms, Average time per hit: 0.09277777777777776 ms 


        ans += v # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    if v > 1: # Hits:9.0, Total execution time: 0.874 ms, Average time per hit: 0.09711111111111112 ms 


        ans += cmb(v, 2) # Hits:1.0, Total execution time: 2.084 ms, Average time per hit: 2.084 ms 


print(ans) # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 

","from collections import defaultdict # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 






s = input()[::-1] # Hits:1.0, Total execution time: 34.959 ms, Average time per hit: 34.959 ms 


cntr = defaultdict(int) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


cntr[0] += 1 # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


tens = 1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


n = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for c in s: # Hits:12.0, Total execution time: 1.125 ms, Average time per hit: 0.09375 ms 


    n += tens * int(c) % 2019 # Hits:11.0, Total execution time: 2.42 ms, Average time per hit: 0.22 ms 


    n %= 2019 # Hits:11.0, Total execution time: 1.124 ms, Average time per hit: 0.1021818181818182 ms 


    cntr[n] += 1 # Hits:11.0, Total execution time: 2.499 ms, Average time per hit: 0.22718181818181818 ms 


    tens = tens * 10 % 2019 # Hits:11.0, Total execution time: 2.209 ms, Average time per hit: 0.2008181818181818 ms 




ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for v in list(cntr.values()): # Hits:11.0, Total execution time: 1.666 ms, Average time per hit: 0.15145454545454548 ms 


    if v > 1: # Hits:10.0, Total execution time: 1.042 ms, Average time per hit: 0.1042 ms 


        ans += v * (v - 1) // 2 # Hits:2.0, Total execution time: 0.417 ms, Average time per hit: 0.2085 ms 


print(ans) # Hits:1.0, Total execution time: 6.083 ms, Average time per hit: 6.083 ms 

",p02702,True
"from collections import defaultdict # Hits:1.0, Total execution time: 1.834 ms, Average time per hit: 1.834 ms 






s = input()[::-1] # Hits:1.0, Total execution time: 28.5 ms, Average time per hit: 28.5 ms 


cntr = defaultdict(int) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


cntr[0] += 1 # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


tens = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


n = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for c in s: # Hits:12.0, Total execution time: 1.045 ms, Average time per hit: 0.08708333333333333 ms 


    n += tens * int(c) % 2019 # Hits:11.0, Total execution time: 2.294 ms, Average time per hit: 0.20854545454545453 ms 


    n %= 2019 # Hits:11.0, Total execution time: 1.208 ms, Average time per hit: 0.10981818181818181 ms 


    cntr[n] += 1 # Hits:11.0, Total execution time: 2.416 ms, Average time per hit: 0.21963636363636363 ms 


    tens = tens * 10 % 2019 # Hits:11.0, Total execution time: 2.25 ms, Average time per hit: 0.20454545454545453 ms 




ans = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for v in list(cntr.values()): # Hits:11.0, Total execution time: 1.46 ms, Average time per hit: 0.13272727272727272 ms 


    if v > 1: # Hits:10.0, Total execution time: 1.0 ms, Average time per hit: 0.1 ms 


        ans += v * (v - 1) // 2 # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


print(ans) # Hits:1.0, Total execution time: 6.0 ms, Average time per hit: 6.0 ms 

","s = input()[::-1] # Hits:1.0, Total execution time: 37.583 ms, Average time per hit: 37.583 ms 


cnt = [0] * 2020 # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


cnt[0] = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


tens = 1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


rem = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for c in s: # Hits:12.0, Total execution time: 0.96 ms, Average time per hit: 0.08 ms 


    rem = (rem + (ord(c) - ord('0')) * tens) % 2019 # Hits:11.0, Total execution time: 2.418 ms, Average time per hit: 0.2198181818181818 ms 


    ans += cnt[rem] # Hits:11.0, Total execution time: 1.25 ms, Average time per hit: 0.11363636363636365 ms 


    cnt[rem] += 1 # Hits:11.0, Total execution time: 1.374 ms, Average time per hit: 0.1249090909090909 ms 


    tens = tens * 10 % 2019 # Hits:11.0, Total execution time: 1.667 ms, Average time per hit: 0.15154545454545454 ms 


print(ans) # Hits:1.0, Total execution time: 4.958 ms, Average time per hit: 4.958 ms 

",p02702,True
"#!/usr/bin/env python3

import sys

sys.setrecursionlimit(10**8)

INF = float(""inf"")





def solve(S: str):

    N = len(S)



    U = [0]*(N+1)

    a = 0

    # for i in range(N-1, -1, -1):

    for i in range(N):

        a += (10**i)*int(S[N-1-i])

        a %= 2019

        U[i] = a

    # U = [int(S[i:]) % 2019 for i in range(N)] + [0]

    table = [0]*2019



    tot = 0

    # for i in range(N-1, -1, -1):

    for i in range(N):

        tot += table[U[N-1-i]]

        table[U[N-1-i]] += 1

    tot += table[0]

    print(tot)

    return





def main():



    def iterate_tokens():

        for line in sys.stdin:

            for word in line.split():

                yield word

    tokens = iterate_tokens()

    S = str(next(tokens))  # type: str

    solve(S)





if __name__ == '__main__':

    main()
",,p02702,False
"N = int(eval(input())) # Hits:1.0, Total execution time: 40.041 ms, Average time per hit: 40.041 ms 


dic = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for _ in range(N): # Hits:7.0, Total execution time: 1.041 ms, Average time per hit: 0.14871428571428572 ms 


  A = eval(input()) # Hits:6.0, Total execution time: 16.251 ms, Average time per hit: 2.7085 ms 


  if A in dic: # Hits:6.0, Total execution time: 0.749 ms, Average time per hit: 0.12483333333333332 ms 


    dic.remove(A) # Hits:2.0, Total execution time: 0.376 ms, Average time per hit: 0.188 ms 


  else:

    dic.append(A) # Hits:4.0, Total execution time: 0.751 ms, Average time per hit: 0.18775 ms 


print((len(dic))) # Hits:1.0, Total execution time: 5.916 ms, Average time per hit: 5.916 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 37.833 ms, Average time per hit: 37.833 ms 


dic = {} # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for _ in range(N): # Hits:7.0, Total execution time: 0.833 ms, Average time per hit: 0.119 ms 


  A = eval(input()) # Hits:6.0, Total execution time: 16.377 ms, Average time per hit: 2.7295 ms 


  if A in dic: # Hits:6.0, Total execution time: 0.54 ms, Average time per hit: 0.09 ms 


    del dic[A] # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


  else:

    dic[A]=0 # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


print((len(dic))) # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 

",p03607,True
"import collections # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 41.334 ms, Average time per hit: 41.334 ms 


a = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 18.125 ms, Average time per hit: 18.125 ms 


cnt = collections.Counter(a) # Hits:1.0, Total execution time: 4.334 ms, Average time per hit: 4.334 ms 


total = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for c, v in list(cnt.items()): # Hits:5.0, Total execution time: 1.292 ms, Average time per hit: 0.25839999999999996 ms 


    if v%2 == 1: # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


        total += 1 # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


print(total) # Hits:1.0, Total execution time: 17.458 ms, Average time per hit: 17.458 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 40.0 ms, Average time per hit: 40.0 ms 


s = set() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(n): # Hits:7.0, Total execution time: 0.958 ms, Average time per hit: 0.13685714285714287 ms 


    a = int(eval(input())) # Hits:6.0, Total execution time: 16.709 ms, Average time per hit: 2.7848333333333333 ms 


    if a in s: # Hits:6.0, Total execution time: 0.665 ms, Average time per hit: 0.11083333333333333 ms 


        s.remove(a) # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


    else:

        s.add(a) # Hits:4.0, Total execution time: 0.791 ms, Average time per hit: 0.19775 ms 


print((len(s))) # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 

",p03607,True
"from collections import Counter # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 






N = int(eval(input())) # Hits:1.0, Total execution time: 39.667 ms, Average time per hit: 39.667 ms 


lst_number = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 17.0 ms, Average time per hit: 17.0 ms 


set_number = set(lst_number) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


cnt_number = Counter(lst_number) # Hits:1.0, Total execution time: 3.209 ms, Average time per hit: 3.209 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 






for key in set_number: # Hits:5.0, Total execution time: 0.5 ms, Average time per hit: 0.1 ms 


    if cnt_number[key] % 2 == 1: # Hits:4.0, Total execution time: 0.832 ms, Average time per hit: 0.208 ms 


        ans += 1 # Hits:2.0, Total execution time: 0.291 ms, Average time per hit: 0.1455 ms 






print(ans) # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 34.375 ms, Average time per hit: 34.375 ms 


lst_a = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 16.208 ms, Average time per hit: 16.208 ms 


lst_a.sort() # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


set_ans = set() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 






for a in lst_a: # Hits:7.0, Total execution time: 0.667 ms, Average time per hit: 0.09528571428571429 ms 


    if a in set_ans: # Hits:6.0, Total execution time: 0.626 ms, Average time per hit: 0.10433333333333333 ms 


        set_ans.remove(a) # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    else:

        set_ans.add(a) # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


ans = len(set_ans) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 






print(ans) # Hits:1.0, Total execution time: 5.917 ms, Average time per hit: 5.917 ms 
",p03607,True
"import collections # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 37.584 ms, Average time per hit: 37.584 ms 


a=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for _ in range(n): # Hits:7.0, Total execution time: 0.958 ms, Average time per hit: 0.13685714285714287 ms 


    a.append(eval(input())) # Hits:6.0, Total execution time: 16.668 ms, Average time per hit: 2.778 ms 


c=collections.Counter(a) # Hits:1.0, Total execution time: 2.458 ms, Average time per hit: 2.458 ms 


tmp=[] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for k,v in list(c.items()): # Hits:5.0, Total execution time: 0.917 ms, Average time per hit: 0.1834 ms 


    if v%2!=0:  # Hits:4.0, Total execution time: 1.0 ms, Average time per hit: 0.25 ms 


        tmp.append(k) # Hits:2.0, Total execution time: 0.334 ms, Average time per hit: 0.167 ms 


print((len(tmp))) # Hits:1.0, Total execution time: 8.125 ms, Average time per hit: 8.125 ms 
","from collections import Counter # Hits:1.0, Total execution time: 1.542 ms, Average time per hit: 1.542 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 37.333 ms, Average time per hit: 37.333 ms 


a=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for _ in range(n): # Hits:7.0, Total execution time: 0.835 ms, Average time per hit: 0.11928571428571429 ms 


    a.append(eval(input())) # Hits:6.0, Total execution time: 16.166 ms, Average time per hit: 2.6943333333333337 ms 


c=Counter(a) # Hits:1.0, Total execution time: 2.375 ms, Average time per hit: 2.375 ms 


tmp=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for k,v in list(c.items()): # Hits:5.0, Total execution time: 0.873 ms, Average time per hit: 0.1746 ms 


    if v%2!=0:  # Hits:4.0, Total execution time: 0.834 ms, Average time per hit: 0.2085 ms 


        tmp.append(k) # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


print((len(tmp))) # Hits:1.0, Total execution time: 8.083 ms, Average time per hit: 8.083 ms 
",p03607,True
"def index(a, x): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    'Locate the leftmost value exactly equal to x'

    i = bisect.bisect_left(a, x)

    if i != len(a) and a[i] == x:

        return i

    return -1



n = int(eval(input())) # Hits:1.0, Total execution time: 37.375 ms, Average time per hit: 37.375 ms 


import bisect # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


dat = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:7.0, Total execution time: 0.999 ms, Average time per hit: 0.1427142857142857 ms 


    x = int(eval(input())) # Hits:6.0, Total execution time: 21.249 ms, Average time per hit: 3.5415 ms 


    a =  index(dat, x) # Hits:6.0, Total execution time: 4.333 ms, Average time per hit: 0.7221666666666666 ms 


    if a == -1: # Hits:6.0, Total execution time: 0.582 ms, Average time per hit: 0.097 ms 


        bisect.insort_left(dat, x) # Hits:4.0, Total execution time: 0.791 ms, Average time per hit: 0.19775 ms 


    else:

        del dat[a] # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


print((len(dat))) # Hits:1.0, Total execution time: 8.208 ms, Average time per hit: 8.208 ms 
","dat = dict() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 38.25 ms, Average time per hit: 38.25 ms 


import bisect # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


for i in range(n): # Hits:7.0, Total execution time: 0.998 ms, Average time per hit: 0.14257142857142857 ms 


    x = int(eval(input())) # Hits:6.0, Total execution time: 16.627 ms, Average time per hit: 2.7711666666666663 ms 


    if x in dat: # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


        del dat[x] # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    else:

        dat[x] = 1 # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 




print((len(dat))) # Hits:1.0, Total execution time: 5.667 ms, Average time per hit: 5.667 ms 
",p03607,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 38.292 ms, Average time per hit: 38.292 ms 




a = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:7.0, Total execution time: 1.0 ms, Average time per hit: 0.14285714285714285 ms 


    x = int(eval(input())) # Hits:6.0, Total execution time: 16.459 ms, Average time per hit: 2.7431666666666663 ms 


    if x in a: # Hits:6.0, Total execution time: 0.708 ms, Average time per hit: 0.118 ms 


        a.remove(x) # Hits:2.0, Total execution time: 0.458 ms, Average time per hit: 0.229 ms 


    else:

        a.append(x) # Hits:4.0, Total execution time: 0.834 ms, Average time per hit: 0.2085 ms 


print((len(a))) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 34.709 ms, Average time per hit: 34.709 ms 




a = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N): # Hits:7.0, Total execution time: 0.875 ms, Average time per hit: 0.125 ms 


    x = eval(input()) # Hits:6.0, Total execution time: 16.499 ms, Average time per hit: 2.7498333333333336 ms 


    if x in a: # Hits:6.0, Total execution time: 0.834 ms, Average time per hit: 0.139 ms 


        del a[x] # Hits:2.0, Total execution time: 0.291 ms, Average time per hit: 0.1455 ms 


    else:

        a[x] = 0 # Hits:4.0, Total execution time: 0.501 ms, Average time per hit: 0.12525 ms 


print((len(a))) # Hits:1.0, Total execution time: 5.667 ms, Average time per hit: 5.667 ms 

",p03607,True
"#C-write and erase

n=int(eval(input())) # Hits:1.0, Total execution time: 32.25 ms, Average time per hit: 32.25 ms 


a=[int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 16.25 ms, Average time per hit: 16.25 ms 


a.sort() # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




b=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


c=0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


while b!=n: # Hits:5.0, Total execution time: 0.501 ms, Average time per hit: 0.1002 ms 


    d=a.count(a[b])  # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    if d%2==0: # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


        c+=0 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


    else:

        c+=1 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


    b+=d # Hits:4.0, Total execution time: 0.333 ms, Average time per hit: 0.08325 ms 


    

print(c) # Hits:1.0, Total execution time: 8.0 ms, Average time per hit: 8.0 ms 



","#073C write and erase



n=int(eval(input())) # Hits:1.0, Total execution time: 38.458 ms, Average time per hit: 38.458 ms 


s=set() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(n): # Hits:7.0, Total execution time: 0.876 ms, Average time per hit: 0.12514285714285714 ms 


    a=int(eval(input())) # Hits:6.0, Total execution time: 16.751 ms, Average time per hit: 2.7918333333333334 ms 


    if a in s: # Hits:6.0, Total execution time: 0.584 ms, Average time per hit: 0.09733333333333333 ms 


        s.remove(a) # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


    else:

        s.add(a) # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 




print((len(s))) # Hits:1.0, Total execution time: 5.583 ms, Average time per hit: 5.583 ms 
",p03607,True
"import sys # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 38.875 ms, Average time per hit: 38.875 ms 


a = [int(i) for i in sys.stdin] # Hits:1.0, Total execution time: 4.792 ms, Average time per hit: 4.792 ms 


a.sort() # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


b = list(set(a)) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


count=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(len(b)): # Hits:5.0, Total execution time: 0.793 ms, Average time per hit: 0.1586 ms 


  if a.count(b[i])%2!=0: # Hits:4.0, Total execution time: 1.209 ms, Average time per hit: 0.30225 ms 


    count+=1 # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


print(count) # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 




    
","import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 39.0 ms, Average time per hit: 39.0 ms 


a = [int(i) for i in sys.stdin] # Hits:1.0, Total execution time: 4.041 ms, Average time per hit: 4.041 ms 


a.sort() # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


dict = {} # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:7.0, Total execution time: 0.961 ms, Average time per hit: 0.1372857142857143 ms 


  if a[i] in dict: # Hits:6.0, Total execution time: 0.791 ms, Average time per hit: 0.13183333333333333 ms 


    del dict[a[i]] # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


  else: 

  	dict[a[i]]=0 # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


print((len(dict))) # Hits:1.0, Total execution time: 8.25 ms, Average time per hit: 8.25 ms 






    ",p03607,True
"#073_C

n=int(eval(input())) # Hits:1.0, Total execution time: 39.458 ms, Average time per hit: 39.458 ms 


s=set() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for _ in range(n): # Hits:7.0, Total execution time: 0.915 ms, Average time per hit: 0.13071428571428573 ms 


    s=s^{eval(input())} # Hits:6.0, Total execution time: 17.21 ms, Average time per hit: 2.8683333333333336 ms 


print((len(s))) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 42.25 ms, Average time per hit: 42.25 ms 


s=set() # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


for i in range(N):s^={eval(input())} # Hits:7.0, Total execution time: 19.249 ms, Average time per hit: 2.7498571428571426 ms 


print((len(s))) # Hits:1.0, Total execution time: 5.042 ms, Average time per hit: 5.042 ms 
",p03607,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 40.625 ms, Average time per hit: 40.625 ms 


nums = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 16.167 ms, Average time per hit: 16.167 ms 


cnt = {} # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for x in nums: # Hits:7.0, Total execution time: 0.584 ms, Average time per hit: 0.08342857142857144 ms 


    if x not in cnt: # Hits:6.0, Total execution time: 0.583 ms, Average time per hit: 0.09716666666666667 ms 


        cnt[x] = 1 # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


    else:

        cnt[x] += 1 # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


for y in list(cnt.values()): # Hits:5.0, Total execution time: 0.709 ms, Average time per hit: 0.1418 ms 


    if y % 2 != 0: # Hits:4.0, Total execution time: 1.042 ms, Average time per hit: 0.2605 ms 


        ans += 1 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 




print(ans) # Hits:1.0, Total execution time: 4.625 ms, Average time per hit: 4.625 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 36.25 ms, Average time per hit: 36.25 ms 






ds = {} # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for _ in range(N): # Hits:7.0, Total execution time: 0.916 ms, Average time per hit: 0.13085714285714287 ms 


    A = eval(input()) # Hits:6.0, Total execution time: 15.873 ms, Average time per hit: 2.6455 ms 


    if A not in ds: # Hits:6.0, Total execution time: 0.709 ms, Average time per hit: 0.11816666666666667 ms 


        ds[A] = 0 # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


    else:

        ds[A] += 1 # Hits:2.0, Total execution time: 0.376 ms, Average time per hit: 0.188 ms 




cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for d in ds: # Hits:5.0, Total execution time: 0.5 ms, Average time per hit: 0.1 ms 


    if ds[d] % 2 == 0: # Hits:4.0, Total execution time: 1.042 ms, Average time per hit: 0.2605 ms 


        cnt += 1 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 




print(cnt) # Hits:1.0, Total execution time: 5.041 ms, Average time per hit: 5.041 ms 

",p03607,True
"import bisect # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


# 操作回数を入力する

N = int(eval(input())) # Hits:1.0, Total execution time: 36.75 ms, Average time per hit: 36.75 ms 


# 言う数字を入力する

list_A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 16.458 ms, Average time per hit: 16.458 ms 


# 紙の状態を設定する

paper = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


# 

for A in list_A: # Hits:7.0, Total execution time: 0.582 ms, Average time per hit: 0.08314285714285714 ms 


    if paper == []: # Hits:6.0, Total execution time: 0.627 ms, Average time per hit: 0.1045 ms 


        paper.append(A) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


        continue # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    # 紙上のAをニ分探索する

    index = bisect.bisect_left(paper, A) # Hits:5.0, Total execution time: 1.042 ms, Average time per hit: 0.2084 ms 


    if index < len(paper) and paper[index] == A: # Hits:5.0, Total execution time: 0.958 ms, Average time per hit: 0.1916 ms 


        del paper[index] # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    else:

        paper.insert(index, A) # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


# 結果を出力する

print((len(paper))) # Hits:1.0, Total execution time: 9.5 ms, Average time per hit: 9.5 ms 
","# 操作回数を入力する

N = int(eval(input())) # Hits:1.0, Total execution time: 39.583 ms, Average time per hit: 39.583 ms 


# 言う数字を入力する

list_A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 17.916 ms, Average time per hit: 17.916 ms 


# 数字を昇順に並べる

list_A.sort() # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


# 終了後に残っている数字の数を設定する

ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


# 直前の数字を設定する

num = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


# ある数字が連続している回数を設定する

count = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


# 昇順に並んだ各数字Aについて、、

for A in list_A: # Hits:7.0, Total execution time: 0.666 ms, Average time per hit: 0.09514285714285714 ms 


    # 数字Aが直前の数字と同じ場合、、

    if A == num: # Hits:6.0, Total execution time: 0.71 ms, Average time per hit: 0.11833333333333333 ms 


        # 連続回数を増やす

        count += 1 # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    # 数字Aが直前の数字と異なる場合、、

    else:

        # 直前の数字の連続回数が奇数の場合、、

        if count % 2 != 0: # Hits:4.0, Total execution time: 0.665 ms, Average time per hit: 0.16625 ms 


            # 終了後に残っている数字の数を増やす

            ans += 1 # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


        # 直前の数字と連続回数を更新する

        num = A # Hits:4.0, Total execution time: 0.29 ms, Average time per hit: 0.0725 ms 


        count = 1         # Hits:4.0, Total execution time: 0.293 ms, Average time per hit: 0.07325 ms 


# 最後の数字について、連続回数が奇数の場合、終了後に残っている数字の数を増やす

if count % 2 != 0: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    ans += 1

# 結果を出力する

print(ans) # Hits:1.0, Total execution time: 9.0 ms, Average time per hit: 9.0 ms 
",p03607,True
"from collections import Counter # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 37.583 ms, Average time per hit: 37.583 ms 


A = Counter([int(eval(input())) for _ in range(N)]) # Hits:1.0, Total execution time: 19.416 ms, Average time per hit: 19.416 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for v in list(A.values()): # Hits:5.0, Total execution time: 0.834 ms, Average time per hit: 0.1668 ms 


  if v % 2 != 0: # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    ans += 1 # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


print(ans) # Hits:1.0, Total execution time: 5.792 ms, Average time per hit: 5.792 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 37.166 ms, Average time per hit: 37.166 ms 


A = [eval(input()) for _ in range(N)] # Hits:1.0, Total execution time: 16.417 ms, Average time per hit: 16.417 ms 


a = {} # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:7.0, Total execution time: 0.667 ms, Average time per hit: 0.09528571428571429 ms 


  if A[i] in a: # Hits:6.0, Total execution time: 0.667 ms, Average time per hit: 0.11116666666666668 ms 


    a[A[i]] += 1 # Hits:2.0, Total execution time: 0.334 ms, Average time per hit: 0.167 ms 


  else:

    a[A[i]] = 1 # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 




ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in list(a.values()): # Hits:5.0, Total execution time: 0.834 ms, Average time per hit: 0.1668 ms 


  if i % 2 != 0: # Hits:4.0, Total execution time: 0.959 ms, Average time per hit: 0.23975 ms 


    ans += 1 # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


print(ans) # Hits:1.0, Total execution time: 4.917 ms, Average time per hit: 4.917 ms 
",p03607,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 38.792 ms, Average time per hit: 38.792 ms 


data = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:7.0, Total execution time: 0.873 ms, Average time per hit: 0.12471428571428571 ms 


    num = int(eval(input())) # Hits:6.0, Total execution time: 16.415 ms, Average time per hit: 2.7358333333333333 ms 


    if num in data: # Hits:6.0, Total execution time: 0.791 ms, Average time per hit: 0.13183333333333333 ms 


        data.remove(num) # Hits:2.0, Total execution time: 0.459 ms, Average time per hit: 0.2295 ms 


    else:

        data.append(num) # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


print((len(data))) # Hits:1.0, Total execution time: 5.083 ms, Average time per hit: 5.083 ms 

","import sys # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




data = set() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


N = int(sys.stdin.readline()) # Hits:1.0, Total execution time: 33.209 ms, Average time per hit: 33.209 ms 




for i in range(N): # Hits:7.0, Total execution time: 1.082 ms, Average time per hit: 0.15457142857142858 ms 


    num = int(sys.stdin.readline()) # Hits:6.0, Total execution time: 1.668 ms, Average time per hit: 0.278 ms 


    if num in data: # Hits:6.0, Total execution time: 0.668 ms, Average time per hit: 0.11133333333333333 ms 


        data.remove(num) # Hits:2.0, Total execution time: 0.334 ms, Average time per hit: 0.167 ms 


    else:

        data.add(num) # Hits:4.0, Total execution time: 0.792 ms, Average time per hit: 0.198 ms 


print((len(data))) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 

",p03607,True
"from collections import Counter # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 34.458 ms, Average time per hit: 34.458 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 16.666 ms, Average time per hit: 16.666 ms 




a_c = Counter(a).most_common()  # Hits:1.0, Total execution time: 3.625 ms, Average time per hit: 3.625 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in a_c:  # Hits:5.0, Total execution time: 0.417 ms, Average time per hit: 0.0834 ms 


    if i[1] % 2 == 1: # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


        ans += 1 # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


print(ans) # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 37.291 ms, Average time per hit: 37.291 ms 


a_d = {} # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(n): # Hits:7.0, Total execution time: 0.999 ms, Average time per hit: 0.1427142857142857 ms 


    a = int(eval(input())) # Hits:6.0, Total execution time: 16.333 ms, Average time per hit: 2.7221666666666664 ms 


    if a in a_d: # Hits:6.0, Total execution time: 0.668 ms, Average time per hit: 0.11133333333333333 ms 


        a_d[a] += 1 # Hits:2.0, Total execution time: 0.417 ms, Average time per hit: 0.2085 ms 


    else:

        a_d[a] = 1 # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


 

ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in list(a_d.values()): # Hits:5.0, Total execution time: 0.833 ms, Average time per hit: 0.1666 ms 


    if i % 2: # Hits:4.0, Total execution time: 0.876 ms, Average time per hit: 0.219 ms 


        ans += 1 # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


print(ans) # Hits:1.0, Total execution time: 9.584 ms, Average time per hit: 9.584 ms 
",p03607,True
"def m(): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    N = int(eval(input()))

    A = [int(eval(input())) for _ in range(N)]

    ans = []

    for a in A: ans.remove(a) if a in ans else ans.append(a)

    return len(ans)



print((m())) # Hits:1.0, Total execution time: 67.958 ms, Average time per hit: 67.958 ms 

","def m(): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    N = int(eval(input()))

    A = [int(eval(input())) for _ in range(N)]

    A.sort()

    tmp = -1

    cnt = 0

    ans = 0

    for i in range(N):

        if tmp == A[i]:

            cnt +=1

        else:

            if cnt % 2 == 0: pass

            else: ans +=1

            tmp = A[i]

            cnt = 1



    if cnt % 2 == 0: pass

    else: ans += 1

    return ans



print((m())) # Hits:1.0, Total execution time: 71.708 ms, Average time per hit: 71.708 ms 

",p03607,True
"def writeanderase(n , a):



    ans = []



    for i in range(n):

        if ans.count(a[i]) == 0:

            ans.append(a[i])

        else:

            ans.remove(a[i])



    return len(ans)



def main():

    n = int(eval(input()))

    a = [int(eval(input())) for i in range(n)]

    print((writeanderase(n , a)))



if __name__ == '__main__':

    main()",,p03607,False
"import collections # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 38.709 ms, Average time per hit: 38.709 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


now = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


k = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:7.0, Total execution time: 0.835 ms, Average time per hit: 0.11928571428571429 ms 


  A = int(eval(input())) # Hits:6.0, Total execution time: 17.209 ms, Average time per hit: 2.8681666666666663 ms 


  k.append(A) # Hits:6.0, Total execution time: 1.042 ms, Average time per hit: 0.17366666666666666 ms 


p = collections.Counter(k) # Hits:1.0, Total execution time: 3.75 ms, Average time per hit: 3.75 ms 


for i in p: # Hits:5.0, Total execution time: 0.542 ms, Average time per hit: 0.10840000000000001 ms 


  if p[i]%2 == 1: # Hits:4.0, Total execution time: 1.25 ms, Average time per hit: 0.3125 ms 


    ans += 1 # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


print(ans) # Hits:1.0, Total execution time: 8.292 ms, Average time per hit: 8.292 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 37.958 ms, Average time per hit: 37.958 ms 


dict1 = {} # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(N): # Hits:7.0, Total execution time: 1.168 ms, Average time per hit: 0.16685714285714287 ms 


  A = eval(input()) # Hits:6.0, Total execution time: 17.709 ms, Average time per hit: 2.9515 ms 


  if A in dict1: # Hits:6.0, Total execution time: 0.751 ms, Average time per hit: 0.12516666666666668 ms 


    del dict1[A] # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


  else:

    dict1[A] = 1 # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


print((len(dict1))) # Hits:1.0, Total execution time: 5.834 ms, Average time per hit: 5.834 ms 
",p03607,True
"N = eval(input()) # Hits:1.0, Total execution time: 31.833 ms, Average time per hit: 31.833 ms 




l = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(N): # Hits:7.0, Total execution time: 0.875 ms, Average time per hit: 0.125 ms 


    x = eval(input()) # Hits:6.0, Total execution time: 15.707 ms, Average time per hit: 2.6178333333333335 ms 


    if (x in l): # Hits:6.0, Total execution time: 0.75 ms, Average time per hit: 0.125 ms 


        l.remove(x) # Hits:2.0, Total execution time: 0.374 ms, Average time per hit: 0.187 ms 


    else:

        l.append(x) # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 




print(len(l)) # Hits:1.0, Total execution time: 4.917 ms, Average time per hit: 4.917 ms 

","N = eval(input()) # Hits:1.0, Total execution time: 37.583 ms, Average time per hit: 37.583 ms 




l = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(N): # Hits:7.0, Total execution time: 0.999 ms, Average time per hit: 0.1427142857142857 ms 


    l.append(eval(input())) # Hits:6.0, Total execution time: 16.875 ms, Average time per hit: 2.8125 ms 




l.sort() # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 




ptr = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


res = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


while ptr < N: # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


    cc = l[ptr] # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


    f = 0 # Hits:4.0, Total execution time: 0.291 ms, Average time per hit: 0.07275 ms 


    while (ptr < N and l[ptr] == cc): # Hits:10.0, Total execution time: 1.459 ms, Average time per hit: 0.1459 ms 


        f += 1 # Hits:6.0, Total execution time: 0.583 ms, Average time per hit: 0.09716666666666667 ms 


        ptr += 1 # Hits:6.0, Total execution time: 0.502 ms, Average time per hit: 0.08366666666666667 ms 


    res += f%2 # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 




print(res) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 

",p03607,True
"#!usr/bin/env python3

from collections import defaultdict

from collections import deque

from heapq import heappush, heappop

import sys

import math

import bisect

import random

def LI(): return list(map(int, sys.stdin.readline().split()))

def I(): return int(sys.stdin.readline())

def LS():return list(map(list, sys.stdin.readline().split()))

def S(): return list(sys.stdin.readline())[:-1]

def IR(n):

    l = [None for i in range(n)]

    for i in range(n):l[i] = I()

    return l

def LIR(n):

    l = [None for i in range(n)]

    for i in range(n):l[i] = LI()

    return l

def SR(n):

    l = [None for i in range(n)]

    for i in range(n):l[i] = S()

    return l

def LSR(n):

    l = [None for i in range(n)]

    for i in range(n):l[i] = SR()

    return l

mod = 1000000007



#A

def A():

    n = I()

    print((n*800-200*(n//15)))



#B

def B():

    k = I()

    ans = 0

    for i in range(1,k):

        for j in range(i+1,k+1):

            if (i%2)^(j%2):

                ans += 1

    print(ans)



#C

def C():

    x,t = LI()

    print((max(0,x-t)))



#D

def D():

    n = I()

    ans = 1

    for i in range(1,n+1):

        ans *= i

        ans %= mod

    print(ans)



#E

def E():

    x,y,s,t = LI()

    return



#F

def F():

    n = I()

    x = LI()

    a = sorted(x)

    for i in range(n):

        j = bisect.bisect_left(a,x[i])

        if j >= n//2:

            print((a[n//2-1]))

        else:

            print((a[n//2]))



#G

def G():

    n,m = LI()

    if m <= 2*n:print((m//2))

    else:

        ans = n

        m -= 2*n

        ans += m//4

        print(ans)



#H

def H():

    n,k = LI()

    ans = 0

    fact

    for i in range(1,3*n+1):

        if i%k == 0:

            return



def J():

    n = I()

    d = defaultdict(int)

    for i in range(n):

        a = I()

        if d[a]:

            d[a] -= 1

        else:

            d[a] += 1

    print((sum(d.values())))

def K():

    return



#Solve

if __name__ == ""__main__"":

    J()
",,p03607,False
"n=int(eval(input())) # Hits:1.0, Total execution time: 42.25 ms, Average time per hit: 42.25 ms 


A=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:7.0, Total execution time: 1.168 ms, Average time per hit: 0.16685714285714287 ms 


    a=eval(input()) # Hits:6.0, Total execution time: 19.875 ms, Average time per hit: 3.3125 ms 


    if a in A: # Hits:6.0, Total execution time: 0.917 ms, Average time per hit: 0.15283333333333335 ms 


        A.remove(a) # Hits:2.0, Total execution time: 0.416 ms, Average time per hit: 0.208 ms 


    else:

        A.append(a) # Hits:4.0, Total execution time: 0.834 ms, Average time per hit: 0.2085 ms 


print((len(A))) # Hits:1.0, Total execution time: 5.666 ms, Average time per hit: 5.666 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 29.542 ms, Average time per hit: 29.542 ms 


A=set() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(n): # Hits:7.0, Total execution time: 0.999 ms, Average time per hit: 0.1427142857142857 ms 


    a=eval(input()) # Hits:6.0, Total execution time: 30.127 ms, Average time per hit: 5.021166666666667 ms 


    if a in A: # Hits:6.0, Total execution time: 0.832 ms, Average time per hit: 0.13866666666666666 ms 


        A.remove(a) # Hits:2.0, Total execution time: 0.416 ms, Average time per hit: 0.208 ms 


    else:

        A.add(a) # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


print((len(A))) # Hits:1.0, Total execution time: 6.0 ms, Average time per hit: 6.0 ms 
",p03607,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 38.834 ms, Average time per hit: 38.834 ms 


a=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ans=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(n): # Hits:7.0, Total execution time: 1.042 ms, Average time per hit: 0.14885714285714285 ms 


    x=int(eval(input())) # Hits:6.0, Total execution time: 16.791 ms, Average time per hit: 2.7985 ms 


    try: # Hits:6.0, Total execution time: 0.502 ms, Average time per hit: 0.08366666666666667 ms 


        del a[a.index(x)] # Hits:6.0, Total execution time: 2.708 ms, Average time per hit: 0.4513333333333333 ms 


    except: # Hits:4.0, Total execution time: 0.334 ms, Average time per hit: 0.0835 ms 


        a.append(x) # Hits:4.0, Total execution time: 0.835 ms, Average time per hit: 0.20875 ms 


print((len(a))) # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 

","n=int(eval(input())) # Hits:1.0, Total execution time: 38.167 ms, Average time per hit: 38.167 ms 


d={} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:7.0, Total execution time: 0.957 ms, Average time per hit: 0.13671428571428573 ms 


    a=int(eval(input())) # Hits:6.0, Total execution time: 16.792 ms, Average time per hit: 2.7986666666666666 ms 


    try: # Hits:6.0, Total execution time: 0.333 ms, Average time per hit: 0.0555 ms 


        if d[a]%2==0: # Hits:6.0, Total execution time: 1.584 ms, Average time per hit: 0.264 ms 


            ans+=1

            d[a]+=1

        else:

            ans-=1 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


            d[a]+=1 # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


    except: # Hits:4.0, Total execution time: 0.29 ms, Average time per hit: 0.0725 ms 


        d[a]=1 # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


        ans+=1 # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


print(ans) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 

",p03607,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 32.042 ms, Average time per hit: 32.042 ms 


As=[int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 16.042 ms, Average time per hit: 16.042 ms 


As.sort() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


As_uniq=list(set(As)) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




ans=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for uniq in As_uniq: # Hits:5.0, Total execution time: 0.457 ms, Average time per hit: 0.09140000000000001 ms 


  if As.count(uniq)%2==1: # Hits:4.0, Total execution time: 0.959 ms, Average time per hit: 0.23975 ms 


    ans+=1 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


print(ans) # Hits:1.0, Total execution time: 8.375 ms, Average time per hit: 8.375 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 36.333 ms, Average time per hit: 36.333 ms 


As=[int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 16.208 ms, Average time per hit: 16.208 ms 


As.sort() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


As_uniq=list(set(As)) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


c=1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,n): # Hits:6.0, Total execution time: 0.709 ms, Average time per hit: 0.11816666666666667 ms 


  if As[i]==As[i-1]: # Hits:5.0, Total execution time: 0.709 ms, Average time per hit: 0.1418 ms 


    c+=1 # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


  else:

    if c%2==1: # Hits:3.0, Total execution time: 0.376 ms, Average time per hit: 0.12533333333333332 ms 


      ans+=1 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


    c=1 # Hits:3.0, Total execution time: 0.208 ms, Average time per hit: 0.06933333333333333 ms 


if c % 2 == 1: # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


  ans += 1

print(ans) # Hits:1.0, Total execution time: 5.042 ms, Average time per hit: 5.042 ms 
",p03607,True
"

from bisect import bisect_left,bisect_right # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 37.708 ms, Average time per hit: 37.708 ms 


A_list = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(N): # Hits:7.0, Total execution time: 0.877 ms, Average time per hit: 0.12528571428571428 ms 


    A_list.append(int(eval(input()))) # Hits:6.0, Total execution time: 17.292 ms, Average time per hit: 2.882 ms 




A_unique = list(set(A_list)) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 






A_list.sort() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for a in A_unique: # Hits:5.0, Total execution time: 0.499 ms, Average time per hit: 0.0998 ms 


    if (bisect_right(A_list,a)-bisect_left(A_list,a))%2 == 1: # Hits:4.0, Total execution time: 1.916 ms, Average time per hit: 0.479 ms 


        ans += 1 # Hits:2.0, Total execution time: 0.75 ms, Average time per hit: 0.375 ms 


        

print(ans) # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 36.542 ms, Average time per hit: 36.542 ms 


A_list = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(N): # Hits:7.0, Total execution time: 0.875 ms, Average time per hit: 0.125 ms 


    A_list.append(int(eval(input()))) # Hits:6.0, Total execution time: 16.709 ms, Average time per hit: 2.7848333333333333 ms 


    

A_list.sort() # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




res = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for a in A_list: # Hits:7.0, Total execution time: 0.624 ms, Average time per hit: 0.08914285714285713 ms 


    if res == a: # Hits:6.0, Total execution time: 0.583 ms, Average time per hit: 0.09716666666666667 ms 


        cnt += 1 # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


    else:

        ans += cnt%2 # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


        res = a # Hits:4.0, Total execution time: 0.251 ms, Average time per hit: 0.06275 ms 


        cnt = 1 # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


        

ans += cnt%2 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




print(ans) # Hits:1.0, Total execution time: 5.042 ms, Average time per hit: 5.042 ms 
",p03607,True
"from collections import Counter # Hits:1.0, Total execution time: 1.416 ms, Average time per hit: 1.416 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 38.25 ms, Average time per hit: 38.25 ms 


A = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:7.0, Total execution time: 1.0 ms, Average time per hit: 0.14285714285714285 ms 


    A.append(int(eval(input()))) # Hits:6.0, Total execution time: 17.541 ms, Average time per hit: 2.9235 ms 




cntr = Counter(A) # Hits:1.0, Total execution time: 3.875 ms, Average time per hit: 3.875 ms 




ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for v in list(cntr.values()): # Hits:5.0, Total execution time: 0.834 ms, Average time per hit: 0.1668 ms 


    ans += v%2 # Hits:4.0, Total execution time: 1.041 ms, Average time per hit: 0.26025 ms 




print(ans) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 44.333 ms, Average time per hit: 44.333 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 19.334 ms, Average time per hit: 19.334 ms 






a_set = set() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for ai in a: # Hits:7.0, Total execution time: 0.667 ms, Average time per hit: 0.09528571428571429 ms 


    if ai in a_set: # Hits:6.0, Total execution time: 0.584 ms, Average time per hit: 0.09733333333333333 ms 


        a_set.remove(ai) # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    else:

        a_set.add(ai) # Hits:4.0, Total execution time: 0.791 ms, Average time per hit: 0.19775 ms 


        

print((len(a_set))) # Hits:1.0, Total execution time: 6.125 ms, Average time per hit: 6.125 ms 
",p03607,True
"N=int(eval(input())) # Hits:1.0, Total execution time: 37.167 ms, Average time per hit: 37.167 ms 


a=[0]*N # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


s=set() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N): # Hits:7.0, Total execution time: 0.834 ms, Average time per hit: 0.11914285714285713 ms 


	a[i] = int(eval(input())) # Hits:6.0, Total execution time: 16.583 ms, Average time per hit: 2.7638333333333334 ms 


	s.add(a[i]) # Hits:6.0, Total execution time: 0.958 ms, Average time per hit: 0.15966666666666665 ms 


res=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for j in s: # Hits:5.0, Total execution time: 0.459 ms, Average time per hit: 0.09179999999999999 ms 


	res += (1 if not a.count(j) % 2 == 0 else 0) # Hits:4.0, Total execution time: 1.542 ms, Average time per hit: 0.3855 ms 




print(res) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 36.625 ms, Average time per hit: 36.625 ms 


a=[0]*N # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


s={} # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:7.0, Total execution time: 0.958 ms, Average time per hit: 0.13685714285714287 ms 


	a[i] = int(eval(input())) # Hits:6.0, Total execution time: 16.46 ms, Average time per hit: 2.7433333333333336 ms 


	if a[i] not in s: # Hits:6.0, Total execution time: 0.666 ms, Average time per hit: 0.111 ms 


		s[a[i]] = 1 # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


	else:

		s[a[i]] += 1 # Hits:2.0, Total execution time: 0.334 ms, Average time per hit: 0.167 ms 




res=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for key,value in list(s.items()): # Hits:5.0, Total execution time: 1.0 ms, Average time per hit: 0.2 ms 


#	print(key,value)

	res += (1 if not value % 2 == 0 else 0) # Hits:4.0, Total execution time: 1.251 ms, Average time per hit: 0.31275 ms 




print(res) # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 
",p03607,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 42.209 ms, Average time per hit: 42.209 ms 


a = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N): # Hits:7.0, Total execution time: 1.085 ms, Average time per hit: 0.155 ms 


  b = int(eval(input())) # Hits:6.0, Total execution time: 19.248 ms, Average time per hit: 3.208 ms 


  if b in a: # Hits:6.0, Total execution time: 0.834 ms, Average time per hit: 0.139 ms 


    del a[a.index(b)] # Hits:2.0, Total execution time: 0.499 ms, Average time per hit: 0.2495 ms 


  else:

    a.append(b) # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


print((len(a))) # Hits:1.0, Total execution time: 5.042 ms, Average time per hit: 5.042 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 40.083 ms, Average time per hit: 40.083 ms 


a =set([]) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


for i in range(N): # Hits:7.0, Total execution time: 0.917 ms, Average time per hit: 0.131 ms 


  b = int(eval(input())) # Hits:6.0, Total execution time: 16.667 ms, Average time per hit: 2.7778333333333336 ms 


  if b in a: # Hits:6.0, Total execution time: 0.626 ms, Average time per hit: 0.10433333333333333 ms 


    a.remove(b) # Hits:2.0, Total execution time: 0.334 ms, Average time per hit: 0.167 ms 


  else:

    a.add(b) # Hits:4.0, Total execution time: 0.834 ms, Average time per hit: 0.2085 ms 


print((len(a))) # Hits:1.0, Total execution time: 5.708 ms, Average time per hit: 5.708 ms 
",p03607,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 34.042 ms, Average time per hit: 34.042 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 16.417 ms, Average time per hit: 16.417 ms 


counter = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




while A: # Hits:5.0, Total execution time: 0.5 ms, Average time per hit: 0.1 ms 


    x = A[0] # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


    if A.count(x) % 2 == 1: # Hits:4.0, Total execution time: 0.917 ms, Average time per hit: 0.22925 ms 


        counter += 1 # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


    A = [i for i in A if i != x] # Hits:4.0, Total execution time: 2.583 ms, Average time per hit: 0.64575 ms 




print(counter) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 33.959 ms, Average time per hit: 33.959 ms 


maps = {} # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for _ in range(N): # Hits:7.0, Total execution time: 1.042 ms, Average time per hit: 0.14885714285714285 ms 


    A = int(eval(input())) # Hits:6.0, Total execution time: 17.294 ms, Average time per hit: 2.8823333333333334 ms 


    if A in maps: # Hits:6.0, Total execution time: 0.833 ms, Average time per hit: 0.13883333333333334 ms 


        maps.pop(A) # Hits:2.0, Total execution time: 0.459 ms, Average time per hit: 0.2295 ms 


    else:

        maps[A] = 1 # Hits:4.0, Total execution time: 0.499 ms, Average time per hit: 0.12475 ms 




print((len(maps))) # Hits:1.0, Total execution time: 5.334 ms, Average time per hit: 5.334 ms 
",p03607,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 43.792 ms, Average time per hit: 43.792 ms 


a = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:7.0, Total execution time: 1.042 ms, Average time per hit: 0.14885714285714285 ms 


    a.append(int(eval(input()))) # Hits:6.0, Total execution time: 18.79 ms, Average time per hit: 3.1316666666666664 ms 


    

count = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,10**5+1): # Hits:100001.0, Total execution time: 9125.742 ms, Average time per hit: 0.09125650743492565 ms 


    if a.count(i) % 2 != 0: # Hits:100000.0, Total execution time: 17456.159 ms, Average time per hit: 0.17456159 ms 


        count += 1 # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


print(count) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 39.75 ms, Average time per hit: 39.75 ms 


a = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(n): # Hits:7.0, Total execution time: 1.124 ms, Average time per hit: 0.1605714285714286 ms 


    a.append(int(eval(input()))) # Hits:6.0, Total execution time: 17.126 ms, Average time per hit: 2.8543333333333334 ms 


    

check = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in set(a): # Hits:5.0, Total execution time: 0.707 ms, Average time per hit: 0.1414 ms 


    check[i] = 0 # Hits:4.0, Total execution time: 0.668 ms, Average time per hit: 0.167 ms 


for i in a: # Hits:7.0, Total execution time: 0.541 ms, Average time per hit: 0.07728571428571429 ms 


    check[i] += 1 # Hits:6.0, Total execution time: 0.959 ms, Average time per hit: 0.15983333333333336 ms 


    

count = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in list(check.items()): # Hits:5.0, Total execution time: 0.834 ms, Average time per hit: 0.1668 ms 


    if i[1] % 2 != 0: # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


        count += 1 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


print(count) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 
",p03607,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 33.541 ms, Average time per hit: 33.541 ms 


lis = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:7.0, Total execution time: 0.875 ms, Average time per hit: 0.125 ms 


  A = int(eval(input())) # Hits:6.0, Total execution time: 15.75 ms, Average time per hit: 2.625 ms 


  if A in lis: # Hits:6.0, Total execution time: 0.668 ms, Average time per hit: 0.11133333333333333 ms 


    lis.remove(A) # Hits:2.0, Total execution time: 0.374 ms, Average time per hit: 0.187 ms 


  else:

    lis.append(A) # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


print((len(lis))) # Hits:1.0, Total execution time: 4.583 ms, Average time per hit: 4.583 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 41.458 ms, Average time per hit: 41.458 ms 


dic = {} # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(N): # Hits:7.0, Total execution time: 0.875 ms, Average time per hit: 0.125 ms 


  A = int(eval(input())) # Hits:6.0, Total execution time: 16.084 ms, Average time per hit: 2.6806666666666663 ms 


  if A not in dic: # Hits:6.0, Total execution time: 0.707 ms, Average time per hit: 0.11783333333333333 ms 


    dic[A]=1 # Hits:4.0, Total execution time: 0.418 ms, Average time per hit: 0.1045 ms 


  else:

    dic[A]^=1 # Hits:2.0, Total execution time: 0.376 ms, Average time per hit: 0.188 ms 


print((sum(dic.values()))) # Hits:1.0, Total execution time: 5.334 ms, Average time per hit: 5.334 ms 
",p03607,True
"from collections import Counter # Hits:1.0, Total execution time: 1.792 ms, Average time per hit: 1.792 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 38.416 ms, Average time per hit: 38.416 ms 


a = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 16.792 ms, Average time per hit: 16.792 ms 


ac = Counter(a) # Hits:1.0, Total execution time: 3.0 ms, Average time per hit: 3.0 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for v in list(ac.values()): # Hits:5.0, Total execution time: 0.875 ms, Average time per hit: 0.175 ms 


    if v%2 & 1: # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


        ans += 1 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


print(ans) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 
","s = set() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(int(eval(input()))): # Hits:7.0, Total execution time: 37.916 ms, Average time per hit: 5.416571428571428 ms 


    a = int(eval(input())) # Hits:6.0, Total execution time: 16.25 ms, Average time per hit: 2.7083333333333335 ms 


    if a in s: # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


        s.remove(a) # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    else:

        s.add(a) # Hits:4.0, Total execution time: 0.792 ms, Average time per hit: 0.198 ms 


print((len(s))) # Hits:1.0, Total execution time: 5.166 ms, Average time per hit: 5.166 ms 

",p03607,True
"from collections import *

N = int(eval(input()))

C = Counter([int(eval(input())) for n in range(N)]) 

A = [1 for v in list(C.values()) if v%2==1]

print((sum(A)))","N,*A = open(0)

S = set()



for a in A:

  S^={int(a)}



print((len(S)))",p03607,False
"from collections import Counter # Hits:1.0, Total execution time: 2.375 ms, Average time per hit: 2.375 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 42.125 ms, Average time per hit: 42.125 ms 


src = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 16.042 ms, Average time per hit: 16.042 ms 


counter = Counter(src) # Hits:1.0, Total execution time: 2.75 ms, Average time per hit: 2.75 ms 




ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for v in list(counter.values()): # Hits:5.0, Total execution time: 0.749 ms, Average time per hit: 0.14980000000000002 ms 


    if v%2 == 1: # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


        ans += 1 # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


print(ans) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 39.667 ms, Average time per hit: 39.667 ms 


src = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 24.209 ms, Average time per hit: 24.209 ms 




ss = set() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for a in src: # Hits:7.0, Total execution time: 0.709 ms, Average time per hit: 0.1012857142857143 ms 


    if a in ss: # Hits:6.0, Total execution time: 0.666 ms, Average time per hit: 0.111 ms 


        ss.remove(a) # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


    else:

        ss.add(a) # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


print((len(ss))) # Hits:1.0, Total execution time: 6.5 ms, Average time per hit: 6.5 ms 

",p03607,True
"from collections import Counter # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 38.917 ms, Average time per hit: 38.917 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 16.041 ms, Average time per hit: 16.041 ms 


ctr = Counter(A) # Hits:1.0, Total execution time: 2.5 ms, Average time per hit: 2.5 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for v in list(ctr.values()): # Hits:5.0, Total execution time: 0.708 ms, Average time per hit: 0.1416 ms 


    if v%2: # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


        ans += 1 # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


print(ans) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 37.167 ms, Average time per hit: 37.167 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 16.583 ms, Average time per hit: 16.583 ms 


st = set() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for a in A: # Hits:7.0, Total execution time: 0.586 ms, Average time per hit: 0.08371428571428571 ms 


    if a in st: # Hits:6.0, Total execution time: 0.498 ms, Average time per hit: 0.083 ms 


        st.remove(a) # Hits:2.0, Total execution time: 0.332 ms, Average time per hit: 0.166 ms 


    else:

        st.add(a) # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


print((len(st))) # Hits:1.0, Total execution time: 5.083 ms, Average time per hit: 5.083 ms 
",p03607,True
"N=int(eval(input())) # Hits:1.0, Total execution time: 42.542 ms, Average time per hit: 42.542 ms 


B=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(N): # Hits:7.0, Total execution time: 1.25 ms, Average time per hit: 0.17857142857142858 ms 


    a=int(eval(input())) # Hits:6.0, Total execution time: 22.875 ms, Average time per hit: 3.8125 ms 


    if a in B: # Hits:6.0, Total execution time: 0.916 ms, Average time per hit: 0.15266666666666664 ms 


        B.remove(a) # Hits:2.0, Total execution time: 0.542 ms, Average time per hit: 0.271 ms 


    else:

        B.append(a) # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


print((len(B))) # Hits:1.0, Total execution time: 6.333 ms, Average time per hit: 6.333 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 38.0 ms, Average time per hit: 38.0 ms 


B=set() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




for i in range(N): # Hits:7.0, Total execution time: 1.126 ms, Average time per hit: 0.16085714285714287 ms 


    a=int(eval(input())) # Hits:6.0, Total execution time: 16.166 ms, Average time per hit: 2.6943333333333337 ms 


    if a in B: # Hits:6.0, Total execution time: 0.626 ms, Average time per hit: 0.10433333333333333 ms 


        B.remove(a) # Hits:2.0, Total execution time: 0.334 ms, Average time per hit: 0.167 ms 


    else:

        B.add(a) # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


print((len(B))) # Hits:1.0, Total execution time: 5.334 ms, Average time per hit: 5.334 ms 
",p03607,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 35.666 ms, Average time per hit: 35.666 ms 


paper = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for _ in range(n): # Hits:7.0, Total execution time: 0.832 ms, Average time per hit: 0.11885714285714286 ms 


    x = int(eval(input())) # Hits:6.0, Total execution time: 16.083 ms, Average time per hit: 2.6805 ms 


    if x in paper: # Hits:6.0, Total execution time: 0.585 ms, Average time per hit: 0.0975 ms 


        paper.remove(x) # Hits:2.0, Total execution time: 0.374 ms, Average time per hit: 0.187 ms 


    else:

        paper.append(x) # Hits:4.0, Total execution time: 0.668 ms, Average time per hit: 0.167 ms 


print((len(paper))) # Hits:1.0, Total execution time: 4.958 ms, Average time per hit: 4.958 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 39.042 ms, Average time per hit: 39.042 ms 


paper = {} # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for _ in range(n): # Hits:7.0, Total execution time: 0.918 ms, Average time per hit: 0.13114285714285714 ms 


    x = int(eval(input())) # Hits:6.0, Total execution time: 16.791 ms, Average time per hit: 2.7985 ms 


    if x in paper: # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


        paper[x] += 1 # Hits:2.0, Total execution time: 0.5 ms, Average time per hit: 0.25 ms 


    else:

        paper[x] = 1 # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


count = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in list(paper.values()): # Hits:5.0, Total execution time: 0.916 ms, Average time per hit: 0.1832 ms 


    if i % 2 != 0: count += 1 # Hits:4.0, Total execution time: 1.166 ms, Average time per hit: 0.2915 ms 


print(count) # Hits:1.0, Total execution time: 8.292 ms, Average time per hit: 8.292 ms 
",p03607,True
"from collections import Counter

n, *A = list(map(int, open(0).read().split()))

ans = 0

for v in  list(Counter(A).values()):

  if v % 2 == 1:

    ans += 1

print(ans)","from collections import Counter

n, *A = list(map(int, open(0).read().split()))

print((sum(v % 2 for v in  list(Counter(A).values()))))",p03607,False
"n = int(eval(input())) # Hits:1.0, Total execution time: 37.75 ms, Average time per hit: 37.75 ms 


A = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 16.459 ms, Average time per hit: 16.459 ms 




b = list() # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


lenB = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for a in A: # Hits:7.0, Total execution time: 0.666 ms, Average time per hit: 0.09514285714285714 ms 


    b.append(a) # Hits:6.0, Total execution time: 0.916 ms, Average time per hit: 0.15266666666666664 ms 


    lenB += 1 # Hits:6.0, Total execution time: 0.666 ms, Average time per hit: 0.111 ms 


    if len(set(b)) != lenB: # Hits:6.0, Total execution time: 1.334 ms, Average time per hit: 0.22233333333333336 ms 


        b.pop(-1) # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


        b.remove(a) # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


        lenB -= 2 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


print((len(b))) # Hits:1.0, Total execution time: 8.5 ms, Average time per hit: 8.5 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 37.5 ms, Average time per hit: 37.5 ms 


A = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 16.5 ms, Average time per hit: 16.5 ms 




b = set() # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


lenB = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for a in A: # Hits:7.0, Total execution time: 0.584 ms, Average time per hit: 0.08342857142857144 ms 


    b.add(a) # Hits:6.0, Total execution time: 0.833 ms, Average time per hit: 0.13883333333333334 ms 


    lenB += 1 # Hits:6.0, Total execution time: 0.542 ms, Average time per hit: 0.09033333333333333 ms 


    if len(b) != lenB: # Hits:6.0, Total execution time: 0.792 ms, Average time per hit: 0.132 ms 


        b.remove(a) # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


        lenB -= 2 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


print((len(b))) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 

",p03607,True
"A=[int(eval(input())) for _ in range(int(eval(input())))] # Hits:1.0, Total execution time: 60.375 ms, Average time per hit: 60.375 ms 


l=sorted(set(A)) # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 


cnt=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(len(l)): # Hits:5.0, Total execution time: 0.834 ms, Average time per hit: 0.1668 ms 


    if A.count(l[i])%2: cnt+=1 # Hits:4.0, Total execution time: 1.416 ms, Average time per hit: 0.354 ms 


print(cnt) # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 37.125 ms, Average time per hit: 37.125 ms 


a={} # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for _ in range(n): # Hits:7.0, Total execution time: 0.831 ms, Average time per hit: 0.1187142857142857 ms 


    x=int(eval(input())) # Hits:6.0, Total execution time: 16.041 ms, Average time per hit: 2.6735 ms 


    if x in a: a[x]+=1 # Hits:6.0, Total execution time: 0.875 ms, Average time per hit: 0.14583333333333334 ms 


    else: a[x]=1 # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in a: # Hits:5.0, Total execution time: 0.499 ms, Average time per hit: 0.0998 ms 


    if a[i]%2: ans+=1 # Hits:4.0, Total execution time: 1.167 ms, Average time per hit: 0.29175 ms 


print(ans) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 
",p03607,True
"import heapq # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 34.5 ms, Average time per hit: 34.5 ms 


a_list = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




for i in range(n): # Hits:7.0, Total execution time: 0.875 ms, Average time per hit: 0.125 ms 


    a = int(eval(input())) # Hits:6.0, Total execution time: 16.5 ms, Average time per hit: 2.75 ms 


    if a in a_list: # Hits:6.0, Total execution time: 0.667 ms, Average time per hit: 0.11116666666666668 ms 


        a_list.remove(a) # Hits:2.0, Total execution time: 0.417 ms, Average time per hit: 0.2085 ms 


    else:

        heapq.heappush(a_list, a) # Hits:4.0, Total execution time: 0.792 ms, Average time per hit: 0.198 ms 




print((len(a_list))) # Hits:1.0, Total execution time: 5.542 ms, Average time per hit: 5.542 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 37.291 ms, Average time per hit: 37.291 ms 


d = dict() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(n): # Hits:7.0, Total execution time: 0.834 ms, Average time per hit: 0.11914285714285713 ms 


    a = int(eval(input())) # Hits:6.0, Total execution time: 15.96 ms, Average time per hit: 2.66 ms 


    if a in d: # Hits:6.0, Total execution time: 0.75 ms, Average time per hit: 0.125 ms 


        if d[a] == 0: # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


            d[a] = 1

        else:

            d[a] = 0 # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    else:

        d[a] = 1 # Hits:4.0, Total execution time: 0.501 ms, Average time per hit: 0.12525 ms 




print((sum(d.values()))) # Hits:1.0, Total execution time: 8.75 ms, Average time per hit: 8.75 ms 

",p03607,True
"import sys # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




import bisect # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




def main(): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    n = int(eval(input()))

    s = []



    for i in range(n):

        a = int(eval(input()))

        i = bisect.bisect_left(s, a)

        if len(s) > i and s[i] == a:

            s.remove(a)

        else:

            s.insert(i, a)





    print((len(s)))





main() # Hits:1.0, Total execution time: 59.584 ms, Average time per hit: 59.584 ms 

","N=int(eval(input())) # Hits:1.0, Total execution time: 36.458 ms, Average time per hit: 36.458 ms 


s=set() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(N):s^={eval(input())} # Hits:7.0, Total execution time: 17.377 ms, Average time per hit: 2.4824285714285717 ms 


print((len(s))) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 
",p03607,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 37.5 ms, Average time per hit: 37.5 ms 


L = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 16.417 ms, Average time per hit: 16.417 ms 


P = list(set(L)) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(len(P)) : # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


    p = L.count(P[i]) # Hits:4.0, Total execution time: 0.875 ms, Average time per hit: 0.21875 ms 


    if p % 2 != 0 : # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


        ans += 1 # Hits:2.0, Total execution time: 0.251 ms, Average time per hit: 0.1255 ms 


print(ans) # Hits:1.0, Total execution time: 5.209 ms, Average time per hit: 5.209 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 38.333 ms, Average time per hit: 38.333 ms 


D = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N) : # Hits:7.0, Total execution time: 1.085 ms, Average time per hit: 0.155 ms 


    index = int(eval(input())) # Hits:6.0, Total execution time: 16.959 ms, Average time per hit: 2.8265 ms 


    if index not in D : # Hits:6.0, Total execution time: 0.791 ms, Average time per hit: 0.13183333333333333 ms 


        D[index] = 1 # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    else :

        D[index] += 1 # Hits:2.0, Total execution time: 0.542 ms, Average time per hit: 0.271 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in D : # Hits:5.0, Total execution time: 0.541 ms, Average time per hit: 0.1082 ms 


    if D[i] % 2 != 0 : # Hits:4.0, Total execution time: 1.04 ms, Average time per hit: 0.26 ms 


        ans += 1 # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


print(ans) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 

",p03607,True
"from collections import Counter

def ABC073C_WriteAndErase():

    N = int(input().strip())

    

    Ai = Counter()

    for i in range(N):

        num = int(eval(input()))



        if num in list(Ai.keys()):

            del Ai[num]

        else:

            Ai[num] = 1



    print((len(Ai)))

    



def main():

    ABC073C_WriteAndErase()



if __name__ == ""__main__"":

    main()
",,p03607,False
"from collections import defaultdict



def solve():

    dic = defaultdict(int)

    n = int(eval(input()))

    ans = 0

    for _ in range(n):

        a = int(eval(input()))

        dic[a] = (dic[a] + 1) % 2

    print((sum(dic.values())))



if __name__ == '__main__':

    solve()","n = int(eval(input())) # Hits:1.0, Total execution time: 36.083 ms, Average time per hit: 36.083 ms 


s = set() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for _ in range(n): # Hits:7.0, Total execution time: 0.876 ms, Average time per hit: 0.12514285714285714 ms 


    s ^= {eval(input())} # Hits:6.0, Total execution time: 16.999 ms, Average time per hit: 2.8331666666666666 ms 


print((len(s))) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 
",p03607,False
"n = int(eval(input())) # Hits:1.0, Total execution time: 50.958 ms, Average time per hit: 50.958 ms 


l = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:7.0, Total execution time: 1.084 ms, Average time per hit: 0.15485714285714286 ms 


    x = int(eval(input())) # Hits:6.0, Total execution time: 19.332 ms, Average time per hit: 3.222 ms 


    l.append(x) # Hits:6.0, Total execution time: 1.001 ms, Average time per hit: 0.16683333333333333 ms 




x = set() # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in l: # Hits:7.0, Total execution time: 0.832 ms, Average time per hit: 0.11885714285714286 ms 


    if i in x: # Hits:6.0, Total execution time: 0.667 ms, Average time per hit: 0.11116666666666668 ms 


        continue # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


    else:

        x.add(i) # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


        if l.count(i)%2 ==1: # Hits:4.0, Total execution time: 1.375 ms, Average time per hit: 0.34375 ms 


            #print(i, l.count(i))

            cnt+=1 # Hits:2.0, Total execution time: 0.291 ms, Average time per hit: 0.1455 ms 


print(cnt) # Hits:1.0, Total execution time: 6.625 ms, Average time per hit: 6.625 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 37.375 ms, Average time per hit: 37.375 ms 


l = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(n): # Hits:7.0, Total execution time: 0.96 ms, Average time per hit: 0.13714285714285715 ms 


    x = int(eval(input())) # Hits:6.0, Total execution time: 16.041 ms, Average time per hit: 2.6735 ms 


    l.append(x) # Hits:6.0, Total execution time: 0.874 ms, Average time per hit: 0.14566666666666667 ms 






x = sorted(l) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


i=1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


same=1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


while i<n: # Hits:6.0, Total execution time: 0.749 ms, Average time per hit: 0.12483333333333332 ms 


    if x[i]==x[i-1]: # Hits:5.0, Total execution time: 0.751 ms, Average time per hit: 0.1502 ms 


        same += 1 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


    else:

        if same%2 == 1: # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


            cnt += 1 # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


        same = 1 # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    i += 1 # Hits:5.0, Total execution time: 0.584 ms, Average time per hit: 0.1168 ms 




cnt += same%2 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


print(cnt) # Hits:1.0, Total execution time: 4.959 ms, Average time per hit: 4.959 ms 
",p03607,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 38.583 ms, Average time per hit: 38.583 ms 


p = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(N): # Hits:7.0, Total execution time: 0.916 ms, Average time per hit: 0.13085714285714287 ms 


    a = int(eval(input())) # Hits:6.0, Total execution time: 16.126 ms, Average time per hit: 2.6876666666666664 ms 


    if not a in p: # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


        p.append(a) # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    else:

        p.remove(a) # Hits:2.0, Total execution time: 0.374 ms, Average time per hit: 0.187 ms 




print((len(p))) # Hits:1.0, Total execution time: 5.291 ms, Average time per hit: 5.291 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 39.041 ms, Average time per hit: 39.041 ms 


p = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(N): # Hits:7.0, Total execution time: 1.001 ms, Average time per hit: 0.143 ms 


    p.append(eval(input())) # Hits:6.0, Total execution time: 17.208 ms, Average time per hit: 2.868 ms 




p.sort() # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


c = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1, len(p)): # Hits:6.0, Total execution time: 0.794 ms, Average time per hit: 0.13233333333333333 ms 


    if p[i] == p[i - 1]: # Hits:5.0, Total execution time: 0.959 ms, Average time per hit: 0.1918 ms 


        c += 1 # Hits:2.0, Total execution time: 0.708 ms, Average time per hit: 0.354 ms 


    else:

        if c % 2 == 1: # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


            ans += 1 # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


        c = 1 # Hits:3.0, Total execution time: 0.208 ms, Average time per hit: 0.06933333333333333 ms 


if c % 2 == 1: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    ans += 1

print(ans) # Hits:1.0, Total execution time: 8.709 ms, Average time per hit: 8.709 ms 

",p03607,True
"import sys

from collections import defaultdict



read = sys.stdin.read

readline = sys.stdin.readline

readlines = sys.stdin.readlines

sys.setrecursionlimit(10 ** 9)

INF = 1 << 60

MOD = 1000000007





def main():

    N, *A = list(map(int, read().split()))



    d = defaultdict(bool)

    for a in A:

        if d[a]:

            d[a] = False

        else:

            d[a] = True



    ans = sum(1 for f in list(d.values()) if f)

    

    print(ans)

    return





if __name__ == '__main__':

    main()
",,p03607,False
"a=int(eval(input())) # Hits:1.0, Total execution time: 39.334 ms, Average time per hit: 39.334 ms 


ans=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,a+1,1): # Hits:10000001.0, Total execution time: 857476.762 ms, Average time per hit: 0.08574766762523324 ms 


  x=a//i # Hits:10000000.0, Total execution time: 897401.785 ms, Average time per hit: 0.0897401785 ms 


  ans+=((x**2+x)//2)*i # Hits:10000000.0, Total execution time: 1671784.619 ms, Average time per hit: 0.1671784619 ms 


print(ans) # Hits:1.0, Total execution time: 50.833 ms, Average time per hit: 50.833 ms 
","a=int(eval(input())) # Hits:1.0, Total execution time: 46.25 ms, Average time per hit: 46.25 ms 


b=(a)//2+1 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


ans=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(1,b,1): # Hits:5000001.0, Total execution time: 443434.06 ms, Average time per hit: 0.08868679426264114 ms 


  x=a//i # Hits:5000000.0, Total execution time: 450159.586 ms, Average time per hit: 0.09003191719999999 ms 


  ans+=((x**2+x)//2)*i # Hits:5000000.0, Total execution time: 817262.592 ms, Average time per hit: 0.1634525184 ms 


ans+=(a**2+a+b-b**2)//2 # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


print(ans) # Hits:1.0, Total execution time: 31.625 ms, Average time per hit: 31.625 ms 
",p02624,True
"import math # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 45.75 ms, Average time per hit: 45.75 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(1,N+1): # Hits:10000001.0, Total execution time: 844810.609 ms, Average time per hit: 0.08448105245189476 ms 


  ans += int( i*( (N//i)+1 )*(N//i)/2 ) # Hits:10000000.0, Total execution time: 2278961.17 ms, Average time per hit: 0.227896117 ms 


  

print(ans) # Hits:1.0, Total execution time: 64.292 ms, Average time per hit: 64.292 ms 
","# -*- coding: utf-8 -*-



N = int(eval(input())) # Hits:1.0, Total execution time: 52.25 ms, Average time per hit: 52.25 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(1,N+1): # Hits:10000001.0, Total execution time: 846809.178 ms, Average time per hit: 0.08468090933190907 ms 


  ans += i*( (N//i)+1 )*(N//i)/2 # Hits:10000000.0, Total execution time: 1818725.462 ms, Average time per hit: 0.18187254619999998 ms 


  

print((int(ans))) # Hits:1.0, Total execution time: 56.416 ms, Average time per hit: 56.416 ms 
",p02624,True
"import math # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 41.792 ms, Average time per hit: 41.792 ms 


ans=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 852068.18 ms, Average time per hit: 0.08520680947931905 ms 


	ans+=((math.floor(n/i)*(math.floor(n/i)+1))/2)*i # Hits:10000000.0, Total execution time: 2727633.568 ms, Average time per hit: 0.2727633568 ms 


print((int(ans))) # Hits:1.0, Total execution time: 33.375 ms, Average time per hit: 33.375 ms 
","import math # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 44.166 ms, Average time per hit: 44.166 ms 


ans=0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 906947.383 ms, Average time per hit: 0.09069472923052707 ms 


	x=math.floor(n/i) # Hits:10000000.0, Total execution time: 1291469.885 ms, Average time per hit: 0.1291469885 ms 


	ans+=(x*(x+1)*i)/2 # Hits:10000000.0, Total execution time: 1554983.373 ms, Average time per hit: 0.1554983373 ms 


print((int(ans))) # Hits:1.0, Total execution time: 32.792 ms, Average time per hit: 32.792 ms 
",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 46.667 ms, Average time per hit: 46.667 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, n//2 + 1): # Hits:5000001.0, Total execution time: 426240.87 ms, Average time per hit: 0.08524815695036861 ms 


    ans += i * (n//i) * (n//i + 1) // 2 # Hits:5000000.0, Total execution time: 928375.76 ms, Average time per hit: 0.185675152 ms 




ans += (n + n//2 + 1) * (n - n//2) // 2 # Hits:1.0, Total execution time: 3.958 ms, Average time per hit: 3.958 ms 




print(ans) # Hits:1.0, Total execution time: 50.458 ms, Average time per hit: 50.458 ms 
","def main(): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    n = int(eval(input()))



    ans = 0

    for i in range(1, n//2 + 1):

        ans += i * (n//i) * (n//i + 1) // 2



    ans += (n + n//2 + 1) * (n - n//2) // 2



    print(ans)



main() # Hits:1.0, Total execution time: 858458.042 ms, Average time per hit: 858458.042 ms 
",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 59.042 ms, Average time per hit: 59.042 ms 




result = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,(n + 1)): # Hits:10000001.0, Total execution time: 897604.987 ms, Average time per hit: 0.08976048972395102 ms 


    terms = n // i # Hits:10000000.0, Total execution time: 891694.509 ms, Average time per hit: 0.0891694509 ms 


    result += terms * (terms * i + i) // 2 # Hits:10000000.0, Total execution time: 1657595.774 ms, Average time per hit: 0.16575957740000002 ms 




print(result) # Hits:1.0, Total execution time: 56.125 ms, Average time per hit: 56.125 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 53.959 ms, Average time per hit: 53.959 ms 




result = 0 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(1,(n // 2 + 1)): # Hits:5000001.0, Total execution time: 421264.63 ms, Average time per hit: 0.08425290914941817 ms 


    terms = n // i # Hits:5000000.0, Total execution time: 487647.449 ms, Average time per hit: 0.0975294898 ms 


    result += terms * (terms * i + i) // 2 # Hits:5000000.0, Total execution time: 850609.247 ms, Average time per hit: 0.1701218494 ms 




terms = n - n // 2 # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


result += terms * (n // 2 + 1 + n) // 2 # Hits:1.0, Total execution time: 1.583 ms, Average time per hit: 1.583 ms 




print(result) # Hits:1.0, Total execution time: 33.583 ms, Average time per hit: 33.583 ms 
",p02624,True
"import math # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 41.541 ms, Average time per hit: 41.541 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


SQRT = int(n ** 0.5) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


for m in range(1,int(n ** 0.5) + 1): # Hits:3163.0, Total execution time: 269.819 ms, Average time per hit: 0.08530477394878279 ms 


    ans += m * (m + int(n/m)) * (int(n/m) + 1 - m) # Hits:3162.0, Total execution time: 957.55 ms, Average time per hit: 0.30283048703352305 ms 


ans -= SQRT * (SQRT+1) * (2*SQRT+1) // 6 # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


print(ans) # Hits:1.0, Total execution time: 6.459 ms, Average time per hit: 6.459 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 41.334 ms, Average time per hit: 41.334 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


SQRT = int(n ** 0.5) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


for m in range(1,SQRT + 1): # Hits:3163.0, Total execution time: 261.784 ms, Average time per hit: 0.08276446411634523 ms 


    b = int(n/m) # Hits:3162.0, Total execution time: 397.92 ms, Average time per hit: 0.12584440227703986 ms 


    ans += m * (m + b) * (b + 1 - m) # Hits:3162.0, Total execution time: 557.21 ms, Average time per hit: 0.17622074636306134 ms 


ans -= SQRT * (SQRT+1) * (2*SQRT+1) // 6 # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


print(ans) # Hits:1.0, Total execution time: 6.292 ms, Average time per hit: 6.292 ms 
",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 44.167 ms, Average time per hit: 44.167 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for x in range(1,n+1): # Hits:10000001.0, Total execution time: 851186.762 ms, Average time per hit: 0.08511866768813323 ms 


    y = int(n/x) # Hits:10000000.0, Total execution time: 1296751.415 ms, Average time per hit: 0.1296751415 ms 


    ans += y*(y+1)*x//2 # Hits:10000000.0, Total execution time: 1646213.998 ms, Average time per hit: 0.1646213998 ms 




print(ans) # Hits:1.0, Total execution time: 110.917 ms, Average time per hit: 110.917 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 35.958 ms, Average time per hit: 35.958 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for x in range(1,n+1,1): # Hits:10000001.0, Total execution time: 846407.564 ms, Average time per hit: 0.0846407479359252 ms 


    y = int(n/x) # Hits:10000000.0, Total execution time: 1290690.708 ms, Average time per hit: 0.1290690708 ms 


    ans += y*(y+1)*x/2 # Hits:10000000.0, Total execution time: 1592004.98 ms, Average time per hit: 0.15920049800000002 ms 




print((int(ans))) # Hits:1.0, Total execution time: 106.917 ms, Average time per hit: 106.917 ms 
",p02624,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 47.167 ms, Average time per hit: 47.167 ms 


ans=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 889543.595 ms, Average time per hit: 0.08895435060456494 ms 


    m=n//i*i # Hits:10000000.0, Total execution time: 1130551.513 ms, Average time per hit: 0.1130551513 ms 


    k=n//i # Hits:10000000.0, Total execution time: 961871.329 ms, Average time per hit: 0.0961871329 ms 


    ans+=(k*(i+m)//2) # Hits:10000000.0, Total execution time: 1478688.335 ms, Average time per hit: 0.1478688335 ms 


print(ans) # Hits:1.0, Total execution time: 50.125 ms, Average time per hit: 50.125 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 45.833 ms, Average time per hit: 45.833 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 847966.027 ms, Average time per hit: 0.08479659422034058 ms 


    #m=n//i*i

    #k=n//i

    ans+=((n//i)*(i+(n//i*i))//2) # Hits:10000000.0, Total execution time: 1895651.743 ms, Average time per hit: 0.1895651743 ms 


    #ans+=(k*(i+m)//2)

print(ans) # Hits:1.0, Total execution time: 58.25 ms, Average time per hit: 58.25 ms 
",p02624,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 55.167 ms, Average time per hit: 55.167 ms 


def f(x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  tmp=(n//x)*(n//x+1)//2

  return x*tmp



ans=sum(map(f,list(range(1,n+1)))) # Hits:1.0, Total execution time: 1883016.959 ms, Average time per hit: 1883016.959 ms 


print(ans) # Hits:1.0, Total execution time: 43.167 ms, Average time per hit: 43.167 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 46.625 ms, Average time per hit: 46.625 ms 


print((sum([n//x*(n//x+1)//2*x for x in range(1,n+1)]))) # Hits:1.0, Total execution time: 1354708.126 ms, Average time per hit: 1354708.126 ms 
",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 50.583 ms, Average time per hit: 50.583 ms 




ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(1, n + 1): # Hits:10000001.0, Total execution time: 907789.713 ms, Average time per hit: 0.09077896222210377 ms 


    if i == 1: # Hits:10000000.0, Total execution time: 880679.352 ms, Average time per hit: 0.08806793519999999 ms 


        ans += sum(range(1,n + 1)) # Hits:1.0, Total execution time: 58851.875 ms, Average time per hit: 58851.875 ms 


    else:

        t = n//i # Hits:9999999.0, Total execution time: 893882.259 ms, Average time per hit: 0.08938823483882348 ms 


        ans += 0.5 * i * t * ( t + 1) # Hits:9999999.0, Total execution time: 1634986.734 ms, Average time per hit: 0.16349868974986898 ms 




print((int(ans))) # Hits:1.0, Total execution time: 34.375 ms, Average time per hit: 34.375 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 47.958 ms, Average time per hit: 47.958 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(1, n + 1): # Hits:10000001.0, Total execution time: 893501.954 ms, Average time per hit: 0.08935018646498134 ms 


    t = n//i # Hits:10000000.0, Total execution time: 898203.219 ms, Average time per hit: 0.0898203219 ms 


    ans += 0.5 * i * t * ( t + 1) # Hits:10000000.0, Total execution time: 1687021.333 ms, Average time per hit: 0.1687021333 ms 




print((int(ans))) # Hits:1.0, Total execution time: 68.792 ms, Average time per hit: 68.792 ms 
",p02624,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 44.334 ms, Average time per hit: 44.334 ms 


s=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range (1,n+1): # Hits:10000001.0, Total execution time: 841039.154 ms, Average time per hit: 0.0841039069896093 ms 


    a=n//i # Hits:10000000.0, Total execution time: 885221.349 ms, Average time per hit: 0.0885221349 ms 


    z=a*(a+1)*i//2 # Hits:10000000.0, Total execution time: 1353716.143 ms, Average time per hit: 0.1353716143 ms 


    s+=z # Hits:10000000.0, Total execution time: 1094989.058 ms, Average time per hit: 0.1094989058 ms 


print(s) # Hits:1.0, Total execution time: 41.792 ms, Average time per hit: 41.792 ms 

","n=int(eval(input())) # Hits:1.0, Total execution time: 44.458 ms, Average time per hit: 44.458 ms 


s=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range (1,n+1): # Hits:10000001.0, Total execution time: 844572.172 ms, Average time per hit: 0.08445720875427912 ms 


    a=n//i # Hits:10000000.0, Total execution time: 895168.536 ms, Average time per hit: 0.0895168536 ms 


    s+=a*(a+1)*i//2 # Hits:10000000.0, Total execution time: 1572084.588 ms, Average time per hit: 0.15720845879999998 ms 


print(s) # Hits:1.0, Total execution time: 59.625 ms, Average time per hit: 59.625 ms 
",p02624,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 57.042 ms, Average time per hit: 57.042 ms 


s=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range (1,n+1): # Hits:10000001.0, Total execution time: 895748.557 ms, Average time per hit: 0.08957484674251531 ms 


    a=n//i # Hits:10000000.0, Total execution time: 896193.516 ms, Average time per hit: 0.08961935160000001 ms 


    s+=(a*a+a)*i//2 # Hits:10000000.0, Total execution time: 1587096.018 ms, Average time per hit: 0.1587096018 ms 


print(s) # Hits:1.0, Total execution time: 77.291 ms, Average time per hit: 77.291 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 46.292 ms, Average time per hit: 46.292 ms 


s=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range (1,n+1): # Hits:10000001.0, Total execution time: 841354.618 ms, Average time per hit: 0.08413545338645466 ms 


    a=n//i # Hits:10000000.0, Total execution time: 885721.403 ms, Average time per hit: 0.0885721403 ms 


    s+=(a*a+a)*i # Hits:10000000.0, Total execution time: 1500215.357 ms, Average time per hit: 0.15002153569999999 ms 


print((s//2)) # Hits:1.0, Total execution time: 69.375 ms, Average time per hit: 69.375 ms 
",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 44.125 ms, Average time per hit: 44.125 ms 




t = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range (1,N+1): # Hits:10000001.0, Total execution time: 890251.713 ms, Average time per hit: 0.08902516239748376 ms 


  p = N//i # Hits:10000000.0, Total execution time: 973451.604 ms, Average time per hit: 0.09734516039999999 ms 


  s = int(i*p*(1+p)/2) # Hits:10000000.0, Total execution time: 1812303.548 ms, Average time per hit: 0.1812303548 ms 


  t = t+s # Hits:10000000.0, Total execution time: 1050363.26 ms, Average time per hit: 0.105036326 ms 




print(t) # Hits:1.0, Total execution time: 59.334 ms, Average time per hit: 59.334 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 49.875 ms, Average time per hit: 49.875 ms 




t = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range (1,N+1): # Hits:10000001.0, Total execution time: 846403.942 ms, Average time per hit: 0.08464038573596143 ms 


  p = N//i # Hits:10000000.0, Total execution time: 972217.636 ms, Average time per hit: 0.0972217636 ms 


  t += i*p*(1+p)/2 # Hits:10000000.0, Total execution time: 1567847.855 ms, Average time per hit: 0.1567847855 ms 


  



print((int(t))) # Hits:1.0, Total execution time: 40.834 ms, Average time per hit: 40.834 ms 
",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 42.583 ms, Average time per hit: 42.583 ms 


def func(n): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    return int(((n+1)*n)/2)

a = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(1, n+1): # Hits:10000001.0, Total execution time: 887838.817 ms, Average time per hit: 0.08878387282161272 ms 


    a += i * func(n // i) # Hits:10000000.0, Total execution time: 3159571.652 ms, Average time per hit: 0.3159571652 ms 


print(a) # Hits:1.0, Total execution time: 70.792 ms, Average time per hit: 70.792 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 54.208 ms, Average time per hit: 54.208 ms 


a = n * (n+1) // 2 # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


for i in range(2, n+1): # Hits:10000000.0, Total execution time: 899351.899 ms, Average time per hit: 0.0899351899 ms 


  c = n // i # Hits:9999999.0, Total execution time: 902495.036 ms, Average time per hit: 0.09024951262495126 ms 


  a += i * (c * (c+1) // 2) # Hits:9999999.0, Total execution time: 1557971.006 ms, Average time per hit: 0.15579711617971162 ms 


print(a) # Hits:1.0, Total execution time: 48.75 ms, Average time per hit: 48.75 ms 
",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 50.292 ms, Average time per hit: 50.292 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for x in range(1, n+1): # Hits:10000001.0, Total execution time: 892979.699 ms, Average time per hit: 0.0892979609702039 ms 


  k = n//x # Hits:10000000.0, Total execution time: 893088.377 ms, Average time per hit: 0.0893088377 ms 


  ans += k*(2*x + (k-1)*x)//2 # Hits:10000000.0, Total execution time: 1919586.176 ms, Average time per hit: 0.1919586176 ms 


  

print(ans) # Hits:1.0, Total execution time: 32.334 ms, Average time per hit: 32.334 ms 

","n=int(eval(input())) # Hits:1.0, Total execution time: 48.959 ms, Average time per hit: 48.959 ms 


ans=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 845541.383 ms, Average time per hit: 0.084554129844587 ms 


  k=n//i # Hits:10000000.0, Total execution time: 891218.346 ms, Average time per hit: 0.0891218346 ms 


  ans+=i*(k*(k+1)//2) # Hits:10000000.0, Total execution time: 1585786.417 ms, Average time per hit: 0.1585786417 ms 


print(ans) # Hits:1.0, Total execution time: 76.375 ms, Average time per hit: 76.375 ms 

",p02624,True
"#!/usr/bin/env python3



n = int(eval(input())) # Hits:1.0, Total execution time: 44.625 ms, Average time per hit: 44.625 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, n+1): # Hits:10000001.0, Total execution time: 932578.686 ms, Average time per hit: 0.09325785927421407 ms 


    num = n//i # Hits:10000000.0, Total execution time: 965459.481 ms, Average time per hit: 0.0965459481 ms 


    ans += (i+i*num)*num//2 # Hits:10000000.0, Total execution time: 1637791.993 ms, Average time per hit: 0.16377919929999998 ms 




print(ans) # Hits:1.0, Total execution time: 92.417 ms, Average time per hit: 92.417 ms 

","#!/usr/bin/env python3



n = int(eval(input())) # Hits:1.0, Total execution time: 55.125 ms, Average time per hit: 55.125 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, n+1): # Hits:10000001.0, Total execution time: 883420.558 ms, Average time per hit: 0.0883420469657953 ms 


    num = n//i # Hits:10000000.0, Total execution time: 892055.704 ms, Average time per hit: 0.0892055704 ms 


    ans += (1+num)*i*num//2 # Hits:10000000.0, Total execution time: 1645847.34 ms, Average time per hit: 0.164584734 ms 




print(ans) # Hits:1.0, Total execution time: 40.5 ms, Average time per hit: 40.5 ms 

",p02624,True
"def main():

    n = int(eval(input()))

    ans = 0

    for i in range(1, n+1):

        # y = n // i

        # y = (y+1)*y*i//2

        ans += ((n//i)+1) * (n//i) * i // 2

    print(ans)

    

if __name__ == '__main__':

    main()",,p02624,False
"n=int(eval(input())) # Hits:1.0, Total execution time: 64.167 ms, Average time per hit: 64.167 ms 


d=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(1,n+1): # Hits:9288665.0, Total execution time: 764481.215 ms, Average time per hit: 0.08230259299910159 ms 




    a=i # Hits:9288665.0, Total execution time: 707290.08 ms, Average time per hit: 0.07614550422477288 ms 


    b=(n//i)*i # Hits:9288665.0, Total execution time: 1025084.617 ms, Average time per hit: 0.11035865939830966 ms 


    c=b//i -a//i+1 # Hits:9288665.0, Total execution time: 1267446.586 ms, Average time per hit: 0.13645088782941361 ms 


    d+=(c*(a+b))//2 # Hits:9288665.0, Total execution time: 1415035.756 ms, Average time per hit: 0.15234005704802572 ms 




    



print(d) # Hits:1.0, Total execution time: 5.583 ms, Average time per hit: 5.583 ms 

","n=int(eval(input())) # Hits:1.0, Total execution time: 48.875 ms, Average time per hit: 48.875 ms 


#n=10000000

ksum=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for k in range(1,n+1): # Hits:10000001.0, Total execution time: 844433.603 ms, Average time per hit: 0.08444335185566482 ms 


    m=n//k # Hits:10000000.0, Total execution time: 893077.376 ms, Average time per hit: 0.08930773759999999 ms 


    ksum+=k*m*(m+1)//2 # Hits:10000000.0, Total execution time: 1655348.648 ms, Average time per hit: 0.16553486480000001 ms 


    

print(ksum) # Hits:1.0, Total execution time: 60.834 ms, Average time per hit: 60.834 ms 
",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 52.875 ms, Average time per hit: 52.875 ms 


su = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,n+1): # Hits:9638010.0, Total execution time: 793108.763 ms, Average time per hit: 0.08228968044233197 ms 


  a = i # Hits:9638010.0, Total execution time: 775259.421 ms, Average time per hit: 0.08043770664276131 ms 


  l = (n//i)*i # Hits:9638010.0, Total execution time: 1090416.32 ms, Average time per hit: 0.11313708120244739 ms 


  m = (n//i)/2 # Hits:9638010.0, Total execution time: 1076855.335 ms, Average time per hit: 0.11173004956417351 ms 


  su += m*(a+l) # Hits:9638010.0, Total execution time: 1257967.466 ms, Average time per hit: 0.13052149416736444 ms 


print((int(su))) # Hits:1.0, Total execution time: 7.583 ms, Average time per hit: 7.583 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 46.417 ms, Average time per hit: 46.417 ms 


su = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,n+1): # Hits:9825719.0, Total execution time: 830782.649 ms, Average time per hit: 0.08455184287277093 ms 


  t = n//i # Hits:9825719.0, Total execution time: 878589.945 ms, Average time per hit: 0.08941736935485332 ms 


  l = t*i # Hits:9825719.0, Total execution time: 947762.036 ms, Average time per hit: 0.09645727055699437 ms 


  m = t/2 # Hits:9825719.0, Total execution time: 954368.639 ms, Average time per hit: 0.0971296491381445 ms 


  su += m*(i+l) # Hits:9825719.0, Total execution time: 1283386.115 ms, Average time per hit: 0.13061498247609157 ms 


print((int(su))) # Hits:1.0, Total execution time: 6.75 ms, Average time per hit: 6.75 ms 

",p02624,True
"import math # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 48.708 ms, Average time per hit: 48.708 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for j in range(1,n+1): # Hits:10000001.0, Total execution time: 884441.994 ms, Average time per hit: 0.08844419055558095 ms 


    y = math.floor(n/j) # Hits:10000000.0, Total execution time: 1286430.112 ms, Average time per hit: 0.1286430112 ms 


    ans += y*(y+1)*j/2 # Hits:10000000.0, Total execution time: 1546943.81 ms, Average time per hit: 0.154694381 ms 




print((int(ans))) # Hits:1.0, Total execution time: 52.875 ms, Average time per hit: 52.875 ms 

","import math # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 43.583 ms, Average time per hit: 43.583 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for j in range(1,n+1): # Hits:10000001.0, Total execution time: 848128.165 ms, Average time per hit: 0.0848128080187192 ms 


    y = n//j # Hits:10000000.0, Total execution time: 892873.112 ms, Average time per hit: 0.08928731120000001 ms 


    ans += y*(y+1)*j/2 # Hits:10000000.0, Total execution time: 1595300.756 ms, Average time per hit: 0.15953007560000002 ms 




print((int(ans))) # Hits:1.0, Total execution time: 33.25 ms, Average time per hit: 33.25 ms 

",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 41.667 ms, Average time per hit: 41.667 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(1, n+1): # Hits:9531812.0, Total execution time: 835538.876 ms, Average time per hit: 0.08765792653065335 ms 


    a1 = i # Hits:9531812.0, Total execution time: 715135.68 ms, Average time per hit: 0.07502620488108662 ms 


    d = i # Hits:9531812.0, Total execution time: 728787.594 ms, Average time per hit: 0.0764584523907941 ms 


    nn = n // i # Hits:9531812.0, Total execution time: 862981.68 ms, Average time per hit: 0.09053700177888527 ms 


    ans += (nn * (2*a1 + (nn-1)*d)) // 2 # Hits:9531812.0, Total execution time: 1874287.331 ms, Average time per hit: 0.1966349452758825 ms 


    # print(i,ans,a1,nn,d)



print(ans) # Hits:1.0, Total execution time: 6.833 ms, Average time per hit: 6.833 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 46.084 ms, Average time per hit: 46.084 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1, n+1): # Hits:10000001.0, Total execution time: 847072.065 ms, Average time per hit: 0.08470719802928019 ms 


    m = n//i # Hits:10000000.0, Total execution time: 943091.12 ms, Average time per hit: 0.094309112 ms 


    ans += (2*i*m + (m-1)*i*m) // 2 # Hits:10000000.0, Total execution time: 2092226.542 ms, Average time per hit: 0.2092226542 ms 


print(ans) # Hits:1.0, Total execution time: 71.125 ms, Average time per hit: 71.125 ms 
",p02624,True
"#!python3



import sys

iim = lambda: list(map(int, sys.stdin.readline().rstrip().split()))



def resolve():

    N = int(eval(input()))



    ans = 0

    for i in range(1, N+1):

        j = N // i

        ans +=  i * j * (1+ j) // 2

    print(ans)



if __name__ == ""__main__"":

    resolve()
",,p02624,False
"def solve(n): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    ans=0

    for d in range(1,n+1):

        c=n//d

        ans+=(c+1)*c//2*d

    return ans



n=int(eval(input())) # Hits:1.0, Total execution time: 43.25 ms, Average time per hit: 43.25 ms 


print((solve(n))) # Hits:1.0, Total execution time: 1862921.834 ms, Average time per hit: 1862921.834 ms 

","# O(sqrt(N))solution



def solve(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ans = 0

    r = n

    for c in range(1, n + 1):

        l = n // (c + 1)

        if r - l == 1: break

        ans += (l + 1 + r) * (r - l) // 2 * c * (c + 1) // 2

        r = l

    for d in range(1, r + 1):

        c = n // d

        ans += (c + 1) * c // 2 * d

    return ans



n=int(eval(input())) # Hits:1.0, Total execution time: 46.083 ms, Average time per hit: 46.083 ms 


print((solve(n))) # Hits:1.0, Total execution time: 1785.25 ms, Average time per hit: 1785.25 ms 

",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 40.5 ms, Average time per hit: 40.5 ms 




sum = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 




for j in range(1,N+1): # Hits:10000001.0, Total execution time: 846895.38 ms, Average time per hit: 0.08468952953104704 ms 


    k = int(N/j) # Hits:10000000.0, Total execution time: 1314095.67 ms, Average time per hit: 0.131409567 ms 


    sum += int((1+k)*k/2*j) # Hits:10000000.0, Total execution time: 2085885.576 ms, Average time per hit: 0.2085885576 ms 




print(sum) # Hits:1.0, Total execution time: 59.917 ms, Average time per hit: 59.917 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 48.375 ms, Average time per hit: 48.375 ms 




sum = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for j in range(1,N+1): # Hits:10000001.0, Total execution time: 844870.489 ms, Average time per hit: 0.08448704045129596 ms 


    k = N//j # Hits:10000000.0, Total execution time: 888654.15 ms, Average time per hit: 0.088865415 ms 


    sum += (1+k)*k*j//2 # Hits:10000000.0, Total execution time: 1612173.454 ms, Average time per hit: 0.1612173454 ms 


print(sum) # Hits:1.0, Total execution time: 41.792 ms, Average time per hit: 41.792 ms 
",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 50.292 ms, Average time per hit: 50.292 ms 


 

sum = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for n in range(1,N+1): # Hits:10000001.0, Total execution time: 848209.683 ms, Average time per hit: 0.08482095981790401 ms 


    num = int(N/n) # Hits:10000000.0, Total execution time: 1392260.521 ms, Average time per hit: 0.1392260521 ms 


    s = int(((1+num)*num)/2) # Hits:10000000.0, Total execution time: 1625310.135 ms, Average time per hit: 0.1625310135 ms 


    sum += n*s # Hits:10000000.0, Total execution time: 1208488.816 ms, Average time per hit: 0.1208488816 ms 


print(sum) # Hits:1.0, Total execution time: 28.0 ms, Average time per hit: 28.0 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 45.125 ms, Average time per hit: 45.125 ms 


 

sum = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for n in range(1,N+1): # Hits:10000001.0, Total execution time: 925377.661 ms, Average time per hit: 0.09253775684622431 ms 


    num = N//n # Hits:10000000.0, Total execution time: 933740.137 ms, Average time per hit: 0.09337401370000001 ms 


    s = ((1+num)*num)//2 # Hits:10000000.0, Total execution time: 1152048.574 ms, Average time per hit: 0.1152048574 ms 


    sum += n*s # Hits:10000000.0, Total execution time: 1161836.003 ms, Average time per hit: 0.1161836003 ms 


print(sum) # Hits:1.0, Total execution time: 38.959 ms, Average time per hit: 38.959 ms 
",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 56.0 ms, Average time per hit: 56.0 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, N + 1): # Hits:10000001.0, Total execution time: 843707.124 ms, Average time per hit: 0.08437070396292962 ms 


    a = i * (N // i) * (N // i + 1) / 2 # Hits:10000000.0, Total execution time: 1629455.425 ms, Average time per hit: 0.16294554249999998 ms 


    ans += round(a) # Hits:10000000.0, Total execution time: 1553864.253 ms, Average time per hit: 0.15538642530000002 ms 


print(ans) # Hits:1.0, Total execution time: 47.834 ms, Average time per hit: 47.834 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 51.25 ms, Average time per hit: 51.25 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(1, N + 1): # Hits:10000001.0, Total execution time: 847221.534 ms, Average time per hit: 0.0847221449277855 ms 


    b = N // i # Hits:10000000.0, Total execution time: 891664.753 ms, Average time per hit: 0.0891664753 ms 


    ans += i * b * (b + 1) // 2 # Hits:10000000.0, Total execution time: 1650426.23 ms, Average time per hit: 0.165042623 ms 


print(ans) # Hits:1.0, Total execution time: 48.041 ms, Average time per hit: 48.041 ms 
",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 52.625 ms, Average time per hit: 52.625 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, n + 1): # Hits:10000001.0, Total execution time: 855194.072 ms, Average time per hit: 0.08551939864806013 ms 


    k = n // i # Hits:10000000.0, Total execution time: 894719.526 ms, Average time per hit: 0.08947195259999999 ms 


    ans += k * (i + i * k) // 2 # Hits:10000000.0, Total execution time: 1645003.478 ms, Average time per hit: 0.16450034779999997 ms 


print(ans) # Hits:1.0, Total execution time: 54.042 ms, Average time per hit: 54.042 ms 

","from functools import reduce # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 50.417 ms, Average time per hit: 50.417 ms 


def f(x, y): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    k = n // y

    return x + k * (y + y * k) // 2



ans = reduce(f, list(range(n + 1))) # Hits:1.0, Total execution time: 2022440.084 ms, Average time per hit: 2022440.084 ms 


print(ans) # Hits:1.0, Total execution time: 31.833 ms, Average time per hit: 31.833 ms 

",p02624,True
"# Problem D - Sum of Divisors



# input

N = int(eval(input())) # Hits:1.0, Total execution time: 41.833 ms, Average time per hit: 41.833 ms 




# initialization

ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




# count

for j in range(1, N+1): # Hits:10000001.0, Total execution time: 847180.277 ms, Average time per hit: 0.08471801922819808 ms 


    Y = N // j # Hits:10000000.0, Total execution time: 892795.048 ms, Average time per hit: 0.08927950479999999 ms 


    ans += ((Y * (Y + 1))*j) // 2 # Hits:10000000.0, Total execution time: 1630459.183 ms, Average time per hit: 0.1630459183 ms 




# output

print(ans) # Hits:1.0, Total execution time: 65.167 ms, Average time per hit: 65.167 ms 

","# Problem D - Sum of Divisors



# input

N = int(eval(input())) # Hits:1.0, Total execution time: 46.875 ms, Average time per hit: 46.875 ms 




# initialization

count = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




# count

for j in range(1, N+1): # Hits:10000001.0, Total execution time: 847473.881 ms, Average time per hit: 0.08474737962526205 ms 


    M = N // j # Hits:10000000.0, Total execution time: 888154.925 ms, Average time per hit: 0.08881549250000001 ms 


    count += j * ((M * (M+1)) // 2) # Hits:10000000.0, Total execution time: 1538336.486 ms, Average time per hit: 0.1538336486 ms 




# output

print(count) # Hits:1.0, Total execution time: 45.75 ms, Average time per hit: 45.75 ms 

",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 49.917 ms, Average time per hit: 49.917 ms 




r = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(N): # Hits:10000001.0, Total execution time: 850796.049 ms, Average time per hit: 0.08507959639204035 ms 


    m = i + 1 # Hits:10000000.0, Total execution time: 1002583.929 ms, Average time per hit: 0.1002583929 ms 


    j = int(N/(m)) # Hits:10000000.0, Total execution time: 1351488.703 ms, Average time per hit: 0.1351488703 ms 


    r = r + int(m*j*(1+j)/2) # Hits:10000000.0, Total execution time: 2080643.436 ms, Average time per hit: 0.2080643436 ms 




print(r)     # Hits:1.0, Total execution time: 41.625 ms, Average time per hit: 41.625 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 55.083 ms, Average time per hit: 55.083 ms 


M = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


r = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


if N>1000000: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    M = N # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 






for i in range(min(N,1000000)): # Hits:1000001.0, Total execution time: 86914.172 ms, Average time per hit: 0.08691408508591492 ms 


    m = i + 1 # Hits:1000000.0, Total execution time: 93393.448 ms, Average time per hit: 0.093393448 ms 


    j = int(N/(m)) # Hits:1000000.0, Total execution time: 132369.625 ms, Average time per hit: 0.13236962500000002 ms 


    r = r + int(m*j*(1+j)/2) # Hits:1000000.0, Total execution time: 199041.633 ms, Average time per hit: 0.199041633 ms 




if M!=0: # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 


    for i in range(10): # Hits:11.0, Total execution time: 2.961 ms, Average time per hit: 0.2691818181818182 ms 


        k = int(M/(i+1)) # Hits:10.0, Total execution time: 1.542 ms, Average time per hit: 0.15419999999999998 ms 


        if k > 1000000: # Hits:10.0, Total execution time: 1.165 ms, Average time per hit: 0.1165 ms 


            r = r + (i+1)*int((k-1000000)*(k+1000001)/2) # Hits:9.0, Total execution time: 3.749 ms, Average time per hit: 0.41655555555555557 ms 




print(r)  # Hits:1.0, Total execution time: 24.042 ms, Average time per hit: 24.042 ms 
",p02624,True
"N=int(eval(input())) # Hits:1.0, Total execution time: 42.959 ms, Average time per hit: 42.959 ms 


print((sum([((N//i)*(N//i+1)//2)*i for i in range(1,N+1)]))) # Hits:1.0, Total execution time: 1367761.542 ms, Average time per hit: 1367761.542 ms 



","print((list([sum([((N//i)*(N//i+1)//2)*i for i in range(1,N+1)]) for N in [int(eval(input()))]])[0])) # Hits:1.0, Total execution time: 1426086.292 ms, Average time per hit: 1426086.292 ms 

",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 43.792 ms, Average time per hit: 43.792 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1, n + 1): # Hits:10000001.0, Total execution time: 848759.758 ms, Average time per hit: 0.08487596731240328 ms 


    ans += (n // i) * (i + n // i * i) // 2 # Hits:10000000.0, Total execution time: 1887281.381 ms, Average time per hit: 0.1887281381 ms 


print(ans) # Hits:1.0, Total execution time: 72.5 ms, Average time per hit: 72.5 ms 

","n = int(eval(input())) # Hits:1.0, Total execution time: 61.417 ms, Average time per hit: 61.417 ms 


print((sum([(n // i) * (i + n // i * i) // 2 for i in range(1, n + 1)]))) # Hits:1.0, Total execution time: 1444653.292 ms, Average time per hit: 1444653.292 ms 
",p02624,True
"N=int(eval(input())) # Hits:1.0, Total execution time: 44.959 ms, Average time per hit: 44.959 ms 


ans=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,N+1): # Hits:10000001.0, Total execution time: 845638.239 ms, Average time per hit: 0.08456381544361845 ms 


  Y=int(N//i) # Hits:10000000.0, Total execution time: 1250401.217 ms, Average time per hit: 0.1250401217 ms 


  ans+=int(Y*(Y+1)*i/2) # Hits:10000000.0, Total execution time: 1979773.982 ms, Average time per hit: 0.19797739820000002 ms 


print(ans) # Hits:1.0, Total execution time: 42.041 ms, Average time per hit: 42.041 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 57.0 ms, Average time per hit: 57.0 ms 


ans=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,N+1): # Hits:10000001.0, Total execution time: 847725.146 ms, Average time per hit: 0.08477250612274939 ms 


  Y=N//i # Hits:10000000.0, Total execution time: 893348.059 ms, Average time per hit: 0.08933480590000001 ms 


  ans+=Y*(Y+1)*i//2 # Hits:10000000.0, Total execution time: 1577196.706 ms, Average time per hit: 0.1577196706 ms 


print((int(ans))) # Hits:1.0, Total execution time: 35.0 ms, Average time per hit: 35.0 ms 
",p02624,True
"# -*- coding: utf-8 -*-

# 標準入力を取得

N = int(eval(input())) # Hits:1.0, Total execution time: 48.958 ms, Average time per hit: 48.958 ms 




def g(N: int) -> int: # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    return int(N * (N + 1) / 2)



# 求解処理

ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for n in range(1, N + 1): # Hits:10000001.0, Total execution time: 842624.836 ms, Average time per hit: 0.08426247517375247 ms 


    ans += n * g(N // n) # Hits:10000000.0, Total execution time: 3206080.851 ms, Average time per hit: 0.3206080851 ms 


            

# 結果出力

print(ans) # Hits:1.0, Total execution time: 39.458 ms, Average time per hit: 39.458 ms 
",,p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 56.209 ms, Average time per hit: 56.209 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for a in range(1,n+1): # Hits:10000001.0, Total execution time: 893506.875 ms, Average time per hit: 0.08935067856493215 ms 


    y = n//a # Hits:10000000.0, Total execution time: 936878.95 ms, Average time per hit: 0.093687895 ms 


    ans+=int((y*(y+1)*a)/2) # Hits:10000000.0, Total execution time: 2024541.897 ms, Average time per hit: 0.2024541897 ms 


print(ans) # Hits:1.0, Total execution time: 66.5 ms, Average time per hit: 66.5 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 58.0 ms, Average time per hit: 58.0 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for a in range(1,n+1): # Hits:10000001.0, Total execution time: 844789.188 ms, Average time per hit: 0.08447891035210897 ms 


    y = n//a # Hits:10000000.0, Total execution time: 891776.01 ms, Average time per hit: 0.089177601 ms 


    ans+=(y*(y+1)*a)//2 # Hits:10000000.0, Total execution time: 1583719.215 ms, Average time per hit: 0.1583719215 ms 


print(ans) # Hits:1.0, Total execution time: 25.333 ms, Average time per hit: 25.333 ms 
",p02624,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 32.667 ms, Average time per hit: 32.667 ms 


t=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


k=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 892298.791 ms, Average time per hit: 0.08922987017701299 ms 


   k=n//i # Hits:10000000.0, Total execution time: 890440.132 ms, Average time per hit: 0.0890440132 ms 


   t+=i*k*(k+1)//2 # Hits:10000000.0, Total execution time: 1654655.209 ms, Average time per hit: 0.1654655209 ms 




print(t) # Hits:1.0, Total execution time: 30.791 ms, Average time per hit: 30.791 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 44.083 ms, Average time per hit: 44.083 ms 


 

s=k=kn=0;n=N # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while k<n: # Hits:3163.0, Total execution time: 302.136 ms, Average time per hit: 0.09552197281062283 ms 


	k += 1 # Hits:3162.0, Total execution time: 284.914 ms, Average time per hit: 0.0901056293485136 ms 


	n = N//k # Hits:3162.0, Total execution time: 318.866 ms, Average time per hit: 0.10084313725490196 ms 


	kn = k*n*(n+1) # Hits:3162.0, Total execution time: 398.766 ms, Average time per hit: 0.12611195445920304 ms 


	s += 4*kn # Hits:3162.0, Total execution time: 401.699 ms, Average time per hit: 0.12703953194180898 ms 


s -= (k+1)*kn # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


if n<k: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


	s -= 2*kn 

print((s//4)) # Hits:1.0, Total execution time: 7.375 ms, Average time per hit: 7.375 ms 
",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 41.0 ms, Average time per hit: 41.0 ms 


s = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, n+1): # Hits:10000001.0, Total execution time: 896955.758 ms, Average time per hit: 0.08969556683044332 ms 


	x = n // i # Hits:10000000.0, Total execution time: 889446.571 ms, Average time per hit: 0.0889446571 ms 


	s += i * (x * (x+1)) / 2  # Hits:10000000.0, Total execution time: 1549295.107 ms, Average time per hit: 0.1549295107 ms 


print((int(s))) # Hits:1.0, Total execution time: 42.791 ms, Average time per hit: 42.791 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 52.542 ms, Average time per hit: 52.542 ms 




s = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


q = int(n ** .5) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


for i in range(1, q+1): # Hits:3163.0, Total execution time: 276.279 ms, Average time per hit: 0.08734713879228581 ms 


	x = n // i # Hits:3162.0, Total execution time: 307.148 ms, Average time per hit: 0.09713725490196079 ms 


	s += i * (x * (x+1)) / 2 # Hits:3162.0, Total execution time: 555.694 ms, Average time per hit: 0.17574130297280202 ms 


	if x**2 != n: # Hits:3162.0, Total execution time: 331.974 ms, Average time per hit: 0.10498861480075901 ms 


		y = max(n // (i+1), q) # Hits:3162.0, Total execution time: 561.133 ms, Average time per hit: 0.17746141682479444 ms 


		s += (i * (i+1) // 2) * ((x * (x+1) // 2) - (y * (y+1) // 2)) # Hits:3162.0, Total execution time: 982.251 ms, Average time per hit: 0.3106423149905123 ms 




print((int(s))) # Hits:1.0, Total execution time: 8.875 ms, Average time per hit: 8.875 ms 
",p02624,True
"def main(): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    n = int(eval(input()))



    ans = 0

    l = n

    i = 1

    while l > 0:

        k = i*(i+1)//2

        l_n = n//(i+1)

        ans += k*(l*(l+1)//2-l_n*(l_n+1)//2)

        l = l_n

        i+=1

    

    print(ans)

main() # Hits:1.0, Total execution time: 4353666.793 ms, Average time per hit: 4353666.793 ms 
","def main2(): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    n = int(eval(input()))

    ans = 0



    for i in range(1,n+1):

        k = n//i

        ans+= i*(k*(k+1)//2)

    

    print(ans)

main2() # Hits:1.0, Total execution time: 1965598.376 ms, Average time per hit: 1965598.376 ms 
",p02624,True
"N=int(eval(input())) # Hits:1.0, Total execution time: 52.958 ms, Average time per hit: 52.958 ms 


sum=0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for j in range(1,N+1): # Hits:10000001.0, Total execution time: 886199.621 ms, Average time per hit: 0.08861995323800469 ms 


    sum+=int(((N//j)*(N//j+1)/2)*j) # Hits:10000000.0, Total execution time: 2397733.193 ms, Average time per hit: 0.2397733193 ms 


print(sum) # Hits:1.0, Total execution time: 171.5 ms, Average time per hit: 171.5 ms 

","N=int(eval(input())) # Hits:1.0, Total execution time: 41.333 ms, Average time per hit: 41.333 ms 


sum=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for j in range(1,N+1): # Hits:10000001.0, Total execution time: 859395.594 ms, Average time per hit: 0.08593955080604491 ms 


    sum+=((N//j)*(N//j+1)//2)*j # Hits:10000000.0, Total execution time: 1816027.758 ms, Average time per hit: 0.18160277579999998 ms 


print(sum) # Hits:1.0, Total execution time: 67.75 ms, Average time per hit: 67.75 ms 

",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 53.417 ms, Average time per hit: 53.417 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, n + 1): # Hits:10000001.0, Total execution time: 879915.356 ms, Average time per hit: 0.08799152680084732 ms 


    ans += int(n // i) * int(n // i + 1) * i // 2 # Hits:10000000.0, Total execution time: 2651274.012 ms, Average time per hit: 0.2651274012 ms 


print(ans) # Hits:1.0, Total execution time: 41.083 ms, Average time per hit: 41.083 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 49.541 ms, Average time per hit: 49.541 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(1, n + 1): # Hits:10000001.0, Total execution time: 854054.569 ms, Average time per hit: 0.08540544835945517 ms 


    y = n // i # Hits:10000000.0, Total execution time: 950112.503 ms, Average time per hit: 0.0950112503 ms 


    ans += y * (y+1) * i // 2 # Hits:10000000.0, Total execution time: 1585077.711 ms, Average time per hit: 0.1585077711 ms 


print(ans) # Hits:1.0, Total execution time: 31.0 ms, Average time per hit: 31.0 ms 
",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 45.625 ms, Average time per hit: 45.625 ms 


x=0 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range (N): # Hits:10000001.0, Total execution time: 886185.56 ms, Average time per hit: 0.08861854713814529 ms 


    n = N // (i+1) # Hits:10000000.0, Total execution time: 1097340.952 ms, Average time per hit: 0.10973409519999999 ms 


    cnt = (n * (2 * (i+1) + (n - 1) * (i+1))) // 2   # Hits:10000000.0, Total execution time: 2099139.243 ms, Average time per hit: 0.2099139243 ms 


    x += cnt # Hits:10000000.0, Total execution time: 1074232.073 ms, Average time per hit: 0.1074232073 ms 


print(x) # Hits:1.0, Total execution time: 51.541 ms, Average time per hit: 51.541 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 50.917 ms, Average time per hit: 50.917 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1, N + 1): # Hits:10000001.0, Total execution time: 896857.731 ms, Average time per hit: 0.08968576413142358 ms 


    n = N // i  # 項数n # Hits:10000000.0, Total execution time: 967302.028 ms, Average time per hit: 0.0967302028 ms 


    cnt = (n * (2 * i + (n - 1) * i)) // 2  # 初項i, 項数n の等差数列の和の公式 # Hits:10000000.0, Total execution time: 1692258.928 ms, Average time per hit: 0.1692258928 ms 


    ans += cnt # Hits:10000000.0, Total execution time: 1033407.981 ms, Average time per hit: 0.1033407981 ms 


print(ans) # Hits:1.0, Total execution time: 59.166 ms, Average time per hit: 59.166 ms 
",p02624,True
"import sys

#import string

#from collections import defaultdict, deque, Counter

#import bisect

#import heapq

#import math

#from itertools import accumulate

#from itertools import permutations as perm

#from itertools import combinations as comb

#from itertools import combinations_with_replacement as combr

#from fractions import gcd

#import numpy as np



stdin = sys.stdin

sys.setrecursionlimit(10 ** 7)

MIN = -10 ** 9

MOD = 10 ** 9 + 7

INF = float(""inf"")

IINF = 10 ** 18



def su(N):

    return N*(N+1) / 2



def solve():

    n = int(stdin.readline().rstrip())

    #A, B, C = map(int, stdin.readline().rstrip().split())

    #l = list(map(int, stdin.readline().rstrip().split()))

    #numbers = [[int(c) for c in l.strip().split()] for l in sys.stdin]

    #word = [stdin.readline().rstrip() for _ in range(n)]

    #number = [[int(c) for c in stdin.readline().rstrip()] for _ in range(n)]

    #zeros = [[0] * w for i in range(h)]

    ans = 0

    for i in range(1,n+1):

        ans += i * su(n//i)

    print((int(ans)))







if __name__ == '__main__':

    solve()
",,p02624,False
"#D

n = int(eval(input())) # Hits:1.0, Total execution time: 52.5 ms, Average time per hit: 52.5 ms 


#約数の数を求める＞＞倍数であり、n以下であるものの総和を求める

# >>

#等差数列の和(初項a:公差d:n番目の項まで)

def Sun_of_Arithmetic_sequence(a, d, n): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    return (2 * a + (n - 1) * d) * n // 2

    

ans = 0 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(1, n + 1): # Hits:10000001.0, Total execution time: 899723.853 ms, Average time per hit: 0.08997237630276236 ms 


    #iの倍数の数を求める

    m = n // i # Hits:10000000.0, Total execution time: 906511.673 ms, Average time per hit: 0.0906511673 ms 


    #初項i:公差i:m項までの等比数列の和

    ans += Sun_of_Arithmetic_sequence(i, i, m) # Hits:10000000.0, Total execution time: 3147175.415 ms, Average time per hit: 0.3147175415 ms 


print(ans) # Hits:1.0, Total execution time: 36.75 ms, Average time per hit: 36.75 ms 
","#D

n = int(eval(input())) # Hits:1.0, Total execution time: 45.709 ms, Average time per hit: 45.709 ms 


#約数の数を求める＞＞倍数であり、n以下であるものの総和を求める



ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1, n + 1): # Hits:10000001.0, Total execution time: 857729.412 ms, Average time per hit: 0.08577293262270673 ms 


    #iの倍数の数を求める

    m = n // i # Hits:10000000.0, Total execution time: 963065.673 ms, Average time per hit: 0.09630656729999999 ms 


    #初項i:公差i:m項までの等比数列の和

    ans += m * (2 * i + i * (m - 1)) *0.5 # Hits:10000000.0, Total execution time: 1921774.884 ms, Average time per hit: 0.19217748839999999 ms 


print((int(ans))) # Hits:1.0, Total execution time: 64.0 ms, Average time per hit: 64.0 ms 
",p02624,True
"def main():

    num = int(eval(input()))

    ans = 0



    for divisor in range(1, num + 1):

        quotient = num // divisor

        ans += (quotient + 1) * quotient * divisor // 2



    print(ans)





if __name__ == '__main__':

    main()
",,p02624,False
"N = int(eval(input())) # Hits:1.0, Total execution time: 53.916 ms, Average time per hit: 53.916 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(1,N+1): # Hits:10000001.0, Total execution time: 854052.086 ms, Average time per hit: 0.08540520005947999 ms 


    ans += int(i*(1+N//i)*(N//i)/2) # Hits:10000000.0, Total execution time: 2264275.827 ms, Average time per hit: 0.2264275827 ms 


print(ans) # Hits:1.0, Total execution time: 45.25 ms, Average time per hit: 45.25 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 32.791 ms, Average time per hit: 32.791 ms 


c = (N+1)//2 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(1,N-c+1): # Hits:5000001.0, Total execution time: 426151.566 ms, Average time per hit: 0.08523029615394077 ms 


    ans += i*(1+N//i)*(N//i)/2 # Hits:5000000.0, Total execution time: 919435.662 ms, Average time per hit: 0.18388713240000001 ms 


ans += N*c -(c-1)*c/2 # Hits:1.0, Total execution time: 4.083 ms, Average time per hit: 4.083 ms 


print((int(ans))) # Hits:1.0, Total execution time: 55.25 ms, Average time per hit: 55.25 ms 
",p02624,True
"N=int(eval(input())) # Hits:1.0, Total execution time: 57.417 ms, Average time per hit: 57.417 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,N+1): # Hits:10000001.0, Total execution time: 899059.34 ms, Average time per hit: 0.0899059250094075 ms 


    j = N//i # Hits:10000000.0, Total execution time: 923601.06 ms, Average time per hit: 0.092360106 ms 


    ans += int(i*j*(j+1)/2) # Hits:10000000.0, Total execution time: 2005357.112 ms, Average time per hit: 0.20053571120000002 ms 




print(ans) # Hits:1.0, Total execution time: 63.333 ms, Average time per hit: 63.333 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 49.667 ms, Average time per hit: 49.667 ms 




ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,N+1): # Hits:10000001.0, Total execution time: 849013.251 ms, Average time per hit: 0.08490131660986834 ms 


    j = N//i # Hits:10000000.0, Total execution time: 894118.784 ms, Average time per hit: 0.0894118784 ms 


    ans += i*j*(j+1)//2 # Hits:10000000.0, Total execution time: 1603123.396 ms, Average time per hit: 0.1603123396 ms 




print(ans) # Hits:1.0, Total execution time: 38.958 ms, Average time per hit: 38.958 ms 
",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 57.417 ms, Average time per hit: 57.417 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1, N + 1): # Hits:10000001.0, Total execution time: 894987.572 ms, Average time per hit: 0.08949874825012517 ms 


    n = N // i  # 項数n # Hits:10000000.0, Total execution time: 929731.045 ms, Average time per hit: 0.0929731045 ms 


    cnt = (n * (2 * i + (n - 1) * i)) // 2  # 初項i, 項数n の等差数列の和の公式 # Hits:10000000.0, Total execution time: 1724431.898 ms, Average time per hit: 0.1724431898 ms 


    ans += cnt # Hits:10000000.0, Total execution time: 1031173.374 ms, Average time per hit: 0.1031173374 ms 


print(ans) # Hits:1.0, Total execution time: 81.291 ms, Average time per hit: 81.291 ms 
",,p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 58.792 ms, Average time per hit: 58.792 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, N + 1): # Hits:10000001.0, Total execution time: 894591.249 ms, Average time per hit: 0.0894591159540884 ms 


    n = N // i  # 項数n # Hits:10000000.0, Total execution time: 945779.639 ms, Average time per hit: 0.0945779639 ms 


    cnt = (n * (2 * i + (n - 1) * i)) // 2  # 初項i, 項数n の等差数列の和の公式 # Hits:10000000.0, Total execution time: 1746495.895 ms, Average time per hit: 0.17464958949999998 ms 


    ans += cnt # Hits:10000000.0, Total execution time: 1029984.154 ms, Average time per hit: 0.1029984154 ms 


print(ans) # Hits:1.0, Total execution time: 125.541 ms, Average time per hit: 125.541 ms 
",,p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 50.625 ms, Average time per hit: 50.625 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,N+1): # Hits:10000001.0, Total execution time: 899137.16 ms, Average time per hit: 0.0899137070086293 ms 


    y = int(N/i) # Hits:10000000.0, Total execution time: 1364544.071 ms, Average time per hit: 0.1364544071 ms 


    ans += int(1/2*y*(y+1)*i) # Hits:10000000.0, Total execution time: 2108285.174 ms, Average time per hit: 0.2108285174 ms 


    

print(ans) # Hits:1.0, Total execution time: 90.625 ms, Average time per hit: 90.625 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 44.709 ms, Average time per hit: 44.709 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,N+1): # Hits:10000001.0, Total execution time: 846529.084 ms, Average time per hit: 0.08465289993471001 ms 


    y = N//i # Hits:10000000.0, Total execution time: 895580.872 ms, Average time per hit: 0.0895580872 ms 


    ans += y*(y+1)*i//2 # Hits:10000000.0, Total execution time: 1588983.466 ms, Average time per hit: 0.1588983466 ms 


    

print(ans) # Hits:1.0, Total execution time: 56.417 ms, Average time per hit: 56.417 ms 

",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 54.125 ms, Average time per hit: 54.125 ms 




t = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for j in range(1,N+1): # Hits:10000001.0, Total execution time: 844538.622 ms, Average time per hit: 0.08445385375461463 ms 


  m = N//j # Hits:10000000.0, Total execution time: 893466.118 ms, Average time per hit: 0.0893466118 ms 


  t += (1+m)*m//2 * j # Hits:10000000.0, Total execution time: 1540453.279 ms, Average time per hit: 0.1540453279 ms 


#

print(t) # Hits:1.0, Total execution time: 34.583 ms, Average time per hit: 34.583 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 46.125 ms, Average time per hit: 46.125 ms 




nn = N//2 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


t = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for j in range(1,nn+1): # Hits:5000001.0, Total execution time: 432442.513 ms, Average time per hit: 0.08648848530230294 ms 


  m = N//j # Hits:5000000.0, Total execution time: 474689.686 ms, Average time per hit: 0.09493793719999999 ms 


  t += (1+m)*m//2 * j # Hits:5000000.0, Total execution time: 797447.182 ms, Average time per hit: 0.1594894364 ms 


#

t += ((nn+1)+N)*(N-nn)//2 # Hits:1.0, Total execution time: 3.5 ms, Average time per hit: 3.5 ms 


print(t) # Hits:1.0, Total execution time: 62.875 ms, Average time per hit: 62.875 ms 

",p02624,True
"def gcd_cnt(t): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    a = 0

    kosuu = n//t

    a=kosuu*(2*t + (kosuu-1)*t)//2

    return a



n = int(eval(input())) # Hits:1.0, Total execution time: 43.083 ms, Average time per hit: 43.083 ms 


sub = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


#約数でそのままアクセス可能

kosuu_ls = [0]*(n+1) # Hits:1.0, Total execution time: 27456.0 ms, Average time per hit: 27456.0 ms 


for t in range(1,n+1): # Hits:10000001.0, Total execution time: 851521.162 ms, Average time per hit: 0.08515210768478923 ms 


    sub+=gcd_cnt(t) # Hits:10000000.0, Total execution time: 4224764.201 ms, Average time per hit: 0.42247642009999997 ms 


print(sub) # Hits:1.0, Total execution time: 101.167 ms, Average time per hit: 101.167 ms 

","def gcd_cnt(n): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    sub = 0

    for i in range(1, n+1):

        kosuu = n//i

        sub+=kosuu*(2*i + (kosuu-1)*i)//2

    return sub



n = int(eval(input())) # Hits:1.0, Total execution time: 43.875 ms, Average time per hit: 43.875 ms 


sub = gcd_cnt(n) # Hits:1.0, Total execution time: 2277326.918 ms, Average time per hit: 2277326.918 ms 


print(sub) # Hits:1.0, Total execution time: 48.917 ms, Average time per hit: 48.917 ms 

",p02624,True
"import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 




readline = sys.stdin.readline # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


readall = sys.stdin.read # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


ns = lambda: readline().rstrip() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


ni = lambda: int(readline().rstrip()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


nm = lambda: map(int, readline().split()) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


nl = lambda: list(map(int, readline().split())) # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


prn = lambda x: print(*x, sep='\n') # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def solve(): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    n = ni()

    ans = 0

    for i in range(1, n+1):

        v = n // i

        ans += v * (v + 1) // 2 * i

    print(ans)

    return



solve() # Hits:1.0, Total execution time: 2018226.709 ms, Average time per hit: 2018226.709 ms 

","import sys # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 




readline = sys.stdin.readline # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


readall = sys.stdin.read # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ns = lambda: readline().rstrip() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


ni = lambda: int(readline().rstrip()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


nm = lambda: map(int, readline().split()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


nl = lambda: list(map(int, readline().split())) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


prn = lambda x: print(*x, sep='\n') # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def solve(): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    n = ni()

    m = int((n+1)**.5)

    u = n // (m + 1)

    ans = 0

    for i in range(1, u+1):

        v = n // i

        ans += v * (v + 1) // 2 * i

    for i in range(m, 0, -1):

        v = n // i

        ans += (v * (v + 1) - u * (u + 1)) // 2 * i * (i + 1) // 2

        u = v

    print(ans)

    return



solve() # Hits:1.0, Total execution time: 1757.417 ms, Average time per hit: 1757.417 ms 

",p02624,True
"import sys # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


import math # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


from collections import deque # Hits:1.0, Total execution time: 8.916 ms, Average time per hit: 8.916 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


#S,L,R = map(int, input().split())



N = int(eval(input())) # Hits:1.0, Total execution time: 34.542 ms, Average time per hit: 34.542 ms 




Answer = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




for i in range(1,N+1): # Hits:10000001.0, Total execution time: 849058.071 ms, Average time per hit: 0.08490579860942014 ms 


    num = (N//i)*(N//i + 1) // 2 # Hits:10000000.0, Total execution time: 1504470.647 ms, Average time per hit: 0.1504470647 ms 


    num *= i # Hits:10000000.0, Total execution time: 956356.82 ms, Average time per hit: 0.095635682 ms 


    Answer += num # Hits:10000000.0, Total execution time: 1036673.79 ms, Average time per hit: 0.10366737899999999 ms 




print(Answer) # Hits:1.0, Total execution time: 46.542 ms, Average time per hit: 46.542 ms 

","import sys # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


import math # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


from collections import deque # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


#S,L,R = map(int, input().split())



N = int(eval(input())) # Hits:1.0, Total execution time: 37.791 ms, Average time per hit: 37.791 ms 




A = [0] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


B = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




Answer = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




j = 1; # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


while j*j<=N: # Hits:3163.0, Total execution time: 349.16 ms, Average time per hit: 0.11038887132469175 ms 


    A.append(j) # Hits:3162.0, Total execution time: 405.162 ms, Average time per hit: 0.128134724857685 ms 


    if N//j != j: # Hits:3162.0, Total execution time: 329.814 ms, Average time per hit: 0.10430550284629982 ms 


        B.append(N//j) # Hits:3161.0, Total execution time: 453.378 ms, Average time per hit: 0.14342866181588104 ms 


    j+=1 # Hits:3162.0, Total execution time: 305.375 ms, Average time per hit: 0.09657653383934219 ms 




B.reverse() # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


A =  A + B # Hits:1.0, Total execution time: 16.459 ms, Average time per hit: 16.459 ms 




Answer = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,len(A)): # Hits:6324.0, Total execution time: 559.863 ms, Average time per hit: 0.0885298861480076 ms 


    num = ((N//A[i])*(N//A[i]+1)//2) # Hits:6323.0, Total execution time: 1235.131 ms, Average time per hit: 0.19533939585639729 ms 


    num *= ((A[i]*(A[i]+1)//2)-(A[i-1]*(A[i-1]+1)//2)) # Hits:6323.0, Total execution time: 1957.042 ms, Average time per hit: 0.30951162422900524 ms 


    Answer += num # Hits:6323.0, Total execution time: 630.833 ms, Average time per hit: 0.09976798987822237 ms 




print(Answer) # Hits:1.0, Total execution time: 8.0 ms, Average time per hit: 8.0 ms 

",p02624,True
"# 解説



def main():

    N = int(eval(input()))



    ans = 0

    for div in range(1, N + 1):

        m = N // div  # div, div*2, ..., div*m

        ans += (m * (m + 1) // 2) * div

    print(ans)





if __name__ == '__main__':

    main()
",,p02624,False
"def main():

    N = int(eval(input()))



    def f(x):

        return x * (x + 1) // 2



    ans = 0

    for d in range(1, N + 1):

        m = N // d

        ans += d * f(m)

    print(ans)





if __name__ == '__main__':

    main()
",,p02624,False
"def main():

    N = int(eval(input()))

    ans = 0

    for x in range(1, N + 1):

        # x(1+2+3+...+e)

        e = N // x

        ans += x * e * (1 + e) // 2

    print(ans)





if __name__ == '__main__':

    main()
",,p02624,False
"import sys

sys.setrecursionlimit(10 ** 9)

# input = sys.stdin.readline    ####

def int1(x): return int(x) - 1

def II(): return int(eval(input()))

def MI(): return list(map(int, input().split()))

def MI1(): return list(map(int1, input().split()))

def LI(): return list(map(int, input().split()))

def LI1(): return list(map(int1, input().split()))

def LLI(rows_number): return [LI() for _ in range(rows_number)]

def MS(): return input().split()

def LS(): return list(eval(input()))

def LLS(rows_number): return [LS() for _ in range(rows_number)]

def printlist(lst, k=' '): print((k.join(list(map(str, lst)))))

INF = float('inf')

# from math import ceil, floor, log2

# from collections import deque

# from itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations

# from heapq import heapify, heappop, heappush

# import numpy as np    # cumsum

# from bisect import bisect_left, bisect_right



def f(l, r, kousa=1):

    n = (r - l) // kousa

    return (r + l) * (n + 1) // 2



def solve():

    N = II()



    ans = 0

    for i in range(1, N+1):

        mx = i * (N // i)

        if mx == 0: mx = i

        # print(i, mx, f(i, mx, i))

        ans = ans + f(i, mx, i)



    print(ans)



if __name__ == '__main__':

    solve()
",,p02624,False
"n=int(eval(input())) # Hits:1.0, Total execution time: 38.5 ms, Average time per hit: 38.5 ms 


#n=10000000

ksum=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for k in range(1,n+1): # Hits:10000001.0, Total execution time: 859282.007 ms, Average time per hit: 0.08592819210718079 ms 


    m=n//k # Hits:10000000.0, Total execution time: 952844.971 ms, Average time per hit: 0.09528449709999999 ms 


    ksum+=k*m*(m+1)//2 # Hits:10000000.0, Total execution time: 1628713.347 ms, Average time per hit: 0.1628713347 ms 


    

print(ksum) # Hits:1.0, Total execution time: 61.208 ms, Average time per hit: 61.208 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 45.167 ms, Average time per hit: 45.167 ms 




ksum=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


nn=n//2 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for k in range(1,nn+1): # Hits:5000001.0, Total execution time: 424431.784 ms, Average time per hit: 0.08488633982273204 ms 


    m=n//k # Hits:5000000.0, Total execution time: 444589.652 ms, Average time per hit: 0.0889179304 ms 


    ksum+=k*m*(m+1)//2 # Hits:5000000.0, Total execution time: 824385.945 ms, Average time per hit: 0.16487718899999998 ms 




ksum=ksum+(n-nn)*(n++nn+1)//2 # Hits:1.0, Total execution time: 3.083 ms, Average time per hit: 3.083 ms 




print(ksum) # Hits:1.0, Total execution time: 46.125 ms, Average time per hit: 46.125 ms 


    ",p02624,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 46.25 ms, Average time per hit: 46.25 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 848004.996 ms, Average time per hit: 0.08480049111995089 ms 


  key=n//i # Hits:10000000.0, Total execution time: 895497.497 ms, Average time per hit: 0.0895497497 ms 


  ans+=int(key*(key+1)*i/2) # Hits:10000000.0, Total execution time: 2030421.226 ms, Average time per hit: 0.20304212259999999 ms 


print(ans) # Hits:1.0, Total execution time: 40.375 ms, Average time per hit: 40.375 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 45.667 ms, Average time per hit: 45.667 ms 


ans=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 847859.629 ms, Average time per hit: 0.08478595442140456 ms 


  key=n//i # Hits:10000000.0, Total execution time: 893175.652 ms, Average time per hit: 0.0893175652 ms 


  ans+=(key*(key+1)*i//2) # Hits:10000000.0, Total execution time: 1586603.547 ms, Average time per hit: 0.1586603547 ms 


print(ans) # Hits:1.0, Total execution time: 68.542 ms, Average time per hit: 68.542 ms 
",p02624,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 64.458 ms, Average time per hit: 64.458 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 851760.873 ms, Average time per hit: 0.08517607878239213 ms 


  key=n//i # Hits:10000000.0, Total execution time: 903992.684 ms, Average time per hit: 0.0903992684 ms 


  ans+=(key*(key+1)*i//2) # Hits:10000000.0, Total execution time: 1589383.969 ms, Average time per hit: 0.15893839689999997 ms 


print(ans) # Hits:1.0, Total execution time: 56.208 ms, Average time per hit: 56.208 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 57.75 ms, Average time per hit: 57.75 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 883610.948 ms, Average time per hit: 0.0883610859638914 ms 


  key=n//i # Hits:10000000.0, Total execution time: 895548.022 ms, Average time per hit: 0.08955480219999999 ms 


  ans+=key*i*(1+key)/2 # Hits:10000000.0, Total execution time: 1576735.568 ms, Average time per hit: 0.1576735568 ms 


print((int(ans))) # Hits:1.0, Total execution time: 63.625 ms, Average time per hit: 63.625 ms 
",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 57.791 ms, Average time per hit: 57.791 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, n+1): # Hits:10000001.0, Total execution time: 850267.948 ms, Average time per hit: 0.08502678629732137 ms 


    hoge = int(n//i) # Hits:10000000.0, Total execution time: 1255823.488 ms, Average time per hit: 0.1255823488 ms 


    cnt += (hoge + 1) * i * hoge // 2 # Hits:10000000.0, Total execution time: 1608625.995 ms, Average time per hit: 0.16086259949999998 ms 


print(cnt) # Hits:1.0, Total execution time: 56.375 ms, Average time per hit: 56.375 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 52.125 ms, Average time per hit: 52.125 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1, n+1): # Hits:10000001.0, Total execution time: 886734.973 ms, Average time per hit: 0.08867348843265116 ms 


    hoge = n//i # Hits:10000000.0, Total execution time: 901568.924 ms, Average time per hit: 0.09015689240000001 ms 


    cnt += (hoge + 1) * i * hoge / 2 # Hits:10000000.0, Total execution time: 1565772.339 ms, Average time per hit: 0.1565772339 ms 


print((int(cnt))) # Hits:1.0, Total execution time: 70.375 ms, Average time per hit: 70.375 ms 
",p02624,True
"import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 




def input(): return sys.stdin.readline().strip() # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


def list2d(a, b, c): return [[c] * b for i in range(a)] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def ceil(x, y=1): return int(-(-x // y)) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def INT(): return int(eval(input())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def MAP(): return list(map(int, input().split())) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def Yes(): print('Yes') # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def No(): print('No') # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def YES(): print('YES') # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def NO(): print('NO') # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


sys.setrecursionlimit(10 ** 9) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


INF = 10 ** 19 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


MOD = 10 ** 9 + 7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


EPS = 10 ** -10 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




def factorize(num: int) -> dict: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    from math import sqrt

    from collections import Counter



    d = Counter()

    for i in range(2, int(sqrt(num))+1):

        while num % i == 0:

            num //= i

            d[i] += 1

        if num == 1:

            break

    if num != 1:

        d[num] += 1

    return d



N = INT() # Hits:1.0, Total execution time: 50.5 ms, Average time per hit: 50.5 ms 




L = [0, 493438984, 2111951377, 4934219787, 9001617396, 14343475240, 20983549232, 28938411754, 38222337945, 48855592736, 60838190672, 74193687476, 88921806577, 105036084674, 122543360219, 141448665788, 161762066784, 183487293576, 206644111130, 231208670456, 257212470774, 284661691691, 313538542845, 343862458416, 375639765395, 408875452660, 443559968601, 479723200366, 517333062431, 556419507715, 596981215450, 639007377350, 682529770555, 727538683373, 774009411906, 821990325762, 871476277626, 922424492974, 974880028674, 1028856951678, 1084296609104, 1141266683482, 1199769931446, 1259717167514, 1321237832726, 1384261675499, 1448776778605, 1514816915551, 1582401743782, 1651519869360, 1722125036282, 1794261310039, 1867938145253, 1943162263556, 2019919516903, 2098185047461, 2177990752180, 2259356996967, 2342246760421, 2426683306008, 2512661322551, 2600202380059, 2689253635198, 2779911682839, 2872076940842, 2965792104633, 3061088597282, 3157923865183, 3256297470052, 3356283349093, 3457770622390, 3560833491555, 3665505698976, 3771665000331, 3879451580190, 3988800240289, 4099689915648, 4212156072325, 4326227368544, 4441788452022, 4558987534475, 4677840157734, 4798099997041, 4920000663900, 5043552008724, 5168559295617, 5295214000044, 5423487803310, 5553301601415, 5684679342328, 5817729717828, 5952248621195, 6088428461000, 6226149254802, 6365487771753, 6506418585007, 6648988032736, 6793042552516, 6938843502589, 7086136299955, 7235062807366, 7385497922168, 7537595029369, 7691272542181, 7846594285002, 8003510992854, 8162003209593, 8322065666301, 8483854862004, 8647160290700, 8812039622862, 8978549345553, 9146706496165, 9316419043328, 9487781973018, 9660719955296, 9835269787927, 10011553756671, 10189253411315, 10368667669769, 10549659220862, 10732401846534, 10916579731860, 11102453274617, 11289904537263, 11479011688245, 11669830174971, 11862029769733, 12056063349904, 12251617620346, 12448845177256, 12647680629690, 12848171370860, 13050254462297, 13253960158691, 13459323658561, 13666226110773, 13874834196455, 14085094521507, 14296814468805, 14510332007222, 14725429439492, 14942131234656, 15160521193552, 15380588954554, 15602136739002, 15825403657376, 16050451660910, 16276847020856, 16505115662434, 16734924755096, 16966264626222, 17199447614438, 17434170056672, 17670514459840, 17908481787130, 18148241497132, 18389471243932, 18632333327852, 18877006937424, 19123138141378, 19371049907390, 19620742818748, 19871685989154, 20124476869606, 20379057733244, 20634980880846, 20892786409876, 21152210987700, 21413258654304, 21675833225770, 21940306512852, 22206142281006, 22473855635042, 22743180271196, 23013964372551, 23286698574789, 23560888221575, 23836769564907, 24114378406399, 24393634293809, 24674416929987, 24956947315787, 25241193314980, 25526998756870, 25814409354826, 26103616946734, 26394550063000, 26686893099848, 26981155333407, 27276821356759, 27574386655175, 27873535407821, 28174159348173, 28476594164494, 28780788606772, 29086633471688, 29393966055558, 29703149003024, 30013792137851, 30326413365285, 30640395292273, 30956069654443, 31273523102626, 31592664449728, 31913376078550, 32235842932848, 32560029990049, 32885785039643, 33213220430143, 33542358268005, 33873031165364, 34205581585566, 34539604444304, 34875425263721, 35212812420453, 35552154166961, 35892886791151, 36235517412420, 36579557281204, 36925459066686, 37272877068179, 37622167432867, 37972983625527, 38325669456310, 38679944926812, 39035687683706, 39393229506853, 39752627629789, 40113337934391, 40476248899052, 40840525066648, 41206411398402, 41574140883741, 41943676682207, 42314367955206, 42687136285026, 43061485153064, 43437687786881, 43815302669763, 44194833598353, 44575932486140, 44959075432376, 45343572745399, 45729521171181, 46117511559977, 46507039889452, 46898189118372, 47291122961301, 47685728865579, 48081994935671, 48480082300526, 48879970671808, 49281110607237, 49684086992257, 50088943167842, 50495479917520, 50903466600692, 51313347525789, 51724975620189, 52138123487538, 52553108327972, 52969581501827, 53387767611137, 53807963320230, 54229542299288, 54653198694933, 55078208662363, 55504960390211, 55933215747316, 56363615930452, 56795212776465, 57228909958313, 57664215816822, 58101239718024, 58539707599783, 58980252241083, 59421892348898, 59865706329526, 60311259225171, 60758384185743, 61207170466520, 61657753740090, 62110005557983, 62563875183571, 63019567631040, 63476896129040, 63935958271999, 64396829979171, 64859270285018, 65323182791149, 65789089604569, 66256629418190, 66725831508196, 67197154766221, 67669778128369, 68143846134308, 68620152785028, 69098036648615, 69577694425039, 70058785460280, 70541587609951, 71025938505929, 71512452345322, 72000611436936, 72490226710653, 72981712491617, 73474739478198, 73969802569251, 74466324672669, 74964555109988, 75464743316958, 75966455520027, 76469922185833, 76974918304364, 77481786106093, 77990116976087, 78500489297008, 79012557024984, 79526167516159, 80041527790312, 80558645237098, 81077594980197, 81598055713779, 82120713079294, 82644353395127, 83169941989863, 83697504542732, 84226394594512, 84757231028297, 85290161753688, 85823956198104, 86359994965751, 86897880537014, 87437307393462, 87978318105507, 88521402624739, 89065833437896, 89612148645041, 90160177388367, 90709780843282, 91261462998831, 91814670146287, 92369737296000, 92925795939321, 93484427284737, 94044459497514, 94605692593587, 95169619029369, 95734736626700, 96301520878991, 96871003843775, 97440790250114, 98012538259925, 98586604492967, 99162032503100, 99739464176165, 100318795327755, 100899258277840, 101481591756225, 102065855149715, 102652068778038, 103239275746737, 103829147617875, 104419705255676, 105012670748303, 105607087655847, 106203258904286, 106801251505039, 107401147943134, 108002269398516, 108605669699699, 109210412671028, 109816898593848, 110425621805189, 111035349416856, 111647260553880, 112260978633767, 112876414074318, 113493082165965, 114111807921375, 114732129627940, 115354581555727, 115978374551469, 116604201140710, 117231448199853, 117860345420030, 118491457697962, 119123896922237, 119758228396194, 120394329084663, 121032207586387, 121671762836798, 122312774834877, 122955612335878, 123600339753238, 124247228070109, 124895026488944, 125544979006721, 126196993528335, 126850549017804, 127505199391685, 128162238812474, 128820653080288, 129480852076751, 130143314566922, 130806818828029, 131472491663433, 132139863485890, 132808680912837, 133479467089246, 134152010492156, 134826295251391, 135502107129054, 136180066055547, 136859038394801, 137540475359704, 138223390236401, 138908157808408, 139594113155195, 140282617787827, 140971935053758, 141664050636387, 142357602038586, 143052689302720, 143749192448739, 144447897755264, 145148497213081, 145850281904976, 146554080642842, 147259491582477, 147967040134080, 148676185176293, 149386679322656, 150099453429042, 150813537261139, 151529826444886, 152247135978549, 152966937395338, 153688169519778, 154411235469265, 155136321517588, 155862218888277, 156590458911006, 157320579912726, 158052520943755, 158785663003084, 159521080147969, 160258283568446, 160996569067233, 161737467121483, 162479234078350, 163223256696949, 163968850251200, 164716254597751, 165465511572167, 166216722634706, 166969089792981, 167723475231634, 168479936246421, 169238102781982, 169997490957786, 170759095684543, 171522119425146, 172287112634491, 173053807479870, 173822301914317, 174592676086419, 175364856374134, 176138491780787, 176913242475822, 177690692049615, 178469553728962, 179250407544097, 180032530244167, 180816973674988, 181603061170895, 182390930796476, 183179904404611, 183971218922672, 184764302482181, 185559352780607, 186355484716640, 187154167627305, 187954463112172, 188755167873661, 189559787774578, 190364265283477, 191171258442543, 191980195355334, 192790925674795, 193602556410512, 194417016305967, 195232645987818, 196050188214189, 196869911666370, 197690504888822, 198513424115241, 199337980967136, 200164364728679, 200992441246692, 201822370836189, 202653868317500, 203487295124995, 204322582138612, 205159280851458, 205997845055705, 206838686419778, 207680223459897, 208524389546180, 209370037656611, 210217713280204, 211066783506201, 211918221290312, 212770051652978, 213624780221079, 214480891817874, 215339170446071, 216198966217860, 217060656926613, 217923890158764, 218789180815693, 219655779282864, 220523735657387, 221394090749349, 222266481117362, 223140061833265, 224016558533452, 224893676139605, 225772746863650, 226653316365413, 227536174732100, 228421314666947, 229306948564404, 230195066828025, 231084619915589, 231976153079776, 232869522913489, 233764396646712, 234661096550023, 235560022983960, 236459761443283, 237361938411048, 238265786958041, 239171714912618, 240079430075503, 240988397832690, 241898812660791, 242812185647676, 243726278270952, 244642548171917, 245560254111198, 246480586961269, 247401317616792, 248324577480015, 249249827129502, 250176645559885, 251105483218834, 252035928916781, 252967864735060, 253902107151677, 254838098382990, 255774984445791, 256713920805122, 257655416928771, 258598042267722, 259542772930910, 260489350267409, 261436917320998, 262386403483379, 263338334303632, 264291434634157, 265246857118052, 266204009065415, 267162706932416, 268122443879733, 269085526198458, 270049088960461, 271015374238472, 271982522915917, 272951354222680, 273922507156707, 274895612421442, 275870379762381, 276846598740350, 277825672031685, 278804570050134, 279786370749447, 280770739235134, 281755465246921, 282742772106696, 283731559078148, 284721682929865, 285714250695616, 286708743387977, 287704245795420, 288702721195441, 289702014807874, 290703569309949, 291706201453858, 292711324081941, 293717366474056, 294725901925083, 295736053976404, 296747592638013, 297762174014958, 298776908022377, 299794469887084, 300813564019813, 301834201727288, 302856699362737, 303880788840754, 304907289654363, 305934819862268, 306964702346215, 307996718856936, 309029824258801, 310064151223148, 311101637905109, 312139951524896, 313180253381239, 314222805621412, 315266553457537, 316312042620248, 317360134362523, 318409439232054, 319460499426217, 320513384122962, 321567622851745, 322623930942812, 323682486495499, 324741853391528, 325803695787761, 326867219740652, 327932450455477, 328999565677832, 330068744316709, 331139300028798, 332211422630039, 333285673740620, 334361760892115, 335439825691086, 336519086109011, 337600169846864, 338683695663679, 339768196320246, 340854960383245, 341943058696612, 343034472400869, 344126288365936, 345219904513529, 346315581629252, 347412434557053, 348511792968136, 349613032606555, 350715682647270, 351819912216247, 352926548527444, 354034344501769, 355144048864876, 356256480873339, 357369113508715, 358484442195342, 359601854797041, 360720410076300, 361841581744271, 362963722150674, 364088108554029, 365213714591214, 366341568308709, 367470747430202, 368602095664463, 369735789749694, 370870069207777, 372007153176608, 373145655996233, 374286076547576, 375427962091615, 376571542044574, 377716999592043, 378864539458650, 380013795473175, 381165217740896, 382317332922921, 383472680967630, 384628186031971, 385787504467500, 386946111242933, 388108089327077, 389271682033460, 390437889429971, 391604283066184, 392773416637483, 393944435287130, 395115604641767, 396290295634134, 397466595094813, 398644056408120, 399823884730061, 401005593478536, 402188826344049, 403373694633520, 404561981047791, 405749179528776, 406939431685005, 408131530592604, 409324954308067, 410521348475975, 411718608508472, 412917829716085, 414118956306590, 415322188137827, 416527085300694, 417733433700427, 418942331716724, 420152374263135, 421364002783104, 422577395980403, 423792898623764, 425010124061273, 426229374669116, 427450147002323, 428673624289944, 429897374046936, 431123533288353, 432351372593538, 433582822947449, 434813006623636, 436046483157627, 437282894500928, 438519040875971, 439757019372828, 440997965038867, 442240079785140, 443484462291313, 444731555754762, 445978339255250, 447227855605997, 448480086797544, 449733248446751, 450987322450746, 452244765673393, 453503381019818, 454763522811227, 456025584592066, 457290058813673, 458555247324046, 459822864161615, 461092949514555, 462363708727082, 463635895079489, 464911820422952, 466187687663221, 467466366121452, 468746616002817, 470028210141922, 471312757314047, 472598203288748, 473885272432371, 475174594334501, 476465015795706, 477757744330055, 479052416466724, 480348819350435, 481647182202860, 482947253439277, 484248512083034, 485552313622173, 486857969964978, 488164574198429, 489473701762655, 490784291733168, 492096644148075, 493411300179502, 494727689317357, 496045307801936, 497365255568609, 498687449477284, 500010568862547, 501335747966526, 502662434241804, 503991704580965, 505322052981958, 506654432172067, 507989000109970, 509324212044955, 510661840177448, 512001532956817, 513342503635826, 514686036546604, 516031076204871, 517377724607508, 518727343474553, 520078145300410, 521429056074467, 522783440474442, 524139131959187, 525496543337174, 526857422190838, 528217444408577, 529581632274134, 530946662693627, 532311834614760, 533680546735483, 535051704371342, 536423313695403, 537796691803370, 539172201925316, 540549877857205, 541928823207352, 543311223215741, 544693475279016, 546077959708393, 547464036046802, 548853348040761, 550242029951411, 551635523926500, 553028620646503, 554424387913560, 555822264061929, 557220889209512, 558621696505469, 560025230061866, 561428802276184, 562836065508759, 564243999095306, 565654085968561, 567065128422242, 568480038230125, 569893956799790, 571311613610574, 572730240277725, 574152005590562, 575575248534959, 576999225949768, 578425754453253, 579853875598684, 581283722724127, 582714549978061, 584148485672108, 585584064718129, 587022127750674, 588459065212505, 589900936512440, 591343575167211, 592787459417657, 594234550140282, 595682150650359, 597132206946714, 598583745209687, 600036645526326, 601492242580143, 602949321421683, 604407846945578, 605869107689303, 607331619426194, 608795868334189, 610261785848438, 611729774917537, 613198814493223, 614670553358276, 616144676283965, 617619625265780, 619096104738785, 620575746952334, 622055857989353, 623538035545969, 625023113070734, 626509523416503, 627996839401640, 629486032479553, 630977512484618, 632471202833598, 633966389221247, 635463114501108, 636961255455435, 638462431547104, 639964402087269, 641469367558646, 642974633730974, 644482906053419, 645993122794254, 647505205272109, 649017299537750, 650532361117315, 652049535718977, 653567690469176, 655088215385491, 656610553120008, 658134774989261, 659661281999214, 661189158190086, 662718348756195, 664249968506936, 665783385006535, 667318419340188, 668855510173177, 670395367176565, 671933916759436, 673476282039307, 675021515919670, 676567144364893, 678113830344156, 679664533401168, 681214994169811, 682768038722362, 684323080911191, 685880774547598, 687438716491527, 688999801428499, 690561394962114, 692125743196273, 693692366054624, 695260333986021, 696829289232270, 698400976891086, 699973824671271, 701549673831838, 703126187535455, 704705200232828, 706285619557381, 707867195732873, 709451438872926, 711037992008427, 712625794349158, 714214048734419, 715806001244514, 717399924658778, 718994316345727, 720590677150446, 722190402701363, 723790621480140, 725392923121004, 726998055073987, 728603228142062, 730211681284985, 731821322759290, 733432010195075, 735045851805207, 736661443613214, 738276491989247, 739895882758532, 741516581592161, 743138445553167, 744762322406730, 746388997301993, 748016553170068, 749646313071567, 751277273517719, 752911159922144, 754546104527913, 756183236791540, 757822044025127, 759461429975294, 761105197442634, 762748254977255, 764394705633220, 766043425272075, 767692336656182, 769344916049218, 770997444637057, 772653366761276, 774309714924197, 775968333981206, 777628415754614, 779290962936659, 780956682898140, 782621238201333, 784290892463104, 785959628811126, 787630213195247, 789303762499222, 790981165033981, 792656355727226, 794335711756712, 796016413077051, 797698155805268, 799382276287517, 801069050223796, 802756444093190, 804447590347769, 806139404970524, 807831658746729, 809526235046184, 811224631223428, 812923504620281, 814624418991302, 816327543076999, 818031317116686, 819737557578338, 821446543739323, 823156207463724, 824866912441477, 826581337675850, 828296149193646, 830013193599069, 831732352764316, 833453767340721, 835175712259152, 836900951119010, 838627288460105] # Hits:1.0, Total execution time: 2.416 ms, Average time per hit: 2.416 ms 




d = N // 10000 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


ans = L[d] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


for i in range(d*10000+1, N+1): # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


    res = factorize(i) # Hits:100.0, Total execution time: 338.212 ms, Average time per hit: 3.38212 ms 


    cnt = 1 # Hits:100.0, Total execution time: 7.829 ms, Average time per hit: 0.07829000000000001 ms 


    for v in list(res.values()): # Hits:271.0, Total execution time: 37.183 ms, Average time per hit: 0.13720664206642066 ms 


        cnt *= v + 1 # Hits:171.0, Total execution time: 18.041 ms, Average time per hit: 0.10550292397660818 ms 


    ans += cnt * i # Hits:100.0, Total execution time: 11.958 ms, Average time per hit: 0.11957999999999999 ms 


print(ans) # Hits:1.0, Total execution time: 8.5 ms, Average time per hit: 8.5 ms 

","import sys # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




def input(): return sys.stdin.readline().strip() # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


def list2d(a, b, c): return [[c] * b for i in range(a)] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


def list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def ceil(x, y=1): return int(-(-x // y)) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def INT(): return int(eval(input())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def MAP(): return list(map(int, input().split())) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


def Yes(): print('Yes') # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def No(): print('No') # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def YES(): print('YES') # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def NO(): print('NO') # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


sys.setrecursionlimit(10 ** 9) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


INF = 10 ** 19 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


MOD = 10 ** 9 + 7 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


EPS = 10 ** -10 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




def factorize(N): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    def gcd(a, b):

        while b: a, b = b, a % b

        return a

    def isPrimeMR(n):

        d = n - 1

        d = d // (d & -d)

        L = [2]

        for a in L:

            t = d

            y = pow(a, t, n)

            if y == 1: continue

            while y != n - 1:

                y = (y * y) % n

                if y == 1 or t == n - 1: return 0

                t <<= 1

        return 1

    def findFactorRho(n):

        m = 1 << n.bit_length() // 8

        for c in range(1, 99):

            f = lambda x: (x * x + c) % n

            y, r, q, g = 2, 1, 1, 1

            while g == 1:

                x = y

                for _ in range(r):

                    y = f(y)

                k = 0

                while k < r and g == 1:

                    ys = y

                    for _ in range(min(m, r - k)):

                        y = f(y)

                        q = q * abs(x - y) % n

                    g = gcd(q, n)

                    k += m

                r <<= 1

            if g == n:

                g = 1

                while g == 1:

                    ys = f(ys)

                    g = gcd(abs(x - ys), n)

            if g < n:

                if isPrimeMR(g): return g

                elif isPrimeMR(n // g): return n // g

                return findFactorRho(g)

    def primeFactor(n):

        i = 2

        ret = {}

        rhoFlg = 0

        while i*i <= n:

            k = 0

            while n % i == 0:

                n //= i

                k += 1

            if k: ret[i] = k

            i += 1 + i % 2

            if i == 101 and n >= 2 ** 20:

                while n > 1:

                    if isPrimeMR(n):

                        ret[n], n = 1, 1

                    else:

                        rhoFlg = 1

                        j = findFactorRho(n)

                        k = 0

                        while n % j == 0:

                            n //= j

                            k += 1

                        ret[j] = k

        if n > 1: ret[n] = 1

        if rhoFlg: ret = {x: ret[x] for x in sorted(ret)}

        return ret

    return primeFactor(N)



N = INT() # Hits:1.0, Total execution time: 43.833 ms, Average time per hit: 43.833 ms 




L = [0, 493438984, 2111951377, 4934219787, 9001617396, 14343475240, 20983549232, 28938411754, 38222337945, 48855592736, 60838190672, 74193687476, 88921806577, 105036084674, 122543360219, 141448665788, 161762066784, 183487293576, 206644111130, 231208670456, 257212470774, 284661691691, 313538542845, 343862458416, 375639765395, 408875452660, 443559968601, 479723200366, 517333062431, 556419507715, 596981215450, 639007377350, 682529770555, 727538683373, 774009411906, 821990325762, 871476277626, 922424492974, 974880028674, 1028856951678, 1084296609104, 1141266683482, 1199769931446, 1259717167514, 1321237832726, 1384261675499, 1448776778605, 1514816915551, 1582401743782, 1651519869360, 1722125036282, 1794261310039, 1867938145253, 1943162263556, 2019919516903, 2098185047461, 2177990752180, 2259356996967, 2342246760421, 2426683306008, 2512661322551, 2600202380059, 2689253635198, 2779911682839, 2872076940842, 2965792104633, 3061088597282, 3157923865183, 3256297470052, 3356283349093, 3457770622390, 3560833491555, 3665505698976, 3771665000331, 3879451580190, 3988800240289, 4099689915648, 4212156072325, 4326227368544, 4441788452022, 4558987534475, 4677840157734, 4798099997041, 4920000663900, 5043552008724, 5168559295617, 5295214000044, 5423487803310, 5553301601415, 5684679342328, 5817729717828, 5952248621195, 6088428461000, 6226149254802, 6365487771753, 6506418585007, 6648988032736, 6793042552516, 6938843502589, 7086136299955, 7235062807366, 7385497922168, 7537595029369, 7691272542181, 7846594285002, 8003510992854, 8162003209593, 8322065666301, 8483854862004, 8647160290700, 8812039622862, 8978549345553, 9146706496165, 9316419043328, 9487781973018, 9660719955296, 9835269787927, 10011553756671, 10189253411315, 10368667669769, 10549659220862, 10732401846534, 10916579731860, 11102453274617, 11289904537263, 11479011688245, 11669830174971, 11862029769733, 12056063349904, 12251617620346, 12448845177256, 12647680629690, 12848171370860, 13050254462297, 13253960158691, 13459323658561, 13666226110773, 13874834196455, 14085094521507, 14296814468805, 14510332007222, 14725429439492, 14942131234656, 15160521193552, 15380588954554, 15602136739002, 15825403657376, 16050451660910, 16276847020856, 16505115662434, 16734924755096, 16966264626222, 17199447614438, 17434170056672, 17670514459840, 17908481787130, 18148241497132, 18389471243932, 18632333327852, 18877006937424, 19123138141378, 19371049907390, 19620742818748, 19871685989154, 20124476869606, 20379057733244, 20634980880846, 20892786409876, 21152210987700, 21413258654304, 21675833225770, 21940306512852, 22206142281006, 22473855635042, 22743180271196, 23013964372551, 23286698574789, 23560888221575, 23836769564907, 24114378406399, 24393634293809, 24674416929987, 24956947315787, 25241193314980, 25526998756870, 25814409354826, 26103616946734, 26394550063000, 26686893099848, 26981155333407, 27276821356759, 27574386655175, 27873535407821, 28174159348173, 28476594164494, 28780788606772, 29086633471688, 29393966055558, 29703149003024, 30013792137851, 30326413365285, 30640395292273, 30956069654443, 31273523102626, 31592664449728, 31913376078550, 32235842932848, 32560029990049, 32885785039643, 33213220430143, 33542358268005, 33873031165364, 34205581585566, 34539604444304, 34875425263721, 35212812420453, 35552154166961, 35892886791151, 36235517412420, 36579557281204, 36925459066686, 37272877068179, 37622167432867, 37972983625527, 38325669456310, 38679944926812, 39035687683706, 39393229506853, 39752627629789, 40113337934391, 40476248899052, 40840525066648, 41206411398402, 41574140883741, 41943676682207, 42314367955206, 42687136285026, 43061485153064, 43437687786881, 43815302669763, 44194833598353, 44575932486140, 44959075432376, 45343572745399, 45729521171181, 46117511559977, 46507039889452, 46898189118372, 47291122961301, 47685728865579, 48081994935671, 48480082300526, 48879970671808, 49281110607237, 49684086992257, 50088943167842, 50495479917520, 50903466600692, 51313347525789, 51724975620189, 52138123487538, 52553108327972, 52969581501827, 53387767611137, 53807963320230, 54229542299288, 54653198694933, 55078208662363, 55504960390211, 55933215747316, 56363615930452, 56795212776465, 57228909958313, 57664215816822, 58101239718024, 58539707599783, 58980252241083, 59421892348898, 59865706329526, 60311259225171, 60758384185743, 61207170466520, 61657753740090, 62110005557983, 62563875183571, 63019567631040, 63476896129040, 63935958271999, 64396829979171, 64859270285018, 65323182791149, 65789089604569, 66256629418190, 66725831508196, 67197154766221, 67669778128369, 68143846134308, 68620152785028, 69098036648615, 69577694425039, 70058785460280, 70541587609951, 71025938505929, 71512452345322, 72000611436936, 72490226710653, 72981712491617, 73474739478198, 73969802569251, 74466324672669, 74964555109988, 75464743316958, 75966455520027, 76469922185833, 76974918304364, 77481786106093, 77990116976087, 78500489297008, 79012557024984, 79526167516159, 80041527790312, 80558645237098, 81077594980197, 81598055713779, 82120713079294, 82644353395127, 83169941989863, 83697504542732, 84226394594512, 84757231028297, 85290161753688, 85823956198104, 86359994965751, 86897880537014, 87437307393462, 87978318105507, 88521402624739, 89065833437896, 89612148645041, 90160177388367, 90709780843282, 91261462998831, 91814670146287, 92369737296000, 92925795939321, 93484427284737, 94044459497514, 94605692593587, 95169619029369, 95734736626700, 96301520878991, 96871003843775, 97440790250114, 98012538259925, 98586604492967, 99162032503100, 99739464176165, 100318795327755, 100899258277840, 101481591756225, 102065855149715, 102652068778038, 103239275746737, 103829147617875, 104419705255676, 105012670748303, 105607087655847, 106203258904286, 106801251505039, 107401147943134, 108002269398516, 108605669699699, 109210412671028, 109816898593848, 110425621805189, 111035349416856, 111647260553880, 112260978633767, 112876414074318, 113493082165965, 114111807921375, 114732129627940, 115354581555727, 115978374551469, 116604201140710, 117231448199853, 117860345420030, 118491457697962, 119123896922237, 119758228396194, 120394329084663, 121032207586387, 121671762836798, 122312774834877, 122955612335878, 123600339753238, 124247228070109, 124895026488944, 125544979006721, 126196993528335, 126850549017804, 127505199391685, 128162238812474, 128820653080288, 129480852076751, 130143314566922, 130806818828029, 131472491663433, 132139863485890, 132808680912837, 133479467089246, 134152010492156, 134826295251391, 135502107129054, 136180066055547, 136859038394801, 137540475359704, 138223390236401, 138908157808408, 139594113155195, 140282617787827, 140971935053758, 141664050636387, 142357602038586, 143052689302720, 143749192448739, 144447897755264, 145148497213081, 145850281904976, 146554080642842, 147259491582477, 147967040134080, 148676185176293, 149386679322656, 150099453429042, 150813537261139, 151529826444886, 152247135978549, 152966937395338, 153688169519778, 154411235469265, 155136321517588, 155862218888277, 156590458911006, 157320579912726, 158052520943755, 158785663003084, 159521080147969, 160258283568446, 160996569067233, 161737467121483, 162479234078350, 163223256696949, 163968850251200, 164716254597751, 165465511572167, 166216722634706, 166969089792981, 167723475231634, 168479936246421, 169238102781982, 169997490957786, 170759095684543, 171522119425146, 172287112634491, 173053807479870, 173822301914317, 174592676086419, 175364856374134, 176138491780787, 176913242475822, 177690692049615, 178469553728962, 179250407544097, 180032530244167, 180816973674988, 181603061170895, 182390930796476, 183179904404611, 183971218922672, 184764302482181, 185559352780607, 186355484716640, 187154167627305, 187954463112172, 188755167873661, 189559787774578, 190364265283477, 191171258442543, 191980195355334, 192790925674795, 193602556410512, 194417016305967, 195232645987818, 196050188214189, 196869911666370, 197690504888822, 198513424115241, 199337980967136, 200164364728679, 200992441246692, 201822370836189, 202653868317500, 203487295124995, 204322582138612, 205159280851458, 205997845055705, 206838686419778, 207680223459897, 208524389546180, 209370037656611, 210217713280204, 211066783506201, 211918221290312, 212770051652978, 213624780221079, 214480891817874, 215339170446071, 216198966217860, 217060656926613, 217923890158764, 218789180815693, 219655779282864, 220523735657387, 221394090749349, 222266481117362, 223140061833265, 224016558533452, 224893676139605, 225772746863650, 226653316365413, 227536174732100, 228421314666947, 229306948564404, 230195066828025, 231084619915589, 231976153079776, 232869522913489, 233764396646712, 234661096550023, 235560022983960, 236459761443283, 237361938411048, 238265786958041, 239171714912618, 240079430075503, 240988397832690, 241898812660791, 242812185647676, 243726278270952, 244642548171917, 245560254111198, 246480586961269, 247401317616792, 248324577480015, 249249827129502, 250176645559885, 251105483218834, 252035928916781, 252967864735060, 253902107151677, 254838098382990, 255774984445791, 256713920805122, 257655416928771, 258598042267722, 259542772930910, 260489350267409, 261436917320998, 262386403483379, 263338334303632, 264291434634157, 265246857118052, 266204009065415, 267162706932416, 268122443879733, 269085526198458, 270049088960461, 271015374238472, 271982522915917, 272951354222680, 273922507156707, 274895612421442, 275870379762381, 276846598740350, 277825672031685, 278804570050134, 279786370749447, 280770739235134, 281755465246921, 282742772106696, 283731559078148, 284721682929865, 285714250695616, 286708743387977, 287704245795420, 288702721195441, 289702014807874, 290703569309949, 291706201453858, 292711324081941, 293717366474056, 294725901925083, 295736053976404, 296747592638013, 297762174014958, 298776908022377, 299794469887084, 300813564019813, 301834201727288, 302856699362737, 303880788840754, 304907289654363, 305934819862268, 306964702346215, 307996718856936, 309029824258801, 310064151223148, 311101637905109, 312139951524896, 313180253381239, 314222805621412, 315266553457537, 316312042620248, 317360134362523, 318409439232054, 319460499426217, 320513384122962, 321567622851745, 322623930942812, 323682486495499, 324741853391528, 325803695787761, 326867219740652, 327932450455477, 328999565677832, 330068744316709, 331139300028798, 332211422630039, 333285673740620, 334361760892115, 335439825691086, 336519086109011, 337600169846864, 338683695663679, 339768196320246, 340854960383245, 341943058696612, 343034472400869, 344126288365936, 345219904513529, 346315581629252, 347412434557053, 348511792968136, 349613032606555, 350715682647270, 351819912216247, 352926548527444, 354034344501769, 355144048864876, 356256480873339, 357369113508715, 358484442195342, 359601854797041, 360720410076300, 361841581744271, 362963722150674, 364088108554029, 365213714591214, 366341568308709, 367470747430202, 368602095664463, 369735789749694, 370870069207777, 372007153176608, 373145655996233, 374286076547576, 375427962091615, 376571542044574, 377716999592043, 378864539458650, 380013795473175, 381165217740896, 382317332922921, 383472680967630, 384628186031971, 385787504467500, 386946111242933, 388108089327077, 389271682033460, 390437889429971, 391604283066184, 392773416637483, 393944435287130, 395115604641767, 396290295634134, 397466595094813, 398644056408120, 399823884730061, 401005593478536, 402188826344049, 403373694633520, 404561981047791, 405749179528776, 406939431685005, 408131530592604, 409324954308067, 410521348475975, 411718608508472, 412917829716085, 414118956306590, 415322188137827, 416527085300694, 417733433700427, 418942331716724, 420152374263135, 421364002783104, 422577395980403, 423792898623764, 425010124061273, 426229374669116, 427450147002323, 428673624289944, 429897374046936, 431123533288353, 432351372593538, 433582822947449, 434813006623636, 436046483157627, 437282894500928, 438519040875971, 439757019372828, 440997965038867, 442240079785140, 443484462291313, 444731555754762, 445978339255250, 447227855605997, 448480086797544, 449733248446751, 450987322450746, 452244765673393, 453503381019818, 454763522811227, 456025584592066, 457290058813673, 458555247324046, 459822864161615, 461092949514555, 462363708727082, 463635895079489, 464911820422952, 466187687663221, 467466366121452, 468746616002817, 470028210141922, 471312757314047, 472598203288748, 473885272432371, 475174594334501, 476465015795706, 477757744330055, 479052416466724, 480348819350435, 481647182202860, 482947253439277, 484248512083034, 485552313622173, 486857969964978, 488164574198429, 489473701762655, 490784291733168, 492096644148075, 493411300179502, 494727689317357, 496045307801936, 497365255568609, 498687449477284, 500010568862547, 501335747966526, 502662434241804, 503991704580965, 505322052981958, 506654432172067, 507989000109970, 509324212044955, 510661840177448, 512001532956817, 513342503635826, 514686036546604, 516031076204871, 517377724607508, 518727343474553, 520078145300410, 521429056074467, 522783440474442, 524139131959187, 525496543337174, 526857422190838, 528217444408577, 529581632274134, 530946662693627, 532311834614760, 533680546735483, 535051704371342, 536423313695403, 537796691803370, 539172201925316, 540549877857205, 541928823207352, 543311223215741, 544693475279016, 546077959708393, 547464036046802, 548853348040761, 550242029951411, 551635523926500, 553028620646503, 554424387913560, 555822264061929, 557220889209512, 558621696505469, 560025230061866, 561428802276184, 562836065508759, 564243999095306, 565654085968561, 567065128422242, 568480038230125, 569893956799790, 571311613610574, 572730240277725, 574152005590562, 575575248534959, 576999225949768, 578425754453253, 579853875598684, 581283722724127, 582714549978061, 584148485672108, 585584064718129, 587022127750674, 588459065212505, 589900936512440, 591343575167211, 592787459417657, 594234550140282, 595682150650359, 597132206946714, 598583745209687, 600036645526326, 601492242580143, 602949321421683, 604407846945578, 605869107689303, 607331619426194, 608795868334189, 610261785848438, 611729774917537, 613198814493223, 614670553358276, 616144676283965, 617619625265780, 619096104738785, 620575746952334, 622055857989353, 623538035545969, 625023113070734, 626509523416503, 627996839401640, 629486032479553, 630977512484618, 632471202833598, 633966389221247, 635463114501108, 636961255455435, 638462431547104, 639964402087269, 641469367558646, 642974633730974, 644482906053419, 645993122794254, 647505205272109, 649017299537750, 650532361117315, 652049535718977, 653567690469176, 655088215385491, 656610553120008, 658134774989261, 659661281999214, 661189158190086, 662718348756195, 664249968506936, 665783385006535, 667318419340188, 668855510173177, 670395367176565, 671933916759436, 673476282039307, 675021515919670, 676567144364893, 678113830344156, 679664533401168, 681214994169811, 682768038722362, 684323080911191, 685880774547598, 687438716491527, 688999801428499, 690561394962114, 692125743196273, 693692366054624, 695260333986021, 696829289232270, 698400976891086, 699973824671271, 701549673831838, 703126187535455, 704705200232828, 706285619557381, 707867195732873, 709451438872926, 711037992008427, 712625794349158, 714214048734419, 715806001244514, 717399924658778, 718994316345727, 720590677150446, 722190402701363, 723790621480140, 725392923121004, 726998055073987, 728603228142062, 730211681284985, 731821322759290, 733432010195075, 735045851805207, 736661443613214, 738276491989247, 739895882758532, 741516581592161, 743138445553167, 744762322406730, 746388997301993, 748016553170068, 749646313071567, 751277273517719, 752911159922144, 754546104527913, 756183236791540, 757822044025127, 759461429975294, 761105197442634, 762748254977255, 764394705633220, 766043425272075, 767692336656182, 769344916049218, 770997444637057, 772653366761276, 774309714924197, 775968333981206, 777628415754614, 779290962936659, 780956682898140, 782621238201333, 784290892463104, 785959628811126, 787630213195247, 789303762499222, 790981165033981, 792656355727226, 794335711756712, 796016413077051, 797698155805268, 799382276287517, 801069050223796, 802756444093190, 804447590347769, 806139404970524, 807831658746729, 809526235046184, 811224631223428, 812923504620281, 814624418991302, 816327543076999, 818031317116686, 819737557578338, 821446543739323, 823156207463724, 824866912441477, 826581337675850, 828296149193646, 830013193599069, 831732352764316, 833453767340721, 835175712259152, 836900951119010, 838627288460105] # Hits:1.0, Total execution time: 2.667 ms, Average time per hit: 2.667 ms 




d = N // 10000 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ans = L[d] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(d*10000+1, N+1): # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


    res = factorize(i) # Hits:100.0, Total execution time: 398.713 ms, Average time per hit: 3.98713 ms 


    cnt = 1 # Hits:100.0, Total execution time: 7.875 ms, Average time per hit: 0.07875 ms 


    for v in list(res.values()): # Hits:271.0, Total execution time: 38.836 ms, Average time per hit: 0.14330627306273064 ms 


        cnt *= v + 1 # Hits:171.0, Total execution time: 18.661 ms, Average time per hit: 0.10912865497076024 ms 


    ans += cnt * i # Hits:100.0, Total execution time: 11.795 ms, Average time per hit: 0.11795 ms 


print(ans) # Hits:1.0, Total execution time: 6.292 ms, Average time per hit: 6.292 ms 

",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 50.875 ms, Average time per hit: 50.875 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, N + 1): # Hits:10000001.0, Total execution time: 885966.806 ms, Average time per hit: 0.08859667174033282 ms 


    n = N // i # Hits:10000000.0, Total execution time: 893491.322 ms, Average time per hit: 0.0893491322 ms 


    ans += i * (n + 1) * n // 2 # Hits:10000000.0, Total execution time: 1590587.553 ms, Average time per hit: 0.1590587553 ms 




print(ans) # Hits:1.0, Total execution time: 63.583 ms, Average time per hit: 63.583 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 53.667 ms, Average time per hit: 53.667 ms 


print((sum(i * (N // i) * (N // i + 1) // 2 for i in range(1, N + 1)))) # Hits:1.0, Total execution time: 1550725.959 ms, Average time per hit: 1550725.959 ms 
",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 42.334 ms, Average time per hit: 42.334 ms 




total = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1, N + 1): # Hits:8128789.0, Total execution time: 728910.502 ms, Average time per hit: 0.08967024510046946 ms 


    N_max = N // i * i # Hits:8128789.0, Total execution time: 952029.704 ms, Average time per hit: 0.1171182698923542 ms 


    num = N // i # Hits:8128789.0, Total execution time: 784768.367 ms, Average time per hit: 0.09654185475843942 ms 


    total += (N_max + i) * (num // 2) # Hits:8128789.0, Total execution time: 1175988.918 ms, Average time per hit: 0.14466963258610846 ms 


    if num%2: # Hits:8128789.0, Total execution time: 774877.602 ms, Average time per hit: 0.09532509725618417 ms 


        total += (N_max + i) // 2 # Hits:5060277.0, Total execution time: 703756.378 ms, Average time per hit: 0.13907467476582805 ms 


print(total) # Hits:1.0, Total execution time: 9.083 ms, Average time per hit: 9.083 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 48.709 ms, Average time per hit: 48.709 ms 




total = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1, N + 1): # Hits:10000001.0, Total execution time: 857004.768 ms, Average time per hit: 0.08570046822995317 ms 


    a = N // i # Hits:10000000.0, Total execution time: 898332.373 ms, Average time per hit: 0.0898332373 ms 


    total += (a * i + i) * a # Hits:10000000.0, Total execution time: 1468847.664 ms, Average time per hit: 0.14688476639999998 ms 


    # if num%2:

    #     total += (N_max + i) // 2

print((int(total / 2))) # Hits:1.0, Total execution time: 35.584 ms, Average time per hit: 35.584 ms 
",p02624,True
"import math # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 49.416 ms, Average time per hit: 49.416 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


print((int(sum([math.floor(N / (i+1)) * (math.floor(N / (i+1)) + 1) * (i+1) / 2  for i in range(N)])))) # Hits:1.0, Total execution time: 2835633.918 ms, Average time per hit: 2835633.918 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 53.875 ms, Average time per hit: 53.875 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


 

for i in range(1, N+1): # Hits:10000001.0, Total execution time: 845771.024 ms, Average time per hit: 0.0845770939422906 ms 


  Y = N // i # Hits:10000000.0, Total execution time: 889172.097 ms, Average time per hit: 0.0889172097 ms 


  ans += Y * (Y+1) * i / 2 # Hits:10000000.0, Total execution time: 1558274.555 ms, Average time per hit: 0.15582745550000002 ms 


  

print((int(ans))) # Hits:1.0, Total execution time: 43.042 ms, Average time per hit: 43.042 ms 

",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 54.417 ms, Average time per hit: 54.417 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


 

for i in range(1, N+1): # Hits:10000001.0, Total execution time: 850686.189 ms, Average time per hit: 0.08506861039313895 ms 


  Y = N // i # Hits:10000000.0, Total execution time: 894546.136 ms, Average time per hit: 0.0894546136 ms 


  ans += Y * (Y+1) * i / 2 # Hits:10000000.0, Total execution time: 1555749.077 ms, Average time per hit: 0.15557490770000001 ms 


  

print((int(ans))) # Hits:1.0, Total execution time: 40.083 ms, Average time per hit: 40.083 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 47.416 ms, Average time per hit: 47.416 ms 


ans = sum([(N//i) * (N//i + 1) * i / 2  for i in range(1, N+1)]) # Hits:1.0, Total execution time: 1396631.167 ms, Average time per hit: 1396631.167 ms 


print((int(ans))) # Hits:1.0, Total execution time: 26.875 ms, Average time per hit: 26.875 ms 
",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 42.458 ms, Average time per hit: 42.458 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,N+1): # Hits:10000001.0, Total execution time: 844452.166 ms, Average time per hit: 0.08444520815547918 ms 


    ans += N//i*(2*i + (N//i-1)*i)//2 # Hits:10000000.0, Total execution time: 2137625.652 ms, Average time per hit: 0.2137625652 ms 


    

print(ans) # Hits:1.0, Total execution time: 54.708 ms, Average time per hit: 54.708 ms 
","def solve(N): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    ans = 0

    for i in range(1,N+1):

        ans += N//i*(2*i + (N//i-1)*i)//2

    

    return ans 



print((solve(int(eval(input()))))) # Hits:1.0, Total execution time: 2172930.584 ms, Average time per hit: 2172930.584 ms 
",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 45.125 ms, Average time per hit: 45.125 ms 


res = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1, n+1): # Hits:10000001.0, Total execution time: 912191.346 ms, Average time per hit: 0.09121912547808744 ms 


    res += (int(n / i) * (i + int(n / i) * i)) // 2 # Hits:10000000.0, Total execution time: 2820406.191 ms, Average time per hit: 0.2820406191 ms 


print(res) # Hits:1.0, Total execution time: 54.792 ms, Average time per hit: 54.792 ms 
","#別解思考

n = int(eval(input())) # Hits:1.0, Total execution time: 57.708 ms, Average time per hit: 57.708 ms 


res = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, n // 2 +1): # Hits:5000001.0, Total execution time: 424350.515 ms, Average time per hit: 0.0848700860259828 ms 


    res += (int(n / i) * (i + int(n / i) * i)) // 2 # Hits:5000000.0, Total execution time: 1396303.142 ms, Average time per hit: 0.2792606284 ms 


res += (n + n // 2 +1) * (n - n // 2 ) //2 # Hits:1.0, Total execution time: 3.25 ms, Average time per hit: 3.25 ms 


print(res) # Hits:1.0, Total execution time: 52.0 ms, Average time per hit: 52.0 ms 
",p02624,True
"n=int(eval(input()));a=0; # Hits:1.0, Total execution time: 46.917 ms, Average time per hit: 46.917 ms 


for i in range(n): i+=1;y=n//i;a+=y*(y+1)//2*i # Hits:10000001.0, Total execution time: 2182225.703 ms, Average time per hit: 0.21822254847774517 ms 


print(a) # Hits:1.0, Total execution time: 37.541 ms, Average time per hit: 37.541 ms 
","n=int(eval(input()));print((sum([n//i*(n//i*i+i)//2 for i in range(1,n+1)]))) # Hits:1.0, Total execution time: 1485786.418 ms, Average time per hit: 1485786.418 ms 
",p02624,True
"def resolve():

    N = int(eval(input()))



    def calc(x: int, n: int):

        y = int(n/x)

        return int(y * (y + 1) * x / 2)



    result = 0

    for i in range(1, N+1):

        result += calc(i, N)

    print(result)



if __name__ == ""__main__"":

    resolve()",,p02624,False
"N = int(eval(input())) # Hits:1.0, Total execution time: 42.208 ms, Average time per hit: 42.208 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1, N+1): # Hits:10000001.0, Total execution time: 843485.715 ms, Average time per hit: 0.0843485630651437 ms 


  n = N//i # Hits:10000000.0, Total execution time: 927435.876 ms, Average time per hit: 0.0927435876 ms 


  cnt = (n*(2*i + (n-1) *i))//2 # Hits:10000000.0, Total execution time: 1678114.44 ms, Average time per hit: 0.167811444 ms 


  ans += cnt # Hits:10000000.0, Total execution time: 1016363.482 ms, Average time per hit: 0.1016363482 ms 


print(ans) # Hits:1.0, Total execution time: 45.75 ms, Average time per hit: 45.75 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 56.292 ms, Average time per hit: 56.292 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, N+1): # Hits:10000001.0, Total execution time: 842625.642 ms, Average time per hit: 0.08426255577374442 ms 


  n = N//i # Hits:10000000.0, Total execution time: 944479.277 ms, Average time per hit: 0.09444792769999999 ms 


  cnt = i*n*(n+1)//2 # Hits:10000000.0, Total execution time: 1408014.631 ms, Average time per hit: 0.1408014631 ms 


  ans += cnt # Hits:10000000.0, Total execution time: 1031701.132 ms, Average time per hit: 0.1031701132 ms 


print(ans) # Hits:1.0, Total execution time: 56.917 ms, Average time per hit: 56.917 ms 
",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 51.833 ms, Average time per hit: 51.833 ms 


ans = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in range(1, N + 1): # Hits:10000001.0, Total execution time: 849327.019 ms, Average time per hit: 0.08493269340673067 ms 


    n = N // i # Hits:10000000.0, Total execution time: 927003.601 ms, Average time per hit: 0.0927003601 ms 


    cnt = (n * (2 * i + (n - 1) * i)) // 2 # Hits:10000000.0, Total execution time: 1679961.482 ms, Average time per hit: 0.1679961482 ms 


    ans += cnt # Hits:10000000.0, Total execution time: 1015350.736 ms, Average time per hit: 0.1015350736 ms 


print(ans) # Hits:1.0, Total execution time: 137.417 ms, Average time per hit: 137.417 ms 

","N = int(eval(input())); print((sum((((N // i) * (2 * i + (N // i - 1) * i) // 2) for i in range(1, N + 1))))) # Hits:1.0, Total execution time: 1800562.917 ms, Average time per hit: 1800562.917 ms 
",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 46.0 ms, Average time per hit: 46.0 ms 




a = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def g(x): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    y = N//x

    return y * (y+1)*x//2



print((sum(g(x) for x in range(1,N+1)))) # Hits:1.0, Total execution time: 2470770.918 ms, Average time per hit: 2470770.918 ms 


    

        
","# ABC172 C

N = int(eval(input())) # Hits:1.0, Total execution time: 45.792 ms, Average time per hit: 45.792 ms 


print((sum((N//x)*(N//x+1)*x//2 for x in range(1,N+1)))) # Hits:1.0, Total execution time: 1523898.125 ms, Average time per hit: 1523898.125 ms 


    

        
",p02624,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 43.042 ms, Average time per hit: 43.042 ms 




ans=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 845540.539 ms, Average time per hit: 0.08455404544459547 ms 


    k=n//i # Hits:10000000.0, Total execution time: 892403.019 ms, Average time per hit: 0.0892403019 ms 


    ans+=k*(k+1)//2*i # Hits:10000000.0, Total execution time: 1541496.296 ms, Average time per hit: 0.1541496296 ms 




print(ans) # Hits:1.0, Total execution time: 47.708 ms, Average time per hit: 47.708 ms 

","n=int(eval(input())) # Hits:1.0, Total execution time: 50.209 ms, Average time per hit: 50.209 ms 




ans=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


lastk=n # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,n+1): # Hits:3162.0, Total execution time: 322.015 ms, Average time per hit: 0.10183902593295382 ms 


    k=n//i # Hits:3162.0, Total execution time: 344.217 ms, Average time per hit: 0.10886053130929792 ms 


    ans+=i*(i-1)//2*(lastk+k+1)*(lastk-k)//2 # Hits:3162.0, Total execution time: 910.432 ms, Average time per hit: 0.2879291587602783 ms 


    if i>k: # Hits:3162.0, Total execution time: 374.517 ms, Average time per hit: 0.11844307400379506 ms 


        break

    ans+=k*(k+1)//2*i # Hits:3162.0, Total execution time: 579.07 ms, Average time per hit: 0.18313409234661607 ms 


    if i==k: # Hits:3162.0, Total execution time: 311.19 ms, Average time per hit: 0.09841555977229602 ms 


        break # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


    lastk=k # Hits:3161.0, Total execution time: 281.067 ms, Average time per hit: 0.08891711483707689 ms 




print(ans) # Hits:1.0, Total execution time: 27.375 ms, Average time per hit: 27.375 ms 

",p02624,True
"def solve():

    n = int(eval(input()))



    ans = (n * (n+1))//2



    for i in range(2, n+1):

        d = (n // i) * i

        sigma = (d * (d+i))//(2*i)

        ans += sigma



    return ans





def main():

    print((solve()))





if __name__ == ""__main__"":

    main()
",,p02624,False
"n=int(eval(input())) # Hits:1.0, Total execution time: 52.375 ms, Average time per hit: 52.375 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


l=[x for x in range(1,n+1)] # Hits:1.0, Total execution time: 598500.917 ms, Average time per hit: 598500.917 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 904327.078 ms, Average time per hit: 0.09043269875673011 ms 


  num=n//i # Hits:10000000.0, Total execution time: 897961.47 ms, Average time per hit: 0.089796147 ms 


  k=num*((2*i)+((num-1)*i)) # Hits:10000000.0, Total execution time: 1557415.649 ms, Average time per hit: 0.1557415649 ms 


  ans+=k//2 # Hits:10000000.0, Total execution time: 1176503.624 ms, Average time per hit: 0.1176503624 ms 


print(ans) # Hits:1.0, Total execution time: 55.875 ms, Average time per hit: 55.875 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 50.0 ms, Average time per hit: 50.0 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 853761.683 ms, Average time per hit: 0.08537615976238402 ms 


  num=n//i # Hits:10000000.0, Total execution time: 964454.669 ms, Average time per hit: 0.0964454669 ms 


  k=num*i*(num+1) # Hits:10000000.0, Total execution time: 1316047.703 ms, Average time per hit: 0.1316047703 ms 


  ans+=k//2 # Hits:10000000.0, Total execution time: 1180469.075 ms, Average time per hit: 0.1180469075 ms 


print(ans) # Hits:1.0, Total execution time: 58.541 ms, Average time per hit: 58.541 ms 
",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 50.167 ms, Average time per hit: 50.167 ms 




ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,N+1): # Hits:10000001.0, Total execution time: 910127.073 ms, Average time per hit: 0.09101269819873017 ms 


	n=N//i # Hits:10000000.0, Total execution time: 964400.693 ms, Average time per hit: 0.0964400693 ms 


	ans+=int(i*(n+1)*n/2) # Hits:10000000.0, Total execution time: 2024476.401 ms, Average time per hit: 0.2024476401 ms 




print(ans) # Hits:1.0, Total execution time: 50.875 ms, Average time per hit: 50.875 ms 




# 2darray [[0] * 4 for i in range(3)]

# import itertools","N = int(eval(input())) # Hits:1.0, Total execution time: 54.25 ms, Average time per hit: 54.25 ms 




ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,N+1): # Hits:10000001.0, Total execution time: 941283.289 ms, Average time per hit: 0.09412831948716806 ms 


	n=N//i # Hits:10000000.0, Total execution time: 954424.323 ms, Average time per hit: 0.09544243229999999 ms 


	ans+=i*(n+1)*n/2 # Hits:10000000.0, Total execution time: 1602335.189 ms, Average time per hit: 0.1602335189 ms 




print((int(ans))) # Hits:1.0, Total execution time: 65.583 ms, Average time per hit: 65.583 ms 




# 2darray [[0] * 4 for i in range(3)]

# import itertools",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 49.083 ms, Average time per hit: 49.083 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, N+1): # Hits:9837271.0, Total execution time: 811476.385 ms, Average time per hit: 0.08248998985592651 ms 


    first = i # Hits:9837271.0, Total execution time: 748642.05 ms, Average time per hit: 0.07610261524766371 ms 


    n = N // i # Hits:9837271.0, Total execution time: 947070.924 ms, Average time per hit: 0.09627374543204106 ms 


    last = n * i # Hits:9837271.0, Total execution time: 909410.804 ms, Average time per hit: 0.09244543573110876 ms 


    ans += (first + last) * n // 2 # Hits:9837271.0, Total execution time: 1496087.781 ms, Average time per hit: 0.15208361963394118 ms 


print(ans) # Hits:1.0, Total execution time: 7.917 ms, Average time per hit: 7.917 ms 

","import math # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 45.0 ms, Average time per hit: 45.0 ms 




ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1, N+1): # Hits:9729310.0, Total execution time: 837862.424 ms, Average time per hit: 0.08611735302914594 ms 


    first = i # Hits:9729310.0, Total execution time: 782773.165 ms, Average time per hit: 0.08045515714886256 ms 


    n = N // i # Hits:9729310.0, Total execution time: 915135.017 ms, Average time per hit: 0.09405960104056711 ms 


    last = n * i # Hits:9729310.0, Total execution time: 936730.721 ms, Average time per hit: 0.09627925526065054 ms 


    ans += (first + last) * n // 2 # Hits:9729310.0, Total execution time: 1470794.599 ms, Average time per hit: 0.1511715218242609 ms 


print(ans) # Hits:1.0, Total execution time: 6.709 ms, Average time per hit: 6.709 ms 

",p02624,True
"import math # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 49.375 ms, Average time per hit: 49.375 ms 


g=0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 846921.906 ms, Average time per hit: 0.08469218213078179 ms 


    j= math.floor(n/i) # Hits:10000000.0, Total execution time: 1290624.377 ms, Average time per hit: 0.1290624377 ms 


    g+= j*(j+1)*i/2 # Hits:10000000.0, Total execution time: 1551059.825 ms, Average time per hit: 0.15510598250000002 ms 


print((int(g))) # Hits:1.0, Total execution time: 59.25 ms, Average time per hit: 59.25 ms 
","

n=int(eval(input())) # Hits:1.0, Total execution time: 41.5 ms, Average time per hit: 41.5 ms 


g=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 879831.089 ms, Average time per hit: 0.08798310010168998 ms 


    g+= 0.5*i*(n//i)*((n//i)+1) # Hits:10000000.0, Total execution time: 1916591.399 ms, Average time per hit: 0.19165913990000003 ms 


print((int(g))) # Hits:1.0, Total execution time: 67.167 ms, Average time per hit: 67.167 ms 
",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 37.667 ms, Average time per hit: 37.667 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




#初項a、公差d=a、n項までの和

for a in range(1,N+1): # Hits:10000001.0, Total execution time: 852401.727 ms, Average time per hit: 0.08524016417598358 ms 


    n=N//a # Hits:10000000.0, Total execution time: 930004.652 ms, Average time per hit: 0.0930004652 ms 


    S=((2*a+(n-1)*a)*n)//2 # Hits:10000000.0, Total execution time: 1680516.349 ms, Average time per hit: 0.16805163490000002 ms 


    ans=ans+S # Hits:10000000.0, Total execution time: 1012861.808 ms, Average time per hit: 0.1012861808 ms 


print(ans) # Hits:1.0, Total execution time: 60.959 ms, Average time per hit: 60.959 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 46.958 ms, Average time per hit: 46.958 ms 


ans=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




#初項a、公差d=a、n項までの和

for a in range(1,N+1): # Hits:10000001.0, Total execution time: 847246.107 ms, Average time per hit: 0.08472460222753977 ms 


    n=N//a # Hits:10000000.0, Total execution time: 899039.846 ms, Average time per hit: 0.0899039846 ms 


    ans=(n*(2*a+(n-1)*a))//2+ans # Hits:10000000.0, Total execution time: 1900322.239 ms, Average time per hit: 0.1900322239 ms 


print(ans) # Hits:1.0, Total execution time: 48.792 ms, Average time per hit: 48.792 ms 

",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 76.0 ms, Average time per hit: 76.0 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,N+1): # Hits:10000001.0, Total execution time: 848881.856 ms, Average time per hit: 0.08488817711118228 ms 


    x = N // i # Hits:10000000.0, Total execution time: 891797.887 ms, Average time per hit: 0.0891797887 ms 


    ans += x * (x+1) * i // 2 # Hits:10000000.0, Total execution time: 1569924.387 ms, Average time per hit: 0.15699243870000001 ms 


print(ans) # Hits:1.0, Total execution time: 54.166 ms, Average time per hit: 54.166 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 48.709 ms, Average time per hit: 48.709 ms 


print((sum([(N//i)*(N//i+1)*i//2 for i in range(1,N+1)]))) # Hits:1.0, Total execution time: 1448485.251 ms, Average time per hit: 1448485.251 ms 
",p02624,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 47.292 ms, Average time per hit: 47.292 ms 




ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for a in range(1, n + 1): # Hits:10000001.0, Total execution time: 840271.017 ms, Average time per hit: 0.08402709329729068 ms 


    num = n // a # Hits:10000000.0, Total execution time: 887055.836 ms, Average time per hit: 0.0887055836 ms 


    ans += num * (num + 1) // 2 * a # Hits:10000000.0, Total execution time: 1537035.786 ms, Average time per hit: 0.15370357859999997 ms 


print(ans) # Hits:1.0, Total execution time: 38.166 ms, Average time per hit: 38.166 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 54.458 ms, Average time per hit: 54.458 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


s = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for a in range(1, int(n ** .5) + 1): # Hits:3163.0, Total execution time: 249.031 ms, Average time per hit: 0.07873253240594373 ms 


    div = n // a # Hits:3162.0, Total execution time: 271.975 ms, Average time per hit: 0.08601359898798229 ms 


    ans += ((div + 1) * div // 2 - s) * a * 2 + a * a # Hits:3162.0, Total execution time: 722.722 ms, Average time per hit: 0.22856483238456674 ms 


    s += a + 1 # Hits:3162.0, Total execution time: 378.399 ms, Average time per hit: 0.11967077798861481 ms 




print(ans) # Hits:1.0, Total execution time: 9.959 ms, Average time per hit: 9.959 ms 

",p02624,True
"# 幅優先探索（行きがけ）

import collections

import sys

import copy

import re

import math





def I(): return int(sys.stdin.readline().rstrip())

def LI(): return list(map(int, sys.stdin.readline().rstrip().split()))

def S(): return sys.stdin.readline().rstrip()

def LS(): return list(sys.stdin.readline().rstrip().split())





def main():

    N = I()



    num = 0



    for i in range(1, N+1):

        y = math.floor(N/i)

        num += int((y*(y+1)*i)/2)



    print(num)





if __name__ == '__main__':

    main()
",,p02624,False
"# coding: utf-8

# Your code here!

import sys # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


read = sys.stdin.read # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


readline = sys.stdin.readline # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




n, = list(map(int,readline().split())) # Hits:1.0, Total execution time: 46.208 ms, Average time per hit: 46.208 ms 




ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 847092.655 ms, Average time per hit: 0.0847092570290743 ms 


    ans += (i+i*(n//i))*(n//i)//2 # Hits:10000000.0, Total execution time: 1893504.053 ms, Average time per hit: 0.1893504053 ms 


print(ans) # Hits:1.0, Total execution time: 56.667 ms, Average time per hit: 56.667 ms 

","def F(N):  # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    r = int(N**0.5) # x >= 10^9 のときは注意

    ans = 0

    for d in range(1,N//r+1):

        ans += d*(1+(N//d))*(N//d)//2



    #print(ans)    

    for c in range(1,r):

        a = N//(c+1)

        b = N//c

        """"""

        (a,b] 上で d の和を求める

        """"""

        s = b*(b+1)//2-a*(a+1)//2

        ans += s*(c*c+c)//2

        #ans %= MOD

    return ans





# coding: utf-8

# Your code here!

import sys # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


read = sys.stdin.read # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


readline = sys.stdin.readline # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




n, = list(map(int,readline().split())) # Hits:1.0, Total execution time: 41.209 ms, Average time per hit: 41.209 ms 


print((F(n))) # Hits:1.0, Total execution time: 2095.209 ms, Average time per hit: 2095.209 ms 







",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 42.333 ms, Average time per hit: 42.333 ms 




ans = int(sum([j * (N//j)*(N//j+1)/2 for j in range(1,N+1)])) # Hits:1.0, Total execution time: 1419640.917 ms, Average time per hit: 1419640.917 ms 




print(ans) # Hits:1.0, Total execution time: 27.125 ms, Average time per hit: 27.125 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 53.958 ms, Average time per hit: 53.958 ms 




def gen(): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


  for j in range(1,N+1):

    yield j * (N//j)*(N//j+1)/2



ans = int(sum(gen())) # Hits:1.0, Total execution time: 1689640.042 ms, Average time per hit: 1689640.042 ms 




print(ans) # Hits:1.0, Total execution time: 48.125 ms, Average time per hit: 48.125 ms 

",p02624,True
"def f(n):

    ans=0

    for a in range(1,n+1):

        ans+=a*(n//a)*(n//a+1)//2

    print(ans)

if __name__ == ""__main__"":

    f(int(eval(input())))","n=int(eval(input()));print((sum(m*((n//m)**2+n//m-m**2)for m in range(1,int(n**.5)+1)))) # Hits:1.0, Total execution time: 637.459 ms, Average time per hit: 637.459 ms 
",p02624,False
"

N = int(eval(input())) # Hits:1.0, Total execution time: 58.875 ms, Average time per hit: 58.875 ms 




Answer = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(1,N+1): # Hits:10000001.0, Total execution time: 842925.862 ms, Average time per hit: 0.08429257777074223 ms 


    num = i*(N//i)*(N//i + 1) // 2 # Hits:10000000.0, Total execution time: 1628209.352 ms, Average time per hit: 0.16282093520000002 ms 


    Answer += num # Hits:10000000.0, Total execution time: 980683.892 ms, Average time per hit: 0.0980683892 ms 




print(Answer) # Hits:1.0, Total execution time: 31.209 ms, Average time per hit: 31.209 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 47.416 ms, Average time per hit: 47.416 ms 


print((sum(i*(N//i)*(N//i + 1) // 2 for i in range(1,N+1) ))) # Hits:1.0, Total execution time: 1531302.917 ms, Average time per hit: 1531302.917 ms 
",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 59.167 ms, Average time per hit: 59.167 ms 


print((sum(i*(N//i)*(N//i + 1) // 2 for i in range(1,N+1) ))) # Hits:1.0, Total execution time: 1534765.959 ms, Average time per hit: 1534765.959 ms 
","n=int(eval(input()));print((sum(m*((g:=n//m)**2+g-m**2)for m in range(1,int(n**.5)+1)))) # Hits:1.0, Total execution time: 602.25 ms, Average time per hit: 602.25 ms 
",p02624,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 43.041 ms, Average time per hit: 43.041 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 847870.382 ms, Average time per hit: 0.08478702972129704 ms 


    A=n//i # Hits:10000000.0, Total execution time: 891361.628 ms, Average time per hit: 0.08913616279999999 ms 


    ans+=((A**2+A)*i//2) # Hits:10000000.0, Total execution time: 1639115.215 ms, Average time per hit: 0.1639115215 ms 


print(ans) # Hits:1.0, Total execution time: 47.375 ms, Average time per hit: 47.375 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 55.833 ms, Average time per hit: 55.833 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,n+1): # Hits:10000001.0, Total execution time: 882184.419 ms, Average time per hit: 0.08821843307815669 ms 


    A=n//i # Hits:10000000.0, Total execution time: 892424.993 ms, Average time per hit: 0.0892424993 ms 


    ans+=(A*(A+1)*i//2) # Hits:10000000.0, Total execution time: 1571440.287 ms, Average time per hit: 0.1571440287 ms 


print(ans) # Hits:1.0, Total execution time: 68.5 ms, Average time per hit: 68.5 ms 
",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 49.708 ms, Average time per hit: 49.708 ms 




def g(n): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


  return ((n**2)+n)//2



goukei = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(1,N+1): # Hits:10000001.0, Total execution time: 842533.078 ms, Average time per hit: 0.08425329937467006 ms 


  goukei += (i*g(N//i)) # Hits:10000000.0, Total execution time: 2801577.241 ms, Average time per hit: 0.2801577241 ms 


print(goukei) # Hits:1.0, Total execution time: 44.042 ms, Average time per hit: 44.042 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 53.5 ms, Average time per hit: 53.5 ms 




def g(n): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


  return ((n**2)+n)//2



goukei = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


half = N//2 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,half+1): # Hits:5000001.0, Total execution time: 422962.504 ms, Average time per hit: 0.08459248388150323 ms 


  goukei += i*g(N//i) # Hits:5000000.0, Total execution time: 1381948.573 ms, Average time per hit: 0.2763897146 ms 




add = list(range(half+1,N+1)) # Hits:1.0, Total execution time: 49955.834 ms, Average time per hit: 49955.834 ms 


goukei += sum(add) # Hits:1.0, Total execution time: 13422.459 ms, Average time per hit: 13422.459 ms 


print(goukei) # Hits:1.0, Total execution time: 28.834 ms, Average time per hit: 28.834 ms 
",p02624,True
"import math # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


N=int(eval(input())) # Hits:1.0, Total execution time: 50.666 ms, Average time per hit: 50.666 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,N+1): # Hits:10000001.0, Total execution time: 841551.709 ms, Average time per hit: 0.08415516248448375 ms 


  Y=math.floor(N/i) # Hits:10000000.0, Total execution time: 1275990.429 ms, Average time per hit: 0.1275990429 ms 


  ans+=(Y*(Y+1)*i)//2 # Hits:10000000.0, Total execution time: 1564725.771 ms, Average time per hit: 0.15647257709999998 ms 


print(ans) # Hits:1.0, Total execution time: 53.0 ms, Average time per hit: 53.0 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 44.0 ms, Average time per hit: 44.0 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, N + 1): # Hits:10000001.0, Total execution time: 847437.941 ms, Average time per hit: 0.08474378562562145 ms 


    largest = N // i * i # Hits:10000000.0, Total execution time: 1050622.612 ms, Average time per hit: 0.10506226119999999 ms 


    ans += ((largest + i) * (N // i)) // 2 # Hits:10000000.0, Total execution time: 1588510.256 ms, Average time per hit: 0.1588510256 ms 


print(ans) # Hits:1.0, Total execution time: 59.708 ms, Average time per hit: 59.708 ms 

",p02624,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 50.458 ms, Average time per hit: 50.458 ms 




s,k,n = 0,1,N # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while k<=n: # Hits:3163.0, Total execution time: 295.96 ms, Average time per hit: 0.0935693961429023 ms 


	m = N//k # Hits:3162.0, Total execution time: 275.873 ms, Average time per hit: 0.08724636306135358 ms 


	s += (k-1)*k*(n-m)*(n+m+1)//2 # Hits:3162.0, Total execution time: 696.218 ms, Average time per hit: 0.22018279569892474 ms 


	s += k*m*(m+1) # Hits:3162.0, Total execution time: 441.185 ms, Average time per hit: 0.13952719797596458 ms 


	k,n = k+1,m # Hits:3162.0, Total execution time: 317.295 ms, Average time per hit: 0.10034629981024668 ms 


if m<k-1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


	s -= (k-1)*m*(m+1) 

print((s//2)) # Hits:1.0, Total execution time: 7.792 ms, Average time per hit: 7.792 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 46.75 ms, Average time per hit: 46.75 ms 




s=k=kn=0;n=N # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while k<n: # Hits:3163.0, Total execution time: 297.196 ms, Average time per hit: 0.09396016440088523 ms 


	k += 1 # Hits:3162.0, Total execution time: 280.212 ms, Average time per hit: 0.08861859582542696 ms 


	n = N//k # Hits:3162.0, Total execution time: 301.423 ms, Average time per hit: 0.09532669196710943 ms 


	kn = k*n*(n+1) # Hits:3162.0, Total execution time: 377.872 ms, Average time per hit: 0.11950411132194813 ms 


	s += 4*kn # Hits:3162.0, Total execution time: 370.79 ms, Average time per hit: 0.11726438962681847 ms 


s -= (k+1)*kn # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


if n<k: # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


	s -= 2*kn 

print((s//4)) # Hits:1.0, Total execution time: 9.791 ms, Average time per hit: 9.791 ms 

",p02624,True
"from typing import Callable, List, Union



T = Union[int, str]





class SegmentTree:

    """"""Segment Tree""""""



    __slots__ = [""_n"", ""_log"", ""_size"", ""op"", ""e"", ""tree""]



    def __init__(self, initial_values: List[T], op: Callable[[T, T], T], e: T) -> None:

        self._n = len(initial_values)

        self._log = (self._n - 1).bit_length()

        self._size = 1 << self._log

        self.op = op

        self.e = e



        self.tree = [e] * 2 * self._size

        for i, a in enumerate(initial_values, self._size):

            self[i] = a

        for i in range(self._size - 1, 0, -1):

            self._update(i)



    def __getitem__(self, k: int) -> T:

        return self.tree[k]



    def __setitem__(self, k: int, value: T) -> None:

        self.tree[k] = value



    def _update(self, k: int) -> None:

        self[k] = self.op(self[2 * k], self[2 * k + 1])



    def get(self, index: int) -> T:

        assert 0 <= index < self._n

        return self[index + self._size]



    def set(self, p: int, x: T) -> None:

        assert 0 <= p < self._n



        p += self._size

        self[p] = x

        for i in range(1, self._log + 1):

            self._update(p >> i)



    def prod(self, l: int, r: int) -> T:

        assert 0 <= l <= r <= self._n



        sml, smr = self.e, self.e

        l += self._size

        r += self._size



        while l < r:

            if l & 1:

                sml = self.op(sml, self[l])

                l += 1

            if r & 1:

                r -= 1

                smr = self.op(self[r], smr)

            l >>= 1

            r >>= 1

        return self.op(sml, smr)



    def prod_all(self) -> T:

        return self[1]



    def max_right(self, l: int, f: Callable[[T], bool]) -> int:

        assert 0 <= l <= self._n

        assert f(self.e)



        if l == self._n:

            return self._n



        l += self._size

        sm = self.e



        while True:

            while not l & 1:

                l >>= 1



            if not f(self.op(sm, self[l])):

                while l < self._size:

                    l *= 2

                    if f(self.op(sm, self[l])):

                        sm = self.op(sm, self[l])

                        l += 1

                return l - self._size



            sm = self.op(sm, self[l])

            l += 1



            if (l & -l) == l:

                break



        return self._n



    def min_left(self, r: int, f: Callable[[T], bool]) -> int:

        assert 0 <= r <= self._n

        assert f(self.e)



        if not r:

            return 0



        r += self._size

        sm = self.e



        while True:

            r -= 1

            while r > 1 and r % 2:

                r >>= 1



            if not f(self.op(self[r], sm)):

                while r < self._size:

                    r = 2 * r + 1

                    if f(self.op(self[r], sm)):

                        sm = self.op(self[r], sm)

                        r -= 1

                return r + 1 - self._size



            if (r & -r) == r:

                break



        return 0





def practice2_j():

    N, _, *AQ = list(map(int, open(0).read().split()))

    A, Q = AQ[:N], AQ[N:]

    tree = SegmentTree(A, max, -1)

    res = []

    for t, x, y in zip(*[iter(Q)] * 3):

        if t == 1:

            tree.set(x - 1, y)

        elif t == 2:

            res.append(tree.prod(x - 1, y))

        else:

            res.append(tree.max_right(x - 1, lambda n: n < y) + 1)

    print((""\n"".join(map(str, res))))





if __name__ == ""__main__"":

    practice2_j()
",,p02567,False
"#####################################################################################################

##### Lazy Propotional Segment tree (遅延区間比例セグメント木)

#####################################################################################################



""""""

区間更新、区間取得が可能



セグ木の深さ毎でモノイド間の作用 g の振る舞いが異なってしまう場合がある。

実際のところ、作用 g は大域的作用である必要はなく、時間効率そのままで局所変数を一つ持たせて局所化することができる。

ただし、一般化された分配法則

g[i](x*y) = g[i<<1]x * g[(i<<1)|1]x

を満たす必要がある。



以下の例では、 セグ木の i 番目のノードを構成する要素の数（何個の要素の積か？）を l[i] として、

g[i]x = x*l[i]

という局所作用を考えている。



例)



RSQ and RUQ:

http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=4777823#2



# クエリ関数

ef = 0

f = lambda x, y : x+y

# 更新関数

eh = -(1<<24)

h = lambda x, y: x if x != eh else y

g = lambda x, y, l: x*l



#################################################################################

#################################################################################





解説

https://maspypy.com/segment-tree-%E3%81%AE%E3%81%8A%E5%8B%89%E5%BC%B72

https://smijake3.hatenablog.com/entry/2018/11/03/100133



解説（作用付きモノイド）

https://algo-logic.info/segment-tree/



参考コード（C++）

https://ei1333.github.io/library/library/structure/segment-tree/lazy-segment-tree.cpp.html



参考コード(python)

https://yukicoder.me/submissions/470340





""""""





class LazyPropSegmentTree(): # Hits:1.0, Total execution time: 10.375 ms, Average time per hit: 10.375 ms 




    def __init__(self, n, f, g, h, ef, eh):

        """"""

        :param n: 配列の要素数

        :param f: 取得半群の元同士の積を定義

        :param g: 更新半群の元 xh が配列上の実際の値にどのように作用するかを定義

        :param h: 更新半群の元同士の積を定義　（更新半群の元を xh と表記）

        :param x: 配列の各要素の値。treeの葉以外は xf(x1,x2,...)

        :param length: 添え字 i がいくつの要素を畳み込んだ値になっているか

        """"""

        self.n = n

        self.f = f

        self.g = lambda xh, x, l: g(xh, x, l) if xh != eh else x

        self.h = h

        self.ef = ef

        self.eh = eh

        l = (self.n - 1).bit_length()

        self.size = 1 << l

        self.tree = [self.ef] * (self.size << 1)

        self.lazy = [self.eh] * ((self.size << 1) + 1)

        self.plt_cnt = 0

        self.length = [0]

        for i in range(l+1):

            self.length += [1<<(l-i)]*(1<<i)



    def built(self, array):

        """"""

        arrayを初期値とするセグメント木を構築

        """"""

        size, tree, f = self.size, self.tree, self.f

        for i in range(self.n):

            tree[size + i] = array[i]

        for i in range(size - 1, 0, -1):

            tree[i] = f(tree[i<<1], tree[(i<<1)|1])



    def update(self, i, x):

        """"""

        i 番目の要素を x に更新する

        """"""

        size, tree, lazy, eh = self.size, self.tree, self.lazy, self.eh

        i += size

        self.propagate_lazy(i)

        tree[i] = x

        lazy[i] = eh

        self.propagate_tree(i)



    def get(self, i):

        """"""

        i 番目の値を取得（ 0-indexed ） ( O(logN) )

        """"""

        size, tree, lazy, length, g = self.size, self.tree, self.lazy, self.length, self.g

        i += size

        self.propagate_lazy(i)

        return g(lazy[i], tree[i], length[i])



    def update_range(self, l, r, x):

        """"""

        半開区間 [l, r) の各々の要素 a に op(x, a)を作用させる （ 0-indexed ）　（ O(logN) ）

        """"""

        size, lazy, h = self.size, self.lazy, self.h

        if l >= r:

            return

        l += size

        r += size

        l0 = l//(l&-l)

        r0 = r//(r&-r)

        self.propagate_lazy(l0)

        self.propagate_lazy(r0-1)

        while l < r:

            if r&1:

                r -= 1              # 半開区間なので先に引いてる

                lazy[r] = h(x, lazy[r])

            if l&1:

                lazy[l] = h(x, lazy[l])

                l += 1

            l >>= 1

            r >>= 1

        self.propagate_tree(l0)

        self.propagate_tree(r0-1)



    def get_range(self, l, r):

        """"""

        [l, r)の区間取得の結果を返す　(0-indexed)

        """"""

        size, tree, lazy, length, ef, f, g = self.size, self.tree, self.lazy, self.length, self.ef, self.f, self.g

        l += size

        r += size

        self.propagate_lazy(l//(l&-l))

        self.propagate_lazy((r//(r&-r))-1)

        res_l = ef

        res_r = ef

        while l < r:

            if l & 1:

                res_l = f(res_l, g(lazy[l], tree[l], length[l]))

                l += 1

            if r & 1:

                r -= 1

                res_r = f(g(lazy[r], tree[r], length[r]), res_r)

            l >>= 1

            r >>= 1

        return f(res_l, res_r)



    def max_right(self, l, z):

        """"""

        以下の条件を両方満たす r を(いずれか一つ)返す

            ・r = l or f(op(a[l], a[l + 1], ..., a[r - 1])) = true

            ・r = n or f(op(a[l], a[l + 1], ..., a[r])) = false

        """"""

        if l >= self.n: return self.n

        l += self.size

        s = self.ef

        while 1:

            while l % 2 == 0:

                l >>= 1

            if not z(self.f(s, self.g(self.lazy[l], self.tree[l], self.length[l]))):

                while l < self.size:

                    l *= 2

                    if z(self.f(s, self.g(self.lazy[l], self.tree[l], self.length[l]))):

                        s = self.f(s, self.g(self.lazy[l], self.tree[l], self.length[l]))

                        l += 1

                return l - self.size

            s = self.f(s, self.g(self.lazy[l], self.tree[l], self.length[l]))

            l += 1

            if l & -l == l: break

        return self.n



    def min_left(self, r, z):

        """"""

        以下の条件を両方満たす l を(いずれか一つ)返す

            ・l = r or f(op(a[l], a[l + 1], ..., a[r - 1])) = true

            ・l = 0 or f(op(a[l - 1], a[l], ..., a[r - 1])) = false

        """"""

        if r <= 0: return 0

        r += self.size

        s = self.ef

        while 1:

            r -= 1

            while r > 1 and r % 2:

                r >>= 1

            if not z(self.f(self.g(self.lazy[r], self.tree[r]), s)):

                while r < self.size:

                    r = r * 2 + 1

                    if z(self.f(self.g(self.lazy[r], self.tree[r]), s)):

                        s = self.f(self.g(self.lazy[r], self.tree[r]), s)

                        r -= 1

                return r + 1 - self.size

            s = self.f(self.g(self.lazy[r], self.tree[r]), s)

            if r & -r == r: break

        return 0



    def propagate_lazy(self, i):

        """"""

        lazy の値をトップダウンで更新する　（ O(logN) ）

        """"""

        tree, lazy, length, eh, h, f, g = self.tree, self.lazy, self.length, self.eh, self.h, self.f, self.g

        for k in range(i.bit_length()-1,0,-1):

            x = i>>k

            if lazy[x] == eh:

                continue

            laz = lazy[x]

            lazy[(x<<1)|1] = h(laz, lazy[(x<<1)|1])

            lazy[x<<1] = h(laz, lazy[x<<1])

            tree[x] = g(laz, tree[x], length[x])   # get_range ではボトムアップの伝搬を行わないため、この処理をしないと tree が更新されない

            lazy[x] = eh



    def propagate_tree(self, i):

        """"""

        tree の値をボトムアップで更新する　（ O(logN) ）

        """"""

        tree, lazy, length, f, g = self.tree, self.lazy, self.length, self.f, self.g

        while i>1:

            i>>=1

            tree[i] = f(g(lazy[i<<1], tree[i<<1], length[i<<1]), g(lazy[(i<<1)|1], tree[(i<<1)|1], length[i<<1]))



    def __getitem__(self, i):

        return self.get(i)



    def __iter__(self):

        size, tree, lazy, length, eh, h, g = self.size, self.tree, self.lazy, self.length, self.eh, self.h, self.g

        for x in range(1, size):

            if lazy[x] == eh:

                continue

            lazy[(x<<1)|1] = h(lazy[x], lazy[(x<<1)|1])

            lazy[x<<1] = h(lazy[x], lazy[x<<1])

            self.tree[x] = self.g(self.lazy[x], self.tree[x])

            lazy[x] = eh

        for xh, x in zip(lazy[size:size+self.n], tree[size:size+self.n]):

            yield g(xh,x,1)



    def __str__(self):

        return str(list(self))



    def debug(self):

        tree, lazy = self.tree, self.lazy

        def full_tree_pos(G):

            n = G.number_of_nodes()

            if n == 0: return {}

            pos = {0: (0.5, 0.9)}

            if n == 1: return pos

            i = 1

            while not n >= 2 ** i or not n < 2 ** (i + 1): i+=1

            height = i

            p_key, p_y, p_x = 0, 0.9, 0.5

            l_child = True

            for i in range(height):

                for j in range(2 ** (i + 1)):

                    if 2 ** (i + 1) + j - 1 < n:

                        if l_child == True:

                            pos[2 ** (i + 1) + j - 1] = (p_x - 0.2 / (i * i + 1), p_y - 0.1)

                            G.add_edge(2 ** (i + 1) + j - 1, p_key)

                            l_child = False

                        else:

                            pos[2 ** (i + 1) + j - 1] = (p_x + 0.2 / (i * i + 1), p_y - 0.1)

                            l_child = True

                            G.add_edge(2 ** (i + 1) + j - 1, p_key)

                            p_key += 1

                            (p_x, p_y) = pos[p_key]

            return pos



        import networkx as nx

        import matplotlib.pyplot as plt

        A = tree[1:]

        G = nx.Graph()

        labels = {}

        for i, a in enumerate(A):

            G.add_node(i)

            labels[i] = a

        pos = full_tree_pos(G)

        nx.draw(G, pos=pos, with_labels=True, labels=labels, node_size=1000)

        plt.savefig(""tree-{0}.png"".format(self.plt_cnt))

        plt.clf()



        A = lazy[1:-1]

        G = nx.Graph()

        labels = {}

        for i, a in enumerate(A):

            G.add_node(i)

            labels[i] = a

        pos = full_tree_pos(G)

        nx.draw(G, pos=pos, with_labels=True, labels=labels, node_size=1000)

        plt.savefig(""lazy-{0}.png"".format(self.plt_cnt))

        plt.clf()

        self.plt_cnt += 1



##################################################################################################################

import sys # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




N, Q = list(map(int, input().split())) # Hits:1.0, Total execution time: 39.875 ms, Average time per hit: 39.875 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


ef = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


eh = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


f = lambda x, y: x if x > y else y # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


g = lambda x, y, s: x if x > y else y # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


h = lambda x, y: x if x > y else y # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


st = LazyPropSegmentTree(N, f, g, h, ef, eh) # Hits:1.0, Total execution time: 14.708 ms, Average time per hit: 14.708 ms 


st.built(A) # Hits:1.0, Total execution time: 6.5 ms, Average time per hit: 6.5 ms 


res = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for _ in range(Q): # Hits:6.0, Total execution time: 0.875 ms, Average time per hit: 0.14583333333333334 ms 


    t, x, y = list(map(int, input().split())) # Hits:5.0, Total execution time: 3.375 ms, Average time per hit: 0.675 ms 


    if t == 1: # Hits:5.0, Total execution time: 0.667 ms, Average time per hit: 0.13340000000000002 ms 


        st.update(x - 1, y) # Hits:1.0, Total execution time: 8.583 ms, Average time per hit: 8.583 ms 


    elif t == 2: # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


        res.append(st.get_range(x - 1, y)) # Hits:2.0, Total execution time: 15.957 ms, Average time per hit: 7.9785 ms 


    else:

        res.append(st.max_right(x - 1, lambda z: z < y) + 1) # Hits:2.0, Total execution time: 13.083 ms, Average time per hit: 6.5415 ms 




print(('\n'.join(map(str, res)))) # Hits:1.0, Total execution time: 9.167 ms, Average time per hit: 9.167 ms 
","class SegmentTree: # Hits:1.0, Total execution time: 7.083 ms, Average time per hit: 7.083 ms 




    def __init__(self, n, op, e):

        """"""

        :param n: 要素数

        :param op: 二項演算

        :param e: 単位減

        """"""

        self.n = n

        self.op = op

        self.e = e

        self.size = 1 << (self.n - 1).bit_length()      # st[self.size + i] = array[i]

        self.tree = [self.e] * (self.size << 1)



    def built(self, array):

        """"""arrayを初期値とするセグメント木を構築""""""

        for i in range(self.n):

            self.tree[self.size + i] = array[i]

        for i in range(self.size - 1, 0, -1):

            self.tree[i] = self.op(self.tree[i<<1], self.tree[(i<<1)|1])



    def update(self, i, x):

        """"""i 番目の要素を x に更新　(0-indexed) """"""

        i += self.size

        self.tree[i] = x

        while i > 1:

            i >>= 1

            self.tree[i] = self.op(self.tree[i<<1], self.tree[(i<<1)|1])



    def get(self, l, r):

        """""" [l, r)の区間取得の結果を返す　(0-indexed) """"""

        l += self.size

        r += self.size

        res_l = self.e

        res_r = self.e

        while l < r:

            if l & 1:

                res_l = self.op(res_l, self.tree[l])

                l += 1

            if r & 1:

                r -= 1

                res_r = self.op(self.tree[r], res_r)

            l >>= 1

            r >>= 1

        return self.op(res_l, res_r)



    def max_right(self, l, f):

        """"""

        以下の条件を両方満たす r を(いずれか一つ)返す

            ・r = l or f(op(a[l], a[l + 1], ..., a[r - 1])) = true

            ・r = n or f(op(a[l], a[l + 1], ..., a[r])) = false

        """"""

        if l == self.n: return self.n

        l += self.size

        sm = self.e

        while True:

            while l % 2 == 0: l >>= 1

            if not f(self.op(sm, self.tree[l])):

                while l < self.size:

                    l = 2 * l

                    if f(self.op(sm, self.tree[l])):

                        sm = self.op(sm, self.tree[l])

                        l += 1

                return l - self.size

            sm = self.op(sm, self.tree[l])

            l += 1

            if (l & -l) == l: break

        return self.n



    def min_left(self, r, f):

        """"""

        以下の条件を両方満たす l を(いずれか一つ)返す

            ・l = r or f(op(a[l], a[l + 1], ..., a[r - 1])) = true

            ・l = 0 or f(op(a[l - 1], a[l], ..., a[r - 1])) = false

        """"""

        if r == 0: return 0

        r += self.size

        sm = self.e

        while True:

            r -= 1

            while r > 1 and (r % 2): r >>= 1

            if not f(self.op(self.tree[r], sm)):

                while r < self.size:

                    r = 2 * r + 1

                    if f(self.op(self.tree[r], sm)):

                        sm = self.op(self.tree[r], sm)

                        r -= 1

                return r + 1 - self.size

            sm = self.op(self.tree[r], sm)

            if (r & -r) == r: break

        return 0



    def __iter__(self):

        for a in self.tree[self.size:self.size+self.n]:

            yield a



    def __str__(self):

        return str(self.tree[self.size:self.size+self.n])



##################################################################################################################

import sys # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




N, Q = list(map(int, input().split())) # Hits:1.0, Total execution time: 46.833 ms, Average time per hit: 46.833 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 


e = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


op = lambda x, y : x if x > y else y # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


st = SegmentTree(N, op, e) # Hits:1.0, Total execution time: 9.708 ms, Average time per hit: 9.708 ms 


st.built(A) # Hits:1.0, Total execution time: 6.875 ms, Average time per hit: 6.875 ms 


res = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for _ in range(Q): # Hits:6.0, Total execution time: 0.792 ms, Average time per hit: 0.132 ms 


    t, x, y = list(map(int, input().split())) # Hits:5.0, Total execution time: 2.751 ms, Average time per hit: 0.5502 ms 


    if t == 1: # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 


        st.update(x - 1, y) # Hits:1.0, Total execution time: 3.125 ms, Average time per hit: 3.125 ms 


    elif t == 2: # Hits:4.0, Total execution time: 0.376 ms, Average time per hit: 0.094 ms 


        res.append(st.get(x - 1, y)) # Hits:2.0, Total execution time: 6.624 ms, Average time per hit: 3.312 ms 


    else:

        res.append(st.max_right(x - 1, lambda z: z < y) + 1) # Hits:2.0, Total execution time: 7.084 ms, Average time per hit: 3.542 ms 




print(('\n'.join(map(str, res)))) # Hits:1.0, Total execution time: 9.916 ms, Average time per hit: 9.916 ms 

",p02567,True
"from typing import Callable, TypeVar, List # Hits:1.0, Total execution time: 1.291 ms, Average time per hit: 1.291 ms 


import sys # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


T = TypeVar('T') # Hits:1.0, Total execution time: 4.667 ms, Average time per hit: 4.667 ms 






class SegTree: # Hits:1.0, Total execution time: 85.5 ms, Average time per hit: 85.5 ms 


    def __init__(self, v: List[T], op: Callable[[T, T], T], e: Callable[[], T]) -> None:

        self._n = len(v)

        self.log = (self._n - 1).bit_length()

        self.size = 1 << self.log

        self.d = [e() for _ in range(2 * self.size)]

        self.op = op

        self.e = e

        for i in range(self._n):

            self.d[self.size + i] = v[i]

        for i in reversed(list(range(1, self.size))):

            self.d[i] = self.op(self.d[2 * i], self.d[2 * i + 1])



    @classmethod

    def init_e(cls, n: int, op: Callable[[T, T], T], e: Callable[[], T]) -> 'SegTree':

        return cls([e for _ in range(n)], op, e)



    def set(self, p: int, x: T) -> None:

        assert 0 <= p < self._n

        p += self.size

        self.d[p] = x

        for i in range(1, self.log + 1):

            k = p >> i

            self.d[k] = self.op(self.d[2 * k], self.d[2 * k + 1])



    def get(self, p: int) -> T:

        assert 0 <= p < self._n

        return self.d[p + self.size]



    def prod(self, l: int, r: int) -> T:

        assert 0 <= l <= self._n and 0 <= r <= self._n

        sml = self.e()

        smr = self.e()

        l += self.size

        r += self.size



        while l < r:

            if l & 1:

                sml = self.op(sml, self.d[l])

                l += 1

            if r & 1:

                r -= 1

                smr = self.op(self.d[r], smr)

            l >>= 1

            r >>= 1

        return self.op(sml, smr)



    def all_prod(self) -> T:

        return self.d[1]



    def max_right(self, l: int, f: Callable[[T], bool]):

        assert 0 <= l <= self._n

        assert f(self.e())

        if l == self._n:

            return self._n

        l += self.size

        sm = self.e()

        while True:

            while l % 2 == 0:

                l >>= 1

            if not f(self.op(sm, self.d[l])):

                while l < self.size:

                    l *= 2

                    if f(self.op(sm, self.d[l])):

                        sm = self.op(sm, self.d[l])

                        l += 1

                return l - self.size

            sm = self.op(sm, self.d[l])

            l += 1

            if (l & -l) == l:

                return self._n



    def min_left(self, r: int, f: Callable[[T], bool]):

        assert 0 <= r <= self._n

        assert f(self.e())

        if r == 0:

            return 0

        r += self.size

        sm = self.e()

        while True:

            r -= 1

            while r > 1 and r % 2:

                r >>= 1

            if not f(self.op(self.d[r], sm)):

                while r < self.size:

                    r = 2 * r + 1

                    if f(self.op(self.d[r], sm)):

                        sm = self.op(self.d[r], sm)

                        r -= 1

                return r + 1 - self.size

            sm = self.op(self.d[r], sm)

            if (r & -r) == r:

                return 0



    def __update__(self, k: int) -> None:

        self.d[k] = self.op(self.d[2 * k], self.d[2 * k + 1])





n, q = list(map(int, input().split())) # Hits:1.0, Total execution time: 43.125 ms, Average time per hit: 43.125 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


seg = SegTree(a, max, lambda: -1) # Hits:1.0, Total execution time: 14.208 ms, Average time per hit: 14.208 ms 




for _ in range(q): # Hits:6.0, Total execution time: 1.499 ms, Average time per hit: 0.24983333333333335 ms 


    t, x, y = list(map(int, input().split())) # Hits:5.0, Total execution time: 344.209 ms, Average time per hit: 68.8418 ms 


    if t == 1: # Hits:5.0, Total execution time: 0.959 ms, Average time per hit: 0.1918 ms 


        seg.set(x - 1, y) # Hits:1.0, Total execution time: 7.084 ms, Average time per hit: 7.084 ms 


    elif t == 2: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


        print((seg.prod(x - 1, y))) # Hits:2.0, Total execution time: 22.916 ms, Average time per hit: 11.458 ms 


    else:

        print((seg.max_right(x - 1, lambda v: v < y) + 1)) # Hits:2.0, Total execution time: 32.167 ms, Average time per hit: 16.0835 ms 

","import sys # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 






class SegTree: # Hits:1.0, Total execution time: 10.917 ms, Average time per hit: 10.917 ms 


    def __init__(self, v, op, e) -> None:

        self._n = len(v)

        self.log = (self._n - 1).bit_length()

        self.size = 1 << self.log

        self.d = [e() for _ in range(2 * self.size)]

        self.op = op

        self.e = e

        for i in range(self._n):

            self.d[self.size + i] = v[i]

        for i in reversed(list(range(1, self.size))):

            self.__update__(i)



    @classmethod

    def init_e(cls, n: int, op, e) -> 'SegTree':

        return cls([e for _ in range(n)], op, e)



    def set(self, p: int, x) -> None:

        p += self.size

        self.d[p] = x

        for i in range(1, self.log + 1):

            self.__update__(p >> i)



    def get(self, p: int):

        return self.d[p + self.size]



    def prod(self, l: int, r: int):

        sml = self.e()

        smr = self.e()

        l += self.size

        r += self.size



        while l < r:

            if l & 1:

                sml = self.op(sml, self.d[l])

                l += 1

            if r & 1:

                r -= 1

                smr = self.op(self.d[r], smr)

            l >>= 1

            r >>= 1

        return self.op(sml, smr)



    def all_prod(self):

        return self.d[1]



    def max_right(self, l: int, f):

        if l == self._n:

            return self._n

        l += self.size

        sm = self.e()

        while True:

            while l % 2 == 0:

                l >>= 1

            if not f(self.op(sm, self.d[l])):

                while l < self.size:

                    l *= 2

                    if f(self.op(sm, self.d[l])):

                        sm = self.op(sm, self.d[l])

                        l += 1

                return l - self.size

            sm = self.op(sm, self.d[l])

            l += 1

            if (l & -l) == l:

                return self._n



    def min_left(self, r: int, f):

        if r == 0:

            return 0

        r += self.size

        sm = self.e()

        while True:

            r -= 1

            while r > 1 and r % 2:

                r >>= 1

            if not f(self.op(self.d[r], sm)):

                while r < self.size:

                    r = 2 * r + 1

                    if f(self.op(self.d[r], sm)):

                        sm = self.op(self.d[r], sm)

                        r -= 1

                return r + 1 - self.size

            sm = self.op(self.d[r], sm)

            if (r & -r) == r:

                return 0



    def __update__(self, k: int) -> None:

        self.d[k] = self.op(self.d[2 * k], self.d[2 * k + 1])





n, q = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.833 ms, Average time per hit: 38.833 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


seg = SegTree(a, max, lambda: -1) # Hits:1.0, Total execution time: 10.834 ms, Average time per hit: 10.834 ms 




for _ in range(q): # Hits:6.0, Total execution time: 0.874 ms, Average time per hit: 0.14566666666666667 ms 


    t, x, y = list(map(int, input().split())) # Hits:5.0, Total execution time: 2.708 ms, Average time per hit: 0.5416 ms 


    if t == 1: # Hits:5.0, Total execution time: 0.541 ms, Average time per hit: 0.1082 ms 


        seg.set(x - 1, y) # Hits:1.0, Total execution time: 2.625 ms, Average time per hit: 2.625 ms 


    elif t == 2: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


        print((seg.prod(x - 1, y))) # Hits:2.0, Total execution time: 15.375 ms, Average time per hit: 7.6875 ms 


    else:

        print((seg.max_right(x - 1, lambda v: v < y) + 1)) # Hits:2.0, Total execution time: 9.667 ms, Average time per hit: 4.8335 ms 

",p02567,True
"import sys # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 






class SegTree: # Hits:1.0, Total execution time: 7.958 ms, Average time per hit: 7.958 ms 


    def __init__(self, v, op, e) -> None:

        self._n = len(v)

        self.log = (self._n - 1).bit_length()

        self.size = 1 << self.log

        self.d = [e() for _ in range(2 * self.size)]

        self.op = op

        self.e = e

        for i in range(self._n):

            self.d[self.size + i] = v[i]

        for i in reversed(list(range(1, self.size))):

            self.__update__(i)



    @classmethod

    def init_e(cls, n: int, op, e) -> 'SegTree':

        return cls([e for _ in range(n)], op, e)



    def set(self, p: int, x) -> None:

        p += self.size

        self.d[p] = x

        for i in range(1, self.log + 1):

            self.__update__(p >> i)



    def get(self, p: int):

        return self.d[p + self.size]



    def prod(self, l: int, r: int):

        sml = self.e()

        smr = self.e()

        l += self.size

        r += self.size



        while l < r:

            if l & 1:

                sml = self.op(sml, self.d[l])

                l += 1

            if r & 1:

                r -= 1

                smr = self.op(self.d[r], smr)

            l >>= 1

            r >>= 1

        return self.op(sml, smr)



    def all_prod(self):

        return self.d[1]



    def max_right(self, l: int, f):

        if l == self._n:

            return self._n

        l += self.size

        sm = self.e()

        while True:

            while l & 1 == 0:

                l >>= 1

            if not f(self.op(sm, self.d[l])):

                while l < self.size:

                    l <<= 1

                    if f(self.op(sm, self.d[l])):

                        sm = self.op(sm, self.d[l])

                        l += 1

                return l - self.size

            sm = self.op(sm, self.d[l])

            l += 1

            if (l & -l) == l:

                return self._n



    def min_left(self, r: int, f):

        if r == 0:

            return 0

        r += self.size

        sm = self.e()

        while True:

            r -= 1

            while r > 1 and r & 1:

                r >>= 1

            if not f(self.op(self.d[r], sm)):

                while r < self.size:

                    r = (r << 1) + 1

                    if f(self.op(self.d[r], sm)):

                        sm = self.op(self.d[r], sm)

                        r -= 1

                return r + 1 - self.size

            sm = self.op(self.d[r], sm)

            if (r & -r) == r:

                return 0



    def __update__(self, k: int) -> None:

        self.d[k] = self.op(self.d[k << 1], self.d[(k << 1) + 1])





n, q = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.209 ms, Average time per hit: 36.209 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


seg = SegTree(a, max, lambda: -1) # Hits:1.0, Total execution time: 13.833 ms, Average time per hit: 13.833 ms 




for _ in range(q): # Hits:6.0, Total execution time: 0.96 ms, Average time per hit: 0.16 ms 


    t, x, y = list(map(int, input().split())) # Hits:5.0, Total execution time: 3.667 ms, Average time per hit: 0.7333999999999999 ms 


    if t == 1: # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 


        seg.set(x - 1, y) # Hits:1.0, Total execution time: 3.625 ms, Average time per hit: 3.625 ms 


    elif t == 2: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


        print((seg.prod(x - 1, y))) # Hits:2.0, Total execution time: 19.791 ms, Average time per hit: 9.8955 ms 


    else:

        print((seg.max_right(x - 1, lambda v: v < y) + 1)) # Hits:2.0, Total execution time: 10.75 ms, Average time per hit: 5.375 ms 

","import sys # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 






class SegTree: # Hits:1.0, Total execution time: 6.416 ms, Average time per hit: 6.416 ms 


    def __init__(self, v, op, e) -> None:

        self._n = len(v)

        self.log = (self._n - 1).bit_length()

        self.size = 1 << self.log

        self.d = [e for _ in range(2 * self.size)]

        self.op = op

        self.e = e

        for i in range(self._n):

            self.d[self.size + i] = v[i]

        for i in reversed(list(range(1, self.size))):

            self.__update__(i)



    @classmethod

    def init_e(cls, n: int, op, e) -> 'SegTree':

        return cls([e for _ in range(n)], op, e)



    def set(self, p: int, x) -> None:

        p += self.size

        self.d[p] = x

        for i in range(1, self.log + 1):

            self.__update__(p >> i)



    def get(self, p: int):

        return self.d[p + self.size]



    def prod(self, l: int, r: int):

        sml = self.e

        smr = self.e

        l += self.size

        r += self.size



        while l < r:

            if l & 1:

                sml = self.op(sml, self.d[l])

                l += 1

            if r & 1:

                r -= 1

                smr = self.op(self.d[r], smr)

            l >>= 1

            r >>= 1

        return self.op(sml, smr)



    def all_prod(self):

        return self.d[1]



    def max_right(self, l: int, f):

        if l == self._n:

            return self._n

        l += self.size

        sm = self.e

        while True:

            while l & 1 == 0:

                l >>= 1

            if not f(self.op(sm, self.d[l])):

                while l < self.size:

                    l <<= 1

                    if f(self.op(sm, self.d[l])):

                        sm = self.op(sm, self.d[l])

                        l += 1

                return l - self.size

            sm = self.op(sm, self.d[l])

            l += 1

            if (l & -l) == l:

                return self._n



    def min_left(self, r: int, f):

        if r == 0:

            return 0

        r += self.size

        sm = self.e

        while True:

            r -= 1

            while r > 1 and r & 1:

                r >>= 1

            if not f(self.op(self.d[r], sm)):

                while r < self.size:

                    r = (r << 1) + 1

                    if f(self.op(self.d[r], sm)):

                        sm = self.op(self.d[r], sm)

                        r -= 1

                return r + 1 - self.size

            sm = self.op(self.d[r], sm)

            if (r & -r) == r:

                return 0



    def __update__(self, k: int) -> None:

        self.d[k] = self.op(self.d[k << 1], self.d[(k << 1) + 1])





n, q = list(map(int, input().split())) # Hits:1.0, Total execution time: 32.875 ms, Average time per hit: 32.875 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


seg = SegTree(a, max, -1) # Hits:1.0, Total execution time: 10.25 ms, Average time per hit: 10.25 ms 




for _ in range(q): # Hits:6.0, Total execution time: 0.834 ms, Average time per hit: 0.139 ms 


    t, x, y = list(map(int, input().split())) # Hits:5.0, Total execution time: 2.791 ms, Average time per hit: 0.5582 ms 


    if t == 1: # Hits:5.0, Total execution time: 0.584 ms, Average time per hit: 0.1168 ms 


        seg.set(x - 1, y) # Hits:1.0, Total execution time: 2.75 ms, Average time per hit: 2.75 ms 


    elif t == 2: # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


        print((seg.prod(x - 1, y))) # Hits:2.0, Total execution time: 16.582 ms, Average time per hit: 8.291 ms 


    else:

        print((seg.max_right(x - 1, lambda v: v < y) + 1)) # Hits:2.0, Total execution time: 9.792 ms, Average time per hit: 4.896 ms 

",p02567,True
"class Segment_Tree(): # Hits:1.0, Total execution time: 5.833 ms, Average time per hit: 5.833 ms 


    def __init__(self,N,calc,unit,L=[]):

        """"""calcを演算とするN項のSegment Treeを作成



        N:要素数

        calc:演算(2変数関数,モノイド)

        unit:モノイドcalcの単位元 (xe=ex=xを満たすe)

        """"""

        self.calc=calc

        self.unit=unit



        N=max(N,len(L))



        d=max(1,(N-1).bit_length())

        k=2**d



        X=[unit]*(k-1)+L+[unit]*(k-len(L))



        self.num=k

        self.depth=d



        for i in range(k-2,-1,-1):

            X[i]=calc(X[2*i+1],X[2*i+2])



        self.data=X



    def index(self,k,index=0):

        return self.data[(self.num-1)+(k-index)]



    def update(self,k,x,index=0):

        """"""第k要素をxに変え,更新を行う.



        k:数列の要素

        x:更新後の値

        """"""



        m=(self.num-1)+(k-index)

        self.data[m]=x



        for _ in range(self.depth):

            m=(m-1)//2

            self.data[m]=self.calc(self.data[2*m+1],self.data[2*m+2])





    def sub_array(self,From,To,index=0,left_closed=True,right_closed=True):

        A=From-index+(not left_closed)

        B=To-index-(not right_closed)



        return self.__sub_array_second(A,B+1,0,0,self.num)



    def __sub_array_second(self,a,b,k,l,r):

        if r<=a or b<=l:

            return self.unit

        elif a<=l and r<=b:

            return self.data[k]

        else:

            alpha=self.__sub_array_second(a,b,2*k+1,l,(l+r)//2)

            beta=self.__sub_array_second(a,b,2*k+2,(l+r)//2,r)

            return self.calc(alpha,beta)



    def all_prod(self):

        return self.data[0]



    def max_right(self,l,r,cond,index=0):

        """"""以下の2つをともに満たすxの1つを返す.\n

        (1) r=l or cond(data[l]*data[l+1]*...*d[r-1]):True

        (2) r=x or cond(data[l]*data[l+1]*...*data[r]):False

        ※fが単調減少の時,cond(data[l]*...*data[r-1])を満たす最大のrとなる.



        cond:関数(引数が同じならば結果も同じ)

        cond(unit):True

        0<=l<=r<=n

        """"""

        l-=index

        assert 0<=l<=r<=self.num,""添字が範囲外""

        assert cond(self.unit),""単位元が条件を満たさない.""



        if l==r:

            return r+index



        l+=(self.num-1)

        sm=self.unit



        calc=self.calc

        while True:

            while l%2:

                l=(l-1)>>1



            if not cond(calc(sm,self.data[l])):

                while l<self.num-1:

                    l=2*l+1



                    if cond(calc(sm,self.data[l])):

                        sm=calc(sm,self.data[l])

                        l+=1



                return min(l-(self.num-1)+index,r)



            sm=calc(sm,self.data[l])

            l+=1



            m=l+1

            if not (m&(-m) !=m):

                break



        return r+index

#================================================

N,Q=list(map(int,input().split())) # Hits:1.0, Total execution time: 39.459 ms, Average time per hit: 39.459 ms 


A=list(map(int,input().split())) # Hits:1.0, Total execution time: 2.25 ms, Average time per hit: 2.25 ms 




S=Segment_Tree(N,lambda x,y:max(x,y),-float(""inf""),A) # Hits:1.0, Total execution time: 10.209 ms, Average time per hit: 10.209 ms 




X=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for _ in range(Q): # Hits:6.0, Total execution time: 0.707 ms, Average time per hit: 0.11783333333333333 ms 


    T,alpha,beta=list(map(int,input().split())) # Hits:5.0, Total execution time: 4.458 ms, Average time per hit: 0.8916000000000001 ms 




    if T==1: # Hits:5.0, Total execution time: 0.5 ms, Average time per hit: 0.1 ms 


        S.update(alpha,beta,1) # Hits:1.0, Total execution time: 3.584 ms, Average time per hit: 3.584 ms 


    elif T==2: # Hits:4.0, Total execution time: 0.375 ms, Average time per hit: 0.09375 ms 


        X.append(S.sub_array(alpha,beta,1)) # Hits:2.0, Total execution time: 11.291 ms, Average time per hit: 5.6455 ms 


    else:

        X.append(S.max_right(alpha,N,lambda x:x<beta,1)) # Hits:2.0, Total execution time: 10.792 ms, Average time per hit: 5.396 ms 




print((""\n"".join(map(str,X)))) # Hits:1.0, Total execution time: 6.917 ms, Average time per hit: 6.917 ms 
","class Segment_Tree(): # Hits:1.0, Total execution time: 6.458 ms, Average time per hit: 6.458 ms 


    def __init__(self,N,calc,unit,L=[]):

        """"""calcを演算とするN項のSegment Treeを作成



        N:要素数

        calc:演算(2変数関数,モノイド)

        unit:モノイドcalcの単位元 (xe=ex=xを満たすe)

        """"""

        self.calc=calc

        self.unit=unit



        N=max(N,len(L))



        d=max(1,(N-1).bit_length())

        k=2**d



        X=[unit]*(k-1)+L+[unit]*(k-len(L))



        self.num=k

        self.depth=d



        for i in range(k-2,-1,-1):

            X[i]=calc(X[2*i+1],X[2*i+2])



        self.data=X



    def index(self,k,index=0):

        return self.data[(self.num-1)+(k-index)]



    def update(self,k,x,index=0):

        """"""第k要素をxに変え,更新を行う.



        k:数列の要素

        x:更新後の値

        """"""



        m=(self.num-1)+(k-index)

        self.data[m]=x



        for _ in range(self.depth):

            m=(m-1)//2

            self.data[m]=self.calc(self.data[2*m+1],self.data[2*m+2])





    def sub_array(self,From,To,index=0,left_closed=True,right_closed=True):

        A=From-index+(not left_closed)

        B=To-index-(not right_closed)



        return self.__sub_array_second(A,B+1,0,0,self.num)



    def __sub_array_second(self,a,b,k,l,r):

        if r<=a or b<=l:

            return self.unit

        elif a<=l and r<=b:

            return self.data[k]

        else:

            alpha=self.__sub_array_second(a,b,2*k+1,l,(l+r)//2)

            beta=self.__sub_array_second(a,b,2*k+2,(l+r)//2,r)

            return self.calc(alpha,beta)



    def all_prod(self):

        return self.data[0]



    def max_right(self,l,r,cond,index=0):

        """"""以下の2つをともに満たすxの1つを返す.\n

        (1) r=l or cond(data[l]*data[l+1]*...*d[r-1]):True

        (2) r=x or cond(data[l]*data[l+1]*...*data[r]):False

        ※fが単調減少の時,cond(data[l]*...*data[r-1])を満たす最大のrとなる.



        cond:関数(引数が同じならば結果も同じ)

        cond(unit):True

        0<=l<=r<=n

        """"""

        l-=index

        assert 0<=l<=r<=self.num,""添字が範囲外""

        assert cond(self.unit),""単位元が条件を満たさない.""



        if l==r:

            return r+index



        l+=(self.num-1)

        sm=self.unit



        calc=self.calc

        while True:

            while l%2:

                l=(l-1)>>1



            if not cond(calc(sm,self.data[l])):

                while l<self.num-1:

                    l=2*l+1



                    if cond(calc(sm,self.data[l])):

                        sm=calc(sm,self.data[l])

                        l+=1



                return min(l-(self.num-1)+index,r)



            sm=calc(sm,self.data[l])

            l+=1



            m=l+1

            if not (m&(-m) !=m):

                break



        return r+index

#================================================

N,Q=list(map(int,input().split())) # Hits:1.0, Total execution time: 40.25 ms, Average time per hit: 40.25 ms 


A=list(map(int,input().split())) # Hits:1.0, Total execution time: 2.5 ms, Average time per hit: 2.5 ms 




S=Segment_Tree(N,lambda x,y:max(x,y),-1,A) # Hits:1.0, Total execution time: 18.708 ms, Average time per hit: 18.708 ms 




X=[] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for _ in range(Q): # Hits:6.0, Total execution time: 0.958 ms, Average time per hit: 0.15966666666666665 ms 


    T,alpha,beta=list(map(int,input().split())) # Hits:5.0, Total execution time: 6.125 ms, Average time per hit: 1.225 ms 




    if T==1: # Hits:5.0, Total execution time: 0.542 ms, Average time per hit: 0.10840000000000001 ms 


        S.update(alpha,beta,1) # Hits:1.0, Total execution time: 3.625 ms, Average time per hit: 3.625 ms 


    elif T==2: # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


        X.append(S.sub_array(alpha,beta,1)) # Hits:2.0, Total execution time: 11.375 ms, Average time per hit: 5.6875 ms 


    else:

        X.append(S.max_right(alpha,N,lambda x:x<beta,1)) # Hits:2.0, Total execution time: 11.166 ms, Average time per hit: 5.583 ms 




print((""\n"".join(map(str,X)))) # Hits:1.0, Total execution time: 8.042 ms, Average time per hit: 8.042 ms 

",p02567,True
"import itertools # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 39.125 ms, Average time per hit: 39.125 ms 




#約数

def make_divisors(n): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    divisors = []

    for i in range(1, int(n**0.5)+1):

        if n % i == 0:

            divisors.append(i)

            if i != n // i:

                divisors.append(n//i)



    # divisors.sort()

    return divisors

import math # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




def is_prime(n): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if n == 1: return False



    for k in range(2, int(math.sqrt(n)) + 1):

        if n % k == 0:

            return False



    return True

c = make_divisors(a) # Hits:1.0, Total execution time: 8.0 ms, Average time per hit: 8.0 ms 


d = make_divisors(b) # Hits:1.0, Total execution time: 6.333 ms, Average time per hit: 6.333 ms 




f = list(set(c) & set(d)) # Hits:1.0, Total execution time: 3.417 ms, Average time per hit: 3.417 ms 


ans = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for s in f: # Hits:13.0, Total execution time: 1.333 ms, Average time per hit: 0.10253846153846154 ms 


    if is_prime(s): # Hits:12.0, Total execution time: 9.084 ms, Average time per hit: 0.757 ms 


        ans.append(s) # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


print((len(ans)+1)) # Hits:1.0, Total execution time: 6.292 ms, Average time per hit: 6.292 ms 
","def prime_factorize(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    a = []

    while n % 2 == 0:

        a.append(2)

        n //= 2

    f = 3

    while f * f <= n:

        if n % f == 0:

            a.append(f)

            n //= f

        else:

            f += 2

    if n != 1:

        a.append(n)

    return a



a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 39.959 ms, Average time per hit: 39.959 ms 


list_A = set(prime_factorize(a)) # Hits:1.0, Total execution time: 4.125 ms, Average time per hit: 4.125 ms 


list_B = set(prime_factorize(b)) # Hits:1.0, Total execution time: 1.791 ms, Average time per hit: 1.791 ms 


ans = list_A & list_B # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


print((len(ans) + 1)) # Hits:1.0, Total execution time: 6.25 ms, Average time per hit: 6.25 ms 

",p02900,True
"#from collections import defaultdict 

import copy # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


import math # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


A,B = list(map(int, input().split())) # Hits:1.0, Total execution time: 40.458 ms, Average time per hit: 40.458 ms 




num = min(A,B) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


tmps = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


p = 2 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for p in range(2, math.ceil(num**0.5)+1): # Hits:21.0, Total execution time: 2.795 ms, Average time per hit: 0.1330952380952381 ms 




    if A % p == 0 and B % p == 0: # Hits:20.0, Total execution time: 2.331 ms, Average time per hit: 0.11655 ms 


        tmps[p] = True # Hits:9.0, Total execution time: 1.169 ms, Average time per hit: 0.1298888888888889 ms 




    if A % (num//p) == 0 and B % (num//p) == 0: # Hits:20.0, Total execution time: 2.96 ms, Average time per hit: 0.148 ms 


        tmps[num//p] = True # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 




    p += 1 # Hits:20.0, Total execution time: 2.497 ms, Average time per hit: 0.12484999999999999 ms 




if num != 1 and  A % num == 0 and B % num == 0: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    tmps[num] = True





d = copy.deepcopy(tmps) # Hits:1.0, Total execution time: 22.708 ms, Average time per hit: 22.708 ms 


for k in list(tmps.keys()): # Hits:12.0, Total execution time: 1.418 ms, Average time per hit: 0.11816666666666667 ms 




    if d.get(k, False): # Hits:11.0, Total execution time: 1.459 ms, Average time per hit: 0.13263636363636364 ms 


        aaa = copy.deepcopy(d) # Hits:3.0, Total execution time: 35.167 ms, Average time per hit: 11.722333333333333 ms 


        for n in list(d.keys()): # Hits:21.0, Total execution time: 2.414 ms, Average time per hit: 0.11495238095238094 ms 


            if k == n: # Hits:18.0, Total execution time: 1.547 ms, Average time per hit: 0.08594444444444445 ms 


                continue # Hits:3.0, Total execution time: 0.168 ms, Average time per hit: 0.056 ms 


            if n > k and n % k == 0: # Hits:15.0, Total execution time: 1.875 ms, Average time per hit: 0.125 ms 


                aaa.pop(n) # Hits:8.0, Total execution time: 1.208 ms, Average time per hit: 0.151 ms 


        d = aaa # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 




print((len(list(d.keys()))+1)) # Hits:1.0, Total execution time: 9.083 ms, Average time per hit: 9.083 ms 



","A,B = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.125 ms, Average time per hit: 37.125 ms 










def getPrimeFactorsList(num): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


  pn = 2 #素数は2から

  pflist = [] #素因数のリスト

  while pn * pn <= num: #√numまで調べる

    while num % pn == 0: #現在の素数で割り切れる範囲でループ

      num = num / pn

      pflist.append(pn)

    pn += 1 #割り切れなくなったら次の素数へ

  if num > 1:

    pflist.append(int(num))

    

  return pflist



pf_A = getPrimeFactorsList(A) # Hits:1.0, Total execution time: 5.042 ms, Average time per hit: 5.042 ms 


pf_B = getPrimeFactorsList(B) # Hits:1.0, Total execution time: 2.208 ms, Average time per hit: 2.208 ms 


ans = len(set(pf_A) & set(pf_B)) + 1 # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


print(ans) # Hits:1.0, Total execution time: 5.708 ms, Average time per hit: 5.708 ms 
",p02900,True
"import sys

input=sys.stdin.readline



import fractions

def make_divisors(n):

    divisors = []

    for i in range(1, int(n**0.5)+1):

        if n % i == 0:

            divisors.append(i)

            if i != n // i:

                divisors.append(n//i)

    return divisors



import math

def prime_factorize(n):

    a = []

    while n % 2 == 0:

        a.append(2)

        n //= 2

    f = 3

    while f * f <= n:

        if n % f == 0:

            a.append(f)

            n //= f

        else:

            f += 2

    if n != 1:

        a.append(n)

    return a



import collections

def main():

    A,B = list(map(int, input().split()))



    da = make_divisors(A)

    db = make_divisors(B)

    cds = set(da) & set (db)

    P = prime_factorize(max(cds))

    P.append(1)

    c = list(collections.Counter(P).keys())

    x = cds & set(c)

    print((len(x)))





if __name__ == '__main__':

    main()
",,p02900,False
"# ABC142D - Disjoint Set of Common Divisors

def gcd(x: int, y: int) -> int:

    while y:

        x, y = y, x % y

    return x





def prime_factorization(x: int) -> dict:

    max_prime, ret = 0, {}



    # Divide x by 2 as much as possible

    cnt = 0

    while x % 2 == 0:

        x //= 2

        cnt += 1

    if cnt > 0:

        max_prime = 2

        ret[max_prime] = cnt



    # x must be odd -> skip even numbers

    cnt = 0

    for i in range(3, int(x ** 0.5) + 1, 2):

        cnt = 0

        while x % i == 0:

            x //= i

            max_prime = i

            cnt += 1

        if cnt > 0:

            ret[max_prime] = cnt



    if x > 2:  # To handle the case when x is prime greater than 2

        max_prime = x

        ret[max_prime] = 1

    return ret





def main():

    # compute the number of common prime factors

    A, B = list(map(int, input().split()))

    g = gcd(A, B)

    ans = len(list(prime_factorization(g).keys())) + 1

    print(ans)





if __name__ == ""__main__"":

    main()",,p02900,False
"import math # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


import random # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 






# 素因数分解

class Prime: # Hits:1.0, Total execution time: 6.25 ms, Average time per hit: 6.25 ms 


    seed_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]



    def is_prime(self, n):

        is_prime_common = self.is_prime_common(n)

        if is_prime_common is not None:

            return is_prime_common



        if n < 2000000:

            return self.is_prime_brute_force(n)

        else:

            return self.is_prime_miller_rabin(n)



    def is_prime_common(self, n):

        if n == 1: return False

        if n in Prime.seed_primes: return True

        if any([n % x == 0 for x in self.seed_primes]): return False



    def is_prime_brute_force(self, n):

        for k in range(2, int(math.sqrt(n)) + 1):

            if n % k == 0:

                return False

        return True



    def is_prime_miller_rabin(self, n):

        d = n - 1

        while d & 1 == 0:

            d >>= 1



        # use one of these lines / upper is more efficient.

        witnesses = self.get_witnesses(n)

        # witnesses = [random.randint(1, n - 1) for _ in range(100)]



        for w in witnesses:

            y = pow(w, d, n)



            while d != n - 1 and y != 1 and y != n - 1:

                y = (y * y) % n

                d <<= 1



            if y != n - 1 and d & 1 == 0:

                return False



        return True



    def get_witnesses(self, num):

        def _get_range(num):

            if num < 2047:

                return 1

            if num < 1373653:

                return 2

            if num < 25326001:

                return 3

            if num < 3215031751:

                return 4

            if num < 2152302898747:

                return 5

            if num < 3474749660383:

                return 6

            if num < 341550071728321:

                return 7

            if num < 3825123056546413051:

                return 9

            return 12



        return self.seed_primes[:_get_range(num)]



    def gcd(self, a, b):

        if a < b:

            return self.gcd(b, a)

        if b == 0:

            return a

        while b:

            a, b = b, a % b

        return a



    @staticmethod

    def f(x, n, seed):

        p = Prime.seed_primes[seed % len(Prime.seed_primes)]

        return (p * x + seed) % n



    def find_factor(self, n, seed=1):

        if self.is_prime(n):

            return n



        x, y, d = 2, 2, 1

        count = 0

        while d == 1:

            count += 1

            x = self.f(x, n, seed)

            y = self.f(self.f(y, n, seed), n, seed)

            d = self.gcd(abs(x - y), n)



        if d == n:

            return self.find_factor(n, seed+1)

        return self.find_factor(d)



    def find_factors(self, n):

        primes = {}

        if self.is_prime(n):

            primes[n] = 1

            return primes



        while n > 1:

            factor = self.find_factor(n)



            primes.setdefault(factor, 0)

            primes[factor] += 1



            n //= factor



        return primes



a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.542 ms, Average time per hit: 37.542 ms 


p = Prime() # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


fa = sorted(list(p.find_factors(a).keys())) # Hits:1.0, Total execution time: 74.541 ms, Average time per hit: 74.541 ms 


fb = sorted(list(p.find_factors(b).keys())) # Hits:1.0, Total execution time: 59.916 ms, Average time per hit: 59.916 ms 


c = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


try: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    pa = fa.pop(0) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


    pb = fb.pop(0) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    while True: # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


        if pa == pb: # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


            c += 1 # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


            pa = fa.pop(0) # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 


            pb = fb.pop(0) # Hits:3.0, Total execution time: 0.666 ms, Average time per hit: 0.222 ms 


        elif pa > pb: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


            pb = fb.pop(0)

        else:

            pa = fa.pop(0) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


except: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    pass # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


print(c) # Hits:1.0, Total execution time: 9.125 ms, Average time per hit: 9.125 ms 

","def factorize(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    arr = []

    temp = n

    for i in range(2, int(-(-n**0.5//1))+1):

        if temp%i==0:

            cnt=0

            while temp%i==0:

                cnt+=1

                temp //= i

            arr.append(i)



    if temp!=1:

        arr.append(temp)



    if arr==[]:

        arr.append(n)



    return arr



a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 39.209 ms, Average time per hit: 39.209 ms 


fa = set(factorize(a)) # Hits:1.0, Total execution time: 8.333 ms, Average time per hit: 8.333 ms 


fb = set(factorize(b)) # Hits:1.0, Total execution time: 4.75 ms, Average time per hit: 4.75 ms 


if a == 1 and b == 1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print((1))

else:

    print((len(fa & fb) + 1)) # Hits:1.0, Total execution time: 7.0 ms, Average time per hit: 7.0 ms 

",p02900,True
"import math # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 






# 公約数列挙

# 重複する約数は1つにまとまるので注意

def make_common_divisors(x1, x2): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    cd = [1]

    for i in range(2, min(x1, x2) + 1):

        if x1 % i == 0 and x2 % i == 0:

            cd.append(i)

    return cd





A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.584 ms, Average time per hit: 36.584 ms 


CD = make_common_divisors(A, B) # Hits:1.0, Total execution time: 46.083 ms, Average time per hit: 46.083 ms 






# 引数nが素数かどうかを判定

def is_prime(n): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if n == 1: return False



    for k in range(2, int(math.sqrt(n)) + 1):

        if n % k == 0:

            return False



    return True





count = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(len(CD)): # Hits:13.0, Total execution time: 1.461 ms, Average time per hit: 0.11238461538461539 ms 


    if is_prime(CD[i]): # Hits:12.0, Total execution time: 8.541 ms, Average time per hit: 0.71175 ms 


        count += 1 # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 




print(count) # Hits:1.0, Total execution time: 6.042 ms, Average time per hit: 6.042 ms 

","

# nを素因数分解したリストを返す

def decomposition_prime(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    i = 2

    table = []

    while i * i <= n:

        while n % i == 0:

            n /= i

            table.append(i)

        i += 1

    if n > 1:

        table.append(int(n))

    return table



A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.75 ms, Average time per hit: 38.75 ms 


Ap = set(decomposition_prime(A)) # Hits:1.0, Total execution time: 6.75 ms, Average time per hit: 6.75 ms 


Bp = set(decomposition_prime(B)) # Hits:1.0, Total execution time: 3.334 ms, Average time per hit: 3.334 ms 


print((len(Ap & Bp)+1)) # Hits:1.0, Total execution time: 8.125 ms, Average time per hit: 8.125 ms 
",p02900,True
"import fractions # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


from itertools import combinations # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


import heapq # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


def cf(x1,x2): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    cf=[1]

    for i in range(2,min(x1,x2)+1):

        if x1 % i == 0 and x2 % i == 0:

            cf.append(i)

    return cf

def compromise(x1, x2): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    f = fractions.gcd(x1, x2)

    return f == 1

def prime_factorize(n): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    a = []

    while n % 2 == 0:

        a.append(2)

        n //= 2

    f = 3

    while f * f <= n:

        if n % f == 0:

            a.append(f)

            n //= f

        else:

            f += 2

    if n != 1:

        a.append(n)

    return a

def isPrime(n): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  if n < 2:

    # 2未満は素数でない

    return False

  if n == 2:

    # 2は素数

    return True

  for p in range(2, n):

      if n % p == 0:

        # nまでの数で割り切れたら素数ではない

        return False

  # nまでの数で割り切れなかったら素数

  return True



a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.625 ms, Average time per hit: 37.625 ms 


cfs = cf(a, b) # Hits:1.0, Total execution time: 46.0 ms, Average time per hit: 46.0 ms 


total = len(cfs) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for c in cfs: # Hits:13.0, Total execution time: 1.125 ms, Average time per hit: 0.08653846153846154 ms 


    if not isPrime(c): # Hits:12.0, Total execution time: 6.331 ms, Average time per hit: 0.5275833333333334 ms 


        total -= 1 # Hits:9.0, Total execution time: 1.373 ms, Average time per hit: 0.15255555555555556 ms 


print((total+1)) # Hits:1.0, Total execution time: 6.292 ms, Average time per hit: 6.292 ms 
","def prime_factorize(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    a = []

    while n % 2 == 0:

        a.append(2)

        n //= 2

    f = 3

    while f * f <= n:

        if n % f == 0:

            a.append(f)

            n //= f

        else:

            f += 2

    if n != 1:

        a.append(n)

    return a

a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.583 ms, Average time per hit: 36.583 ms 


apri = set(prime_factorize(a)) # Hits:1.0, Total execution time: 3.709 ms, Average time per hit: 3.709 ms 


bpri = set(prime_factorize(b)) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


print((len(apri & bpri)+1)) # Hits:1.0, Total execution time: 5.916 ms, Average time per hit: 5.916 ms 

",p02900,True
"

def sieve(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    nums = [i+1 for i in range(2, n, 2) if (i+1) % 3 != 0 and (i+1) % 5 !=0] # リスト内包表記で3,5の倍数をはじく

    ans = [2,3,5] # 3,5は素数なので加えてしまう

    while nums[0] <= n**0.5:

        for i in range(nums[0]**2, nums[-1]+1, nums[0]):

            if i in nums: nums.remove(i)

            ans.append(nums.pop(0))

            ans += nums

    return ans





A,B =list(map(int,input().split())) # Hits:1.0, Total execution time: 35.084 ms, Average time per hit: 35.084 ms 


if A<B: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    A,B =B,A # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


foo = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while foo != 0: # Hits:5.0, Total execution time: 0.459 ms, Average time per hit: 0.09179999999999999 ms 


    A,B = B, A%B # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    #print(A,B)

    foo = B # Hits:4.0, Total execution time: 0.292 ms, Average time per hit: 0.073 ms 




foo =A # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




plis = sieve(1000) # Hits:1.0, Total execution time: 230.791 ms, Average time per hit: 230.791 ms 


ans = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for p in plis: # Hits:24280.0, Total execution time: 1981.308 ms, Average time per hit: 0.08160247116968698 ms 


    if foo%p==0: # Hits:24279.0, Total execution time: 2416.725 ms, Average time per hit: 0.09953972568886692 ms 


        ans += 1 # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


        foo = foo//p # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


    while foo%p ==0: # Hits:24280.0, Total execution time: 2768.356 ms, Average time per hit: 0.1140179571663921 ms 


        foo = foo//p # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 








plis = sieve(max(7,foo)) # Hits:1.0, Total execution time: 12.583 ms, Average time per hit: 12.583 ms 




for p in plis: # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


    if  foo % p ==0: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


        ans += 1

        foo = foo//p

        if foo < 1:

            break

print(ans) # Hits:1.0, Total execution time: 8.167 ms, Average time per hit: 8.167 ms 



","

A,B = list(map(int,input().split())) # Hits:1.0, Total execution time: 40.792 ms, Average time per hit: 40.792 ms 




#素数列挙

def searchPrimeNum(N): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    max = int(N**0.5)

    seachList = [i for i in range(2,N+1)]

    primeNum = []

    while seachList[0] <= max:

        primeNum.append(seachList[0])

        tmp = seachList[0]

        seachList = [i for i in seachList if i % tmp != 0]

    primeNum.extend(seachList)

    return primeNum







#素因数分解(素数列挙が必要)

def pfact(N): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    plis = searchPrimeNum(int(N**0.5+1))

    ans = 1

    for p in plis:

        if N%p == 0:

            ans += 1

            N = N//p

        while N%p == 0:

            N = N//p

        if N == 1:

            break

    if N != 1:

        ans += 1

    return ans



#互除法(最大公約数)

def gcd(a,b): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if b==0:

        return a

    else:

        return gcd(b,a%b)



print((pfact(gcd(A,B)))) # Hits:1.0, Total execution time: 19.292 ms, Average time per hit: 19.292 ms 
",p02900,True
"import math # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


A,B=list(map(int,input().split())) # Hits:1.0, Total execution time: 39.375 ms, Average time per hit: 39.375 ms 


#nの約数を全て求める

def divisor(n): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    i = 1

    table = []

    while i * i <= n:

        if n%i == 0:

            table.append(i)

            table.append(n//i)

        i += 1

    table = list(set(table))

    return table

answers=[] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


a=divisor(A) # Hits:1.0, Total execution time: 12.166 ms, Average time per hit: 12.166 ms 


b=divisor(B) # Hits:1.0, Total execution time: 7.708 ms, Average time per hit: 7.708 ms 


for a_ in a: # Hits:25.0, Total execution time: 2.914 ms, Average time per hit: 0.11656 ms 


    if a_ in b: # Hits:24.0, Total execution time: 6.167 ms, Average time per hit: 0.2569583333333333 ms 


        answers.append(a_) # Hits:12.0, Total execution time: 2.249 ms, Average time per hit: 0.18741666666666665 ms 


n = len(answers) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


numbers=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(2 ** n): # Hits:4097.0, Total execution time: 352.977 ms, Average time per hit: 0.08615499145716378 ms 


    number = [] # Hits:4096.0, Total execution time: 357.727 ms, Average time per hit: 0.087335693359375 ms 


    for j in range(n):  # このループが一番のポイント # Hits:53248.0, Total execution time: 5190.701 ms, Average time per hit: 0.09748161433293269 ms 


        if ((i >> j) & 1):  # 順に右にシフトさせ最下位bitのチェックを行う # Hits:49152.0, Total execution time: 5763.668 ms, Average time per hit: 0.11726212565104167 ms 


            number.append(answers[j])  # フラグが立っていたら bag に果物を詰める # Hits:24576.0, Total execution time: 3954.987 ms, Average time per hit: 0.1609288330078125 ms 


    numbers.append(number) # Hits:4096.0, Total execution time: 575.845 ms, Average time per hit: 0.140587158203125 ms 


del numbers[0] # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


answer=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for number in numbers: # Hits:4096.0, Total execution time: 373.644 ms, Average time per hit: 0.0912216796875 ms 


    ans=0 # Hits:4095.0, Total execution time: 325.593 ms, Average time per hit: 0.07950989010989011 ms 


    for m in range(len(number)-1): # Hits:24576.0, Total execution time: 2731.053 ms, Average time per hit: 0.1111268310546875 ms 


        for n in range(m+1,len(number)): # Hits:38721.0, Total execution time: 6169.494 ms, Average time per hit: 0.1593319903928101 ms 


            a=math.gcd(number[m],number[n]) # Hits:36528.0, Total execution time: 5898.658 ms, Average time per hit: 0.16148319097678493 ms 


            if a!=1: # Hits:36528.0, Total execution time: 3479.198 ms, Average time per hit: 0.09524742663162505 ms 


                ans=1 # Hits:18288.0, Total execution time: 1468.543 ms, Average time per hit: 0.08030090769903762 ms 


                break # Hits:18288.0, Total execution time: 1593.853 ms, Average time per hit: 0.08715294181977253 ms 


    if ans==0: # Hits:4095.0, Total execution time: 403.157 ms, Average time per hit: 0.09845103785103786 ms 


        answer=max(answer,len(number)) # Hits:49.0, Total execution time: 9.832 ms, Average time per hit: 0.20065306122448978 ms 


print(answer) # Hits:1.0, Total execution time: 12.667 ms, Average time per hit: 12.667 ms 

","A,B=list(map(int,input().split())) # Hits:1.0, Total execution time: 37.5 ms, Average time per hit: 37.5 ms 


def make_divisors(n): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    lower_divisors , upper_divisors = [], []

    i = 1

    while i*i <= n:

        if n % i == 0:

            lower_divisors.append(i)

            if i != n // i:

                upper_divisors.append(n//i)

        i += 1

    return lower_divisors + upper_divisors[::-1]

a=make_divisors(A) # Hits:1.0, Total execution time: 10.25 ms, Average time per hit: 10.25 ms 


b=make_divisors(B) # Hits:1.0, Total execution time: 8.375 ms, Average time per hit: 8.375 ms 


kouyakusuu=set(a)&set(b) # Hits:1.0, Total execution time: 3.042 ms, Average time per hit: 3.042 ms 


out=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


kouho=sorted(list(kouyakusuu)) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


del kouho[0] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for a in range(len(kouho)-1): # Hits:11.0, Total execution time: 1.416 ms, Average time per hit: 0.12872727272727272 ms 


    for b in range(a+1,len(kouho)): # Hits:65.0, Total execution time: 7.338 ms, Average time per hit: 0.1128923076923077 ms 


        if kouho[b]%kouho[a]==0: # Hits:55.0, Total execution time: 8.334 ms, Average time per hit: 0.15152727272727273 ms 


            out.append(kouho[b]) # Hits:31.0, Total execution time: 4.583 ms, Average time per hit: 0.14783870967741936 ms 


answer=set(out) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


print((len(kouho)+1-len(answer))) # Hits:1.0, Total execution time: 6.042 ms, Average time per hit: 6.042 ms 

",p02900,True
"import math # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.042 ms, Average time per hit: 35.042 ms 




def gcd(A, B): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


  if A < B:

    A, B = B, A

  while B > 0:

    temp = A % B

    A = B

    B = temp

  return A



gcd_num = gcd(A, B) # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 




def prime(a): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


  max_a = int(math.sqrt(a))

  d = dict()

  d[1] = 1

  i = 2

  while a != 1:

    if a % i == 0:

      a = a // i

      if i in d:

        d[i] += 1

      else:

        d[i] = 1

    else:

      i += 1

  return d

d = prime(gcd_num)  # Hits:1.0, Total execution time: 4.625 ms, Average time per hit: 4.625 ms 




print((len(d))) # Hits:1.0, Total execution time: 9.292 ms, Average time per hit: 9.292 ms 
","import math # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 29.0 ms, Average time per hit: 29.0 ms 




def gcd(A, B): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  if A < B:

    A, B = B, A

  while B > 0:

    temp = A % B

    A = B

    B = temp

  return A



gcd_num = gcd(A, B) # Hits:1.0, Total execution time: 2.459 ms, Average time per hit: 2.459 ms 




def prime(a): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


  max_a = 1 + int(math.sqrt(a))

  d = dict()

  d[1] = 1

  i = 2

  while a != 1:

    if i > max_a:

      d[a] = 1

      break

    if a % i == 0:

      a = a // i

      if i in d:

        d[i] += 1

      else:

        d[i] = 1

    else:

      i += 1

  return d

d = prime(gcd_num)  # Hits:1.0, Total execution time: 4.958 ms, Average time per hit: 4.958 ms 




print((len(d))) # Hits:1.0, Total execution time: 9.75 ms, Average time per hit: 9.75 ms 
",p02900,True
"#import sys



#input = sys.stdin.readline



#import heapq

import math

import fractions



def sosuhante(n):

    for k in range(2, int(math.sqrt(n))+1):

        if n% k ==0:

            return False

    return True



def main():

#    h,w,a,b = map(int, input().split())

    a,b=list(map(int,input().split()))

    m=4

    k=1



    count=1

    if a>b:

        a,b=b,a

    sosu=set()

#    a = fractions.gcd(a,b)

    if a%2==0:

        sosu.add(2)

        while a%2==0:

            a//=2

    if a%3==0:

        sosu.add(3)

        while a%3==0:

            a//=3

#    print(d)

    c=math.sqrt(a)+1

 #   print(c)

    while m<=c and m!=1:

        if a%m==0:

            sosu.add(m)

            while a%m==0:

                a//=m



        m+=1

#    print(sosu)

    if sosu==set() and a!=1:

        sosu.add(a)

    if sosuhante(a) and a!=1:

        sosu.add(a)

#    print(sosu)



    for i in sosu:

        if b%i==0:

            count+=1

    print(count)

#    for i in range(h):

#            print(aaa)



if __name__ == ""__main__"":

    main()",,p02900,False
"import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


from heapq import heappop, heappush # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


from operator import itemgetter # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


from collections import deque, defaultdict, Counter # Hits:1.0, Total execution time: 1.917 ms, Average time per hit: 1.917 ms 


from bisect import bisect_left, bisect_right # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


sys.setrecursionlimit(10 ** 7) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


MOD = 10**9 + 7 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


INF = float('inf') # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




def primeCount(N): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    R = int(N**(0.5)) + 1  # 素数の範囲

    primes = {}  # 素数のリスト

    n = N

    for num in range(2, R):

        primes[num] = 0

        while n % num == 0:

            n //= num

            primes[num] += 1

    if n > 1 :

        primes[n] = 1

    return { key : val for key, val in list(primes.items()) if val > 0}  # フィルターをかける



def sol(): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    A, B = list(map(int, input().split()))



    primeA = primeCount(A)

    primeB = primeCount(B)



    ans = 1

    for a in list(primeA.keys()):

        if a in primeB:

            ans += 1



    print(ans)



sol() # Hits:1.0, Total execution time: 66.958 ms, Average time per hit: 66.958 ms 
","A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.709 ms, Average time per hit: 33.709 ms 




def primeCount(N): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    R = int(N**(0.5)) + 1  # 素数の範囲

    primes = {}  # 素数のリスト

    n = N

    for num in range(2, R):

        primes[num] = 0

        while n % num == 0:

            n //= num

            primes[num] += 1

    if n > 1 :

        primes[n] = 1

    return { key : val for key, val in list(primes.items()) if val > 0}  # フィルターをかける



primeA = primeCount(A) # Hits:1.0, Total execution time: 10.875 ms, Average time per hit: 10.875 ms 


ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


prd = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for p in sorted(primeA.keys()): # Hits:5.0, Total execution time: 1.251 ms, Average time per hit: 0.2502 ms 


    if B % p == 0 and prd % p != 0: # Hits:4.0, Total execution time: 0.668 ms, Average time per hit: 0.167 ms 


        prd *= p # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


        ans += 1 # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


print(ans) # Hits:1.0, Total execution time: 6.083 ms, Average time per hit: 6.083 ms 

",p02900,True
"import math # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.542 ms, Average time per hit: 34.542 ms 




def is_prime(n): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    a = 0

    for k in range(1 + 1, int(math.sqrt(n)) + 1):

        if n % k == 0:

            a = 1

    if a == 1: return False

    else :return True



list1, list2 = [1], [1] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


try: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    list1.extend([i for i in range(1+1, A+1) if A % i == 0 # Hits:1.0, Total execution time: 62.125 ms, Average time per hit: 62.125 ms 


    and is_prime(i) == True])

    list2.extend([i for i in range(1+1, B+1) if B % i == 0 # Hits:1.0, Total execution time: 88.5 ms, Average time per hit: 88.5 ms 


    and is_prime(i) == True])

except:

    pass



print((len(set(list1) & set(list2)))) # Hits:1.0, Total execution time: 6.375 ms, Average time per hit: 6.375 ms 
","A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.041 ms, Average time per hit: 38.041 ms 


 

def gcd(a, b):  # a,bの最大公約数 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    while b:

        a, b = b, a % b

    return a



def factorization(n):  # nを素因数分解 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    arr = []

    temp = n

    for i in range(2, int(-(-n**0.5//1))+1): 

        if temp % i == 0: # 割り切れるとき

            cnt = 0

            while temp % i == 0: # 割れる限りカウント

                cnt += 1

                temp //= i

            arr.append([i, cnt])

    if temp != 1: # まだ因数があるとき

        arr.append([temp, 1])

    if arr == []: # ｎが1のとき

        arr.append([n, 1])

    return arr

 

g = gcd(A, B)  # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


ans = len(factorization(g)) # Hits:1.0, Total execution time: 5.209 ms, Average time per hit: 5.209 ms 




if g != 1: # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


    ans += 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


print(ans) # Hits:1.0, Total execution time: 4.917 ms, Average time per hit: 4.917 ms 
",p02900,True
"a,b = list(map(int,input().split())) # Hits:1.0, Total execution time: 33.666 ms, Average time per hit: 33.666 ms 


yakusuu = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range (2,min(a,b)+1): # Hits:420.0, Total execution time: 36.666 ms, Average time per hit: 0.0873 ms 


         if a % i == 0 and b% i == 0: # Hits:419.0, Total execution time: 42.667 ms, Average time per hit: 0.10183054892601431 ms 


                  yakusuu.append(i) # Hits:11.0, Total execution time: 1.332 ms, Average time per hit: 0.1210909090909091 ms 


for j in range(len(yakusuu)): # Hits:12.0, Total execution time: 1.248 ms, Average time per hit: 0.104 ms 


         for k in range(2,yakusuu[j]): # Hits:16.0, Total execution time: 2.5 ms, Average time per hit: 0.15625 ms 


                  if yakusuu[j] % k == 0: # Hits:13.0, Total execution time: 1.625 ms, Average time per hit: 0.125 ms 


                           break # Hits:8.0, Total execution time: 0.71 ms, Average time per hit: 0.08875 ms 


         else:

                  ans += 1 # Hits:3.0, Total execution time: 0.293 ms, Average time per hit: 0.09766666666666667 ms 


print(ans) # Hits:1.0, Total execution time: 8.291 ms, Average time per hit: 8.291 ms 

","aa,bb = list(map(int,input().split())) # Hits:1.0, Total execution time: 34.875 ms, Average time per hit: 34.875 ms 


n = min(aa,bb) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


b = max(aa,bb) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


ans = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


arr = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


temp = n # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(2, int(-(-n**0.5//1))+1): # Hits:21.0, Total execution time: 2.332 ms, Average time per hit: 0.11104761904761905 ms 


         if temp%i==0: # Hits:20.0, Total execution time: 2.958 ms, Average time per hit: 0.1479 ms 


                  cnt=0 # Hits:4.0, Total execution time: 0.334 ms, Average time per hit: 0.0835 ms 


                  while temp%i==0: # Hits:9.0, Total execution time: 1.167 ms, Average time per hit: 0.12966666666666665 ms 


                           cnt+=1 # Hits:5.0, Total execution time: 0.499 ms, Average time per hit: 0.0998 ms 


                           temp //= i # Hits:5.0, Total execution time: 0.502 ms, Average time per hit: 0.1004 ms 


                  arr.append(i) # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 




if temp!=1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


         arr.append(temp)



if arr==[] and n != 1: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


         arr.append(n)



for j in range(len(arr)): # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 


         if b % arr[j] == 0: # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


                  ans += 1 # Hits:3.0, Total execution time: 0.249 ms, Average time per hit: 0.083 ms 


print (ans) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 

",p02900,True
"import random # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 






A, B = [int(str) for str in input().split()] # Hits:1.0, Total execution time: 35.083 ms, Average time per hit: 35.083 ms 




def gcd(a,b): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


  while b!=0:

    a,b=b,a%b

  return a



def is_prime(q,k=2): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    q = abs(q)

    #計算するまでもなく判定できるものははじく

    if q == 2: return True

    if q < 2 or q&1 == 0: return False



    #n-1=2^s*dとし(但しaは整数、dは奇数)、dを求める

    d = (q-1)>>1

    while d&1 == 0:

        d >>= 1

    

    #判定をk回繰り返す

    for i in range(k):

        a = random.randint(1,q-1)

        t = d

        y = pow(a,t,q)

        #[0,s-1]の範囲すべてをチェック

        while t != q-1 and y != 1 and y != q-1: 

            y = pow(y,2,q)

            t <<= 1

        if y != q-1 and t&1 == 0:

            return False

    return True



def make_divisors(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    divisors = []

    for i in range(1, int(n**0.5)+1):

        if n % i == 0:

            divisors.append(i)

            if i != n // i:

                divisors.append(n//i)



    divisors.sort()

    return divisors





prime_list = [1] + [i for i in range(1, gcd(A, B) + 1) if is_prime(i)] # Hits:1.0, Total execution time: 114.667 ms, Average time per hit: 114.667 ms 


print((len([i for i in prime_list if A % i == 0 and B % i == 0]))) # Hits:1.0, Total execution time: 7.916 ms, Average time per hit: 7.916 ms 
","A, B = [int(str) for str in input().split()] # Hits:1.0, Total execution time: 33.417 ms, Average time per hit: 33.417 ms 




def gcd(a,b): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


  while b!=0:

    a,b=b,a%b

  return a





def prime_factorize(n): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    a = []

    while n % 2 == 0:

        a.append(2)

        n //= 2

    f = 3

    while f * f <= n:

        if n % f == 0:

            a.append(f)

            n //= f

        else:

            f += 2

    if n != 1:

        a.append(n)

    return a





print((len(set(prime_factorize(gcd(A, B)))) + 1)) # Hits:1.0, Total execution time: 8.583 ms, Average time per hit: 8.583 ms 
",p02900,True
"import math # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




def gcd(n, m): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    while m != 0:

        n, m = m, n % m

    return n



a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.458 ms, Average time per hit: 36.458 ms 


g = gcd(a, b) # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


g_2 = int(math.sqrt(g)) # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 


cnt = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(2, g_2+1): # Hits:7.0, Total execution time: 1.125 ms, Average time per hit: 0.16071428571428573 ms 


    if g % i == 0: # Hits:6.0, Total execution time: 0.792 ms, Average time per hit: 0.132 ms 


        while g % i == 0: # Hits:7.0, Total execution time: 0.834 ms, Average time per hit: 0.11914285714285713 ms 


            g //= i # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


        cnt += 1 # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


if g > 1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    cnt += 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




print(cnt) # Hits:1.0, Total execution time: 5.958 ms, Average time per hit: 5.958 ms 

","def gcd(a, b): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    while b != 0:

        a, b = b, a % b

    return a





def prime_factorization(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    res = []

    for i in range(2, int(pow(n, 0.5)) + 1):

        if n % i == 0:

            ex = 0

            while n % i == 0:

                ex += 1

                n //= i

            res.append([i, ex])

    if n != 1:

        res.append([n, 1])

    return res





a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 25.209 ms, Average time per hit: 25.209 ms 


g = gcd(a, b) # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


res = prime_factorization(g) # Hits:1.0, Total execution time: 4.541 ms, Average time per hit: 4.541 ms 


print((len(res) + 1)) # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 

",p02900,True
"from math import gcd # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


from copy import copy # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.625 ms, Average time per hit: 34.625 ms 




def div(x): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    ret = []

    for i in range(1, int(x ** 0.5) + 1):

        if x % i == 0:

            ret.append(i)

            ret.append(x // i)

    

    return ret



def judge_prime(x): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    cnt = 0

    for i in range(1, int(x ** 0.5) + 1):

        if x % i == 0:

            cnt += 1

    if cnt == 1:

        return True

    return False



div_a = div(a) # Hits:1.0, Total execution time: 6.542 ms, Average time per hit: 6.542 ms 


div_b = div(b) # Hits:1.0, Total execution time: 4.875 ms, Average time per hit: 4.875 ms 




data = list(set(div_a) & set(div_b)) # Hits:1.0, Total execution time: 3.208 ms, Average time per hit: 3.208 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for x in data: # Hits:13.0, Total execution time: 1.335 ms, Average time per hit: 0.1026923076923077 ms 


    if judge_prime(x): # Hits:12.0, Total execution time: 11.751 ms, Average time per hit: 0.97925 ms 


        ans += 1 # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


print(ans) # Hits:1.0, Total execution time: 6.0 ms, Average time per hit: 6.0 ms 
","from math import gcd # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


from copy import copy # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.333 ms, Average time per hit: 34.333 ms 




def div(x): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ret = []

    for i in range(1, int(x ** 0.5) + 1):

        if x % i == 0:

            ret.append(i)

            ret.append(x // i)

    

    return ret



def judge_prime(x): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    cnt = 0

    for i in range(1, int(x ** 0.5) + 1):

        if x % i == 0:

            cnt += 1

        if cnt >= 2:

            return False

    return True



div_a = div(a) # Hits:1.0, Total execution time: 5.584 ms, Average time per hit: 5.584 ms 


div_b = div(b) # Hits:1.0, Total execution time: 4.833 ms, Average time per hit: 4.833 ms 




data = list(set(div_a) & set(div_b)) # Hits:1.0, Total execution time: 1.958 ms, Average time per hit: 1.958 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for x in data: # Hits:13.0, Total execution time: 1.167 ms, Average time per hit: 0.08976923076923077 ms 


    if judge_prime(x): # Hits:12.0, Total execution time: 9.583 ms, Average time per hit: 0.7985833333333334 ms 


        ans += 1 # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


print(ans) # Hits:1.0, Total execution time: 5.583 ms, Average time per hit: 5.583 ms 
",p02900,True
"import math



a, b = list(map(int, input().split()))



if a > b:

    a, b = b, a



# a_sq = int(math.sqrt(a)) + 1



com_div = []

# for i in range(1, a_sq + 1):

for i in range(1, a):

    if a % i == 0 and b % i == 0:

        com_div.append(i)

if len(com_div) == 1:

    print((1))

    exit()

    

ans = [1]

for i in range(1, len(com_div)):

    flg = 0

    for j in range(1, i):

        if com_div[i] % com_div[j] == 0:

            flg = 1

            break

    if flg == 0:

        ans.append(com_div[i])

print((len(ans)))","import math # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.625 ms, Average time per hit: 35.625 ms 


def gcd(x, y): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if y == 0:

        return x

    else:

        return gcd(y, x % y)

ab_gcd = gcd(a, b) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 




gcd_sq = int(math.sqrt(ab_gcd) + 1) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




ans = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


curr_num = ab_gcd # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(2, gcd_sq): # Hits:7.0, Total execution time: 0.792 ms, Average time per hit: 0.11314285714285714 ms 


    if curr_num % i != 0: # Hits:6.0, Total execution time: 0.751 ms, Average time per hit: 0.12516666666666668 ms 


        continue # Hits:3.0, Total execution time: 0.208 ms, Average time per hit: 0.06933333333333333 ms 


    cnt = 0 # Hits:3.0, Total execution time: 0.209 ms, Average time per hit: 0.06966666666666667 ms 


    while curr_num % i == 0: # Hits:7.0, Total execution time: 0.791 ms, Average time per hit: 0.113 ms 


        curr_num = curr_num // i # Hits:4.0, Total execution time: 0.376 ms, Average time per hit: 0.094 ms 


        cnt += 1 # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


    ans.append([i, cnt]) # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


if curr_num != 1: # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    ans.append([curr_num, 1]) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


print((len(ans) + 1))     # Hits:1.0, Total execution time: 5.708 ms, Average time per hit: 5.708 ms 
",p02900,False
"import math # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




class Prime: # Hits:1.0, Total execution time: 12.708 ms, Average time per hit: 12.708 ms 


    seeds = [2 ,3 ,5 ,7 ,11 ,13 ,17 ,19 ,23 ,29 ,31 ,37 ,41 ,43 ,47 ,53 ,59 ,61 ,67 ,71 ,73 ,79 ,83 ,89 ,97 ,101 ,103 ,107 ,109 ,113 ,127 ,131 ,137 ,139 ,149 ,151 ,157 ,163 ,167 ,173 ,179 ,181 ,191 ,193 ,197 ,199 ,211 ,223 ,227 ,229 ,233 ,239 ,241 ,251 ,257 ,263 ,269 ,271 ,277 ,281 ,283 ,293 ,307 ,311 ,313 ,317 ,331 ,337 ,347 ,349 ,353 ,359 ,367 ,373 ,379 ,383 ,389 ,397 ,401 ,409 ,419 ,421 ,431 ,433 ,439 ,443 ,449 ,457 ,461 ,463 ,467 ,479 ,487 ,491 ,499 ,503 ,509 ,521 ,523 ,541 ,547 ,557 ,563 ,569 ,571 ,577 ,587 ,593 ,599 ,601 ,607 ,613 ,617 ,619 ,631 ,641 ,643 ,647 ,653 ,659 ,661 ,673 ,677 ,683 ,691 ,701 ,709 ,719 ,727 ,733 ,739 ,743 ,751 ,757 ,761 ,769 ,773 ,787 ,797 ,809 ,811 ,821 ,823 ,827 ,829 ,839 ,853 ,857 ,859 ,863 ,877 ,881 ,883 ,887 ,907 ,911 ,919 ,929 ,937 ,941 ,947 ,953 ,967 ,971 ,977 ,983 ,991 ,997 ,1009 ,1013 ,1019 ,1021 ,1031 ,1033 ,1039 ,1049 ,1051 ,1061 ,1063 ,1069 ,1087 ,1091 ,1093 ,1097 ,1103 ,1109 ,1117 ,1123 ,1129 ,1151 ,1153 ,1163 ,1171 ,1181 ,1187 ,1193 ,1201 ,1213 ,1217 ,1223 ,1229 ,1231 ,1237 ,1249 ,1259 ,1277 ,1279 ,1283 ,1289 ,1291 ,1297 ,1301 ,1303 ,1307 ,1319 ,1321 ,1327 ,1361 ,1367 ,1373 ,1381 ,1399 ,1409 ,1423 ,1427 ,1429 ,1433 ,1439 ,1447 ,1451 ,1453 ,1459 ,1471 ,1481 ,1483 ,1487 ,1489 ,1493 ,1499 ,1511 ,1523 ,1531 ,1543 ,1549 ,1553 ,1559 ,1567 ,1571 ,1579 ,1583 ,1597 ,1601 ,1607 ,1609 ,1613 ,1619 ,1621 ,1627 ,1637 ,1657 ,1663 ,1667 ,1669 ,1693 ,1697 ,1699 ,1709 ,1721 ,1723 ,1733 ,1741 ,1747 ,1753 ,1759 ,1777 ,1783 ,1787 ,1789 ,1801 ,1811 ,1823 ,1831 ,1847 ,1861 ,1867 ,1871 ,1873 ,1877 ,1879 ,1889 ,1901 ,1907 ,1913 ,1931 ,1933 ,1949 ,1951 ,1973 ,1979 ,1987 ,1993 ,1997 ,1999 ,2003 ,2011 ,2017 ,2027 ,2029 ,2039 ,2053 ,2063 ,2069 ,2081 ,2083 ,2087 ,2089 ,2099 ,2111 ,2113 ,2129 ,2131 ,2137 ,2141 ,2143 ,2153 ,2161 ,2179 ,2203 ,2207 ,2213 ,2221 ,2237 ,2239 ,2243 ,2251 ,2267 ,2269 ,2273 ,2281 ,2287 ,2293 ,2297 ,2309 ,2311 ,2333 ,2339 ,2341 ,2347 ,2351 ,2357 ,2371 ,2377 ,2381 ,2383 ,2389 ,2393 ,2399 ,2411 ,2417 ,2423 ,2437 ,2441 ,2447 ,2459 ,2467 ,2473 ,2477 ,2503 ,2521 ,2531 ,2539 ,2543 ,2549 ,2551 ,2557 ,2579 ,2591 ,2593 ,2609 ,2617 ,2621 ,2633 ,2647 ,2657 ,2659 ,2663 ,2671 ,2677 ,2683 ,2687 ,2689 ,2693 ,2699 ,2707 ,2711 ,2713 ,2719 ,2729 ,2731 ,2741 ,2749 ,2753 ,2767 ,2777 ,2789 ,2791 ,2797 ,2801 ,2803 ,2819 ,2833 ,2837 ,2843 ,2851 ,2857 ,2861 ,2879 ,2887 ,2897 ,2903 ,2909 ,2917 ,2927 ,2939 ,2953 ,2957 ,2963 ,2969 ,2971 ,2999 ,3001 ,3011 ,3019 ,3023 ,3037 ,3041 ,3049 ,3061 ,3067 ,3079 ,3083 ,3089 ,3109 ,3119 ,3121 ,3137 ,3163 ,3167 ,3169 ,3181 ,3187 ,3191 ,3203 ,3209 ,3217 ,3221 ,3229 ,3251 ,3253 ,3257 ,3259 ,3271 ,3299 ,3301 ,3307 ,3313 ,3319 ,3323 ,3329 ,3331 ,3343 ,3347 ,3359 ,3361 ,3371 ,3373 ,3389 ,3391 ,3407 ,3413 ,3433 ,3449 ,3457 ,3461 ,3463 ,3467 ,3469 ,3491 ,3499 ,3511 ,3517 ,3527 ,3529 ,3533 ,3539 ,3541 ,3547 ,3557 ,3559 ,3571 ,3581 ,3583 ,3593 ,3607 ,3613 ,3617 ,3623 ,3631 ,3637 ,3643 ,3659 ,3671 ,3673 ,3677 ,3691 ,3697 ,3701 ,3709 ,3719 ,3727 ,3733 ,3739 ,3761 ,3767 ,3769 ,3779 ,3793 ,3797 ,3803 ,3821 ,3823 ,3833 ,3847 ,3851 ,3853 ,3863 ,3877 ,3881 ,3889 ,3907 ,3911 ,3917 ,3919 ,3923 ,3929 ,3931 ,3943 ,3947 ,3967 ,3989 ,4001 ,4003 ,4007 ,4013 ,4019 ,4021 ,4027 ,4049 ,4051 ,4057 ,4073 ,4079 ,4091 ,4093 ,4099 ,4111 ,4127 ,4129 ,4133 ,4139 ,4153 ,4157 ,4159 ,4177 ,4201 ,4211 ,4217 ,4219 ,4229 ,4231 ,4241 ,4243 ,4253 ,4259 ,4261 ,4271 ,4273 ,4283 ,4289 ,4297 ,4327 ,4337 ,4339 ,4349 ,4357 ,4363 ,4373 ,4391 ,4397 ,4409 ,4421 ,4423 ,4441 ,4447 ,4451 ,4457 ,4463 ,4481 ,4483 ,4493 ,4507 ,4513 ,4517 ,4519 ,4523 ,4547 ,4549 ,4561 ,4567 ,4583 ,4591 ,4597 ,4603 ,4621 ,4637 ,4639 ,4643 ,4649 ,4651 ,4657 ,4663 ,4673 ,4679 ,4691 ,4703 ,4721 ,4723 ,4729 ,4733 ,4751 ,4759 ,4783 ,4787 ,4789 ,4793 ,4799 ,4801 ,4813 ,4817 ,4831 ,4861 ,4871 ,4877 ,4889 ,4903 ,4909 ,4919 ,4931 ,4933 ,4937 ,4943 ,4951 ,4957 ,4967 ,4969 ,4973 ,4987 ,4993 ,4999]



    def is_prime(self, n):

        """"""

        prime test (hybrid)



        see also: https://qiita.com/gushwell/items/ff9ed83ba55350aaa369



        :param n:

        :return: boolean

        """"""

        is_prime_common = self.is_prime_common(n)

        if is_prime_common is not None:

            return is_prime_common



        if n < 2000000:

            return self.is_prime_brute_force(n)

        else:

            return self.is_prime_miller_rabin(n)



    def is_prime_common(self, n):

        if n == 1: return False

        if n in Prime.seeds: return True

        if any([n % x == 0 for x in self.seeds]): return False



    def is_prime_brute_force(self, n):

        """"""

        brute force prime test

        use with is_prime_common if you want to skip seeds



        :param n:

        :return: boolean

        """"""

        for k in range(2, int(math.sqrt(n)) + 1):

            if n % k == 0:

                return False

        return True



    def is_prime_miller_rabin(self, n):

        """"""

        miller rabin prime test

        use with is_prime_common if you want to skip seeds



        see also

            algorithm: https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test

            implementation: https://qiita.com/srtk86/items/609737d50c9ef5f5dc59

            improvement: https://qiita.com/gushwell/items/ff9ed83ba55350aaa369



        :param n:

        :return: boolean

        """"""



        d = n - 1

        while d & 1 == 0:

            d >>= 1



        # use one of these lines / upper is more efficient.

        witnesses = self.get_witnesses(n)

        # witnesses = [random.randint(1, n - 1) for _ in range(100)]



        for w in witnesses:

            y = pow(w, d, n)



            while d != n - 1 and y != 1 and y != n - 1:

                y = (y * y) % n

                d <<= 1



            if y != n - 1 and d & 1 == 0:

                return False



        return True



    def get_witnesses(self, num):

        def _get_range(num):

            if num < 2047:

                return 1

            if num < 1373653:

                return 2

            if num < 25326001:

                return 3

            if num < 3215031751:

                return 4

            if num < 2152302898747:

                return 5

            if num < 3474749660383:

                return 6

            if num < 341550071728321:

                return 7

            if num < 3825123056546413051:

                return 9

            return 12



        return self.seeds[:_get_range(num)]



    def gcd(self, a, b):

        if a < b:

            return self.gcd(b, a)

        if b == 0:

            return a

        while b:

            a, b = b, a % b

        return a



    @staticmethod

    def f(x, n, seed):

        """"""

        pseudo prime generator

        :param x:

        :param n:

        :param seed:

        :return: pseudo prime

        """"""

        p = Prime.seeds[seed % len(Prime.seeds)]

        return (p * x + seed) % n



    def find_factor(self, n, seed=1):

        """"""

        find one of factor of n

        this function is based to Pollard's rho algorithm



        see also

            algorithm: https://en.wikipedia.org/wiki/Pollard%27s_rho_algorithm

            implementation: https://qiita.com/gushwell/items/561afde2e00bf3380c98



        :param n:

        :param seed:

        :return: factor

        """"""

        if self.is_prime(n):

            return n



        x, y, d = 2, 2, 1

        count = 0

        while d == 1:

            count += 1

            x = self.f(x, n, seed)

            y = self.f(self.f(y, n, seed), n, seed)

            d = self.gcd(abs(x - y), n)



        if d == n:

            return self.find_factor(n, seed+1)

        return self.find_factor(d)



    def find_factors(self, n):

        primes = {}

        if self.is_prime(n):

            primes[n] = 1

            return primes



        while n > 1:

            factor = self.find_factor(n)



            primes.setdefault(factor, 0)

            primes[factor] += 1



            n //= factor



        return primes



    def decompose(self, n):

        ps_max = self.seeds[-1]

        primes = {}



        for p in self.seeds:

            while n % p == 0:

                primes.setdefault(p, 0)

                primes[p] += 1

                n //= p



        while n > ps_max:

            factor = self.find_factor(n)

            while n % factor == 0:

              primes.setdefault(factor, 0)

              primes[factor] += 1

              n //= factor



        return primes



prime = Prime() # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.459 ms, Average time per hit: 35.459 ms 


primes = prime.decompose(prime.gcd(a, b)) # Hits:1.0, Total execution time: 83.417 ms, Average time per hit: 83.417 ms 




print((len(primes) + 1)) # Hits:1.0, Total execution time: 7.625 ms, Average time per hit: 7.625 ms 

","import math # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




class Prime: # Hits:1.0, Total execution time: 7.208 ms, Average time per hit: 7.208 ms 


    seeds = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]



    def gcd(self, a, b):

        if a < b:

            return self.gcd(b, a)

        if b == 0:

            return a

        while b:

            a, b = b, a % b

        return a



    def decompose(self, n):

        ps_max = self.seeds[-1]

        primes = {}

        setdef = primes.setdefault



        for p in self.seeds:

            while n % p == 0:

                setdef(p, 0)

                primes[p] += 1

                n //= p



        p = ps_max

        while p <= math.sqrt(n):

            if n % p == 0:

                setdef(p, 0)

                primes[p] += 1

                n //= p

            p += 2

        if n > 1:

          setdef(n, 1)



        return primes



prime = Prime() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


 

a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.875 ms, Average time per hit: 34.875 ms 


primes = prime.decompose(prime.gcd(a, b)) # Hits:1.0, Total execution time: 10.708 ms, Average time per hit: 10.708 ms 


 

print((len(primes) + 1)) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 
",p02900,True
"import math # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


import random # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 






class Prime: # Hits:1.0, Total execution time: 8.792 ms, Average time per hit: 8.792 ms 


    seed_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]



    def is_prime(self, n):

        """"""

        prime test (hybrid)



        see also: https://qiita.com/gushwell/items/ff9ed83ba55350aaa369



        :param n:

        :return: boolean

        """"""

        is_prime_common = self.is_prime_common(n)

        if is_prime_common is not None:

            return is_prime_common



        if n < 2000000:

            return self.is_prime_brute_force(n)

        else:

            return self.is_prime_miller_rabin(n)



    def is_prime_common(self, n):

        if n == 1: return False

        if n in Prime.seed_primes: return True

        if any([n % x == 0 for x in self.seed_primes]): return False



    def is_prime_brute_force(self, n):

        """"""

        brute force prime test

        use with is_prime_common if you want to skip seed_primes



        :param n:

        :return: boolean

        """"""

        for k in range(2, int(math.sqrt(n)) + 1):

            if n % k == 0:

                return False

        return True



    def is_prime_miller_rabin(self, n):

        """"""

        miller rabin prime test

        use with is_prime_common if you want to skip seed_primes



        see also

            algorithm: https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test

            implementation: https://qiita.com/srtk86/items/609737d50c9ef5f5dc59

            improvement: https://qiita.com/gushwell/items/ff9ed83ba55350aaa369



        :param n:

        :return: boolean

        """"""



        d = n - 1

        while d & 1 == 0:

            d >>= 1



        # use one of these lines / upper is more efficient.

        witnesses = self.get_witnesses(n)

        # witnesses = [random.randint(1, n - 1) for _ in range(100)]



        for w in witnesses:

            y = pow(w, d, n)



            while d != n - 1 and y != 1 and y != n - 1:

                y = (y * y) % n

                d <<= 1



            if y != n - 1 and d & 1 == 0:

                return False



        return True



    def get_witnesses(self, num):

        def _get_range(num):

            if num < 2047:

                return 1

            if num < 1373653:

                return 2

            if num < 25326001:

                return 3

            if num < 3215031751:

                return 4

            if num < 2152302898747:

                return 5

            if num < 3474749660383:

                return 6

            if num < 341550071728321:

                return 7

            if num < 3825123056546413051:

                return 9

            return 12



        return self.seed_primes[:_get_range(num)]



    def gcd(self, a, b):

        if a < b:

            return self.gcd(b, a)

        if b == 0:

            return a

        while b:

            a, b = b, a % b

        return a



    @staticmethod

    def f(x, n, seed):

        """"""

        pseudo prime generator

        :param x:

        :param n:

        :param seed:

        :return: pseudo prime

        """"""

        p = Prime.seed_primes[seed % len(Prime.seed_primes)]

        return (p * x + seed) % n



    def find_factor(self, n, seed=1):

        """"""

        find one of factor of n

        this function is based to Pollard's rho algorithm



        see also

            algorithm: https://en.wikipedia.org/wiki/Pollard%27s_rho_algorithm

            implementation: https://qiita.com/gushwell/items/561afde2e00bf3380c98



        :param n:

        :param seed:

        :return: factor

        """"""

        if self.is_prime(n):

            return n



        x, y, d = 2, 2, 1

        count = 0

        while d == 1:

            count += 1

            x = self.f(x, n, seed)

            y = self.f(self.f(y, n, seed), n, seed)

            d = self.gcd(abs(x - y), n)



        if d == n:

            return self.find_factor(n, seed+1)

        return self.find_factor(d)



    def find_factors(self, n):

        primes = {}

        if self.is_prime(n):

            primes[n] = 1

            return primes



        while n > 1:

            factor = self.find_factor(n)



            primes.setdefault(factor, 0)

            primes[factor] += 1



            n //= factor



        return primes





prime = Prime() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




#import numpy as np



a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.833 ms, Average time per hit: 37.833 ms 




prime_a = list(prime.find_factors(a).keys()) # Hits:1.0, Total execution time: 73.583 ms, Average time per hit: 73.583 ms 


prime_b = list(prime.find_factors(b).keys()) # Hits:1.0, Total execution time: 49.5 ms, Average time per hit: 49.5 ms 


#pa = np.array(prime_a)

#pb = np.array(prime_b)



#print(pa, pb)



print((1+len(set(prime_a)&set(prime_b)))) # Hits:1.0, Total execution time: 6.917 ms, Average time per hit: 6.917 ms 


#print(1 + np.intersect1d(pa, pb).size)
","

def factorization(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    arr = []

    temp = n

    for i in range(2, int(-(-n**0.5//1))+1):

        if temp%i==0:

            cnt=0

            while temp%i==0:

                cnt+=1

                temp //= i

            arr.append(i)



    if temp!=1:

        arr.append(temp)



    if arr==[]:

        arr.append(n)



    return arr



#import numpy as np



a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.25 ms, Average time per hit: 37.25 ms 


if a==1 and b==1: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print((1))

else:

    #print(factorization(a))

    prime_a = factorization(a) # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 


    prime_b = factorization(b) # Hits:1.0, Total execution time: 4.458 ms, Average time per hit: 4.458 ms 


    #print(prime_a, prime_b)

    print((1+len(set(prime_a)&set(prime_b)))) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 
",p02900,True
"import sys



input = sys.stdin.readline



def is_prime(N):

    prime = set()

    

    if not N % 2: prime.add(2)

    while not N % 2: N //= 2

    

    x = 3

    

    while x ** 2 <= N:

        if not N % x: prime.add(x)

        while not N % x: N //= x

        x += 2

        

    if N > 1: prime.add(N)

    

    return prime





def main():

    A, B = list(map(int, input().split()))

    

    a = is_prime(A)

    b = is_prime(B)

    

    print((len(a & b) + 1))



if __name__ == '__main__':

    main()","def gcd(a, b): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    while b:

        r = a % b

        a, b = b, r

    return a



A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.792 ms, Average time per hit: 33.792 ms 


n = gcd(A, B) # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 




ans = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


if not n % 2: ans += 1 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




while not n % 2: # Hits:3.0, Total execution time: 0.543 ms, Average time per hit: 0.181 ms 


    n //= 2 # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 




i = 3 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




while i <= n**0.5: # Hits:2.0, Total execution time: 0.499 ms, Average time per hit: 0.2495 ms 


    if not n % i: ans += 1 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    while not n % i: # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


        n //= i # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    i += 2 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




if 1 < n: ans += 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


print(ans) # Hits:1.0, Total execution time: 7.875 ms, Average time per hit: 7.875 ms 
",p02900,False
"a,b = list(map(int,input().split())) # Hits:1.0, Total execution time: 35.916 ms, Average time per hit: 35.916 ms 




def fctr1(n):  # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    f = []

    c = 0

    for i in range(2,int(n**0.5)+2):

        while n%i == 0:

            c += 1

            n = n//i

        if c !=0:

            f.append([i,c])

            c = 0

    if n != 1:

        f.append([n,1])

    return f



dlist = fctr1(a) # Hits:1.0, Total execution time: 7.875 ms, Average time per hit: 7.875 ms 


#print(dlist)

ans = 1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(len(dlist)): # Hits:5.0, Total execution time: 0.667 ms, Average time per hit: 0.13340000000000002 ms 


    if b%dlist[i][0] == 0: # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


        ans += 1 # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


print(ans) # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 



","#nの素因数分解(O(n**0.5)

def prime_factor(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ass = []

    for i in range(2,int(n**0.5)+1):

        while n%i == 0:

            ass.append(i)

            n = n//i

    if n != 1:

        ass.append(n)

    return ass



#a,bの最大公約数

def gcd(a,b): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    while b:

        a,b = b,a%b

    return a



a,b = list(map(int,input().split())) # Hits:1.0, Total execution time: 34.042 ms, Average time per hit: 34.042 ms 




print((len(set(prime_factor(gcd(a,b))))+1)) # Hits:1.0, Total execution time: 9.417 ms, Average time per hit: 9.417 ms 

",p02900,True
"import math # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




def divisors(x): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    l = [[], []]

    for i in range(1, int(math.sqrt(x))+1):

        if x % i == 0:

            if i**2 != x:

                l[0].append(i)

                l[1].append(x//i)

            else:

                l[0].append(i)

    return l[0]+l[1][::-1]



def primenumber(x): # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    for i in range(2, int(math.sqrt(x))+1):

        if x % i == 0:

            return False

    return True



a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 32.083 ms, Average time per hit: 32.083 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in divisors(math.gcd(a, b)): # Hits:13.0, Total execution time: 8.252 ms, Average time per hit: 0.6347692307692308 ms 


    if i == 1: # Hits:12.0, Total execution time: 1.042 ms, Average time per hit: 0.08683333333333333 ms 


        cnt += 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    elif primenumber(i): # Hits:11.0, Total execution time: 6.917 ms, Average time per hit: 0.6288181818181818 ms 


        cnt += 1 # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


print(cnt) # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 
","def prime_factorize(n): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    a = []

    while n % 2 == 0:

        a.append(2)

        n //= 2

    f = 3

    while f * f <= n:

        if n % f == 0:

            a.append(f)

            n //= f

        else:

            f += 2

    if n != 1:

        a.append(n)

    return a



from math import sqrt # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


from math import gcd # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.084 ms, Average time per hit: 35.084 ms 


x = gcd(a, b) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


print((len(set(prime_factorize(x)))+1)) # Hits:1.0, Total execution time: 8.875 ms, Average time per hit: 8.875 ms 
",p02900,True
"import math



def get_spf(n):

	ans = [i for i in range(n + 1)]



	for p in range(2, n + 1):

		if ans[p] == p:

			for i in range(p**2, n + 1, p):

				if ans[i] == i:

					ans[i] = p



	return ans



def get_pf(n, spf):

	ans = []



	while n > 1:

		ans.append(spf[n])

		n = int(n / spf[n])



	return ans



if __name__ == ""__main__"":

	line = input().split("" "")



	a, b = int(line[0]), int(line[1])



	# spf = get_spf(max(math.ceil(math.sqrt(a)), math.ceil(math.sqrt(b))))

	spf = get_spf(max(a, b))



	primes_a = set(get_pf(a, spf))

	primes_b = set(get_pf(b, spf))



	ans = []

	for e in primes_a:

		if e in primes_b:

			ans.append(e)



	print((1 + len(ans)))",,p02900,False
"import math # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 31.667 ms, Average time per hit: 31.667 ms 




l = max(a, b) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


s = min(a, b) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




if s == 1: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print((1)) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 


else:

    while l % s > 0: # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


        n = s  # Hits:3.0, Total execution time: 0.251 ms, Average time per hit: 0.08366666666666667 ms 


        s = l % s # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


        l = n # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


    

    a = [i for i in range(2, s+1) ] # Hits:1.0, Total execution time: 4.208 ms, Average time per hit: 4.208 ms 


    p =[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




    while True: # Hits:5.0, Total execution time: 0.416 ms, Average time per hit: 0.0832 ms 


        prime = min(a) # Hits:5.0, Total execution time: 1.626 ms, Average time per hit: 0.3252 ms 




        if prime > math.sqrt(s): # Hits:5.0, Total execution time: 1.376 ms, Average time per hit: 0.2752 ms 


            break # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 




        p.append(prime) # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 




        i = 0 # Hits:4.0, Total execution time: 0.335 ms, Average time per hit: 0.08375 ms 


        while i < len(a): # Hits:126.0, Total execution time: 15.832 ms, Average time per hit: 0.12565079365079365 ms 


            if a[i] % prime == 0: # Hits:122.0, Total execution time: 13.997 ms, Average time per hit: 0.11472950819672131 ms 


                a.pop(i) # Hits:46.0, Total execution time: 6.083 ms, Average time per hit: 0.13223913043478258 ms 


                continue # Hits:46.0, Total execution time: 4.372 ms, Average time per hit: 0.09504347826086956 ms 


            i += 1 # Hits:76.0, Total execution time: 6.537 ms, Average time per hit: 0.08601315789473683 ms 




    for i in a: # Hits:14.0, Total execution time: 1.291 ms, Average time per hit: 0.09221428571428571 ms 


        p.append(i) # Hits:13.0, Total execution time: 1.916 ms, Average time per hit: 0.1473846153846154 ms 




    ans = 1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


    for i in range(len(p)): # Hits:18.0, Total execution time: 1.669 ms, Average time per hit: 0.09272222222222223 ms 


        if s % p[i] == 0: # Hits:17.0, Total execution time: 1.834 ms, Average time per hit: 0.10788235294117646 ms 


            ans += 1 # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 




    print(ans) # Hits:1.0, Total execution time: 4.833 ms, Average time per hit: 4.833 ms 
","def gcd(x, y): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    if y == 0: return x

    return gcd(y, x%y)



def factorize(n): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    i = 2

    factors = []

    while i * i <= n:

        while n % i == 0:

            n /= i

            factors.append(i)

        i += 1

    if n > 1:

        factors.append(n)

    return factors





a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.833 ms, Average time per hit: 33.833 ms 




g = gcd(a, b) # Hits:1.0, Total execution time: 1.917 ms, Average time per hit: 1.917 ms 


ans = set(factorize(g)) # Hits:1.0, Total execution time: 4.041 ms, Average time per hit: 4.041 ms 




print((len(ans)+1)) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 
",p02900,True
"# 1. 最大公約数を求める(ユークリッドの互除法)

# 2. 最大公約数を2と3以上の奇数で順次割っていくする（下から計算したら、素数判定は不要）

# 3. 2.の結果に含まれる数の種類の数＋１が答え



def main():

  a, b = list(map(int, input().split()))

  while b != 0: a, b = b, a % b #最大公約数を求める

  print((num_facto(a) + 1))  

  

def num_facto(n):

  ans = 0

  max_n = int(n ** 0.5) + 1

  if n == 1: return ans

  two_and_odds = [2] + [x for x in range(3, max_n, 2) if x ** 2 <= n]

  for cursor in two_and_odds:

    if n == 1: break

    if n % cursor == 0: ans += 1

    while n % cursor == 0: n = n // cursor

  if n != 1: ans += 1

  return ans



if __name__ == ""__main__"":

  main()
",,p02900,False
"a, b = [int(i) for i in input().split()]

small = min(a, b)

big = max(a, b)



import sys



if small == 1:

    print((1))

    sys.exit(0)



import math

table = [i for i in range(2, small + 1) if (i % 2 != 0)]

limit  = math.sqrt(small)

prime = [2]

while True:

    if len(table) == 0:

        break

    head = table.pop(0)

    if head > limit:

        break

    table = [v for v in table if v % head != 0]

    prime.append(head)

prime.extend(table)

cd = [p for p in prime if (small % p == 0) and (big % p == 0)]



print((len(cd) + 1))
","import sys # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


sys.setrecursionlimit(10 ** 7) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.167 ms, Average time per hit: 34.167 ms 


_min, _max = min(a, b), max(a, b) # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


prime_factors = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


i = 2 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while i ** 2 <= _min: # Hits:5.0, Total execution time: 0.791 ms, Average time per hit: 0.15819999999999998 ms 


    ext = 0 # Hits:4.0, Total execution time: 0.375 ms, Average time per hit: 0.09375 ms 


    while _min % i == 0: # Hits:8.0, Total execution time: 1.083 ms, Average time per hit: 0.135375 ms 


        ext += 1 # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


        _min //= i # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


    if ext: # Hits:4.0, Total execution time: 0.334 ms, Average time per hit: 0.0835 ms 


        prime_factors.append((i, ext)) # Hits:3.0, Total execution time: 0.624 ms, Average time per hit: 0.208 ms 


    i += 1 # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


if _min != 1: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    prime_factors.append((_min, 1)) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for pf, _ in prime_factors: # Hits:5.0, Total execution time: 0.751 ms, Average time per hit: 0.1502 ms 


    if _max % pf == 0: # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


        ans += 1 # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


print(ans) # Hits:1.0, Total execution time: 5.792 ms, Average time per hit: 5.792 ms 

",p02900,False
"def factorization(n): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    arr = []

    temp = n

    for i in range(2, int(-(-n**0.5//1))+1):

        if temp%i==0:

            cnt=0

            while temp%i==0:

                cnt+=1

                temp //= i

            arr.append([i, cnt])

    if temp!=1:

        arr.append([temp, 1])

    if arr==[]:

        arr.append([n, 1])

    return arr



a, b = list(map(int,input().split())) # Hits:1.0, Total execution time: 34.709 ms, Average time per hit: 34.709 ms 


a_set = set() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for num, _ in factorization(a): # Hits:5.0, Total execution time: 8.956 ms, Average time per hit: 1.7912000000000001 ms 


    a_set.add(num) # Hits:4.0, Total execution time: 0.791 ms, Average time per hit: 0.19775 ms 


b_set = set() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for num, _ in factorization(b): # Hits:5.0, Total execution time: 5.375 ms, Average time per hit: 1.075 ms 


    b_set.add(num) # Hits:4.0, Total execution time: 1.0 ms, Average time per hit: 0.25 ms 


ans = a_set & b_set # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


if 1 not in ans: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ans.add(1) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


print((len(ans))) # Hits:1.0, Total execution time: 5.542 ms, Average time per hit: 5.542 ms 

","def factorization(n): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    arr = []

    temp = n

    for i in range(2, int(-(-n**0.5//1))+1):

        if temp%i==0:

            cnt=0

            while temp%i==0:

                cnt+=1

                temp //= i

            arr.append([i, cnt])

    if temp!=1:

        arr.append([temp, 1])

    if arr==[]:

        arr.append([n, 1])

    return arr



a, b = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.208 ms, Average time per hit: 37.208 ms 


a_list = [x[0] for x in factorization(a)] # Hits:1.0, Total execution time: 8.167 ms, Average time per hit: 8.167 ms 


b_list = [x[0] for x in factorization(b)] # Hits:1.0, Total execution time: 5.458 ms, Average time per hit: 5.458 ms 


ans = set(a_list) & set(b_list) | {1} # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


print((len(ans))) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 

",p02900,True
"def factorization(n): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    res = set()

    tmp = n

    for i in range(2, int(-(-n ** 0.5 // 1)) + 1):

        if tmp % i == 0:

            while tmp % i == 0:

                tmp //= i

            res.add(i)

    res.add(tmp)

    if not res:

        res.add(n)

    return res



a, b = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.208 ms, Average time per hit: 37.208 ms 


ans = factorization(a) & factorization(b) | {1} # Hits:1.0, Total execution time: 13.375 ms, Average time per hit: 13.375 ms 


print((len(ans))) # Hits:1.0, Total execution time: 5.584 ms, Average time per hit: 5.584 ms 

","def factorization(n): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    res = set()

    tmp = n

    for i in range(2, int(-(-n ** 0.5 // 1)) + 1):

        if tmp % i == 0:

            while tmp % i == 0:

                tmp //= i

            res.add(i)

    res.add(tmp)

    return res



a, b = list(map(int,input().split())) # Hits:1.0, Total execution time: 35.083 ms, Average time per hit: 35.083 ms 


ans = factorization(a) & factorization(b) | {1} # Hits:1.0, Total execution time: 11.375 ms, Average time per hit: 11.375 ms 


print((len(ans))) # Hits:1.0, Total execution time: 6.292 ms, Average time per hit: 6.292 ms 

",p02900,True
"A, B = list(map(int,input().split())) # Hits:1.0, Total execution time: 36.875 ms, Average time per hit: 36.875 ms 


ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


if A % 2 == 0 and B % 2 == 0: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    ans += 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    while A % 2 == 0 and B % 2 == 0: # Hits:3.0, Total execution time: 0.709 ms, Average time per hit: 0.23633333333333334 ms 


        A /= 2 # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


        B /= 2 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


if A % 3 == 0 and B % 3 == 0: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    ans += 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    while A % 3 == 0 and B % 3 == 0: # Hits:2.0, Total execution time: 0.416 ms, Average time per hit: 0.208 ms 


        A /= 3 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        B /= 3 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


if A % 5 == 0 and B % 5 == 0: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    ans += 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    while A % 5 == 0 and B % 5 == 0: # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


        A /= 5 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


        B /= 5 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




i = 3 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


while 2*i + 1 <= A and 2*i + 1 <= B: # Hits:2.0, Total execution time: 0.459 ms, Average time per hit: 0.2295 ms 


    k = 2*i + 1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    if k % 3 == 0 or k % 5 == 0: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


        i += 1

        continue

    elif A % k == 0 and B % k == 0: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


        ans += 1

        A /= k

        B /= k

        while A % k == 0 and B % k == 0:

            A /= k

            B /= k

        i += 1

    else:

        i += 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


print(ans) # Hits:1.0, Total execution time: 4.833 ms, Average time per hit: 4.833 ms 
","A, B = list(map(int,input().split())) # Hits:1.0, Total execution time: 40.542 ms, Average time per hit: 40.542 ms 




def ssb(n): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    a = {1}

    while n % 2 == 0:

        a.add(2)

        n /= 2

    i = 3

    while i ** 2 <= n:

        if n % i == 0:

            a.add(i)

            n /= i

        else:

            i += 2

    if n != 1:

        a.add(n)

    return a



a = ssb(A) # Hits:1.0, Total execution time: 6.708 ms, Average time per hit: 6.708 ms 


b = ssb(B) # Hits:1.0, Total execution time: 2.75 ms, Average time per hit: 2.75 ms 




print((len(a&b))) # Hits:1.0, Total execution time: 17.541 ms, Average time per hit: 17.541 ms 
",p02900,True
"def yakusu(x): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    ans=[1]

    check=2

    while(x!=1):

        if(x%check==0):

            ans+=[check]

            while(x%check==0):

                x=x//check

        check+=1  

    return ans

def main(): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    a,b = list(map(int,input().split()))	

    ans=0

    y1=yakusu(a)

    for i in y1:

        if b%i==0:

            ans+=1

    print(ans)



main() # Hits:1.0, Total execution time: 60.125 ms, Average time per hit: 60.125 ms 



","def yakusu(x): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    ans=[1]

    check=2

    while(x!=1 and check <= int(x**0.5)+2):

        if(x%check==0):

            ans.append(check)

            while(x%check==0):

                x=x//check

        check+=1

    if x != 1:

      ans.append(x)

    return ans

def main(): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    a,b = list(map(int,input().split()))	

    ans=0

    y1=yakusu(a)

    for i in y1:

        if b%i==0:

            ans+=1

    print(ans)

 

main() # Hits:1.0, Total execution time: 58.542 ms, Average time per hit: 58.542 ms 
",p02900,True
"A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.625 ms, Average time per hit: 37.625 ms 






def gcd(a, b): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    while b:

        a, b = b, a % b

    return a





def prime_decomposition(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    i = 2

    table = []

    while i * i <= n:

        while n % i == 0:

            n /= i

            table.append(i)

        i += 1

    if n > 1:

        table.append(n)

    return table





print((len(set(prime_decomposition(gcd(A, B)))) + 1)) # Hits:1.0, Total execution time: 12.208 ms, Average time per hit: 12.208 ms 
","A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.959 ms, Average time per hit: 34.959 ms 






def gcd(a, b): # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    while b:

        a, b = b, a % b

    return a





def prime_factorize(n): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    a = []

    while n % 2 == 0:

        a.append(2)

        n //= 2

    f = 3

    while f * f <= n:

        if n % f == 0:

            a.append(f)

            n //= f

        else:

            f += 2

    if n != 1:

        a.append(n)

    return a





print((len(set(prime_factorize(gcd(A, B)))) + 1)) # Hits:1.0, Total execution time: 12.667 ms, Average time per hit: 12.667 ms 
",p02900,True
"import math # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




#input

a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.0 ms, Average time per hit: 38.0 ms 




# 2整数の公約数一覧 // 2num common divisor -> list

def commonDivisor (n1, n2): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    common_divisor=[]

    for i in range(2, min(n1, n2) + 1):

        if n1 % i == 0 and n2 % i == 0:

            common_divisor.append(i)

    return common_divisor



# 素数判定 // is prime? -> bool

def isPrime(n): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if n != 2 and n % 2 == 0:

        return False

    for i in range(2, n):

        if n % i == 0:

            return False

    return True



cd = commonDivisor(a, b) # Hits:1.0, Total execution time: 46.917 ms, Average time per hit: 46.917 ms 


cd.insert(0, 1) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


res = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for num in cd: # Hits:13.0, Total execution time: 1.212 ms, Average time per hit: 0.09323076923076923 ms 


    if isPrime(num) and res.count(num) == 0: # Hits:12.0, Total execution time: 6.623 ms, Average time per hit: 0.5519166666666666 ms 


        res.append(num) # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 




print((""{}"".format(len(res)))) # Hits:1.0, Total execution time: 6.542 ms, Average time per hit: 6.542 ms 
","#input

a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.208 ms, Average time per hit: 38.208 ms 




# 最大公約数

def gcd(a, b): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    while b: a, b = b, a % b

    return abs(a)



# 素因数分解

def factorization(n): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    arr = []

    temp = n

    for i in range(2, int(-(-n**0.5//1))+1):

        if temp%i==0:

            cnt=0

            while temp%i==0:

                cnt+=1

                temp //= i

            arr.append([i, cnt])

    if temp!=1:

        arr.append([temp, 1])

    if arr==[]:

        arr.append([n, 1])

    return arr



n = gcd(a, b) # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 


pf = factorization(n) # Hits:1.0, Total execution time: 6.834 ms, Average time per hit: 6.834 ms 


if pf == [[1, 1]]: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    print((""{}"".format(len(pf)))) # Hits:1.0, Total execution time: 6.875 ms, Average time per hit: 6.875 ms 


else:

    print((""{}"".format(len(pf)+1))) # Hits:1.0, Total execution time: 7.458 ms, Average time per hit: 7.458 ms 
",p02900,True
"# ABC-142-D

A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.75 ms, Average time per hit: 36.75 ms 


ans = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




#最大公約数

def gcd(x, y): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    while y:

        x, y = y, x % y

    return x



def get_prime_number(x): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    if x == 1:

        return []

    max = int(x ** 0.5)

    search_list = [i for i in range(2,x+1)]

    prime_num = []

    while search_list[0] <= max:

        prime_num.append(search_list[0])

        tmp = search_list[0]

        search_list = [i for i in search_list if i % tmp != 0]

    prime_num.extend(search_list)

    return prime_num



#xの素因数を全て出す

def get_prime_factor(x): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    search_list = get_prime_number(x)

    prime_factor_list = []

    for i in search_list:

        if x % i == 0:

            prime_factor_list.append(i)

    return prime_factor_list



gcd_AB = gcd(A, B) # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 


prime = get_prime_factor(gcd_AB) # Hits:1.0, Total execution time: 22.916 ms, Average time per hit: 22.916 ms 


ans += len(prime) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


print(ans) # Hits:1.0, Total execution time: 5.667 ms, Average time per hit: 5.667 ms 
","# ABC-142-D

A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 40.25 ms, Average time per hit: 40.25 ms 


ans = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




#最大公約数

def gcd(x, y): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    while y:

        x, y = y, x % y

    return x



def factorize(x): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    factor = []

    for num in range(2, int(x**0.5)+1):

        while x % num == 0:

            x //= num

            factor.append(num)

    if x != 1:

        factor.append(x)

    return set(factor)

    

gcd_AB = gcd(A, B) # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 


prime = factorize(gcd_AB) # Hits:1.0, Total execution time: 4.083 ms, Average time per hit: 4.083 ms 


ans += len(prime) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


print(ans) # Hits:1.0, Total execution time: 8.334 ms, Average time per hit: 8.334 ms 
",p02900,True
"import math # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




def is_prime(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    for p in range(2, int(math.sqrt(n)) + 1):

        if n % p == 0:

            return False

    return True



def prime_factorize(n): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    lst = []

    while n % 2 == 0:

        lst.append(2)

        n = n / 2

    a = 3

    while n > 1:

        if n % a == 0:

            lst.append(a)

            n = n / a

        else:

            a += 2

    return lst



A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 43.417 ms, Average time per hit: 43.417 ms 


lst = prime_factorize(min(A, B)) # Hits:1.0, Total execution time: 6.125 ms, Average time per hit: 6.125 ms 


ret = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for n in set(lst): # Hits:5.0, Total execution time: 0.999 ms, Average time per hit: 0.1998 ms 


    if is_prime(n) and A % n == 0 and B % n == 0: # Hits:4.0, Total execution time: 4.208 ms, Average time per hit: 1.052 ms 


        ret += 1 # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 




print(ret) # Hits:1.0, Total execution time: 10.416 ms, Average time per hit: 10.416 ms 
","def gcd(a, b): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if a % b == 0:

        return b

    else:

        return gcd(b, a % b)

 

def prime_factorize(n): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    a = 2

    lst = []

    while a * a <= n:

        if n % a == 0:

            n = n / a

            lst.append(a)

        else:

            a += 1

    if n > 1:

        lst.append(n)

    return lst

 

A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 54.875 ms, Average time per hit: 54.875 ms 


n = gcd(A, B) # Hits:1.0, Total execution time: 2.583 ms, Average time per hit: 2.583 ms 


lst = prime_factorize(n) # Hits:1.0, Total execution time: 3.875 ms, Average time per hit: 3.875 ms 


print((len(set(lst)) + 1)) # Hits:1.0, Total execution time: 6.917 ms, Average time per hit: 6.917 ms 
",p02900,True
"from itertools import combinations

def make_divisors(n):

    divisors = []

    for i in range(1, int(n**0.5)+1):

        if n % i == 0:

            divisors.append(i)

            if i != n // i:

                divisors.append(n//i)



    return divisors





#nの素数判定

def is_prime(n):

    if n == 1:

        return False

    for i in range(2,int(n**0.5)+1):

        if n % i == 0:

            return False

    return True



def gcd(a,b):

    if b == 0:

        return a

    else:

        return gcd(b,a%b)



A, B = list(map(int, input().split()))



di_A = make_divisors(A)

di_B = make_divisors(B)



di_C = list(set(di_A) & set(di_B))

if len(di_C)==1:

    print((1))

    exit()



ans = 0

array = []

array_not = []

edges = [[False] * len(di_C) for _ in range(len(di_C))]

for i in range(len(di_C)):

    for j in range(i+1, len(di_C)):

        if gcd(di_C[i], di_C[j])==1:

            edges[i][j]=True



for num in range(len(di_C), 0, -1):

    fraction = combinations(list(range(len(di_C))), num)

    for relation in fraction:

        judge = []

        for i, j in combinations(relation, 2):

            judge.append(edges[i][j])

        if all(judge):

            ans = num

            print(ans)

            exit()

print(ans)


","



def factorization(n): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    arr = []

    temp = n

    for i in range(2, int(-(-n**0.5//1))+1):

        if temp%i==0:

            cnt=0

            while temp%i==0:

                cnt+=1

                temp //= i

            arr.append([i, cnt])



    if temp!=1:

        arr.append([temp, 1])



    if arr==[]:

        arr.append([n, 1])



    return arr







A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 39.709 ms, Average time per hit: 39.709 ms 




fac_A = factorization(A) # Hits:1.0, Total execution time: 11.916 ms, Average time per hit: 11.916 ms 


fac_B = factorization(B) # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 




prime_A = [f[0] for f in fac_A] # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


prime_B = [f[0] for f in fac_B] # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




if 1 in prime_A: prime_A.remove(1) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


if 1 in prime_B: prime_B.remove(1) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


common = set(prime_A) & set(prime_B) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


print((len(common)+1)) # Hits:1.0, Total execution time: 6.209 ms, Average time per hit: 6.209 ms 

",p02900,False
"from bisect import bisect_left # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 44.125 ms, Average time per hit: 44.125 ms 


A = list(int(eval(input())) for _ in range(N)) # Hits:1.0, Total execution time: 17.041 ms, Average time per hit: 17.041 ms 


INF = 10 ** 9 + 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


V = [False for i in range(N)] # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 


nv = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


while nv < N: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    dp = [INF] # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    for i, a in enumerate(A): # Hits:12.0, Total execution time: 2.045 ms, Average time per hit: 0.17041666666666666 ms 


        if V[i]: # Hits:10.0, Total execution time: 1.125 ms, Average time per hit: 0.1125 ms 


            continue

        if a > dp[-1]: # Hits:10.0, Total execution time: 1.167 ms, Average time per hit: 0.1167 ms 


            dp.append(a) # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


        else:

            j = bisect_left(dp, a) # Hits:6.0, Total execution time: 1.0 ms, Average time per hit: 0.16666666666666666 ms 


            dp[j] = a # Hits:6.0, Total execution time: 0.623 ms, Average time per hit: 0.10383333333333333 ms 


    nv += len(dp) # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


    dp.append(INF) # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    m = len(dp) # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


    for i in range(N-1, -1, -1): # Hits:12.0, Total execution time: 1.458 ms, Average time per hit: 0.1215 ms 


        if V[i]: # Hits:10.0, Total execution time: 0.917 ms, Average time per hit: 0.0917 ms 


            continue

        if dp[m-1] <= A[i] < dp[m]: # Hits:10.0, Total execution time: 2.875 ms, Average time per hit: 0.2875 ms 


            V[i] = True

            m -= 1

    cnt += 1 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 




print(cnt) # Hits:1.0, Total execution time: 8.708 ms, Average time per hit: 8.708 ms 

","from bisect import bisect_right # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 42.667 ms, Average time per hit: 42.667 ms 


A = list(int(eval(input())) for _ in range(N)) # Hits:1.0, Total execution time: 16.333 ms, Average time per hit: 16.333 ms 


INF = 10 ** 9 + 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




dp = [INF] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for a in A: # Hits:6.0, Total execution time: 0.542 ms, Average time per hit: 0.09033333333333333 ms 


    if -a >= dp[-1]: # Hits:5.0, Total execution time: 0.75 ms, Average time per hit: 0.15 ms 


        dp.append(-a) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    else:

        j = bisect_right(dp, -a) # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


        dp[j] = -a # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 




print((len(dp))) # Hits:1.0, Total execution time: 5.167 ms, Average time per hit: 5.167 ms 

",p02973,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 39.375 ms, Average time per hit: 39.375 ms 


As = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 13.958 ms, Average time per hit: 13.958 ms 


from bisect import bisect_right # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


from collections import deque # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 




def LIS(L): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    dp = deque([L[0]])

    length = len(L)

    for i in range(1, length):

        a = L[i]

        if a >= dp[-1]:

            dp.append(a)

        else:

            dp[bisect_right(dp, a)] = a

    return dp



print((len(LIS(As[::-1])))) # Hits:1.0, Total execution time: 8.25 ms, Average time per hit: 8.25 ms 
","import sys # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


def input(): return sys.stdin.readline().strip() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def mapint(): return list(map(int, input().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


sys.setrecursionlimit(10**9) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 38.417 ms, Average time per hit: 38.417 ms 


As = [-int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 12.209 ms, Average time per hit: 12.209 ms 




from bisect import bisect_right # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


lis = [1] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for a in As: # Hits:6.0, Total execution time: 0.541 ms, Average time per hit: 0.09016666666666667 ms 


    if a>=lis[-1]: # Hits:5.0, Total execution time: 0.584 ms, Average time per hit: 0.1168 ms 


        lis.append(a) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    else:

        lis[bisect_right(lis, a)] = a # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 




print((len(lis))) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 
",p02973,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 36.542 ms, Average time per hit: 36.542 ms 




A = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for _ in range(N): # Hits:6.0, Total execution time: 0.751 ms, Average time per hit: 0.12516666666666668 ms 


    a = int(eval(input())) # Hits:5.0, Total execution time: 13.832 ms, Average time per hit: 2.7664 ms 


    A.append(a) # Hits:5.0, Total execution time: 0.709 ms, Average time per hit: 0.1418 ms 


    

BALL = A[:] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




from collections import defaultdict # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


COLOR = defaultdict(lambda: -1) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




for b in BALL: # Hits:6.0, Total execution time: 0.499 ms, Average time per hit: 0.08316666666666667 ms 


    i = 0 # Hits:5.0, Total execution time: 0.335 ms, Average time per hit: 0.067 ms 


    while True: # Hits:7.0, Total execution time: 0.834 ms, Average time per hit: 0.11914285714285713 ms 


        if COLOR[i] < b: # Hits:7.0, Total execution time: 1.167 ms, Average time per hit: 0.16671428571428573 ms 


            COLOR[i] = b # Hits:5.0, Total execution time: 0.457 ms, Average time per hit: 0.09140000000000001 ms 


            break # Hits:5.0, Total execution time: 0.376 ms, Average time per hit: 0.0752 ms 


        i += 1 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


            

#print(COLOR)

print((len(COLOR))) # Hits:1.0, Total execution time: 5.042 ms, Average time per hit: 5.042 ms 

","N = int(eval(input())) # Hits:1.0, Total execution time: 42.625 ms, Average time per hit: 42.625 ms 




A = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for _ in range(N): # Hits:6.0, Total execution time: 0.917 ms, Average time per hit: 0.15283333333333335 ms 


    a = int(eval(input())) # Hits:5.0, Total execution time: 16.042 ms, Average time per hit: 3.2084 ms 


    A.append(a) # Hits:5.0, Total execution time: 0.874 ms, Average time per hit: 0.1748 ms 


    

nums = A[:] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


colors = [float('inf')] * N # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 




from bisect import bisect_left, bisect_right, insort_right # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 


ans = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for n in nums: # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


    idx = bisect_right(colors, -n) # Hits:5.0, Total execution time: 1.167 ms, Average time per hit: 0.2334 ms 


    colors[idx] = -n # Hits:5.0, Total execution time: 0.582 ms, Average time per hit: 0.1164 ms 


    #print(ans)

    if idx > ans: # Hits:5.0, Total execution time: 0.584 ms, Average time per hit: 0.1168 ms 


        ans = idx # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


    #print(idx, colors)

            

print((ans+1)) # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 




        ",p02973,True
"def bisect_right(a, x, lo=0, hi=None): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    if lo < 0:

        raise ValueError('lo must be non-negative')

    if hi is None:

        hi = len(a)

    while lo < hi:

        mid = (lo + hi) // 2

        if x > a[mid]:

            hi = mid

        else:

            lo = mid + 1

    return lo



import collections # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 39.041 ms, Average time per hit: 39.041 ms 


dat = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(n): # Hits:6.0, Total execution time: 1.042 ms, Average time per hit: 0.17366666666666666 ms 


    dat.append(int(eval(input()))) # Hits:5.0, Total execution time: 15.54 ms, Average time per hit: 3.108 ms 


res = collections.deque([]) # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 




res.append(dat[0]) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


import bisect # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




for i in range(1, n): # Hits:5.0, Total execution time: 0.707 ms, Average time per hit: 0.1414 ms 


    a = bisect_right(res, dat[i]) # Hits:4.0, Total execution time: 4.834 ms, Average time per hit: 1.2085 ms 


    #print(""2 : {0}"".format(a))



    if a == len(res): # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


        res.append(dat[i]) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    else:

        res[a] = dat[i] # Hits:3.0, Total execution time: 1.251 ms, Average time per hit: 0.417 ms 


print((len(res))) # Hits:1.0, Total execution time: 6.125 ms, Average time per hit: 6.125 ms 


#print(res)","n = int(eval(input())) # Hits:1.0, Total execution time: 38.25 ms, Average time per hit: 38.25 ms 


dat = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:6.0, Total execution time: 0.832 ms, Average time per hit: 0.13866666666666666 ms 


    dat.append(int(eval(input()))) # Hits:5.0, Total execution time: 24.583 ms, Average time per hit: 4.916600000000001 ms 


res = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


res.append(0 - dat[0]) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




import bisect # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




for i in range(1, n): # Hits:5.0, Total execution time: 0.582 ms, Average time per hit: 0.1164 ms 


    #print(res)

    a = bisect.bisect_right(res, 0 - dat[i]) # Hits:4.0, Total execution time: 0.918 ms, Average time per hit: 0.2295 ms 


    #print(""a={0}"".format(a))



    if a == len(res): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


        res.append( (0 - dat[i]) ) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    else:

        res[a] = (0 - dat[i]) # Hits:3.0, Total execution time: 0.916 ms, Average time per hit: 0.3053333333333333 ms 




print((len(res))) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 
",p02973,True
"import bisect # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


from collections import deque # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 40.375 ms, Average time per hit: 40.375 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 14.667 ms, Average time per hit: 14.667 ms 




LDS = deque() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


LDS.append(A[0]) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




for i in range(1,N): # Hits:5.0, Total execution time: 0.624 ms, Average time per hit: 0.1248 ms 


    if LDS[0] >= A[i]: # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


        LDS.appendleft(A[i]) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    else:

        LDS[bisect.bisect_left(LDS,A[i])-1] = A[i] # Hits:3.0, Total execution time: 1.209 ms, Average time per hit: 0.403 ms 




print((len(LDS))) # Hits:1.0, Total execution time: 5.666 ms, Average time per hit: 5.666 ms 
","from bisect import bisect_left, bisect_right # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




def LIS(arr):  #bisect.bisect_left # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    n = len(arr)

    lis = [arr[0]]

    for a in arr:

        if a > lis[-1]:

            lis.append(a)

        else:

            lis[bisect_left(lis, a)] = a

    return len(lis)



import sys # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 36.083 ms, Average time per hit: 36.083 ms 




A = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:6.0, Total execution time: 0.833 ms, Average time per hit: 0.13883333333333334 ms 


    A.append((-int(eval(input())), i)) # Hits:5.0, Total execution time: 11.416 ms, Average time per hit: 2.2832 ms 




print((LIS(A))) # Hits:1.0, Total execution time: 8.042 ms, Average time per hit: 8.042 ms 

",p02973,True
"import bisect # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


N=int(eval(input())) # Hits:1.0, Total execution time: 39.375 ms, Average time per hit: 39.375 ms 


A=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for _ in range(N): # Hits:6.0, Total execution time: 0.793 ms, Average time per hit: 0.13216666666666665 ms 


  A.append(int(eval(input()))) # Hits:5.0, Total execution time: 14.666 ms, Average time per hit: 2.9332 ms 




color=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while A:#for i in range(10): # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


  color+=1 # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


  LCS=[] # Hits:2.0, Total execution time: 0.168 ms, Average time per hit: 0.084 ms 


  inds=[] # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


  for i in range(len(A)): # Hits:9.0, Total execution time: 0.997 ms, Average time per hit: 0.11077777777777777 ms 


    sny=bisect.bisect_left(LCS,A[i]) # Hits:7.0, Total execution time: 1.291 ms, Average time per hit: 0.18442857142857141 ms 


    if sny==len(LCS): # Hits:7.0, Total execution time: 0.917 ms, Average time per hit: 0.131 ms 


      LCS.append(A[i]) # Hits:5.0, Total execution time: 0.75 ms, Average time per hit: 0.15 ms 


      if sny-1>=0: # Hits:5.0, Total execution time: 0.624 ms, Average time per hit: 0.1248 ms 


        inds.append(inds[sny-1][:]+[i]) # Hits:3.0, Total execution time: 0.792 ms, Average time per hit: 0.264 ms 


      else:

        inds.append([i]) # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    inds[sny][-1]=i # Hits:7.0, Total execution time: 0.917 ms, Average time per hit: 0.131 ms 


    LCS[sny]=A[i] # Hits:7.0, Total execution time: 1.335 ms, Average time per hit: 0.19071428571428573 ms 


  #最長増加部分列を取り除く

  ind=0 # Hits:2.0, Total execution time: 0.126 ms, Average time per hit: 0.063 ms 


  out=[] # Hits:2.0, Total execution time: 0.126 ms, Average time per hit: 0.063 ms 


  for i in range(len(A)-1,-1,-1): # Hits:6.0, Total execution time: 0.959 ms, Average time per hit: 0.15983333333333336 ms 


    #print(inds[-1][-ind-1])

    if i==inds[-1][-ind-1]: # Hits:6.0, Total execution time: 0.959 ms, Average time per hit: 0.15983333333333336 ms 


      ind+=1 # Hits:5.0, Total execution time: 0.459 ms, Average time per hit: 0.09179999999999999 ms 


      A.pop(i) # Hits:5.0, Total execution time: 0.876 ms, Average time per hit: 0.1752 ms 


      #print(len(A))

      if ind >= len(LCS): # Hits:5.0, Total execution time: 0.584 ms, Average time per hit: 0.1168 ms 


        break # Hits:2.0, Total execution time: 0.168 ms, Average time per hit: 0.084 ms 


print(color) # Hits:1.0, Total execution time: 4.917 ms, Average time per hit: 4.917 ms 


      

  

    

    

  

    

    

  

  

  ","import bisect # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


N=int(eval(input())) # Hits:1.0, Total execution time: 37.834 ms, Average time per hit: 37.834 ms 


A=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for _ in range(N): # Hits:6.0, Total execution time: 0.792 ms, Average time per hit: 0.132 ms 


  A.append(int(eval(input()))) # Hits:5.0, Total execution time: 14.166 ms, Average time per hit: 2.8331999999999997 ms 




color=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while A:#for i in range(10): # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


  color+=1 # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


  LCS=[] # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


  inds=[] # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


  for i in range(len(A)): # Hits:9.0, Total execution time: 0.999 ms, Average time per hit: 0.111 ms 


    sny=bisect.bisect_left(LCS,A[i]) # Hits:7.0, Total execution time: 1.251 ms, Average time per hit: 0.17871428571428571 ms 


    if sny==len(LCS): # Hits:7.0, Total execution time: 0.834 ms, Average time per hit: 0.11914285714285713 ms 


      LCS.append(A[i]) # Hits:5.0, Total execution time: 0.709 ms, Average time per hit: 0.1418 ms 


      if sny-1>=0: # Hits:5.0, Total execution time: 0.541 ms, Average time per hit: 0.1082 ms 


        inds.append(i) # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


      else:

        inds.append(i) # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    #inds[sny][-1]=i

    LCS[sny]=A[i] # Hits:7.0, Total execution time: 1.209 ms, Average time per hit: 0.1727142857142857 ms 


  #最長増加部分列を取り除く

  ind=0 # Hits:2.0, Total execution time: 0.125 ms, Average time per hit: 0.0625 ms 


  out=[] # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


  for i in range(len(A)-1,-1,-1): # Hits:7.0, Total execution time: 0.915 ms, Average time per hit: 0.13071428571428573 ms 


    #print(inds[-1][-ind-1])

    if i==inds[-ind-1]: # Hits:7.0, Total execution time: 0.875 ms, Average time per hit: 0.125 ms 


      ind+=1 # Hits:5.0, Total execution time: 0.415 ms, Average time per hit: 0.083 ms 


      A.pop(i) # Hits:5.0, Total execution time: 0.874 ms, Average time per hit: 0.1748 ms 


      #print(len(A))

      if ind >= len(LCS): # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 


        break # Hits:2.0, Total execution time: 0.125 ms, Average time per hit: 0.0625 ms 


print(color) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 


      

  

    

    

  

    

    

  

  

  ",p02973,True
"# YouTube解説の方法（deque使わない）

from bisect import bisect_left # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


import sys # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




def bisect_right_reverse(L, target): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    return len(L) - bisect_left(L[::-1], target)



N = int(eval(input())) # Hits:1.0, Total execution time: 39.917 ms, Average time per hit: 39.917 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 11.458 ms, Average time per hit: 11.458 ms 




L = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(N): # Hits:6.0, Total execution time: 0.584 ms, Average time per hit: 0.09733333333333333 ms 


    k = bisect_right_reverse(L, A[i]) # Hits:5.0, Total execution time: 2.291 ms, Average time per hit: 0.4582 ms 


    if k == len(L): # Hits:5.0, Total execution time: 0.751 ms, Average time per hit: 0.1502 ms 


        L.append(A[i]) # Hits:2.0, Total execution time: 0.374 ms, Average time per hit: 0.187 ms 


    else:

        L[k] = A[i] # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 




print((len(L))) # Hits:1.0, Total execution time: 5.167 ms, Average time per hit: 5.167 ms 
","# YouTube解説の方法（deque使わない）

import sys # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




def bisect_right_reverse(L, target): # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    ok = len(L)

    ng = -1

    while ok - ng > 1:

        mid = (ok + ng) // 2

        if L[mid] < target:

            ok = mid

        else:

            ng = mid

    return ok



N = int(eval(input())) # Hits:1.0, Total execution time: 37.166 ms, Average time per hit: 37.166 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 11.333 ms, Average time per hit: 11.333 ms 




L = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:6.0, Total execution time: 0.583 ms, Average time per hit: 0.09716666666666667 ms 


    k = bisect_right_reverse(L, A[i]) # Hits:5.0, Total execution time: 3.542 ms, Average time per hit: 0.7084 ms 


    if k == len(L): # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 


        L.append(A[i]) # Hits:2.0, Total execution time: 0.417 ms, Average time per hit: 0.2085 ms 


    else:

        L[k] = A[i] # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 




print((len(L))) # Hits:1.0, Total execution time: 5.334 ms, Average time per hit: 5.334 ms 
",p02973,True
"import sys

input = sys.stdin.readline

from heapq import heappush, heappop





def read():

    N = int(input().strip())

    A = [int(input().strip()) for _ in range(N)]

    return N, A





class SegmentTree():

    

    def __init__(self, size, init_value=10**8):

        """"""初期化""""""

        self.size = size

        self.init_value = init_value

        n = 2 ** ((size-1).bit_length())

        treesize = n * 2

        st = [init_value] * treesize

        st_idx = [i for i in range(treesize)]

        self.st = st

        self.st_idx = st_idx

        self.offset = len(st) // 2



    @classmethod

    def from_array(cls, a, init_value=10**8):

        st = cls(len(a), init_value=init_value)

        for i, x in enumerate(a):

            st.update(i, x)

        return st



    def update(self, key, value):

        """"""値の更新""""""

        k = self.offset + key

        self.st[k] = value

        k >>= 1

        while k > 0:

            if self.st[k * 2] <= self.st[k * 2 + 1]:

                self.st[k] = self.st[k * 2]

                self.st_idx[k] = self.st_idx[k * 2]

            else:

                self.st[k] = self.st[k * 2 + 1]

                self.st_idx[k] = self.st_idx[k * 2 + 1]

            k >>= 1



    def _smallest(self, a, b):

        """"""区間[a, b) の最小値を検索し、(index, value)の組を返す

        """"""

        a += self.offset

        b += self.offset - 1

        s = self.init_value

        idx = -1

        while a < b:

            if a & 1:

                if self.st[a] <= s:

                    s = self.st[a]

                    idx = self.st_idx[a]

                a += 1

            a >>= 1

            if not b & 1:

                if self.st[b] <= s:

                    s = self.st[b]

                    idx = self.st_idx[b]

                b -= 1

            b >>= 1

        if a == b:

            if self.st[a] <= s:

                s = self.st[a]

                idx = self.st_idx[a]

        return idx - self.offset, s



    def smallest(self, a, b):

        """"""区間[a, b) に対する累積操作""""""

        if a > b:

            raise ValueError(""a must be less than equal b."")

        return self._smallest(a, b)

    

    def _find_le(self, value, k=1):

        """"""value以下の最大の値を検索し、(index, value)の組を返す

        k: 着目しているノード (1-indexed)

        l: 探索区間 st[l, r) の左端 (0-indexed)

        r: 探索区間 st[l, r) の右端 (0-indexed)

        """"""

        if value < self.st[k]:

            return (len(self.st), -self.init_value)

        elif value == self.st[k] or k >= self.offset:

            return (self.st_idx[k], self.st[k])

        else:

            li, lv = self._find_le(value, k * 2)

            ri, rv = self._find_le(value, k * 2 + 1)

            mi = li if lv >= rv else ri

            mv = lv if lv >= rv else rv

            if mi < len(self.st):

                return (mi, mv)

            else:

                return (len(self.st), -self.init_value)

    

    def find_le(self, value):

        """"""value以下の最大値を検索し、(index, value)の組を1つ返す

        見つからない場合は-1を返す

        """"""

        i, v = self._find_le(value, k=1)

        if i == len(self.st):

            return (-1, self.init_value)

        else:

            return (i - self.offset, v)





def solve(N, A, INF=10**9+1):

    st = SegmentTree(N)

    l = 0

    for a in A[::-1]:

        k, v = st.find_le(-a-1)  # 以下を未満にするため-1

        if k == -1:

            st.update(l, -a)

            l += 1

        else:

            st.update(k, -a)

    return l





if __name__ == '__main__':

    inputs = read()

    outputs = solve(*inputs)

    if outputs is not None:

        print((""%s"" % str(outputs)))
",,p02973,False
"from collections import deque # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


import bisect # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 36.875 ms, Average time per hit: 36.875 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 13.75 ms, Average time per hit: 13.75 ms 




Q = deque([A[0]]) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for a in A[1:]: # Hits:5.0, Total execution time: 0.585 ms, Average time per hit: 0.117 ms 


    if a <= Q[0]: # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


        Q.appendleft(a) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    else:

        idx = bisect.bisect_left(Q,a) # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 


        Q[idx-1] = a # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 




print((len(Q))) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 
","import bisect # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 36.334 ms, Average time per hit: 36.334 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 13.5 ms, Average time per hit: 13.5 ms 




A.reverse() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




dp = [A[0]] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for a in A[1:]: # Hits:5.0, Total execution time: 0.5 ms, Average time per hit: 0.1 ms 


    idx = bisect.bisect_right(dp, a) # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


    if idx == len(dp): # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


        dp.append(a) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    else:

        dp[idx] = a # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 




print((len(dp))) # Hits:1.0, Total execution time: 5.083 ms, Average time per hit: 5.083 ms 
",p02973,True
"# 広義最長部分増加数列の長さを求めるdef

# 配列LIS自体は広義最長部分増加文字列ではない

import bisect # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


def lis(seq): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    LIS = [seq[0]]

    for i in range(1, len(seq)):

        if seq[i] >= LIS[-1]:

            LIS.append(seq[i])

        else:

            LIS[bisect.bisect_right(LIS, seq[i])] = seq[i]

    return(len(LIS))



n = int(eval(input())) # Hits:1.0, Total execution time: 39.25 ms, Average time per hit: 39.25 ms 


a = [0] * n # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(n): # Hits:6.0, Total execution time: 0.875 ms, Average time per hit: 0.14583333333333334 ms 


    a[i] = int(eval(input())) # Hits:5.0, Total execution time: 13.833 ms, Average time per hit: 2.7666 ms 




b = a[::-1] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


print((lis(b))) # Hits:1.0, Total execution time: 13.75 ms, Average time per hit: 13.75 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 37.417 ms, Average time per hit: 37.417 ms 


a = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(n): # Hits:6.0, Total execution time: 0.833 ms, Average time per hit: 0.13883333333333334 ms 


    ai = int(eval(input())) # Hits:5.0, Total execution time: 14.083 ms, Average time per hit: 2.8165999999999998 ms 


    a.append(ai) # Hits:5.0, Total execution time: 0.833 ms, Average time per hit: 0.1666 ms 




lst = [a[0]] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(1, n): # Hits:5.0, Total execution time: 0.543 ms, Average time per hit: 0.10859999999999999 ms 


    ai = a[i] # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


    left = -1 # Hits:4.0, Total execution time: 0.334 ms, Average time per hit: 0.0835 ms 


    right = len(lst) # Hits:4.0, Total execution time: 0.457 ms, Average time per hit: 0.11425 ms 


    while left+1 < right: # Hits:9.0, Total execution time: 1.084 ms, Average time per hit: 0.12044444444444444 ms 


        mid = (left + right) // 2 # Hits:5.0, Total execution time: 0.667 ms, Average time per hit: 0.13340000000000002 ms 


        if lst[mid] < ai: # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


            right = mid # Hits:3.0, Total execution time: 0.251 ms, Average time per hit: 0.08366666666666667 ms 


        else:

            left = mid # Hits:2.0, Total execution time: 0.083 ms, Average time per hit: 0.0415 ms 


    if right == len(lst): # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


        lst.append(ai) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    else:

        lst[right] = ai # Hits:3.0, Total execution time: 1.041 ms, Average time per hit: 0.347 ms 


print((len(lst))) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 
",p02973,True
"import bisect # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 36.375 ms, Average time per hit: 36.375 ms 


A = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 13.709 ms, Average time per hit: 13.709 ms 




Q = [A[0]] + [float(""inf"")] * (n+1) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


le = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1, n): # Hits:5.0, Total execution time: 0.543 ms, Average time per hit: 0.10859999999999999 ms 


    if Q[le-1] >= A[i]: # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


        Q[le] = A[i] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        le += 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    else:

        ind = bisect.bisect_left(Q[:le][::-1], A[i]) # Hits:3.0, Total execution time: 1.0 ms, Average time per hit: 0.3333333333333333 ms 


        Q[le-ind] = A[i] # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    # print(Q[:10])



print(le) # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 
","import bisect # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 40.208 ms, Average time per hit: 40.208 ms 


A = [-int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 15.25 ms, Average time per hit: 15.25 ms 




Q = [A[0]] + [0] * (n+1) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


le = 1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(1, n): # Hits:5.0, Total execution time: 0.584 ms, Average time per hit: 0.1168 ms 


    if Q[le-1] <= A[i]: # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


        Q[le] = A[i] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


        le += 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    else:

        ind = bisect.bisect_right(Q, A[i], 0, le) # Hits:3.0, Total execution time: 0.958 ms, Average time per hit: 0.3193333333333333 ms 


        Q[ind] = A[i] # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 


    # print(Q[:10])



print(le) # Hits:1.0, Total execution time: 5.667 ms, Average time per hit: 5.667 ms 
",p02973,True
"import bisect # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


from collections import deque # Hits:1.0, Total execution time: 1.542 ms, Average time per hit: 1.542 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 37.958 ms, Average time per hit: 37.958 ms 




# c = [int(input())]

c = deque() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


c.appendleft(int(eval(input()))) # Hits:1.0, Total execution time: 3.667 ms, Average time per hit: 3.667 ms 






for ai in range(1, N): # Hits:5.0, Total execution time: 0.543 ms, Average time per hit: 0.10859999999999999 ms 


    a = int(eval(input())) # Hits:4.0, Total execution time: 10.082 ms, Average time per hit: 2.5205 ms 


    if a <= c[0]: # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


        c.appendleft(a) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    else:

        i = bisect.bisect_left(c, a) - 1 # Hits:3.0, Total execution time: 0.96 ms, Average time per hit: 0.32 ms 


        c[i] = a # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 




print((len(c))) # Hits:1.0, Total execution time: 5.166 ms, Average time per hit: 5.166 ms 

","# -*- coding utf-8 -*-

import bisect # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


from collections import deque # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 38.708 ms, Average time per hit: 38.708 ms 




# c = [int(input())]

c = deque() # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


c.appendleft(int(eval(input()))) # Hits:1.0, Total execution time: 3.583 ms, Average time per hit: 3.583 ms 






for ai in range(1, N): # Hits:5.0, Total execution time: 0.668 ms, Average time per hit: 0.1336 ms 


    a = int(eval(input())) # Hits:4.0, Total execution time: 16.125 ms, Average time per hit: 4.03125 ms 


    if a <= c[0]: # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


        c.appendleft(a) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    else:

        i = bisect.bisect_left(c, a) - 1 # Hits:3.0, Total execution time: 0.793 ms, Average time per hit: 0.2643333333333333 ms 


        c[i] = a # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 




print((len(c))) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 
",p02973,True
"from collections import deque # Hits:1.0, Total execution time: 1.542 ms, Average time per hit: 1.542 ms 


from bisect import bisect_left # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 38.375 ms, Average time per hit: 38.375 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 14.25 ms, Average time per hit: 14.25 ms 




t = deque([A[0]]) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


for a in A[1:]: # Hits:5.0, Total execution time: 0.667 ms, Average time per hit: 0.13340000000000002 ms 


    if a <= t[0]: # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


        t.appendleft(a) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    else:

        t[bisect_left(t, a) - 1] = a # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 


print((len(t))) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 

","from bisect import bisect_right # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 40.334 ms, Average time per hit: 40.334 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 14.166 ms, Average time per hit: 14.166 ms 




t = [-A[0]] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for a in A[1:]: # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


    if a <= -t[-1]: # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


        t.append(-a) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    else:

        t[bisect_right(t, -a)] = -a # Hits:3.0, Total execution time: 0.833 ms, Average time per hit: 0.2776666666666667 ms 


print((len(t))) # Hits:1.0, Total execution time: 13.25 ms, Average time per hit: 13.25 ms 

",p02973,True
"from collections import deque # Hits:1.0, Total execution time: 1.291 ms, Average time per hit: 1.291 ms 


from bisect import bisect_left # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 36.334 ms, Average time per hit: 36.334 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 13.542 ms, Average time per hit: 13.542 ms 




t = deque([A[0]]) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


for a in A[1:]: # Hits:5.0, Total execution time: 0.458 ms, Average time per hit: 0.0916 ms 


    i = bisect_left(t, a) - 1 # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    if i == -1: # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


        t.appendleft(a) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    else:

        t[i] = a # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


print((len(t))) # Hits:1.0, Total execution time: 4.584 ms, Average time per hit: 4.584 ms 

","from bisect import bisect_right # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 37.5 ms, Average time per hit: 37.5 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 14.25 ms, Average time per hit: 14.25 ms 




t = [-A[0]] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for a in A[1:]: # Hits:5.0, Total execution time: 0.626 ms, Average time per hit: 0.1252 ms 


    if a <= -t[-1]: # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


        t.append(-a) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    else:

        t[bisect_right(t, -a)] = -a # Hits:3.0, Total execution time: 0.666 ms, Average time per hit: 0.222 ms 


print((len(t))) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 

",p02973,True
"def LIS(A): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    dp = deque([A[0]])

    for a in A[1:]:

        if a <= dp[0]:

            dp.appendleft(a)

        else:

            dp[bisect_left(dp, a)-1] = a

    return len(dp)



##################################################################################################################



import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


from collections import deque # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 


from bisect import bisect_left # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 38.75 ms, Average time per hit: 38.75 ms 




A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 11.916 ms, Average time per hit: 11.916 ms 




print((LIS(A))) # Hits:1.0, Total execution time: 8.875 ms, Average time per hit: 8.875 ms 
","def LIS(A):

    dp = [-A[0]]

    for a in A[1:]:

        if -a >= dp[-1]:

            dp.append(-a)

        else:

            dp[bisect_right(dp, -a)] = -a

    return len(dp)



##################################################################################################################



import sys

input = sys.stdin.readline

from bisect import *



N = int(eval(input()))



A = [int(eval(input())) for _ in range(N)]



print((LIS(A)))",p02973,True
"from heapq import *

from bisect import bisect_right, bisect_left

from collections import deque

N = int(eval(input()))

A = [int(eval(input())) for i in range(N)]

lb, ub = 0, N

while lb + 1 < ub:

    mid = (lb+ub)//2

    cnt, ms, flag = 1, deque(), 1

    ms.append(A[0])

    for a in A[1:]:

        if a <= ms[0]:

            ms.appendleft(a)

            cnt += 1

            if cnt > mid:

                flag = 0

                break

        else:

            i = bisect_left(ms, a)-1

            ms[i] = a

    if flag:

        ub = mid

    else:

        lb = mid

cnt, ms, flag = 1, deque(), 1

ms.append(A[0])

for a in A[1:]:

    if a <= ms[0]:

        ms.appendleft(a)

        cnt += 1

        if cnt > mid:

            flag = 0

            break

    else:

        i = bisect_left(ms, a)-1

        ms[i] = a

if flag:

    print(mid)

else:

    print((mid+1))
","from bisect import bisect_left # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


from collections import deque # Hits:1.0, Total execution time: 1.541 ms, Average time per hit: 1.541 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 39.542 ms, Average time per hit: 39.542 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 13.5 ms, Average time per hit: 13.5 ms 


cnt, ms, flag = 1, deque(), 1 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


ms.append(A[0]) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for a in A[1:]: # Hits:5.0, Total execution time: 0.541 ms, Average time per hit: 0.1082 ms 


    if a <= ms[0]: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


        ms.appendleft(a) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


        cnt += 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    else:

        i = bisect_left(ms, a)-1 # Hits:3.0, Total execution time: 0.709 ms, Average time per hit: 0.23633333333333334 ms 


        ms[i] = a # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


print(cnt) # Hits:1.0, Total execution time: 5.083 ms, Average time per hit: 5.083 ms 

",p02973,True
"from bisect import bisect_left # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


from collections import deque # Hits:1.0, Total execution time: 17.416 ms, Average time per hit: 17.416 ms 




def main(): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    inf=float(""inf"")

    sm=1

    n=int(eval(input()))

    alst=[inf]*n

    work=[inf]*n

    index_list=[inf]*n

    for i in range(n):

        a=int(eval(input()))

        alst[i]=a

        j=bisect_left(work,a)

        work[j]=a

        index_list[j]=i

    alst=[x for i,x in enumerate(alst) if not i in index_list]



    while alst:

        sm+=1

        n=len(alst)

        work=[inf]*n

        index_list=[inf]*n

        for i in range(n):

            a=alst[i]

            j=bisect_left(work,a)

            work[j]=a

            index_list[j]=i

        alst=[x for i,x in enumerate(alst) if not i in index_list]

    print(sm)



main() # Hits:1.0, Total execution time: 77.875 ms, Average time per hit: 77.875 ms 
","from bisect import bisect_right # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 




def main(): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    inf=float(""inf"")

    n=int(eval(input()))

    alst=[int(eval(input())) for _ in range(n)]

    work=[inf]*n

    for i in range(n-1,-1,-1):

        j=bisect_right(work,alst[i])

        work[j]=alst[i]

    print((n-work.count(inf)))



main() # Hits:1.0, Total execution time: 68.208 ms, Average time per hit: 68.208 ms 
",p02973,True
"from bisect import bisect_left, bisect_right # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 40.042 ms, Average time per hit: 40.042 ms 


col_maxs = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for _ in range(n): # Hits:6.0, Total execution time: 0.875 ms, Average time per hit: 0.14583333333333334 ms 


    a = int(eval(input())) * (-1) # Hits:5.0, Total execution time: 16.877 ms, Average time per hit: 3.3754 ms 


    if not col_maxs: # Hits:5.0, Total execution time: 0.5 ms, Average time per hit: 0.1 ms 


        col_maxs.append(a) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


        continue # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




    curr_max = col_maxs[-1] # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    if a >= curr_max: # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


        col_maxs.append(a) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    else:

        # aより大きい最小要素のindex/value

        ind = bisect_right(col_maxs, a) # Hits:3.0, Total execution time: 0.666 ms, Average time per hit: 0.222 ms 


        col_maxs[ind] = a # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 




print((len(col_maxs))) # Hits:1.0, Total execution time: 6.709 ms, Average time per hit: 6.709 ms 
","from bisect import bisect_left, bisect_right # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


import sys # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 30.167 ms, Average time per hit: 30.167 ms 


col_maxs = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for _ in range(n): # Hits:6.0, Total execution time: 0.875 ms, Average time per hit: 0.14583333333333334 ms 


    a = int(eval(input())) * (-1) # Hits:5.0, Total execution time: 11.21 ms, Average time per hit: 2.242 ms 


    if not col_maxs: # Hits:5.0, Total execution time: 0.457 ms, Average time per hit: 0.09140000000000001 ms 


        col_maxs.append(a) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


        continue # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




    curr_max = col_maxs[-1] # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


    if a >= curr_max: # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


        col_maxs.append(a) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    else:

        # aより大きい最小要素のindex/value

        ind = bisect_right(col_maxs, a) # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


        col_maxs[ind] = a # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 




print((len(col_maxs))) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 
",p02973,True
"# -*- coding: utf-8 -*-

# E - Sequence Decomposing

import sys  # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


from bisect import bisect_left # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


from collections import deque # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 




read = sys.stdin.buffer.read # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


readline = sys.stdin.buffer.readline # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


readlines = sys.stdin.buffer.readlines # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


N = int(readline()) # Hits:1.0, Total execution time: 30.833 ms, Average time per hit: 30.833 ms 


A = list(map(int,read().split())) # Hits:1.0, Total execution time: 3.542 ms, Average time per hit: 3.542 ms 






INF = 10**31 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


q = deque([]) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




for a in A: # Hits:6.0, Total execution time: 0.667 ms, Average time per hit: 0.11116666666666668 ms 


    idx = bisect_left(q, a) # Hits:5.0, Total execution time: 0.875 ms, Average time per hit: 0.175 ms 


    if idx == 0: # Hits:5.0, Total execution time: 0.543 ms, Average time per hit: 0.10859999999999999 ms 


        q.appendleft(a) # Hits:2.0, Total execution time: 0.417 ms, Average time per hit: 0.2085 ms 


    else:

        q[idx-1] = a # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


print((len(q))) # Hits:1.0, Total execution time: 6.125 ms, Average time per hit: 6.125 ms 
","# -*- coding: utf-8 -*-

# E - Sequence Decomposing

import sys  # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


from bisect import bisect_right # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




read = sys.stdin.buffer.read # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


readline = sys.stdin.buffer.readline # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


readlines = sys.stdin.buffer.readlines # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


N = int(readline()) # Hits:1.0, Total execution time: 24.958 ms, Average time per hit: 24.958 ms 


A = list(map(int,read().split())) # Hits:1.0, Total execution time: 3.0 ms, Average time per hit: 3.0 ms 


X = [-1]*N # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


for a in A: # Hits:6.0, Total execution time: 0.707 ms, Average time per hit: 0.11783333333333333 ms 


    i = bisect_right(X,a-1)-1 # Hits:5.0, Total execution time: 1.375 ms, Average time per hit: 0.275 ms 


    X[i] = a # Hits:5.0, Total execution time: 0.667 ms, Average time per hit: 0.13340000000000002 ms 


print((N - X.count(-1)))  # Hits:1.0, Total execution time: 5.209 ms, Average time per hit: 5.209 ms 
",p02973,True
"from bisect import bisect_left # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


from collections import deque # Hits:1.0, Total execution time: 1.458 ms, Average time per hit: 1.458 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 44.833 ms, Average time per hit: 44.833 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 16.375 ms, Average time per hit: 16.375 ms 




q = deque([-1]) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


for x in a: # Hits:6.0, Total execution time: 0.543 ms, Average time per hit: 0.0905 ms 


    insert_pos = bisect_left(q, x) - 1 # Hits:5.0, Total execution time: 1.209 ms, Average time per hit: 0.24180000000000001 ms 


    # bisect_left[0,len(lis)] == 以上の最小

    # 手前は未満の最大[-1,len(lis))

    if insert_pos == -1: # Hits:5.0, Total execution time: 0.584 ms, Average time per hit: 0.1168 ms 


        q.appendleft(x) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    else:

        q[insert_pos] = x # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 




ret = len(q) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




print(ret) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 




# 最小パス被覆
","# LDS最長減少部分列

# 解説放送

# dilworthの定理

# パスを通してどの2点間も移動できないような点集合の点の個数 = 最小パス被覆

# 移動できないような点は

# 右側（大きい値側）から見て以上になっているような数列



from bisect import bisect_right # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




inf = 10 ** 9 + 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 40.917 ms, Average time per hit: 40.917 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 14.584 ms, Average time per hit: 14.584 ms 




t = [inf] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for x in reversed(a): # Hits:6.0, Total execution time: 0.748 ms, Average time per hit: 0.12466666666666668 ms 


    if t[-1] <= x: # Hits:5.0, Total execution time: 0.626 ms, Average time per hit: 0.1252 ms 


        t.append(x) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    else:

        insert_pos = bisect_right(t, x) # Hits:4.0, Total execution time: 0.707 ms, Average time per hit: 0.17675 ms 


        t[insert_pos] = x # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 




ret = len(t) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




print(ret) # Hits:1.0, Total execution time: 5.667 ms, Average time per hit: 5.667 ms 

",p02973,True
"from bisect import bisect # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




icase=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


if icase==0: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    n=int(eval(input())) # Hits:1.0, Total execution time: 37.292 ms, Average time per hit: 37.292 ms 


    a=[0]*n # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    for i in range(n): # Hits:6.0, Total execution time: 0.791 ms, Average time per hit: 0.13183333333333333 ms 


        a[i]=int(eval(input())) # Hits:5.0, Total execution time: 13.834 ms, Average time per hit: 2.7668000000000004 ms 




def loopa(a): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




    n=len(a)

    dp = [10**10]*(n+1)

    dp[0] = -1

    dq = [0]*(n+1)    

    

    for i in range(n):

        idx = bisect(dp, a[i]-1)

        if dp[idx]==10**10:

#            dp[idx] = min(a[i], dp[idx])

            if dp[idx]>a[i]:

                dp[idx]=a[i]

                dq[idx]=i

            dp2=dp[1:idx+1]

            dq2=dq[1:idx+1]

        else:

#            dp[idx] = min(a[i], dp[idx])

            if dp[idx]>a[i]:

                dp[idx]=a[i]

                dq[idx]=i





#    dq2.sort() 

#    for i in range(len(dq2)-1,-1,-1):

#        del a[dq2[i]]

#    print(dq2)

    a=[a[i] for i in range(n) if not (i in dq2)]

    return a



icnt=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while len(a)>0: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


#    if icnt>10:break

    a=loopa(a)         # Hits:2.0, Total execution time: 8.751 ms, Average time per hit: 4.3755 ms 


    icnt+=1 # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 




print(icnt)     # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 

","from bisect import bisect # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




icase=1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


if icase==1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    n=int(eval(input())) # Hits:1.0, Total execution time: 49.125 ms, Average time per hit: 49.125 ms 


    a=[0]*n # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    for i in range(n): # Hits:6.0, Total execution time: 0.917 ms, Average time per hit: 0.15283333333333335 ms 


        a[i]=-int(eval(input())) # Hits:5.0, Total execution time: 14.291 ms, Average time per hit: 2.8581999999999996 ms 


elif icase==2:

    n=5

    a=[-2,-1,-4,-5,-3]

elif icase==3:

    n=4

    a=[0,0,0,0]



def loopa(): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




    n=len(a)

    dp = [10**10]*(n+1)

    dp[0] = -10**10

    

    for i in range(n):

#        idx = bisect(dp, a[i]-1)

        idx = bisect(dp, a[i])

        dp[idx] = min(a[i], dp[idx])



#        print(""i:"",i,""a:"",a,""dp2:"",dp2)            

    return dp



dp=loopa()         # Hits:1.0, Total execution time: 3.167 ms, Average time per hit: 3.167 ms 




print((bisect(dp, 10**10-1)-1))     # Hits:1.0, Total execution time: 5.334 ms, Average time per hit: 5.334 ms 



",p02973,True
"#!usr/bin/env python3

from collections import defaultdict,deque

from heapq import heappush, heappop

from itertools import permutations

import sys

import math

import bisect

def LI(): return [int(x) for x in sys.stdin.readline().split()]

def I(): return int(sys.stdin.readline())

def LS():return [list(x) for x in sys.stdin.readline().split()]

def S():

    res = list(sys.stdin.readline())

    if res[-1] == ""\n"":

        return res[:-1]

    return res

def IR(n):

    return [I() for i in range(n)]

def LIR(n):

    return [LI() for i in range(n)]

def SR(n):

    return [S() for i in range(n)]

def LSR(n):

    return [LS() for i in range(n)]



sys.setrecursionlimit(1000000)

mod = 1000000007



def solve():

    n = I()

    a = IR(n)

    a = [-i for i in a]

    dp = [float(""inf"")]*n

    for i in a:

        j = bisect.bisect_right(dp,i)

        dp[j] = i

    print((n-dp.count(float(""inf""))))

    return



#Solve

if __name__ == ""__main__"":

    solve()
",,p02973,False
"# -*- coding: utf-8 -*-



import sys # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


from collections import deque # Hits:1.0, Total execution time: 1.791 ms, Average time per hit: 1.791 ms 


from bisect import bisect_left # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 




def input(): return sys.stdin.readline().strip() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


def list2d(a, b, c): return [[c] * b for i in range(a)] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


def ceil(x, y=1): return int(-(-x // y)) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def INT(): return int(eval(input())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def MAP(): return list(map(int, input().split())) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def LIST(): return list(map(int, input().split())) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def Yes(): print('Yes') # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


def No(): print('No') # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def YES(): print('YES') # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def NO(): print('NO') # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


sys.setrecursionlimit(10 ** 9) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


INF = float('inf') # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


MOD = 10 ** 9 + 7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




def LDS(A: list): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    L = deque([A[0]])

    for a in A[1:]:

        if a <= L[0]:

            # Lの先頭よりaが小さければ減少部分列を延長する(今回は広義(=を含む))

            L.appendleft(a)

        else:

            # そうでなければ、「a以上の最小要素の手前」をaにする

            # 該当位置は、二分探索で特定できる

            L[bisect_left(L, a)-1] = a

    return len(L)



N=INT() # Hits:1.0, Total execution time: 27.541 ms, Average time per hit: 27.541 ms 


A=[INT() for i in range(N)] # Hits:1.0, Total execution time: 14.625 ms, Average time per hit: 14.625 ms 




print((LDS(A))) # Hits:1.0, Total execution time: 8.958 ms, Average time per hit: 8.958 ms 

","# -*- coding: utf-8 -*-



import sys # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


from bisect import bisect_right # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 




def input(): return sys.stdin.readline().strip() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def list2d(a, b, c): return [[c] * b for i in range(a)] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def ceil(x, y=1): return int(-(-x // y)) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def INT(): return int(eval(input())) # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def MAP(): return list(map(int, input().split())) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def LIST(): return list(map(int, input().split())) # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def Yes(): print('Yes') # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def No(): print('No') # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def YES(): print('YES') # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def NO(): print('NO') # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


sys.setrecursionlimit(10 ** 9) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


INF = float('inf') # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


MOD = 10 ** 9 + 7 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




N=INT() # Hits:1.0, Total execution time: 39.417 ms, Average time per hit: 39.417 ms 


A=[INT() for i in range(N)] # Hits:1.0, Total execution time: 13.333 ms, Average time per hit: 13.333 ms 




def LIS(A: list): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    L = [A[0]]

    for a in A[1:]:

        if a >= L[-1]:

            # aがLの末尾以上なら増加部分列を延長する(今回は広義(=を含む))

            L.append(a)

        else:

            # そうでなければ、「a以下の最大要素の次」をaにする

            # 該当位置は、二分探索で特定できる

            L[bisect_right(L, a)] = a

    return len(L)



# 後ろからLIS

print((LIS(A[::-1]))) # Hits:1.0, Total execution time: 9.0 ms, Average time per hit: 9.0 ms 

",p02973,True
"from collections import deque # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


from bisect import bisect_left # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 41.542 ms, Average time per hit: 41.542 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 14.209 ms, Average time per hit: 14.209 ms 


ans = deque([a[0]]) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


for a_i in a[1:]: # Hits:5.0, Total execution time: 0.624 ms, Average time per hit: 0.1248 ms 


    if ans[0] < a_i: # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


        i = bisect_left(ans, a_i) # Hits:3.0, Total execution time: 0.626 ms, Average time per hit: 0.20866666666666667 ms 


        ans[i-1] = a_i # Hits:3.0, Total execution time: 0.374 ms, Average time per hit: 0.12466666666666668 ms 


    else:

        ans.appendleft(a_i) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




print((len(ans))) # Hits:1.0, Total execution time: 5.042 ms, Average time per hit: 5.042 ms 





","from bisect import bisect_right # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 37.834 ms, Average time per hit: 37.834 ms 




color = [0] * (n+1) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in range(n): # Hits:6.0, Total execution time: 1.041 ms, Average time per hit: 0.1735 ms 


    a = int(eval(input())) # Hits:5.0, Total execution time: 16.166 ms, Average time per hit: 3.2331999999999996 ms 


    j = bisect_right(color, a) # Hits:5.0, Total execution time: 1.126 ms, Average time per hit: 0.22519999999999998 ms 


    color[j-1] = a+1 # Hits:5.0, Total execution time: 0.833 ms, Average time per hit: 0.1666 ms 




ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for t in color: # Hits:7.0, Total execution time: 0.708 ms, Average time per hit: 0.10114285714285715 ms 


    if t != 0: # Hits:6.0, Total execution time: 1.292 ms, Average time per hit: 0.21533333333333335 ms 


        ans += 1 # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 




print(ans) # Hits:1.0, Total execution time: 5.584 ms, Average time per hit: 5.584 ms 



",p02973,True
"from bisect import bisect_right # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 40.083 ms, Average time per hit: 40.083 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 14.833 ms, Average time per hit: 14.833 ms 


A.reverse() # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




L = [A[0]] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for a in A[1:]: # Hits:5.0, Total execution time: 0.666 ms, Average time per hit: 0.13319999999999999 ms 


    if a >= L[-1]: # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


        L.append(a) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    else:

        L[bisect_right(L, a)] = a # Hits:3.0, Total execution time: 0.749 ms, Average time per hit: 0.24966666666666665 ms 




print((len(L))) # Hits:1.0, Total execution time: 5.708 ms, Average time per hit: 5.708 ms 

","from bisect import bisect # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 39.834 ms, Average time per hit: 39.834 ms 


A = [-int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 25.666 ms, Average time per hit: 25.666 ms 


L = [A[0]] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for a in A[1:]: # Hits:5.0, Total execution time: 0.833 ms, Average time per hit: 0.1666 ms 


    if a >= L[-1]: # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


        L.append(a) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    else:

        L[bisect(L, a)] = a # Hits:3.0, Total execution time: 0.792 ms, Average time per hit: 0.264 ms 


print((len(L))) # Hits:1.0, Total execution time: 5.958 ms, Average time per hit: 5.958 ms 
",p02973,True
"import sys, collections



def count(q, ans):

    unused = collections.deque()

    ans += 1

    num = -1

    while q:

        n = q.popleft()

        if n <= num:

            unused.append(n)

        else:

            num = n

    return unused, ans



def solve():

    input = sys.stdin.readline

    N = int(eval(input()))

    col = 0

    q = collections.deque()

    for _ in range(N):

        q.append(int(eval(input())))



    while q:

        q, col = count(q, col)



    print(col)

    return 0



if __name__ == ""__main__"":

    solve()",,p02973,False
"import bisect # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


import sys # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


input=sys.stdin.readline # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


from collections import deque # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


N=int(eval(input())) # Hits:1.0, Total execution time: 35.625 ms, Average time per hit: 35.625 ms 




cnt=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


L=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N): # Hits:6.0, Total execution time: 0.915 ms, Average time per hit: 0.1525 ms 


    n=int(eval(input())) # Hits:5.0, Total execution time: 11.0 ms, Average time per hit: 2.2 ms 


    L.append(n) # Hits:5.0, Total execution time: 0.709 ms, Average time per hit: 0.1418 ms 


#print(L)

Q=[-1,10**10] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


Q=deque() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


#Q.appendleft(10**10)

#print(Q)

for i in range(N): # Hits:6.0, Total execution time: 0.581 ms, Average time per hit: 0.09683333333333333 ms 


    if bisect.bisect_left(Q,L[i])==0: # Hits:5.0, Total execution time: 1.293 ms, Average time per hit: 0.2586 ms 


        Q.appendleft(L[i]) # Hits:2.0, Total execution time: 0.75 ms, Average time per hit: 0.375 ms 


    #elif bisect.bisect_left(Q,L[i])==len(Q)-1:

        #Q.insert(len(Q)-1,L[i])

    else:

        Q[bisect.bisect_left(Q,L[i])-1]=L[i] # Hits:3.0, Total execution time: 0.75 ms, Average time per hit: 0.25 ms 


#print(Q)

print((len(Q))) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 39.292 ms, Average time per hit: 39.292 ms 


L=[1 for i in range(N+1)] # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


L[0]=-10**10 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




import bisect # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


for i in range(N): # Hits:6.0, Total execution time: 0.794 ms, Average time per hit: 0.13233333333333333 ms 


    n=int(eval(input())) # Hits:5.0, Total execution time: 14.291 ms, Average time per hit: 2.8581999999999996 ms 


    L[bisect.bisect_right(L,-n)]=-n # Hits:5.0, Total execution time: 1.123 ms, Average time per hit: 0.2246 ms 


#print(L)

ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,N+1): # Hits:3.0, Total execution time: 0.376 ms, Average time per hit: 0.12533333333333332 ms 


    if L[i]==1: # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


        break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    ans+=1 # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


print(ans) # Hits:1.0, Total execution time: 4.709 ms, Average time per hit: 4.709 ms 
",p02973,True
"def JOI14_B():

    N = I()

    A = [I()for _ in range(N)]

    A.extend(A)

    dp = [[0]*(N*2+1) for _ in range(N*2+1)]



    for j in range(N):

        for i in range(N*2-j):

            if (N-j)%2==1:

                dp[i][i+j] = max(dp[i+1][i+j]+A[i],dp[i][i+j-1]+A[i+j])

            else:

                if A[i]>A[i+j]:

                    dp[i][i+j] = dp[i+1][i+j]

                else:

                    dp[i][i+j] = dp[i][i+j-1]

    ans = 0

    for i in range(N):

        ans = max(ans,dp[i][i+N-1])

    print(ans)

    #print(dp)

    return



def square869120Contest1_G():

    def held_karp(dists,TL):

        # Copyright (c) 2016 Carl Ekerot

        """"""

        Implementation of Held-Karp, an algorithm that solves the Traveling

        Salesman Problem using dynamic programming with memoization.

        Parameters:

            dists: distance matrix

        Returns:

            A tuple, (cost, path).

        """"""

        n = len(dists)



        # Maps each subset of the nodes to the cost to reach that subset, as well

        # as what node it passed before reaching this subset.

        # Node subsets are represented as set bits.

        C = {}

        dp = defaultdict(int)



        # Set transition cost from initial state

        for k in range(1, n):

            C[(1 << k, k)] = (dists[0][k], 0)

            dp[(1 << k, k)] = 1



        # Iterate subsets of increasing length and store intermediate results

        # in classic dynamic programming manner

        for subset_size in range(2, n):

            for subset in itertools.combinations(list(range(1, n)), subset_size):

                # Set bits for all nodes in this subset

                bits = 0

                for bit in subset:

                    bits |= 1 << bit

                shortest_length = inf

                # Find the lowest cost to get to this subset

                for k in subset:

                    prev = bits & ~(1 << k)



                    res = []

                    for m in subset:

                        if not (prev, m) in C:

                            continue

                        if m == 0 or m == k:

                            continue

                        if C[(prev, m)][0] + dists[m][k]>TL[m][k]:

                            continue

                        res.append((C[(prev, m)][0] + dists[m][k], m))

                        if shortest_length>C[(prev, m)][0] + dists[m][k]:

                            shortest_length = C[(prev, m)][0] + dists[m][k]

                    if not res:

                        continue

                    C[(bits, k)] = min(res)

                    for d,m in res:

                        if shortest_length!=d:

                            continue

                        dp[(bits, k)] += dp[(prev,m)]



        # We're interested in all bits but the least significant (the start state)

        bits = (2 ** n - 1) - 1



        # Calculate optimal cost

        res = []

        shortest_length = inf

        for k in range(1, n):

            if not (bits, k) in C:

                continue

            if C[(bits, k)][0] + dists[k][0] > TL[k][0]:

                continue

            res.append((C[(bits, k)][0] + dists[k][0], k))

            if shortest_length > C[(bits, k)][0] + dists[k][0]:

                shortest_length = C[(bits, k)][0] + dists[k][0]

        if not res:

            return False

        opt, parent = min(res)

        way = 0

        for d, k in res:

            if not (bits, k) in C:

                continue

            if C[(bits, k)][0] + dists[k][0] > TL[k][0]:

                continue

            if shortest_length < d:

                continue

            way += dp[(bits,k)]



        # Backtrack to find full path

        path = []

        for i in range(n - 1):

            path.append(parent)

            new_bits = bits & ~(1 << parent)

            _, parent = C[(bits, parent)]

            bits = new_bits



        # Add implicit start state

        path.append(0)



        return shortest_length, list(reversed(path)), way



    N, M = LI()

    dist = [[inf]*N for _ in range(N)]

    TL = [[0]*N for _ in range(N)]

    for _ in range(M):

        s, t, d, time = LI()

        s -= 1; t -= 1

        dist[s][t] = dist[t][s] = d

        TL[s][t] = TL[t][s] = time

    ans = held_karp(dist,TL)

    if (not ans) or ans[2]==0:

        print(""IMPOSSIBLE"")

        return

    print((ans[0],ans[2]))

    return



def JOI13_D():

    def solve(yday,leader,next):

        a = [0]*3

        for i in range(3):

            if next&(1<<i)==(1<<i):

                a[i] = 1

        rep = 0

        if a[leader]==0:

            return rep

        for i in range(3):

            if yday&(1<<i)==(1<<i):

                if a[i]==1:

                    rep = 1

        return rep

    N = I()

    S = SI()

    member = {""J"":0,""O"":1,""I"":2}

    dp = [[0]*8 for _ in range(N+1)]

    dp[0][1] = 1

    for i in range(N):

        leader = member[S[i]]

        for j in range(8):

            for k in range(8):

                dp[i+1][j] += (dp[i][k]*solve(k,leader,j))

    ans = sum(dp[-1])%10007

    #print(dp)

    print(ans)

    return



def JOI16_D():

    N, M = LI()

    A = [(I()-1)for _ in range(N)]

    imos = [[0] * (N + 1) for _ in range(M)]

    for i in range(M):

        for j in range(N):

            imos[i][j + 1] += imos[i][j] + (A[j] != i)

    cnt = Counter(A)

    dp = [10 ** 9] * (1 << M)

    num = [None] * (1 << M)

    dp[0] = 0

    num[0] = 0

    for b in range(1 << M):

        for i in range(M):

            if b & (1 << i):

                continue

            nb = b | (1 << i)

            if num[nb] is None:

                num[nb] = num[b] + cnt[i]

            l = num[b]

            r = l + cnt[i]

            d = imos[i][r] - imos[i][l]

            dp[nb] = min(dp[nb], dp[b] + d)



    print((dp[-1]))

    return



def ABC6_D():

    N = I()

    C = [I() for _ in range(N)]

    LIS = [C[0]]

    for i in range(N):

        if C[i] > LIS[-1]:

            LIS.append(C[i])

        else:

            LIS[bisect.bisect_left(LIS, C[i])] = C[i]

    print((N - len(LIS)))

    return



def ABC134_E():

    N = I()

    A = [I()for _ in range(N)]

    que = deque()

    que.append(A[0])

    L = 1

    for i in range(1,N):

        cur = bisect.bisect_left(que,A[i])

        #print(que,cur,L)

        if cur==0:

            que.appendleft(A[i])

            L += 1

        else:

            que[cur-1] = A[i]



    #print(que)

    ans = len(que)

    print(ans)



    return



def JOI7_F():

    n, k = LI()

    for _ in range(k):

        A = LI()



    return



def square869120Contest1_E():

    N, Q = LI()

    A = LI()

    C = LI()

    C.append(1)

    L = [0]*N

    for i in range(1,N):

        L[i] = pow(A[i-1],A[i],mod) + L[i-1]

    #print(L)

    ans = 0

    now = 0

    for i in range(Q+1):

        next = C[i]-1

        cur = abs(L[next]-L[now])

        ans += cur

        ans %= mod

        now = next

        #print(ans)

    print(ans)

    return



import sys,copy,bisect,itertools,heapq,math,random

from heapq import heappop,heappush,heapify

from collections import Counter,defaultdict,deque

def I(): return int(sys.stdin.readline())

def LI(): return list(map(int,sys.stdin.readline().split()))

def LSI(): return list(map(str,sys.stdin.readline().split()))

def LS(): return sys.stdin.readline().split()

def SI(): return sys.stdin.readline().strip()

global mod,mod2,inf,alphabet,_ep

mod = 10**9 + 7

mod2 = 998244353

inf = 10**18

_ep = 10**(-12)

alphabet = [chr(ord('a') + i) for i in range(26)]



if __name__ == '__main__':

    ABC134_E()

""""""



""""""",,p02973,False
"import bisect # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


from collections import deque # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 38.75 ms, Average time per hit: 38.75 ms 


a=[int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 14.584 ms, Average time per hit: 14.584 ms 




q=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def bisect_desc(a,x): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    r = len(a)

    if r == 0:

        return 0

    l = 0

    while l != r:

        f = (l+r)//2

        if a[f] >= x:

            l = f+1

        else:

            r = f

    return l



for sa in a: # Hits:6.0, Total execution time: 0.791 ms, Average time per hit: 0.13183333333333333 ms 


    t = bisect_desc(q,sa) # Hits:5.0, Total execution time: 5.834 ms, Average time per hit: 1.1668 ms 


    if t ==len(q): # Hits:5.0, Total execution time: 0.834 ms, Average time per hit: 0.1668 ms 


        q.append(sa) # Hits:2.0, Total execution time: 0.417 ms, Average time per hit: 0.2085 ms 


    else:

        q[t] = sa # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 




print((len(q))) # Hits:1.0, Total execution time: 4.833 ms, Average time per hit: 4.833 ms 
","n=int(eval(input())) # Hits:1.0, Total execution time: 39.167 ms, Average time per hit: 39.167 ms 


a=[int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 14.25 ms, Average time per hit: 14.25 ms 




q=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def bisect_desc(a,x): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    r = len(a)

    if r == 0:

        return 0

    l = 0

    while l != r:

        f = (l+r)//2

        if a[f] >= x:

            l = f+1

        else:

            r = f

    return l



for sa in a: # Hits:6.0, Total execution time: 0.583 ms, Average time per hit: 0.09716666666666667 ms 


    t = bisect_desc(q,sa) # Hits:5.0, Total execution time: 4.291 ms, Average time per hit: 0.8582000000000001 ms 


    if t ==len(q): # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


        q.append(sa) # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


    else:

        q[t] = sa # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 




print((len(q))) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 
",p02973,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 44.75 ms, Average time per hit: 44.75 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 17.458 ms, Average time per hit: 17.458 ms 




from bisect import bisect_left, bisect_right, bisect, insort_left, insort_right, insort # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


from collections import deque # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 


def solve(N,A): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    ans = 0

    lis = []

    for i in range(N):

        ind = bisect_left(lis,A[i])

        if ind == 0:

            lis.insert(0,A[i])

        else:

            lis[ind-1] = A[i]

    ans = len(lis)

    return ans

print((solve(N,A))) # Hits:1.0, Total execution time: 9.125 ms, Average time per hit: 9.125 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 40.042 ms, Average time per hit: 40.042 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 14.541 ms, Average time per hit: 14.541 ms 




from bisect import bisect_left, bisect_right, bisect, insort_left, insort_right, insort # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 




def solve(N,A): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    ans = 0

    lis = []

    for i in range(N):

        ind = bisect_right(lis,-A[i])

        if ind == len(lis):

            lis.append(-A[i])

        else:

            lis[ind] = -A[i]

    ans = len(lis)

    return ans

print((solve(N,A))) # Hits:1.0, Total execution time: 9.875 ms, Average time per hit: 9.875 ms 
",p02973,True
"import bisect # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 39.791 ms, Average time per hit: 39.791 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 13.625 ms, Average time per hit: 13.625 ms 




colors = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


a = A # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while True: # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


    colors += 1 # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


    p = [a[0]] # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    pp = [0] # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    for i in range(1,len(a)): # Hits:7.0, Total execution time: 0.958 ms, Average time per hit: 0.13685714285714287 ms 


        if p[-1] < a[i]: # Hits:5.0, Total execution time: 0.626 ms, Average time per hit: 0.1252 ms 


            p.append(a[i]) # Hits:3.0, Total execution time: 0.54 ms, Average time per hit: 0.18 ms 


            pp.append(i) # Hits:3.0, Total execution time: 0.457 ms, Average time per hit: 0.15233333333333335 ms 


        else:

            pos = bisect.bisect_left(p,a[i]) # Hits:2.0, Total execution time: 0.542 ms, Average time per hit: 0.271 ms 


            p[pos] = a[i] # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


            pp[pos] = i # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 




    if len(p) == len(a): # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


        break # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


    a = [a[x] for x in range(len(a)) if x not in pp] # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


print (colors) # Hits:1.0, Total execution time: 7.958 ms, Average time per hit: 7.958 ms 
","import bisect # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 40.166 ms, Average time per hit: 40.166 ms 


A = [-int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 14.542 ms, Average time per hit: 14.542 ms 




p = [A[0]] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


for i in A[1:]: # Hits:5.0, Total execution time: 0.709 ms, Average time per hit: 0.1418 ms 


    if p[-1] <= i: # Hits:4.0, Total execution time: 0.543 ms, Average time per hit: 0.13575 ms 


        p.append(i) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    else:

        p[bisect.bisect_right(p,i)] = i # Hits:3.0, Total execution time: 0.792 ms, Average time per hit: 0.264 ms 


print((len(p))) # Hits:1.0, Total execution time: 5.083 ms, Average time per hit: 5.083 ms 
",p02973,True
"import bisect # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


import queue # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


INF=10**18 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 42.709 ms, Average time per hit: 42.709 ms 


a=queue.Queue() # Hits:1.0, Total execution time: 8.417 ms, Average time per hit: 8.417 ms 


for _ in range(n): # Hits:6.0, Total execution time: 0.874 ms, Average time per hit: 0.14566666666666667 ms 


  a.put(int(eval(input()))) # Hits:5.0, Total execution time: 24.416 ms, Average time per hit: 4.8831999999999995 ms 


cnt=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while a.qsize(): # Hits:3.0, Total execution time: 2.292 ms, Average time per hit: 0.764 ms 


  dp=[] # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


  for i in range(a.qsize()): # Hits:9.0, Total execution time: 2.169 ms, Average time per hit: 0.241 ms 


    i=a.get() # Hits:7.0, Total execution time: 11.959 ms, Average time per hit: 1.7084285714285714 ms 


    if bisect.bisect_left(dp,i)==len(dp): # Hits:7.0, Total execution time: 1.668 ms, Average time per hit: 0.23828571428571427 ms 


      dp.append(i) # Hits:5.0, Total execution time: 0.75 ms, Average time per hit: 0.15 ms 


    else:

      a.put(bisect.bisect_left(dp,i)) # Hits:2.0, Total execution time: 3.208 ms, Average time per hit: 1.604 ms 


      dp[bisect.bisect_left(dp,i)]=i # Hits:2.0, Total execution time: 1.209 ms, Average time per hit: 0.6045 ms 


  cnt+=1 # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


print(cnt) # Hits:1.0, Total execution time: 4.791 ms, Average time per hit: 4.791 ms 
","import bisect # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 35.625 ms, Average time per hit: 35.625 ms 


a=[int(eval(input())) for _ in range(n)][::-1] # Hits:1.0, Total execution time: 14.417 ms, Average time per hit: 14.417 ms 


dp=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in a: # Hits:6.0, Total execution time: 0.624 ms, Average time per hit: 0.104 ms 


  if bisect.bisect_right(dp,i)==len(dp): # Hits:5.0, Total execution time: 1.457 ms, Average time per hit: 0.2914 ms 


    dp.append(i) # Hits:2.0, Total execution time: 0.376 ms, Average time per hit: 0.188 ms 


  else:

    dp[bisect.bisect_right(dp,i)]=i # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


print((len(dp))) # Hits:1.0, Total execution time: 5.167 ms, Average time per hit: 5.167 ms 
",p02973,True
"from collections import defaultdict # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 41.709 ms, Average time per hit: 41.709 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 14.292 ms, Average time per hit: 14.292 ms 


d = defaultdict(lambda: []) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


for i,a in enumerate(A): # Hits:6.0, Total execution time: 1.084 ms, Average time per hit: 0.18066666666666667 ms 


    d[a].append(i) # Hits:5.0, Total execution time: 1.834 ms, Average time per hit: 0.3668 ms 


B = [None for i in range(N)] # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


for i,k in enumerate(sorted(d.keys())): # Hits:6.0, Total execution time: 1.666 ms, Average time per hit: 0.2776666666666667 ms 


    for j in d[k]: # Hits:10.0, Total execution time: 2.418 ms, Average time per hit: 0.24180000000000001 ms 


        B[j] = i # Hits:5.0, Total execution time: 0.542 ms, Average time per hit: 0.10840000000000001 ms 




bit = [0] * (N+2) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


def bit_add(a,w): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    x = a

    while x <= N+1:

        bit[x] += w

        x += (x & -x)



def bit_sum(a): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    x = a

    ret = 0

    while x > 0:

        ret += bit[x]

        x -= (x & -x)

    return ret



for a in B: # Hits:6.0, Total execution time: 0.541 ms, Average time per hit: 0.09016666666666667 ms 


    a += 2 # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 




    s = bit_sum(a) # Hits:5.0, Total execution time: 4.416 ms, Average time per hit: 0.8832000000000001 ms 


    bit_add(a,1) # Hits:5.0, Total execution time: 4.167 ms, Average time per hit: 0.8334 ms 


    if s and bit_sum(a-1): # Hits:5.0, Total execution time: 2.418 ms, Average time per hit: 0.48360000000000003 ms 


        t = bit_sum(a-1) # Hits:3.0, Total execution time: 1.917 ms, Average time per hit: 0.639 ms 


        ok = a-1 # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


        ng = 0 # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


        while ok-ng > 1: # Hits:10.0, Total execution time: 1.458 ms, Average time per hit: 0.1458 ms 


            m = (ok+ng)//2 # Hits:7.0, Total execution time: 0.874 ms, Average time per hit: 0.12485714285714286 ms 


            if bit_sum(m) == t: # Hits:7.0, Total execution time: 4.042 ms, Average time per hit: 0.5774285714285714 ms 


                ok = m # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


            else:

                ng = m # Hits:5.0, Total execution time: 0.374 ms, Average time per hit: 0.07479999999999999 ms 


        bit_add(ok,-1) # Hits:3.0, Total execution time: 2.459 ms, Average time per hit: 0.8196666666666667 ms 




    # for i in range(N+1):

    #     print(i+1, bit_sum(i+1))



print((bit_sum(N+1))) # Hits:1.0, Total execution time: 5.583 ms, Average time per hit: 5.583 ms 
","from bisect import bisect # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 35.75 ms, Average time per hit: 35.75 ms 


A = [-int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 13.833 ms, Average time per hit: 13.833 ms 




mem = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for a in A: # Hits:6.0, Total execution time: 0.5 ms, Average time per hit: 0.08333333333333333 ms 


    i = bisect(mem, a) # Hits:5.0, Total execution time: 0.752 ms, Average time per hit: 0.1504 ms 


    if i==len(mem): # Hits:5.0, Total execution time: 0.626 ms, Average time per hit: 0.1252 ms 


        mem.append(a) # Hits:2.0, Total execution time: 0.291 ms, Average time per hit: 0.1455 ms 


    else:

        mem[i] = a # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


print((len(mem))) # Hits:1.0, Total execution time: 4.958 ms, Average time per hit: 4.958 ms 
",p02973,True
"import bisect # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




N=int(eval(input())) # Hits:1.0, Total execution time: 41.375 ms, Average time per hit: 41.375 ms 




line=[-1]*10**5 # Hits:1.0, Total execution time: 11.708 ms, Average time per hit: 11.708 ms 




for _ in range(N): # Hits:6.0, Total execution time: 1.083 ms, Average time per hit: 0.1805 ms 


    A=int(eval(input())) # Hits:5.0, Total execution time: 16.417 ms, Average time per hit: 3.2834 ms 


    index=bisect.bisect_left(line,A) # Hits:5.0, Total execution time: 2.0 ms, Average time per hit: 0.4 ms 


    if index==0: # Hits:5.0, Total execution time: 0.708 ms, Average time per hit: 0.1416 ms 


        line[0]=A

    else:

        line[index-1]=A # Hits:5.0, Total execution time: 0.958 ms, Average time per hit: 0.1916 ms 


    line.sort() # Hits:5.0, Total execution time: 1410.791 ms, Average time per hit: 282.1582 ms 


    #print(line)

ans=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while line: # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    num=line.pop(-1) # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


    if num==-1: # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


        break # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


    else:

        ans.append(num) # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 




print((len(ans))) # Hits:1.0, Total execution time: 7.916 ms, Average time per hit: 7.916 ms 
","import bisect # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


import collections # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




N=int(eval(input())) # Hits:1.0, Total execution time: 37.541 ms, Average time per hit: 37.541 ms 




line=collections.deque() # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




for _ in range(N): # Hits:6.0, Total execution time: 0.834 ms, Average time per hit: 0.139 ms 


    A=int(eval(input())) # Hits:5.0, Total execution time: 13.999 ms, Average time per hit: 2.7998000000000003 ms 


    index=bisect.bisect_left(line,A) # Hits:5.0, Total execution time: 1.083 ms, Average time per hit: 0.2166 ms 


    if index==0: # Hits:5.0, Total execution time: 0.5 ms, Average time per hit: 0.1 ms 


        line.appendleft(A) # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


    else:

        line[index-1]=A # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


    #print(line)

    

    #print(line)



print((len(line))) # Hits:1.0, Total execution time: 4.917 ms, Average time per hit: 4.917 ms 

",p02973,True
"from bisect import bisect_left # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 37.917 ms, Average time per hit: 37.917 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 13.75 ms, Average time per hit: 13.75 ms 


X = [A[0]] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




for i in range(1, N): # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


    if X[0] >= A[i]: # Hits:4.0, Total execution time: 0.543 ms, Average time per hit: 0.13575 ms 


        X.insert(0, A[i]) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    else:

        idx = bisect_left(X, A[i]) # Hits:3.0, Total execution time: 0.624 ms, Average time per hit: 0.208 ms 


        X[idx-1] = A[i] # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 




print((len(X))) # Hits:1.0, Total execution time: 8.708 ms, Average time per hit: 8.708 ms 

","from bisect import bisect_right # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 37.583 ms, Average time per hit: 37.583 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 14.042 ms, Average time per hit: 14.042 ms 


A.reverse() # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


X = [A[0]] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




for i in range(1, N): # Hits:5.0, Total execution time: 0.626 ms, Average time per hit: 0.1252 ms 


    if X[-1] <= A[i]: # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


        X.append(A[i]) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    else:

        idx = bisect_right(X, A[i]) # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 


        X[idx] = A[i] # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 




print((len(X))) # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 

",p02973,True
"from collections import deque # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


import bisect # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 37.167 ms, Average time per hit: 37.167 ms 




A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 13.583 ms, Average time per hit: 13.583 ms 




q = deque([A[0]]) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




for a in A[1:]: # Hits:5.0, Total execution time: 0.541 ms, Average time per hit: 0.1082 ms 


    idx = bisect.bisect_left(q, a) # Hits:4.0, Total execution time: 0.751 ms, Average time per hit: 0.18775 ms 


    if idx == 0: # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


        q.appendleft(a) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    else:

        q[idx-1] = a # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 




print((len(q))) # Hits:1.0, Total execution time: 5.041 ms, Average time per hit: 5.041 ms 
","import bisect # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




N = int(eval(input())) # Hits:1.0, Total execution time: 26.333 ms, Average time per hit: 26.333 ms 


A = [int(eval(input())) for i in range(N)] # Hits:1.0, Total execution time: 13.5 ms, Average time per hit: 13.5 ms 




def lis(S): # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    from bisect import bisect_right

    L = [S[0]]



    for s in S[1:]:

        if s >= L[-1]:

            L.append(s)

        else:

            L[bisect_right(L, s)] = s

    return len(L)



print((lis(A[::-1]))) # Hits:1.0, Total execution time: 8.416 ms, Average time per hit: 8.416 ms 
",p02973,True
"n=int(eval(input())) # Hits:1.0, Total execution time: 41.791 ms, Average time per hit: 41.791 ms 


tail=[int(eval(input()))] # Hits:1.0, Total execution time: 5.459 ms, Average time per hit: 5.459 ms 


import bisect # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


from collections import deque # Hits:1.0, Total execution time: 1.834 ms, Average time per hit: 1.834 ms 


tail=deque(tail) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


c=1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n-1): # Hits:5.0, Total execution time: 0.874 ms, Average time per hit: 0.1748 ms 


    a=int(eval(input())) # Hits:4.0, Total execution time: 11.626 ms, Average time per hit: 2.9065 ms 


    p=bisect.bisect_left(tail,a) # Hits:4.0, Total execution time: 1.041 ms, Average time per hit: 0.26025 ms 


    if p==0: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


        tail.appendleft(a) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


        c+=1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    else:

        tail[p-1]=a # Hits:3.0, Total execution time: 0.584 ms, Average time per hit: 0.19466666666666665 ms 


print(c) # Hits:1.0, Total execution time: 7.333 ms, Average time per hit: 7.333 ms 

","import sys # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


input=sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 41.5 ms, Average time per hit: 41.5 ms 


a_list=[int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 11.958 ms, Average time per hit: 11.958 ms 


a_list.reverse() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


INF=10**10 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


dp=[INF]*n # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


import bisect # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


for i in range(n): # Hits:6.0, Total execution time: 0.666 ms, Average time per hit: 0.111 ms 


    a=a_list[i] # Hits:5.0, Total execution time: 0.501 ms, Average time per hit: 0.1002 ms 


    x=bisect.bisect_right(dp,a) # Hits:5.0, Total execution time: 1.083 ms, Average time per hit: 0.2166 ms 


    dp[x]=a # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:6.0, Total execution time: 0.669 ms, Average time per hit: 0.1115 ms 


    if dp[i]!=INF: # Hits:5.0, Total execution time: 0.666 ms, Average time per hit: 0.13319999999999999 ms 


        ans=i+1 # Hits:2.0, Total execution time: 0.875 ms, Average time per hit: 0.4375 ms 


print(ans) # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 

",p02973,True
"from collections import deque # Hits:1.0, Total execution time: 2.083 ms, Average time per hit: 2.083 ms 


from bisect import bisect_left # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 38.958 ms, Average time per hit: 38.958 ms 


a = [int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 13.5 ms, Average time per hit: 13.5 ms 




dq = deque() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for e in a: # Hits:6.0, Total execution time: 0.54 ms, Average time per hit: 0.09 ms 


    i = bisect_left(dq, e) # Hits:5.0, Total execution time: 0.792 ms, Average time per hit: 0.1584 ms 


    if i == 0: # Hits:5.0, Total execution time: 0.459 ms, Average time per hit: 0.09179999999999999 ms 


        dq.appendleft(e) # Hits:2.0, Total execution time: 0.334 ms, Average time per hit: 0.167 ms 


    else:

        dq[i-1] = e # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 




ans = len(dq) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


print(ans) # Hits:1.0, Total execution time: 4.792 ms, Average time per hit: 4.792 ms 

","from bisect import bisect_right # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 37.917 ms, Average time per hit: 37.917 ms 


a = [-int(eval(input())) for _ in range(n)] # Hits:1.0, Total execution time: 14.459 ms, Average time per hit: 14.459 ms 




li = list() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for e in a: # Hits:6.0, Total execution time: 0.584 ms, Average time per hit: 0.09733333333333333 ms 


    i = bisect_right(li, e) # Hits:5.0, Total execution time: 0.792 ms, Average time per hit: 0.1584 ms 


    if i == len(li): # Hits:5.0, Total execution time: 0.667 ms, Average time per hit: 0.13340000000000002 ms 


        li.append(e) # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


    else:

        li[i] = e # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 




ans = len(li) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


print(ans) # Hits:1.0, Total execution time: 4.917 ms, Average time per hit: 4.917 ms 

",p02973,True
"import sys # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


import bisect # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


from collections import deque # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


n = int(input().strip()) # Hits:1.0, Total execution time: 30.917 ms, Average time per hit: 30.917 ms 


q = deque() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


qappL = q.appendleft # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(n): # Hits:6.0, Total execution time: 1.0 ms, Average time per hit: 0.16666666666666666 ms 


  a = int(input().strip()) # Hits:5.0, Total execution time: 1.334 ms, Average time per hit: 0.26680000000000004 ms 


  b = bisect.bisect_left(q,a) # Hits:5.0, Total execution time: 1.0 ms, Average time per hit: 0.2 ms 


  if b == 0: # Hits:5.0, Total execution time: 0.667 ms, Average time per hit: 0.13340000000000002 ms 


    qappL(a) # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


  else:

    q[b-1] = a # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


print((len(q))) # Hits:1.0, Total execution time: 7.292 ms, Average time per hit: 7.292 ms 
","import sys # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


import bisect # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


n = int(input().strip()) # Hits:1.0, Total execution time: 32.834 ms, Average time per hit: 32.834 ms 


q = [-int(input().strip())] # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


qapp = q.append # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


bis_r = bisect.bisect_right # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(n-1): # Hits:5.0, Total execution time: 0.667 ms, Average time per hit: 0.13340000000000002 ms 


  a = -int(input().strip()) # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


  if q[-1] <= a: # Hits:4.0, Total execution time: 0.499 ms, Average time per hit: 0.12475 ms 


    qapp(a) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


  else:

    b = bis_r(q,a) # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


    q[b] = a # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


print((len(q))) # Hits:1.0, Total execution time: 8.0 ms, Average time per hit: 8.0 ms 
",p02973,True
"# -*- coding: utf-8 -*-

from collections import defaultdict # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 37.667 ms, Average time per hit: 37.667 ms 


a = [0 for _ in range(n)] # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 


for i in range(n): # Hits:6.0, Total execution time: 0.667 ms, Average time per hit: 0.11116666666666668 ms 


    a[i] = int(eval(input())) # Hits:5.0, Total execution time: 14.375 ms, Average time per hit: 2.875 ms 






colors = defaultdict(int) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


colors[a[0]] += 1 # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 


for num in a[1:]: # Hits:5.0, Total execution time: 0.666 ms, Average time per hit: 0.13319999999999999 ms 


    for cnum in sorted(set(colors.keys()), reverse=True): # Hits:6.0, Total execution time: 2.835 ms, Average time per hit: 0.4725 ms 


        if num > cnum: # Hits:5.0, Total execution time: 0.5 ms, Average time per hit: 0.1 ms 


            if colors[cnum] == 1: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


                colors.pop(cnum) # Hits:3.0, Total execution time: 0.626 ms, Average time per hit: 0.20866666666666667 ms 


            else:

                colors[cnum] -= 1

            break # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


    colors[num] += 1 # Hits:4.0, Total execution time: 1.75 ms, Average time per hit: 0.4375 ms 


print((sum(colors.values()))) # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 
","# -*- coding: utf-8 -*-

import bisect # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 37.041 ms, Average time per hit: 37.041 ms 


a = [0 for _ in range(n)] # Hits:1.0, Total execution time: 1.291 ms, Average time per hit: 1.291 ms 


for i in range(n): # Hits:6.0, Total execution time: 0.874 ms, Average time per hit: 0.14566666666666667 ms 


    a[i] = -int(eval(input())) # Hits:5.0, Total execution time: 21.584 ms, Average time per hit: 4.3168 ms 






LIS = list() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in a: # Hits:6.0, Total execution time: 0.543 ms, Average time per hit: 0.0905 ms 


    j = bisect.bisect_right(LIS, i) # Hits:5.0, Total execution time: 1.042 ms, Average time per hit: 0.2084 ms 


    if len(LIS) == j: # Hits:5.0, Total execution time: 0.791 ms, Average time per hit: 0.15819999999999998 ms 


        LIS.append(i) # Hits:2.0, Total execution time: 0.916 ms, Average time per hit: 0.458 ms 


    else:

        LIS[j] = i # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 




print((len(LIS))) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 
",p02973,True
"from bisect import bisect_right # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


n=int(eval(input())) # Hits:1.0, Total execution time: 39.375 ms, Average time per hit: 39.375 ms 


A=[int(eval(input())) for _ in range(n)][::-1] # Hits:1.0, Total execution time: 14.792 ms, Average time per hit: 14.792 ms 




DP=[A[0]] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(1,n): # Hits:5.0, Total execution time: 0.666 ms, Average time per hit: 0.13319999999999999 ms 


    num=A[i] # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


    if num>=DP[-1]: # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


        DP.append(num) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    else:

        index=bisect_right(DP,num) # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


        DP[index]=num # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


print((len(DP))) # Hits:1.0, Total execution time: 5.458 ms, Average time per hit: 5.458 ms 
","from _bisect import bisect_right # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


N=int(eval(input())) # Hits:1.0, Total execution time: 40.958 ms, Average time per hit: 40.958 ms 


A=[int(eval(input())) for _ in range(N)][::-1] # Hits:1.0, Total execution time: 17.25 ms, Average time per hit: 17.25 ms 




DP=[A[0]] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(1,N): # Hits:5.0, Total execution time: 0.833 ms, Average time per hit: 0.1666 ms 


    num=A[i] # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


    if num>=DP[-1]: # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


        DP.append(num) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    else:

        index=bisect_right(DP,num) # Hits:3.0, Total execution time: 1.041 ms, Average time per hit: 0.347 ms 


        DP[index]=num # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


print((len(DP))) # Hits:1.0, Total execution time: 8.042 ms, Average time per hit: 8.042 ms 
",p02973,True
"from collections import deque # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 


from bisect import bisect_left # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


N=int(eval(input())) # Hits:1.0, Total execution time: 40.541 ms, Average time per hit: 40.541 ms 


li=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(N): # Hits:6.0, Total execution time: 1.001 ms, Average time per hit: 0.16683333333333333 ms 


    a=-int(eval(input())) # Hits:5.0, Total execution time: 14.583 ms, Average time per hit: 2.9166 ms 


    b=bisect_left(li,a+1) # Hits:5.0, Total execution time: 1.166 ms, Average time per hit: 0.2332 ms 


    if b==len(li): # Hits:5.0, Total execution time: 0.792 ms, Average time per hit: 0.1584 ms 


        li.append(a) # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


        ans+=1 # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


    else:

        li[b]=a # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


print(ans) # Hits:1.0, Total execution time: 5.417 ms, Average time per hit: 5.417 ms 
","from collections import deque # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 


from bisect import bisect_left # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


N=int(eval(input())) # Hits:1.0, Total execution time: 39.0 ms, Average time per hit: 39.0 ms 


d=deque() # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for i in range(N): # Hits:6.0, Total execution time: 0.957 ms, Average time per hit: 0.1595 ms 


    A=int(eval(input())) # Hits:5.0, Total execution time: 15.25 ms, Average time per hit: 3.05 ms 


    b=bisect_left(d,A)-1 # Hits:5.0, Total execution time: 1.251 ms, Average time per hit: 0.2502 ms 


    if b==-1: # Hits:5.0, Total execution time: 0.5 ms, Average time per hit: 0.1 ms 


        d.appendleft(A) # Hits:2.0, Total execution time: 0.5 ms, Average time per hit: 0.25 ms 


    else:

        d[b]=A # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


print((len(d))) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 
",p02973,True
"from collections import Counter,defaultdict,deque

import sys

import copy

from itertools import permutations, combinations

from heapq import heappop, heappush

# input = sys.stdin.readline

sys.setrecursionlimit(10**8)

mod = 10**9+7

    

def inp(): # n=1

    return int(eval(input()))

def inpm(): # x=1,y=2

    return list(map(int,input().split()))

def inpl(): # a=[1,2,3,4,5,...,n]

    return list(map(int, input().split()))

def inpls(): # a=['1','2','3',...,'n']

    return list(input().split())

def inplm(n): # x=[] 複数行

    return list(int(eval(input())) for _ in range(n))

def inpll(n): # [[1,1,1,1],[2,2,2,2],[3,3,3,3]]

    return sorted([list(map(int, input().split())) for _ in range(n)])



def main():

    n=inp()

    a=inplm(n)

    aa=[-1 for _ in range(10**5)]

    index=0

    for i in range(n):

        for j in range(10**5):

            if a[i]>aa[j]:

                aa[j]=a[i]

                if index<j:

                    index=j

                break

    print((index+1))





if __name__ == ""__main__"":

    main()",,p02973,False
"# ABC134-E



import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,queue,copy # Hits:1.0, Total execution time: 3.542 ms, Average time per hit: 3.542 ms 




sys.setrecursionlimit(10**7) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


inf=10**20 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


mod=10**9+7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


dd=[(-1,0),(0,1),(1,0),(0,-1)] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


ddn=[(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def LI(): return [int(x) for x in sys.stdin.readline().split()] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def I(): return int(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def LS(): return sys.stdin.readline().split() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def S(): return eval(input()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def main(): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  n=I()

  l1=[I() for _ in range(n)]



  l1.reverse()

  l2=[0]*n



  # c=1



  # # print(l1)

  # for i,x in enumerate(l1):

  #   # print(l2)

  #   if l2[i]==0:

  #     l2[i]=i+1

  #   for j in range(i,n):

  #     y=l1[j]



  #     if c==n-1:

  #       return max(l2)



  #     if x>y and l2[j]==0:

  #       c+=1

  #       l2[j]=i+1

  #       x=y



  # return max(l2)



  l3=[]

  for x in l1:

    l3.append([x])

  # print(l3)

  i=0

  while True:

    if i>=len(l3):

      return len(l3)



    l4=[]

    a=l3[i]

    _a=l3[:i]

    # print(a)

    for j in range(i+1,len(l3)):

      b=l3[j]

      # print(a,b)

      if a[-1]>b[0]:

        a.append(b[0])

      else:

        l4.append(b)



    # print(a,l4)

    l4=_a+[a]+l4

    # print(l4)



    i+=1



    l3=copy.deepcopy(l4)





# main()

print((main())) # Hits:1.0, Total execution time: 83.084 ms, Average time per hit: 83.084 ms 

","import math,itertools,fractions,heapq,collections,bisect,sys,queue,copy # Hits:1.0, Total execution time: 2.25 ms, Average time per hit: 2.25 ms 




sys.setrecursionlimit(10**7) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


inf=10**20 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


mod=10**9+7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


dd=[(-1,0),(0,1),(1,0),(0,-1)] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ddn=[(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




def LI(): return [int(x) for x in sys.stdin.readline().split()] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


# def LF(): return [float(x) for x in sys.stdin.readline().split()]

def I(): return int(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def F(): return float(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def LS(): return sys.stdin.readline().split() # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def S(): return eval(input()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




def main(): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  n=I()

  _l=[I() for _ in range(n)]

  l=collections.deque()



  for A in _l:

    if len(l)==0:

      l.append(A)

      continue



    lv=l[0]

    rv=l[-1]

    if rv<A:

      l[-1]=A

      continue

    if A<=lv:

      l.appendleft(A)

      continue



    li=0

    ri=len(l)-1

    while ri-li>1:

      mi=(ri+li)//2

      if l[mi]<A:

        li=mi

      else:

        ri=mi



    l[li]=A



  # print(l)

  return len(l)



# main()

print((main())) # Hits:1.0, Total execution time: 47.417 ms, Average time per hit: 47.417 ms 

",p02973,True
"from sys import stdin, setrecursionlimit

from bisect import bisect_left

from collections import deque



setrecursionlimit(10 ** 9)

INF = 1 << 60





def input():

    return stdin.readline().strip()





def main():

    N = int(eval(input()))

    A = tuple(int(eval(input())) for _ in range(N))

    B =deque([A[0]])



    for a in A[1:]:

        if a <= B[0]:

            B.appendleft(a)

        else:

            B[bisect_left(B, a) - 1] = a



    print((len(B)))





if __name__ == '__main__':

    main()
",,p02973,False
"from collections import deque # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 


from bisect import bisect_left # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


inf = float('inf') # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 






N = int(eval(input())) # Hits:1.0, Total execution time: 35.167 ms, Average time per hit: 35.167 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 13.708 ms, Average time per hit: 13.708 ms 




color = deque() # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




for a in A: # Hits:6.0, Total execution time: 0.542 ms, Average time per hit: 0.09033333333333333 ms 


    pos = bisect_left(color, a) # Hits:5.0, Total execution time: 0.666 ms, Average time per hit: 0.13319999999999999 ms 


    if pos == 0: # Hits:5.0, Total execution time: 0.498 ms, Average time per hit: 0.0996 ms 


        color.appendleft(a) # Hits:2.0, Total execution time: 0.334 ms, Average time per hit: 0.167 ms 


    else:

        color[pos-1] = a # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 




ans = len(color) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


print(ans) # Hits:1.0, Total execution time: 5.083 ms, Average time per hit: 5.083 ms 
","from bisect import bisect # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


inf = float('inf') # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




# 広義単調増加

def LIS(arr): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    N = len(arr)

    dp = [inf] * N

    res = 0

    for a in arr:

        pos = bisect(dp,a)

        dp[pos] = a

        res = max(res, pos + 1)

    return res



N = int(eval(input())) # Hits:1.0, Total execution time: 38.334 ms, Average time per hit: 38.334 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 14.042 ms, Average time per hit: 14.042 ms 




ans = LIS(A[::-1]) # Hits:1.0, Total execution time: 4.333 ms, Average time per hit: 4.333 ms 


print(ans) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 
",p02973,True
"import bisect # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


from collections import deque # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


N=int(eval(input())) # Hits:1.0, Total execution time: 38.292 ms, Average time per hit: 38.292 ms 


a=[int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 14.666 ms, Average time per hit: 14.666 ms 


d=deque() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




for i in range(N): # Hits:6.0, Total execution time: 0.668 ms, Average time per hit: 0.11133333333333333 ms 


    p=bisect.bisect_left(d, a[i]) # Hits:5.0, Total execution time: 1.251 ms, Average time per hit: 0.2502 ms 


    #print(a[i], p, d)

    if p==0: # Hits:5.0, Total execution time: 0.458 ms, Average time per hit: 0.0916 ms 


        d.appendleft(a[i]) # Hits:2.0, Total execution time: 0.542 ms, Average time per hit: 0.271 ms 


    else:

        d[p-1]=a[i] # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


print((len(d))) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 
","from collections import deque # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


import bisect # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


import sys # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




input = sys.stdin.readline # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


N = int(eval(input())) # Hits:1.0, Total execution time: 35.459 ms, Average time per hit: 35.459 ms 


A = [int(eval(input())) for _ in range(N)] # Hits:1.0, Total execution time: 11.875 ms, Average time per hit: 11.875 ms 


A = A[::-1] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




col = [A.pop()] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


col = deque(col) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




while A: # Hits:5.0, Total execution time: 0.459 ms, Average time per hit: 0.09179999999999999 ms 


    a = A.pop() # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    if a <= col[0]: # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


        col.appendleft(a) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    else:

        x = bisect.bisect_left(col, a) # Hits:3.0, Total execution time: 0.833 ms, Average time per hit: 0.2776666666666667 ms 


        col[x - 1] = a # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 




ans = len(col) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


print(ans) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 

",p02973,True
"import bisect # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 35.792 ms, Average time per hit: 35.792 ms 


A = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 13.792 ms, Average time per hit: 13.792 ms 


m = 10**9 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


c = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


X = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for a in A: # Hits:6.0, Total execution time: 0.542 ms, Average time per hit: 0.09033333333333333 ms 


    i = bisect.bisect_left(X, a) # Hits:5.0, Total execution time: 0.875 ms, Average time per hit: 0.175 ms 


    if i == 0: # Hits:5.0, Total execution time: 0.5 ms, Average time per hit: 0.1 ms 


        X.reverse() # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


        X.append(a) # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


        X.reverse() # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


    else:

        X[i-1] = a # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


print((len(X))) # Hits:1.0, Total execution time: 4.542 ms, Average time per hit: 4.542 ms 

","import bisect # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 38.666 ms, Average time per hit: 38.666 ms 


A = [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 26.292 ms, Average time per hit: 26.292 ms 


m = 10**9 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


X = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for a in A: # Hits:6.0, Total execution time: 0.959 ms, Average time per hit: 0.15983333333333336 ms 


    i = bisect.bisect_right(X, -a) # Hits:5.0, Total execution time: 1.498 ms, Average time per hit: 0.29960000000000003 ms 


    if i == len(X): # Hits:5.0, Total execution time: 0.918 ms, Average time per hit: 0.18359999999999999 ms 


        X.append(-a) # Hits:2.0, Total execution time: 0.625 ms, Average time per hit: 0.3125 ms 


    else:

        X[i] = -a # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


print((len(X))) # Hits:1.0, Total execution time: 6.25 ms, Average time per hit: 6.25 ms 

",p02973,True
"import sys # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


read = sys.stdin.buffer.read # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


readline = sys.stdin.buffer.readline # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


readlines = sys.stdin.buffer.readlines # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


sys.setrecursionlimit(500000) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




n, k = list(map(int, readline().split())) # Hits:1.0, Total execution time: 23.709 ms, Average time per hit: 23.709 ms 


r, s, p = list(map(int, readline().split())) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


t = read().rstrip().decode(""utf-8"") # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 




hands = ['r', 's', 'p'] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




points = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




player = {} # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


player['r'] = 'p' # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


player['s'] = 'r' # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


player['p'] = 's' # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


points['p'] = p # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


points['r'] = r # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


points['s'] = s # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(k): # Hits:6.0, Total execution time: 0.792 ms, Average time per hit: 0.132 ms 


    t_ = t[i::k] + '.' # Hits:5.0, Total execution time: 1.583 ms, Average time per hit: 0.31660000000000005 ms 


    myhand = ['.'] * len(t_) # Hits:5.0, Total execution time: 1.123 ms, Average time per hit: 0.2246 ms 


    for i in range(len(t_) - 1): # Hits:35.0, Total execution time: 5.538 ms, Average time per hit: 0.15822857142857144 ms 


        c = t_[i] # Hits:30.0, Total execution time: 2.92 ms, Average time per hit: 0.09733333333333333 ms 


        if i < 1: # Hits:30.0, Total execution time: 2.705 ms, Average time per hit: 0.09016666666666667 ms 


            ans += points[player[c]] # Hits:5.0, Total execution time: 0.75 ms, Average time per hit: 0.15 ms 


            myhand[i] = player[c] # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 


        elif player[c] != myhand[i-1]: # Hits:25.0, Total execution time: 3.625 ms, Average time per hit: 0.145 ms 


            ans += points[player[c]] # Hits:16.0, Total execution time: 2.04 ms, Average time per hit: 0.1275 ms 


            myhand[i] = player[c] # Hits:16.0, Total execution time: 1.917 ms, Average time per hit: 0.1198125 ms 


        else:

            myhand[i] = set(hands) and not player[c] and player[t_[i+1]] # Hits:9.0, Total execution time: 2.248 ms, Average time per hit: 0.24977777777777777 ms 




print(ans) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 
","import sys # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


read = sys.stdin.buffer.read # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


readline = sys.stdin.buffer.readline # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


readlines = sys.stdin.buffer.readlines # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


sys.setrecursionlimit(500000) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




n, k = list(map(int, readline().split())) # Hits:1.0, Total execution time: 31.25 ms, Average time per hit: 31.25 ms 


r, s, p = list(map(int, readline().split())) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


t = read().rstrip().decode(""utf-8"") # Hits:1.0, Total execution time: 2.375 ms, Average time per hit: 2.375 ms 






points = {} # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


player = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




player['r'] = 'p' # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


player['s'] = 'r' # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


player['p'] = 's' # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


points['p'] = p # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


points['r'] = r # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


points['s'] = s # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(k): # Hits:6.0, Total execution time: 0.875 ms, Average time per hit: 0.14583333333333334 ms 


    t_ = t[i::k] + '.' # Hits:5.0, Total execution time: 1.292 ms, Average time per hit: 0.25839999999999996 ms 


    hands = ['.'] * len(t_) # Hits:5.0, Total execution time: 1.249 ms, Average time per hit: 0.24980000000000002 ms 


    for i in range(len(t_) - 1): # Hits:35.0, Total execution time: 5.291 ms, Average time per hit: 0.15117142857142857 ms 


        c = t_[i] # Hits:30.0, Total execution time: 3.001 ms, Average time per hit: 0.10003333333333334 ms 


        if i < 1: # Hits:30.0, Total execution time: 2.709 ms, Average time per hit: 0.09029999999999999 ms 


            ans += points[player[c]] # Hits:5.0, Total execution time: 0.875 ms, Average time per hit: 0.175 ms 


            hands[i] = player[c] # Hits:5.0, Total execution time: 0.666 ms, Average time per hit: 0.13319999999999999 ms 


        elif player[c] != hands[i-1]: # Hits:25.0, Total execution time: 3.541 ms, Average time per hit: 0.14164 ms 


            ans += points[player[c]] # Hits:16.0, Total execution time: 1.958 ms, Average time per hit: 0.122375 ms 


            hands[i] = player[c] # Hits:16.0, Total execution time: 1.917 ms, Average time per hit: 0.1198125 ms 


        else:

            hands[i] = set(player.values()) and not player[c] and player[t_[i+1]] # Hits:9.0, Total execution time: 3.04 ms, Average time per hit: 0.3377777777777778 ms 




print(ans) # Hits:1.0, Total execution time: 5.417 ms, Average time per hit: 5.417 ms 
",p02820,True
"# 2019-11-15 00:35:39(JST)

import sys

import collections

# import math

# from string import ascii_lowercase, ascii_uppercase, digits

# from bisect import bisect_left as bi_l, bisect_right as bi_r

# import itertools

# from functools import reduce

# import operator as op

# from scipy.misc import comb # float

# import numpy as np 



def main():

    s = sys.stdin.readline().rstrip()

    for v in list(collections.Counter(s).values()):

        if v == 2:

            continue

        else:

            ans = 'No'

            break

    else:

        ans = 'Yes'



    print(ans)



if __name__ == ""__main__"":

    main()
",,p02987,False
"def main():

  import sys

  read = sys.stdin.buffer.read

  r = 998244353

  U, S, *A = list(map(int, read().split()))

  import copy

  ans = 0

  f = [0]*3010

  for a in A:

      c = copy.deepcopy(f)

      f = [0]*a+c[:-a]

      f = [x+y for x,y in zip(f,c)]

      f[0] += 1

      f[a] += 1

      ans += f[S]

  ans %= r

  print(ans)

if __name__ == '__main__':

    main()",,p02734,False
"from copy import deepcopy # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 




N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 43.917 ms, Average time per hit: 43.917 ms 


A = [0] + list(map(int, input().split())) # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


mod = 998244353 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




dp = [0] * (S + 1) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


dp2 = [0] * (S + 1) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




"""""" # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


dp[i][j] = (i個までの数を使ってj点とる組み合わせ)

としたはいいが、f(L, R)をf(1,L)とf(1, R)に分解できずに爆死したのが敗因。



各(L, R)に対してdpするとTLEになるから手詰まりになると思ったわけだけど、

上のdpテーブルを各iに対して使い回しつつ、新たなdpテーブル[1, 0, 0, ...]を

作成して「元のdpテーブルに加算しておけば」dpテーブル一個で1番目スタート、2番目スタート、

..., L番目スタートのdpテーブル全てを考えられる！

（解説放送前半を参考）

""""""



# i == 0の時

dp[0] = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




# i >= 1の時

for i in range(1, N + 1): # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


    for j in range(S + 1): # Hits:18.0, Total execution time: 2.002 ms, Average time per hit: 0.11122222222222222 ms 


        if j - A[i] < 0: # Hits:15.0, Total execution time: 2.167 ms, Average time per hit: 0.14446666666666666 ms 


            dp2[j] = dp[j] # Hits:8.0, Total execution time: 1.915 ms, Average time per hit: 0.239375 ms 


        else:

            dp2[j] = dp[j] + dp[j - A[i]] # Hits:7.0, Total execution time: 1.333 ms, Average time per hit: 0.19042857142857142 ms 


    ans += dp2[S] # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    ans %= mod # Hits:3.0, Total execution time: 0.377 ms, Average time per hit: 0.12566666666666668 ms 




    dp = deepcopy(dp2) # Hits:3.0, Total execution time: 20.624 ms, Average time per hit: 6.874666666666667 ms 


    dp[0] += 1 # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


    dp2 = [0] * (S + 1) # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 




print(ans) # Hits:1.0, Total execution time: 8.5 ms, Average time per hit: 8.5 ms 

","N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 23.167 ms, Average time per hit: 23.167 ms 


A = [0] + list(map(int, input().split())) # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


mod = 998244353 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




dp = [0] * (S + 1) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


dp2 = [0] * (S + 1) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




"""""" # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


dp[i][j] = (i個までの数を使ってj点とる組み合わせ)

としたはいいが、f(L, R)をf(1,L)とf(1, R)に分解できずに爆死したのが敗因。



各(L, R)に対してdpするとTLEになるから手詰まりになると思ったわけだけど、

上のdpテーブルを各iに対して使い回しつつ、新たなdpテーブル[1, 0, 0, ...]を

作成して「元のdpテーブルに加算しておけば」dpテーブル一個で1番目スタート、2番目スタート、

..., L番目スタートのdpテーブル全てを考えられる！

（解説放送前半を参考）

""""""



# i == 0の時

dp[0] = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




# i >= 1の時

for i in range(1, N + 1): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    for j in range(S + 1): # Hits:18.0, Total execution time: 2.003 ms, Average time per hit: 0.11127777777777777 ms 


        if j - A[i] < 0: # Hits:15.0, Total execution time: 1.999 ms, Average time per hit: 0.13326666666666667 ms 


            dp2[j] = dp[j] # Hits:8.0, Total execution time: 1.457 ms, Average time per hit: 0.182125 ms 


        else:

            dp2[j] = dp[j] + dp[j - A[i]] # Hits:7.0, Total execution time: 1.459 ms, Average time per hit: 0.2084285714285714 ms 


    ans += dp2[S] # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    ans %= mod # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 




    dp = dp2 # deepcopyしなくてもこれで十分なはずだし、ポインタ渡しなので高速？ # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


    dp[0] += 1 # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    dp2 = [0] * (S + 1) # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 




print(ans) # Hits:1.0, Total execution time: 4.792 ms, Average time per hit: 4.792 ms 

",p02734,True
"N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 23.125 ms, Average time per hit: 23.125 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


d = sum(A) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


mod = 998244353 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




"""""" # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


多項式係数を使った数え上げでリベンジしてみる。

maspyさんのを参考に実装する。



やってみてわかったけど、実装自体はdpでやったのとほぼ同じ。

多項式係数を使う方法は実質flexibleなdpということ？

""""""



f = [0] * (1 + d) # f[i] = (coefficient of degree i) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


    g = [0] * (1 + d) # g = (1 + f) * (1 + x^{A[i]}) # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


    f[0] += 1 # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


    for j in range(1 + d): # Hits:30.0, Total execution time: 3.333 ms, Average time per hit: 0.11109999999999999 ms 


        if j - A[i] < 0: # Hits:27.0, Total execution time: 3.625 ms, Average time per hit: 0.13425925925925927 ms 


            g[j] = f[j] # Hits:8.0, Total execution time: 1.126 ms, Average time per hit: 0.14075 ms 


        else:

            g[j] = f[j] + f[j - A[i]] # Hits:19.0, Total execution time: 4.371 ms, Average time per hit: 0.23005263157894737 ms 


    ans += g[S] # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    ans %= mod # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    f = g # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 




print(ans) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 

","N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 25.542 ms, Average time per hit: 25.542 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


#d = sum(A)

mod = 998244353 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




"""""" # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


多項式係数を使った数え上げでリベンジしてみる。

maspyさんのを参考に実装する。



（注意）多項式係数全てを書き下すと、d = sum(A)次式になるが、

これは Ai*N = 3000*3000 次になりTLEする。。。

S次の項までで打ち切る事を忘れない事。



やってみてわかったけど、実装自体はdpでやったのとほぼ同じ。

多項式係数を使う方法は実質flexibleなdpということ？

""""""



f = [0] * (1 + S) # f[i] = (coefficient of degree i) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(N): # Hits:4.0, Total execution time: 0.501 ms, Average time per hit: 0.12525 ms 


    g = [0] * (1 + S) # g = (1 + f) * (1 + x^{A[i]}) # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


    f[0] += 1 # Hits:3.0, Total execution time: 0.499 ms, Average time per hit: 0.16633333333333333 ms 


    for j in range(1 + S): # Hits:18.0, Total execution time: 2.044 ms, Average time per hit: 0.11355555555555556 ms 


        if j - A[i] < 0: # Hits:15.0, Total execution time: 2.042 ms, Average time per hit: 0.13613333333333333 ms 


            g[j] = f[j] # Hits:8.0, Total execution time: 1.333 ms, Average time per hit: 0.166625 ms 


        else:

            g[j] = f[j] + f[j - A[i]] # Hits:7.0, Total execution time: 1.376 ms, Average time per hit: 0.1965714285714286 ms 


    ans += g[S] # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    ans %= mod # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


    f = g # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 




print(ans) # Hits:1.0, Total execution time: 4.541 ms, Average time per hit: 4.541 ms 

",p02734,True
"from collections import defaultdict # Hits:1.0, Total execution time: 1.584 ms, Average time per hit: 1.584 ms 


import sys # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




mod = 998244353 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.916 ms, Average time per hit: 33.916 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


dp = [defaultdict(int) for j in range(S+1)] # Hits:1.0, Total execution time: 2.833 ms, Average time per hit: 2.833 ms 


for i in range(1, N+1): # Hits:4.0, Total execution time: 0.54 ms, Average time per hit: 0.135 ms 


    a = A[i-1] # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    for j in range(a+1, S+1)[::-1]: # Hits:7.0, Total execution time: 1.792 ms, Average time per hit: 0.256 ms 


        for k, v in list(dp[j-a].items()): # Hits:5.0, Total execution time: 1.749 ms, Average time per hit: 0.3498 ms 


            dp[j][k] += v # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


    if a <= S: # Hits:3.0, Total execution time: 0.374 ms, Average time per hit: 0.12466666666666668 ms 


        dp[a][i] = 1 # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


    for k, v in list(dp[S].items()): # Hits:5.0, Total execution time: 1.125 ms, Average time per hit: 0.225 ms 


        ans += (k * (N-i+1)) * v % mod # Hits:2.0, Total execution time: 0.458 ms, Average time per hit: 0.229 ms 


        ans %= mod # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


        dp[S] = defaultdict(int) # Hits:2.0, Total execution time: 0.958 ms, Average time per hit: 0.479 ms 


print(ans) # Hits:1.0, Total execution time: 4.875 ms, Average time per hit: 4.875 ms 
","import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




mod = 998244353 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.125 ms, Average time per hit: 37.125 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


dp = [0] * (S+1) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(1, N+1): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


    a = A[i-1] # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


    for j in range(a+1, S+1)[::-1]: # Hits:7.0, Total execution time: 1.417 ms, Average time per hit: 0.20242857142857143 ms 


        dp[j] += dp[j-a] # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


    if a <= S: # Hits:3.0, Total execution time: 0.376 ms, Average time per hit: 0.12533333333333332 ms 


        dp[a] += i # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    ans += dp[S] * (N-i+1) # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


    ans %= mod # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


    dp[S] = 0 # Hits:3.0, Total execution time: 0.791 ms, Average time per hit: 0.26366666666666666 ms 


print(ans) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 
",p02734,True
"mod = 998244353 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


N,S = list(map(int,input().split())) # Hits:1.0, Total execution time: 49.834 ms, Average time per hit: 49.834 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 2.5 ms, Average time per hit: 2.5 ms 




dp = [[[0]*2 for s in range(3001)] for i in range(N)] # Hits:1.0, Total execution time: 990.458 ms, Average time per hit: 990.458 ms 




for n in range(N): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    for s in range(3000,-1,-1): # Hits:9006.0, Total execution time: 782.137 ms, Average time per hit: 0.0868462136353542 ms 


        dp[n][s][1] = dp[n-1][s][1] # Hits:9003.0, Total execution time: 1614.964 ms, Average time per hit: 0.1793806508941464 ms 


        dp[n][s][0] = dp[n-1][s][0] # Hits:9003.0, Total execution time: 1677.552 ms, Average time per hit: 0.18633255581472843 ms 


        if s>A[n]: # Hits:9003.0, Total execution time: 957.23 ms, Average time per hit: 0.10632344773964235 ms 


            dp[n][s][1] += dp[n-1][s-A[n]][0]*(N-n) # Hits:8992.0, Total execution time: 2737.186 ms, Average time per hit: 0.30440235765124557 ms 


            dp[n][s][0] += dp[n-1][s-A[n]][0] # Hits:8992.0, Total execution time: 2417.011 ms, Average time per hit: 0.26879570729537366 ms 


        elif s==A[n]: # Hits:11.0, Total execution time: 1.334 ms, Average time per hit: 0.12127272727272727 ms 


            dp[n][s][1] += (n+1)*(N-n) # Hits:3.0, Total execution time: 0.709 ms, Average time per hit: 0.23633333333333334 ms 


            dp[n][s][0] += n+1 # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


        dp[n][s][1] %= mod # Hits:9003.0, Total execution time: 1573.248 ms, Average time per hit: 0.1747470843052316 ms 


        dp[n][s][0] %= mod # Hits:9003.0, Total execution time: 1660.413 ms, Average time per hit: 0.18442885704765077 ms 




print((dp[N-1][S][1])) # Hits:1.0, Total execution time: 6.417 ms, Average time per hit: 6.417 ms 
","mod = 998244353 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


N,S = list(map(int,input().split())) # Hits:1.0, Total execution time: 42.459 ms, Average time per hit: 42.459 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 2.083 ms, Average time per hit: 2.083 ms 




dp1 = [0]*(3001*N) # Hits:1.0, Total execution time: 1.584 ms, Average time per hit: 1.584 ms 


dp2 = [0]*(3001*N) # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 




for n in range(N): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    for s in range(3000,-1,-1): # Hits:9006.0, Total execution time: 785.02 ms, Average time per hit: 0.08716633355540751 ms 


        dp2[n*N+s] = dp2[(n-1)*N+s] # Hits:9003.0, Total execution time: 1650.862 ms, Average time per hit: 0.18336798844829502 ms 


        dp1[n*N+s] = dp1[(n-1)*N+s] # Hits:9003.0, Total execution time: 1581.205 ms, Average time per hit: 0.17563090081084085 ms 


        if s>A[n]: # Hits:9003.0, Total execution time: 1045.178 ms, Average time per hit: 0.11609219149172498 ms 


            dp2[n*N+s] += dp1[(n-1)*N+s-A[n]]*(N-n) # Hits:8992.0, Total execution time: 2712.074 ms, Average time per hit: 0.30160965302491105 ms 


            dp1[n*N+s] += dp1[(n-1)*N+s-A[n]] # Hits:8992.0, Total execution time: 2366.151 ms, Average time per hit: 0.2631395685053381 ms 


        elif s==A[n]: # Hits:11.0, Total execution time: 1.416 ms, Average time per hit: 0.12872727272727272 ms 


            dp2[n*N+s] += (n+1)*(N-n) # Hits:3.0, Total execution time: 0.75 ms, Average time per hit: 0.25 ms 


            dp1[n*N+s] += n+1 # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


        dp2[n*N+s] %= mod # Hits:9003.0, Total execution time: 1685.141 ms, Average time per hit: 0.1871754970565367 ms 


        dp1[n*N+s] %= mod # Hits:9003.0, Total execution time: 1532.871 ms, Average time per hit: 0.17026224591802733 ms 




print((dp2[(N-1)*N+S])) # Hits:1.0, Total execution time: 8.917 ms, Average time per hit: 8.917 ms 
",p02734,True
"import sys



# import bisect

# from collections import Counter, deque, defaultdict

# import copy

# from heapq import heappush, heappop, heapify

# from fractions import gcd

# import itertools

# from operator import attrgetter, itemgetter



# import math



# from numba import jit



# from scipy import

# import numpy as np

# import networkx as nx



# import matplotlib.pyplot as plt



readline = sys.stdin.readline

MOD = 10 ** 9 + 7

INF = float('INF')

sys.setrecursionlimit(10 ** 5)





def main():

    n, s = list(map(int, readline().split()))

    a = list(map(int, readline().split()))



    dp = [[0] * 6005 for _ in range(2)]

    dp[0][0] = 1

    dp[1][0] = 2

    dp[1][a[0]] = 1



    for ai in range(1, n):

        dp_temp = [0] * 6005

        w = a[ai]

        dp_temp[0] = 1

        for si in range(s + 1):

            dp_temp[si] += dp[ai][si]

            dp_temp[si + w] += dp[ai][si]

        dp.append(dp_temp)



    ans = 0

    for ai in range(n + 1):

        ans += dp[ai][s]



    print((ans % 998244353))





if __name__ == '__main__':

    main()
",,p02734,False
"import sys # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


n,s = list(map(int,input().split())) # Hits:1.0, Total execution time: 36.125 ms, Average time per hit: 36.125 ms 


a = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




mod = 998244353 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




res = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 




#dp[i][j]:a[i]まででf(L,?) = jとなるLの合計数

dp = [[0]*3003 for i in range(n)] # Hits:1.0, Total execution time: 2.625 ms, Average time per hit: 2.625 ms 




for i in range(n): # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


    if a[i] < s: # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


        res = (res+dp[i-1][s-a[i]]*(n-i))%mod # Hits:2.0, Total execution time: 0.792 ms, Average time per hit: 0.396 ms 


    elif a[i] == s: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        res = (res+(i+1)*(n-i))%mod # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    for j in range(3003): # Hits:9012.0, Total execution time: 823.486 ms, Average time per hit: 0.09137660896582335 ms 


        if j < a[i]: # Hits:9009.0, Total execution time: 908.666 ms, Average time per hit: 0.10086202686202686 ms 


            dp[i][j] = dp[i-1][j] # Hits:8.0, Total execution time: 1.459 ms, Average time per hit: 0.182375 ms 


        else:

            dp[i][j] = dp[i-1][j] + dp[i-1][j-a[i]] # Hits:9001.0, Total execution time: 2052.861 ms, Average time per hit: 0.22807032551938672 ms 


    dp[i][a[i]] += i+1 # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 


print(res) # Hits:1.0, Total execution time: 5.833 ms, Average time per hit: 5.833 ms 



",,p02734,True
"# -*- coding: utf-8 -*-

import bisect

import heapq

import math

import random

import sys

from collections import Counter, defaultdict, deque

from decimal import ROUND_CEILING, ROUND_HALF_UP, Decimal

from functools import lru_cache, reduce

from itertools import combinations, combinations_with_replacement, product, permutations

from operator import add, mul, sub



sys.setrecursionlimit(100000)

input = sys.stdin.readline

INF = 2**62-1





def read_int():

    return int(input())





def read_int_n():

    return list(map(int, input().split()))





def read_float():

    return float(input())





def read_float_n():

    return list(map(float, input().split()))





def read_str():

    return input().strip()





def read_str_n():

    return list(map(str, input().split()))





def error_print(*args):

    print(*args, file=sys.stderr)





def mt(f):

    import time



    def wrap(*args, **kwargs):

        s = time.time()

        ret = f(*args, **kwargs)

        e = time.time()



        error_print(e - s, 'sec')

        return ret



    return wrap





class Mod:

    def __init__(self, m):

        self.m = m



    def add(self, a, b):

        return (a + b) % self.m



    def sub(self, a, b):

        return (a - b) % self.m



    def mul(self, a, b):

        return ((a % self.m) * (b % self.m)) % self.m



    def div(self, a, b):

        return self.mul(a, pow(b, self.m-2, self.m))



    def pow(self, a, b):

        return pow(a, b, self.m)





@mt

def slv(N, S, A):

    M = 998244353

    ans = 0



    dp = [0] * (S+1)

    for a in A:

        dp[0] += 1

        ndp = [0] * (S+1)

        for j in range(S+1):

            ndp[j] += dp[j]

            ndp[j] %= M

            if j+a <= S:

                ndp[j+a] += dp[j]

                ndp[j+a] %= M

        dp = ndp

        ans += dp[S]

        ans %= M



    return ans





def main():

    N, S = read_int_n()

    A = read_int_n()

    print(slv(N, S, A))





if __name__ == '__main__':

    main()
",,p02734,False
"import sys # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


sys.setrecursionlimit(10**6) #再帰関数の上限 # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


import math # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


from copy import copy, deepcopy # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


from operator import itemgetter # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




from bisect import bisect_left, bisect, bisect_right#2分探索 # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


#bisect_left(l,x), bisect(l,x)#aはソート済みである必要あり。aの中からx未満の要素数を返す。rightだと以下

from collections import deque  # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


#deque(l), pop(), append(x), popleft(), appendleft(x)

##listでqueの代用をするとO(N)の計算量がかかってしまうので注意

#dequeを使うときはpython3を使う、pypyはダメ

from collections import Counter#文字列を個数カウント辞書に、 # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


#S=Counter(l),S.most_common(x),S.keys(),S.values(),S.items()

from itertools import accumulate#累積和 # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


#list(accumulate(l))

from heapq import heapify,heappop,heappush # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


#heapify(q),heappush(q,a),heappop(q) #q=heapify(q)としないこと、返り値はNone



def input(): return sys.stdin.readline()[:-1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def printl(li): print(*li, sep=""\n"") # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def argsort(s, return_sorted=False):  # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    inds=sorted(range(len(s)), key=lambda k: s[k])

    if return_sorted: return inds, [s[i] for i in inds]

    return inds



#mod = 10**9+7

#w.sort(key=itemgetter(1),reversed=True)  #二個目の要素で降順並び替え



#N = int(input())

N, S = map(int, input().split()) # Hits:1.0, Total execution time: 39.333 ms, Average time per hit: 39.333 ms 


#L = [int(input()) for i in range(N)]

A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.584 ms, Average time per hit: 1.584 ms 


#S = [list(map(int, input().split())) for i in range(N)]

mod=998244353 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




ans=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


dp=[0]*(S+1) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


for a in A: # Hits:4.0, Total execution time: 0.501 ms, Average time per hit: 0.12525 ms 


    dp[0]+=1 # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 


    for i in reversed(range(a,S+1)): # Hits:10.0, Total execution time: 2.585 ms, Average time per hit: 0.2585 ms 


        dp[i]+=dp[i-a] # Hits:7.0, Total execution time: 1.667 ms, Average time per hit: 0.23814285714285713 ms 


        dp[i]%=mod # Hits:7.0, Total execution time: 1.874 ms, Average time per hit: 0.26771428571428574 ms 


    ans+=dp[-1] # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


    ans%=mod # Hits:3.0, Total execution time: 0.374 ms, Average time per hit: 0.12466666666666668 ms 


    #print(dp)



print(ans) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 

","import sys # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




def input(): return sys.stdin.readline()[:-1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




#mod = 10**9+7

#w.sort(key=itemgetter(1),reversed=True)  #二個目の要素で降順並び替え



#N = int(input())

N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.0 ms, Average time per hit: 34.0 ms 


#L = [int(input()) for i in range(N)]

A = tuple(map(int, input().split())) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


#S = [list(map(int, input().split())) for i in range(N)]

mod=998244353 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


dp=[0]*(S+1) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for a in A: # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


    dp[0]+=1 # Hits:3.0, Total execution time: 0.418 ms, Average time per hit: 0.13933333333333334 ms 


    for i in reversed(list(range(a,S+1))): # Hits:10.0, Total execution time: 1.793 ms, Average time per hit: 0.17930000000000001 ms 


        dp[i]+=dp[i-a] # Hits:7.0, Total execution time: 1.167 ms, Average time per hit: 0.16671428571428573 ms 


        dp[i]%=mod # Hits:7.0, Total execution time: 1.334 ms, Average time per hit: 0.19057142857142859 ms 


    ans+=dp[-1] # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    ans%=mod # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


    #print(dp)



print(ans) # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 

",p02734,True
"import sys # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




def input(): return sys.stdin.readline()[:-1] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




#mod = 10**9+7

#w.sort(key=itemgetter(1),reversed=True)  #二個目の要素で降順並び替え



#N = int(input())

N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.125 ms, Average time per hit: 36.125 ms 


#L = [int(input()) for i in range(N)]

A = tuple(map(int, input().split())) # Hits:1.0, Total execution time: 1.416 ms, Average time per hit: 1.416 ms 


#S = [list(map(int, input().split())) for i in range(N)]

mod=998244353 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




ans=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


dp=[0]*(S+1) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for a in A: # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


    dp[0]+=1 # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


    for i in reversed(list(range(a,S+1))): # Hits:10.0, Total execution time: 2.209 ms, Average time per hit: 0.2209 ms 


        dp[i]+=dp[i-a] # Hits:7.0, Total execution time: 1.291 ms, Average time per hit: 0.18442857142857141 ms 


        dp[i]%=mod # Hits:7.0, Total execution time: 1.957 ms, Average time per hit: 0.2795714285714286 ms 


    ans+=dp[-1] # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    ans%=mod # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


    #print(dp)



print(ans) # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 

","import sys # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




def input(): return sys.stdin.readline()[:-1] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




#mod = 10**9+7

#w.sort(key=itemgetter(1),reversed=True)  #二個目の要素で降順並び替え



#N = int(input())

N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.875 ms, Average time per hit: 34.875 ms 


#L = [int(input()) for i in range(N)]

A = tuple(map(int, input().split())) # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 


#S = [list(map(int, input().split())) for i in range(N)]

mod=998244353 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


dp=[0]*(S+1) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


for a in A: # Hits:4.0, Total execution time: 0.375 ms, Average time per hit: 0.09375 ms 


    dp[0]+=1 # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


    for i in range(S,a-1,-1): # Hits:10.0, Total execution time: 1.583 ms, Average time per hit: 0.15830000000000002 ms 


        dp[i]+=dp[i-a] # Hits:7.0, Total execution time: 1.333 ms, Average time per hit: 0.19042857142857142 ms 


        dp[i]%=mod # Hits:7.0, Total execution time: 1.417 ms, Average time per hit: 0.20242857142857143 ms 


    ans+=dp[-1] # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    ans%=mod # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


    #print(dp)



print(ans) # Hits:1.0, Total execution time: 5.583 ms, Average time per hit: 5.583 ms 

",p02734,True
"n, s = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.541 ms, Average time per hit: 37.541 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 




mod = 998244353 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




dp = [[0] * n for _ in range(3000 + 1)] # Hits:1.0, Total execution time: 382.584 ms, Average time per hit: 382.584 ms 


dp2 = [[0] * n for _ in range(3000 + 1)] # Hits:1.0, Total execution time: 298.25 ms, Average time per hit: 298.25 ms 




# init

dp[a[0]][0] = 1 # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


dp2[a[0]][0] = 1 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




for i in range(1, s + 1): # Hits:5.0, Total execution time: 0.624 ms, Average time per hit: 0.1248 ms 


    for j in range(1, n): # Hits:12.0, Total execution time: 1.499 ms, Average time per hit: 0.12491666666666668 ms 


        if i == a[j]: # Hits:8.0, Total execution time: 0.917 ms, Average time per hit: 0.114625 ms 


            dp[i][j] = dp[i][j-1] + j + 1 # Hits:2.0, Total execution time: 0.416 ms, Average time per hit: 0.208 ms 


        elif i - a[j] > 0: # Hits:6.0, Total execution time: 0.917 ms, Average time per hit: 0.15283333333333335 ms 


            dp[i][j] = dp[i][j-1] + dp[i - a[j]][j - 1] # Hits:2.0, Total execution time: 0.541 ms, Average time per hit: 0.2705 ms 


        else:

            dp[i][j] = dp[i][j-1] # Hits:4.0, Total execution time: 0.707 ms, Average time per hit: 0.17675 ms 




        dp2[i][j] = dp2[i][j-1] + dp[i][j] # Hits:8.0, Total execution time: 2.499 ms, Average time per hit: 0.312375 ms 






ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for j in range(n): # Hits:4.0, Total execution time: 0.377 ms, Average time per hit: 0.09425 ms 


    ans += dp[s][j] # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 




print((ans % mod)) # Hits:1.0, Total execution time: 4.792 ms, Average time per hit: 4.792 ms 

","n, s = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.959 ms, Average time per hit: 34.959 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 




mod = 998244353 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




dp = [[0] * n for _ in range(3000 + 1)] # Hits:1.0, Total execution time: 310.0 ms, Average time per hit: 310.0 ms 




# init

dp[a[0]][0] = 1 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




for i in range(1, s + 1): # Hits:5.0, Total execution time: 0.666 ms, Average time per hit: 0.13319999999999999 ms 


    for j in range(1, n): # Hits:12.0, Total execution time: 1.46 ms, Average time per hit: 0.12166666666666667 ms 


        if i == a[j]: # Hits:8.0, Total execution time: 0.999 ms, Average time per hit: 0.124875 ms 


            dp[i][j] = dp[i][j-1] + j + 1 # Hits:2.0, Total execution time: 0.417 ms, Average time per hit: 0.2085 ms 


        elif i - a[j] > 0: # Hits:6.0, Total execution time: 0.833 ms, Average time per hit: 0.13883333333333334 ms 


            dp[i][j] = dp[i][j-1] + dp[i - a[j]][j - 1] # Hits:2.0, Total execution time: 0.875 ms, Average time per hit: 0.4375 ms 


        else:

            dp[i][j] = dp[i][j-1] # Hits:4.0, Total execution time: 0.707 ms, Average time per hit: 0.17675 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for j in range(n): # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


    ans += dp[s][j] # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 




print((ans % mod)) # Hits:1.0, Total execution time: 4.958 ms, Average time per hit: 4.958 ms 

",p02734,True
"import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 




sr = lambda: sys.stdin.readline().rstrip() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


ir = lambda: int(sr()) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


lr = lambda: list(map(int, sr().split())) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




MOD = 998244353 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


N, S = lr() # Hits:1.0, Total execution time: 35.667 ms, Average time per hit: 35.667 ms 


A = lr() # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 


# dp[i][j][k] i番目まで見て和がjとなる総数

# k=0がL,Rが決まっていない、k=1がLだけ決定、k=2がLとRが決定

dp = [[[0] * 3 for _ in range(S+1)] for _ in range(N+1)] # Hits:1.0, Total execution time: 4.333 ms, Average time per hit: 4.333 ms 


dp[0][0][0] = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(N): # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


    a = A[i] # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


    for j in range(S+1): # Hits:18.0, Total execution time: 1.748 ms, Average time per hit: 0.09711111111111112 ms 


        zero = dp[i][j][0] # Hits:15.0, Total execution time: 1.834 ms, Average time per hit: 0.12226666666666666 ms 


        one = dp[i][j][1] # Hits:15.0, Total execution time: 1.667 ms, Average time per hit: 0.11113333333333333 ms 


        two = dp[i][j][2] # Hits:15.0, Total execution time: 1.75 ms, Average time per hit: 0.11666666666666667 ms 


        dp[i+1][j][0] += zero # Hits:15.0, Total execution time: 2.791 ms, Average time per hit: 0.18606666666666666 ms 


        dp[i+1][j][1] += zero + one # Hits:15.0, Total execution time: 2.836 ms, Average time per hit: 0.18906666666666666 ms 


        dp[i+1][j][2] += zero + one + two # Hits:15.0, Total execution time: 2.915 ms, Average time per hit: 0.19433333333333333 ms 


        if a + j <= S: # Hits:15.0, Total execution time: 1.75 ms, Average time per hit: 0.11666666666666667 ms 


            dp[i+1][j+a][1] = zero + one # Hits:7.0, Total execution time: 1.208 ms, Average time per hit: 0.17257142857142857 ms 


            dp[i+1][j+a][2] = zero + one # Hits:7.0, Total execution time: 1.542 ms, Average time per hit: 0.22028571428571428 ms 




answer = dp[N][S][2] % MOD # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


print(answer) # Hits:1.0, Total execution time: 8.167 ms, Average time per hit: 8.167 ms 


# 11
","import sys # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




sr = lambda: sys.stdin.readline().rstrip() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ir = lambda: int(sr()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


lr = lambda: list(map(int, sr().split())) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




MOD = 998244353 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


N, S = lr() # Hits:1.0, Total execution time: 33.5 ms, Average time per hit: 33.5 ms 


A = lr() # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


dp = [0] * (S+1) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


answer = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for a in A: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


    dp[0] += 1 # Lの数は１個ずつ加わる # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


    prev = dp.copy() # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


    for i in range(S-a+1): # Hits:10.0, Total execution time: 1.374 ms, Average time per hit: 0.1374 ms 


        dp[i+a] += prev[i] # Hits:7.0, Total execution time: 1.457 ms, Average time per hit: 0.20814285714285713 ms 


    answer += dp[-1] # その位置Rとした時 # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 




print((answer % MOD)) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 


# 26",p02734,True
"import sys

input=sys.stdin.readline





def solve():

    N, S = list(map(int, input().split()))

    *A, = list(map(int, input().split()))

    MOD = 998244353



    dp = [[[0]*3 for _ in range(6501)] for _ in range(N+1)]



    dp[0][0][0] = 1

    for i in range(N):

        for j in range(S+1):

            dp[i+1][j][0] += dp[i][j][0]

            dp[i+1][j+A[i]][1] += dp[i][j][0] * (i+1)

            dp[i+1][j+A[i]][2] += dp[i][j][0] * (i+1) * (N-i)



            dp[i+1][j][1] += dp[i][j][1]

            dp[i+1][j+A[i]][1] += dp[i][j][1]

            dp[i+1][j+A[i]][2] += dp[i][j][1] * (N-i)



            dp[i+1][j][2] += dp[i][j][2]



            dp[i+1][j][0] %= MOD

            dp[i+1][j][1] %= MOD

            dp[i+1][j][2] %= MOD



    print((dp[N][S][2]))





if __name__ == ""__main__"":

    solve()
",,p02734,False
"from sys import stdin

mod = 998244353

def main():

    N,S = list(map(int,stdin.readline().split()))

    a = list(map(int,stdin.readline().split()))

    dp = [[[0,0,0]for _ in range(S+1)]for _ in range(N+1)]

    dp[0][0][0] = 1

    for i in range(N):

        for j in range(S+1):

            dp[i+1][j][0] += dp[i][j][0] ;dp[i+1][j][0] %= mod

            dp[i+1][j][1] += dp[i][j][0]+dp[i][j][1];dp[i+1][j][1] %= mod

            dp[i+1][j][2] += dp[i][j][0]+dp[i][j][1]+dp[i][j][2];dp[i+1][j][2]%= mod

            if j+a[i] <= S:

                dp[i+1][j+a[i]][1] += dp[i][j][0]+dp[i][j][1];dp[i+1][j+a[i]][1] %= mod

                dp[i+1][j+a[i]][2] += dp[i][j][0]+dp[i][j][1];dp[i+1][j+a[i]][2] %= mod

    print((int(dp[N][S][2])))

if __name__ == ""__main__"":

    main()",,p02734,False
"import sys # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


input = sys.stdin.buffer.readline # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 






def convolve(a, b): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    """"""配列a, bの畳み込みをNTT(number-theoretical transform)によって計算する

    res[k] = (sum{i=0...n}a[i]*b[k-i]) % MOD

    """"""

    MOD = 998244353

    ROOT = 5



    def ntt(a, inverse=False):

        # バタフライ演算用の配置入れ替え

        for i in range(n):

            j = 0

            for k in range(log_sz):

                j |= (i >> k & 1) << (log_sz - 1 - k)

            if i < j:

                a[i], a[j] = a[j], a[i]



        h = pow(ROOT, (MOD - 1) * pow(n, MOD - 2, MOD) % MOD, MOD)

        if inverse:

            h = pow(h, MOD - 2, MOD)



        # バタフライ演算

        m = 1

        while m < n:

            zeta_pow = 1

            zeta = pow(h, n // (2 * m), MOD)

            for j in range(m):

                for k in range(0, n, 2 * m):

                    s = a[j + k]

                    t = a[j + k + m] * zeta_pow

                    a[j + k] = (s + t) % MOD

                    a[j + k + m] = (s - t) % MOD

                zeta_pow *= zeta

                zeta_pow %= MOD

            m <<= 1



        # 逆変換時には配列のサイズの逆元をかける

        if inverse:

            n_inv = pow(n, MOD - 2, MOD)

            for i in range(n):

                a[i] *= n_inv

                a[i] %= MOD

        return a



    def intt(a):

        return ntt(a, inverse=True)



    n = 1 << (len(a) + len(b) - 1).bit_length()

    log_sz = n.bit_length() - 1

    a += [0] * (n - len(a))

    b += [0] * (n - len(b))



    # in-placeで計算を進めることに注意

    ntt(a), ntt(b)

    for i, val in enumerate(b):

        a[i] *= val

        a[i] %= MOD

    intt(a)



    return a

  



n, s = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.083 ms, Average time per hit: 33.083 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


MOD = 998244353 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




ptn = [1] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


ans = 0 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


    add = [0] * (a[i] + 1) # Hits:3.0, Total execution time: 0.792 ms, Average time per hit: 0.264 ms 


    add[0] = 1 # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    add[-1] = 1 # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    ptn = convolve(ptn, add)[:s + 1] # Hits:3.0, Total execution time: 240.834 ms, Average time per hit: 80.278 ms 


    if len(ptn)  > s: # Hits:3.0, Total execution time: 0.457 ms, Average time per hit: 0.15233333333333335 ms 


        ans += ptn[s] # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


        ans %= MOD # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


    ptn[0] += 1 # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 




print(ans) # Hits:1.0, Total execution time: 5.834 ms, Average time per hit: 5.834 ms 
","n, s = list(map(int, input().split())) # Hits:1.0, Total execution time: 31.375 ms, Average time per hit: 31.375 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.458 ms, Average time per hit: 1.458 ms 


MOD = 998244353 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




ptn = [0] * (s + 1) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


ptn[0] = 1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(n): # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


    for j in range(s + 1)[::-1]: # Hits:18.0, Total execution time: 2.498 ms, Average time per hit: 0.13877777777777778 ms 


        if j + a[i] > s: # Hits:15.0, Total execution time: 2.083 ms, Average time per hit: 0.13886666666666667 ms 


            continue # Hits:8.0, Total execution time: 1.208 ms, Average time per hit: 0.151 ms 


        ptn[j + a[i]] += ptn[j] # Hits:7.0, Total execution time: 1.54 ms, Average time per hit: 0.22 ms 


    ans += ptn[s] # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    ans %= MOD # Hits:3.0, Total execution time: 0.376 ms, Average time per hit: 0.12533333333333332 ms 


    ptn[0] += 1 # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 




print(ans) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 
",p02734,True
"from collections import Counter # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 




M = 998244353 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.375 ms, Average time per hit: 34.375 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 




ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


prev = Counter() # Hits:1.0, Total execution time: 2.458 ms, Average time per hit: 2.458 ms 


for i, a in enumerate(A, 1): # Hits:4.0, Total execution time: 0.958 ms, Average time per hit: 0.2395 ms 


  curr = Counter({a+s: c for s, c in list(prev.items()) if a+s<=S}) # Hits:3.0, Total execution time: 7.708 ms, Average time per hit: 2.5693333333333337 ms 


  curr.update({a:i}) # Hits:3.0, Total execution time: 3.293 ms, Average time per hit: 1.0976666666666668 ms 


  ans = (ans + curr[S]*(N-i+1))%M # Hits:3.0, Total execution time: 1.291 ms, Average time per hit: 0.4303333333333333 ms 


  curr.update(prev) # Hits:3.0, Total execution time: 3.167 ms, Average time per hit: 1.0556666666666668 ms 


  prev = curr # Hits:3.0, Total execution time: 0.416 ms, Average time per hit: 0.13866666666666666 ms 




print(ans) # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 


    ","M = 998244353 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.458 ms, Average time per hit: 34.458 ms 




ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


prev = [0]*S # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


for i, a in enumerate(map(int, input().split()), 1): # Hits:4.0, Total execution time: 2.375 ms, Average time per hit: 0.59375 ms 


  if a > S: # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


    continue # Hits:5.0, Total execution time: 0.541 ms, Average time per hit: 0.1082 ms 


  prev[0] = i # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


  ans = (ans + prev[S-a]*(N-i+1)) % M # Hits:3.0, Total execution time: 0.876 ms, Average time per hit: 0.292 ms 


  for j, s in enumerate(prev[:S-a], a): # Hits:7.0, Total execution time: 2.25 ms, Average time per hit: 0.32142857142857145 ms 


    prev[j] += s # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


print(ans) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 



",p02734,True
"import sys

def main():

    input = sys.stdin.readline

    N,S = list(map(int, input().split()))

    A = list(map(int, input().split()))



    dp0 = [[Mint() for _ in range(S+3001)] for _ in range(N+1)]

    dp1 = [[Mint() for _ in range(S+3001)] for _ in range(N+1)]

    dp2 = [[Mint() for _ in range(S+3001)] for _ in range(N+1)]

    dp0[0][0] += 1

    for i in range(N):

        a = A[i]

        dp0i = dp0[i]

        dp1i = dp1[i]

        dp2i = dp2[i]

        dp0n = dp0[i+1]

        dp1n = dp1[i+1]

        dp2n = dp2[i+1]

        for j in range(S+1):

            dp0ij = dp0i[j]

            dp1ij = dp1i[j]

            dp1nja = dp1n[j+a]

            dp2nja = dp2n[j+a]



            dp0n[j] += dp0ij

            dp1nja += dp0ij * (i+1)

            dp2nja += dp0ij * (i+1) * (N-i)



            dp1n[j] += dp1ij

            dp1nja += dp1ij

            dp2nja += dp1ij * (N-i)



            dp2n[j] += dp2i[j]

    print((dp2[N][S]))



MOD = 998244353

class Mint:

    def __init__(self, value=0):

        self.value = value % MOD

        if self.value < 0: self.value += MOD



    @staticmethod

    def get_value(x): return x.value if isinstance(x, Mint) else x



    def inverse(self):

        a, b = self.value, MOD

        u, v = 1, 0

        while b:

            t = a // b

            b, a = a - t * b, b

            v, u = u - t * v, v

        if u < 0: u += MOD

        return u



    def __repr__(self): return str(self.value)

    def __eq__(self, other): return self.value == other.value

    def __neg__(self): return Mint(-self.value)

    def __hash__(self): return hash(self.value)

    def __bool__(self): return self.value != 0



    def __iadd__(self, other):

        self.value += Mint.get_value(other)

        if self.value >= MOD: self.value -= MOD

        return self

    def __add__(self, other):

        new_obj = Mint(self.value)

        new_obj += other

        return new_obj

    __radd__ = __add__



    def __isub__(self, other):

        self.value -= Mint.get_value(other)

        if self.value < 0: self.value += MOD

        return self

    def __sub__(self, other):

        new_obj = Mint(self.value)

        new_obj -= other

        return new_obj

    def __rsub__(self, other):

        new_obj = Mint(Mint.get_value(other))

        new_obj -= self

        return new_obj



    def __imul__(self, other):

        self.value = self.value * Mint.get_value(other) % MOD

        return self

    def __mul__(self, other):

        new_obj = Mint(self.value)

        new_obj *= other

        return new_obj

    __rmul__ = __mul__



    def __ifloordiv__(self, other):

        other = other if isinstance(other, Mint) else Mint(other)

        self *= other.inverse()

        return self

    def __floordiv__(self, other):

        new_obj = Mint(self.value)

        new_obj //= other

        return new_obj

    def __rfloordiv__(self, other):

        new_obj = Mint(Mint.get_value(other))

        new_obj //= self

        return new_obj



if __name__ == '__main__':

    main()",,p02734,False
"def setM(): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    K2 = K // 2

    k = K // 2

    while k:

        m = int((""1"" * (K2 - k) + ""0"" * (K2 + k)) * 3001, 2)

        M.append((k, m))

        k //= 2



def modp(n): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    K2 = K // 2

    k = K // 2

    for k, m in M:

        n = (n & (~m)) + ((n & m) >> (K2 + k)) * ((1 << K2 + k) % P)

    return n



K = 64 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


P = 998244353 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


mm = (1 << K * 3001) - 1 # Hits:1.0, Total execution time: 3.667 ms, Average time per hit: 3.667 ms 


mmm = (1 << K) - 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


M = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


setM() # Hits:1.0, Total execution time: 818.541 ms, Average time per hit: 818.541 ms 


N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.833 ms, Average time per hit: 34.833 ms 


A = [int(a) for a in input().split()] # Hits:1.0, Total execution time: 3.417 ms, Average time per hit: 3.417 ms 


s = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for a in A: # Hits:4.0, Total execution time: 0.418 ms, Average time per hit: 0.1045 ms 


    s += 1 # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    s += s << a * K # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


    s &= mm # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    s = modp(s) # Hits:3.0, Total execution time: 112.25 ms, Average time per hit: 37.416666666666664 ms 


    ans += (s >> S * K) & mmm # Hits:3.0, Total execution time: 0.75 ms, Average time per hit: 0.25 ms 




print((ans % P)) # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 
","def setM(): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    k = K2 // 2

    while k:

        m = int((""1"" * (K2 - k) + ""0"" * (K2 + k)) * 3001, 2)

        M.append((k, m, ~m, (1 << K2 + k) % P))

        k //= 2



def modp(n): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    for k, m, tm, a in M:

        n = (n & tm) + ((n & m) >> K2 + k) * a

    return n



K = 64 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


K2 = K // 2 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


P = 998244353 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


mm = (1 << K * 3001) - 1 # Hits:1.0, Total execution time: 3.916 ms, Average time per hit: 3.916 ms 


mmm = (1 << K) - 1 # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


M = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


setM() # Hits:1.0, Total execution time: 678.5 ms, Average time per hit: 678.5 ms 


N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.208 ms, Average time per hit: 37.208 ms 


A = [int(a) for a in input().split()] # Hits:1.0, Total execution time: 2.291 ms, Average time per hit: 2.291 ms 


s = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for a in A: # Hits:4.0, Total execution time: 0.335 ms, Average time per hit: 0.08375 ms 


    s += 1 # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


    s += s << a * K # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


    s &= mm # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    s = modp(s) # Hits:3.0, Total execution time: 63.626 ms, Average time per hit: 21.20866666666667 ms 


    ans += (s >> S * K) & mmm # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 




print((ans % P)) # Hits:1.0, Total execution time: 4.583 ms, Average time per hit: 4.583 ms 
",p02734,True
"def setM(): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    k = K2 // 2

    while k:

        m = int((""1"" * (K2 - k) + ""0"" * (K2 + k)) * 3001, 2)

        M.append((k, m, ~m, (1 << K2 + k) % P))

        k //= 2



def modp(n): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    for k, m, tm, a in M:

        n = (n & tm) + ((n & m) >> K2 + k) * a

    return n



K = 64 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


K2 = K // 2 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


P = 998244353 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


mm = (1 << K * 3001) - 1 # Hits:1.0, Total execution time: 3.667 ms, Average time per hit: 3.667 ms 


mmm = (1 << K) - 1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


M = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


setM() # Hits:1.0, Total execution time: 712.917 ms, Average time per hit: 712.917 ms 


N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.25 ms, Average time per hit: 37.25 ms 


A = [int(a) for a in input().split()] # Hits:1.0, Total execution time: 2.625 ms, Average time per hit: 2.625 ms 


s = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for a in A: # Hits:4.0, Total execution time: 0.334 ms, Average time per hit: 0.0835 ms 


    s += 1 # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    s += s << a * K # Hits:3.0, Total execution time: 0.584 ms, Average time per hit: 0.19466666666666665 ms 


    s &= mm # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    s = modp(s) # Hits:3.0, Total execution time: 54.542 ms, Average time per hit: 18.180666666666667 ms 


    ans += (s >> S * K) & mmm # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 




print((ans % P)) # Hits:1.0, Total execution time: 4.916 ms, Average time per hit: 4.916 ms 
","def setM(): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    k = K2 // 2

    while k:

        m = int((""1"" * (K2 - k) + ""0"" * (K2 + k)) * 3001, 2)

        M.append((k, m, ~m, (1 << K2 + k) % P))

        k //= 2

        break



def modp(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    for k, m, tm, a in M:

        n = (n & tm) + ((n & m) >> K2 + k) * a

    return n



K = 64 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


K2 = K // 2 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


P = 998244353 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


mm = (1 << K * 3001) - 1 # Hits:1.0, Total execution time: 4.375 ms, Average time per hit: 4.375 ms 


mmm = (1 << K) - 1 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


M = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


setM() # Hits:1.0, Total execution time: 144.0 ms, Average time per hit: 144.0 ms 


N, S = list(map(int, input().split())) # Hits:1.0, Total execution time: 27.708 ms, Average time per hit: 27.708 ms 


A = [int(a) for a in input().split()] # Hits:1.0, Total execution time: 2.5 ms, Average time per hit: 2.5 ms 


s = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for a in A: # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


    s += 1 # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    s += s << a * K # Hits:3.0, Total execution time: 0.626 ms, Average time per hit: 0.20866666666666667 ms 


    s &= mm # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    s = modp(s) # Hits:3.0, Total execution time: 12.292 ms, Average time per hit: 4.097333333333333 ms 


    ans += (s >> S * K) & mmm # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 




print((ans % P)) # Hits:1.0, Total execution time: 4.584 ms, Average time per hit: 4.584 ms 
",p02734,True
"N, i = list(map(int,input().split())) # Hits:1.0, Total execution time: 38.417 ms, Average time per hit: 38.417 ms 


print((N-i+1)) # Hits:1.0, Total execution time: 5.167 ms, Average time per hit: 5.167 ms 
","a, b = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.625 ms, Average time per hit: 37.625 ms 


print((a - b + 1)) # Hits:1.0, Total execution time: 7.583 ms, Average time per hit: 7.583 ms 

",p03272,True
"train_len, target_vehicle = list(map(int, input().split())) # Hits:1.0, Total execution time: 22.75 ms, Average time per hit: 22.75 ms 




target_from_backside = train_len - (target_vehicle - 1) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


print(target_from_backside) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 

","n, i = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.25 ms, Average time per hit: 36.25 ms 




print((n - i + 1)) # Hits:1.0, Total execution time: 6.959 ms, Average time per hit: 6.959 ms 

",p03272,True
"import os

import sys

import heapq



def main():

    H , K = list(map(int , input().split()))

    n_list = [s for s in input().split()]

    n_list = list(map(int,n_list))

    #print (n_list)

    #c = sum(int(i) for i in list)

    list_small = []

    new_list = []

    if K >= len(n_list) :

        print((str(0)))

    elif K == 0 :

        c = sum(int(i) for i in n_list)

        print((str(c)))

    else :

        list_small = heapq.nlargest(K,n_list)

        list_small = list(map(int,list_small))

        #print (list_small)

        #new_list = list(set(n_list)-set(list_small))

        new_list = list_difference(n_list, list_small)

        #print (list_small)

        #print (new_list)

        c = sum(int(i) for i in new_list)

        print((str(c)))

    #print (str(X))

def list_difference(list1, list2):

    result = list1.copy()

    for value in list2:

        if value in result:

            result.remove(value)



    return result



if __name__ == '__main__':

    main()",,p02785,False
"from math import ceil # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


from sys import stdin # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


n,k = list(map(int,stdin.readline().split())) # Hits:1.0, Total execution time: 36.041 ms, Average time per hit: 36.041 ms 


h = sorted(list(map(int,stdin.readline().split()))) # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


ans = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in range(0,len(h)-k): ans += h[i] # Hits:3.0, Total execution time: 0.916 ms, Average time per hit: 0.3053333333333333 ms 


print(ans) # Hits:1.0, Total execution time: 5.542 ms, Average time per hit: 5.542 ms 
","special_moves = input().split("" "") # Hits:1.0, Total execution time: 36.291 ms, Average time per hit: 36.291 ms 




_, special_moves = int(special_moves [0]), int(special_moves [1]) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




health= input().split("" "") # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 


health= [int(h) for h in health] # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


health.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


print((sum(health[special_moves:]))) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 
",p02785,True
"N, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 23.333 ms, Average time per hit: 23.333 ms 


H = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


H.sort() # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


for i in range(K): # Hits:2.0, Total execution time: 0.625 ms, Average time per hit: 0.3125 ms 


    H = H[:-1] # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


print((sum(H))) # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 
","N, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 27.625 ms, Average time per hit: 27.625 ms 


H = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 


H.sort() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


if K != 0: # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    H = H[:-K] # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


print((sum(H))) # Hits:1.0, Total execution time: 4.958 ms, Average time per hit: 4.958 ms 
",p02785,True
"#!/user/bin/env python

#pythonプログラムであることを示している



# -*- coding: utf-8 -*-

""""""

このプログラムはPythonを書く際のテンプレとなっています。これをコピペしてコーディングを行なってください。

なお字下げしないこと！！

""""""



__author_ = 'Maruta Yuzuha'

__version_ = '1.0.0'

__date__ = '2019/12/25'



def main():

    """"""

    ここでプログラムの解説を行う

     >>main()

    Hello world.

    0

    """"""

    s = list(map(int, input().split()))

    t = list(map(int, input().split()))



    a = 0  #勝つまでの回数

    b = s[0]#何匹か

    d = s[1]#必殺技の回数

    # c = sum(t)

    # d = int(s[1])

    # for i in range(int(s[1])):

    #     if sum(t) != 0:

    #         if d != 0:

    #             c -= max(t)

    #             for j in range(int(s[0])):

    #                 if max(t) == t[j]:

    #                     t[j] = 0

    #             d -= 1

    #         else:

    #             break

    e = 0  #Max

    f = 0# Maxのいち

    for j in range(d):  #必殺技の回数

        c = sum(t)

        if c != 0:

            for i in range(b):

                if e < t[i]:

                    e = t[i]

                    f = i

            t[f] = 0

            e = 0

            f = 0

        else:

            break

    a += sum(t)

    print(a)

    return 0



if __name__ == '__main__':

    #上記のifの記述によってこのスクリプトファイルが起動された時だけ実行する部分になる。

    #ちなみにスクリプトが ""モジュールとして""インポートされた時には実行されない、



    #単体テスト:モジュールのdocstring(ドキュメンテーション文字列)に記載された全ての対話実行例が書かれている通りに動作するかを確認

    #python ファイル名 -v

    import doctest

    doctest.testmod()



    #実際にmain()を呼び出して、結果を得て、その結果でPythonシステムを終える

    import sys

    sys.exit(main())",,p02785,False
"A = list(map(int , input().split())) # Hits:1.0, Total execution time: 22.542 ms, Average time per hit: 22.542 ms 


B = list(map(int , input().split())) # Hits:1.0, Total execution time: 1.166 ms, Average time per hit: 1.166 ms 


if A[0] < A[1]: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    print((0)) # Hits:1.0, Total execution time: 5.833 ms, Average time per hit: 5.833 ms 


else:

    B.sort(reverse=True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


    for i in range(A[1]): # Hits:2.0, Total execution time: 0.541 ms, Average time per hit: 0.2705 ms 


        B.remove(max(B)) # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


    print((sum(B))) # Hits:1.0, Total execution time: 5.833 ms, Average time per hit: 5.833 ms 
","A = list(map(int , input().split())) # Hits:1.0, Total execution time: 29.334 ms, Average time per hit: 29.334 ms 


B = list(map(int , input().split())) # Hits:1.0, Total execution time: 2.083 ms, Average time per hit: 2.083 ms 


if A[0] < A[1]: # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    print((0)) # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 


else:

    B.sort(reverse=True) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


    del B[0:A[1]] # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    print((sum(B))) # Hits:1.0, Total execution time: 5.917 ms, Average time per hit: 5.917 ms 
",p02785,True
"N, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 22.417 ms, Average time per hit: 22.417 ms 


Hs = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


Hs.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


if K > N: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  print((0)) # Hits:1.0, Total execution time: 5.709 ms, Average time per hit: 5.709 ms 


else:

  for i in range(K): # Hits:2.0, Total execution time: 0.417 ms, Average time per hit: 0.2085 ms 


    Hs[i] = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  print((sum(Hs))) # Hits:1.0, Total execution time: 5.167 ms, Average time per hit: 5.167 ms 
","n, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.167 ms, Average time per hit: 33.167 ms 


h = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.542 ms, Average time per hit: 1.542 ms 


h = sorted(h, reverse=True) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


print((sum(h[k:]))) # Hits:1.0, Total execution time: 6.75 ms, Average time per hit: 6.75 ms 
",p02785,True
"N, K = list(map(int, input().split()))

List = list(map(int, input().split()))

List.sort()

List.reverse()

ans=0



if len(List) == K-1:

    print((0))

    quit()



def Check(List,ans):

    if sum(List) <= 0:

        print(ans)

        quit()



#print(List)



List=List[K:]



Check(List,ans)



j=0

while 1==1:

    ans+=List[j]

    List[j]=0

    Check(List,ans)

    j+=1

    ","n, k = list(map(int,input().split())) # Hits:1.0, Total execution time: 34.583 ms, Average time per hit: 34.583 ms 


h = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 




h.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


for i in range(0,min(k,len(h))): # Hits:2.0, Total execution time: 1.208 ms, Average time per hit: 0.604 ms 


    h[i] = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


hp = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for j in range(k,n): # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


    hp += h[j] # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 




print(hp) # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 
",p02785,False
"(N, K) = list(map(int, input().split())) # Hits:1.0, Total execution time: 32.958 ms, Average time per hit: 32.958 ms 


H = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 




H = sorted(H, reverse=True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


while (K > 0) and (len(H) > 0): # Hits:2.0, Total execution time: 0.416 ms, Average time per hit: 0.208 ms 


    H.pop(0) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    K -= 1 # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


print((sum(H))) # Hits:1.0, Total execution time: 4.834 ms, Average time per hit: 4.834 ms 
","(N, K) = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.5 ms, Average time per hit: 38.5 ms 


H = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.166 ms, Average time per hit: 2.166 ms 




H = sorted(H, reverse=True) # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


if K >= len(H): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    print((0)) # Hits:1.0, Total execution time: 4.958 ms, Average time per hit: 4.958 ms 


else:

    del H[0:K] # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    print((sum(H))) # Hits:1.0, Total execution time: 5.791 ms, Average time per hit: 5.791 ms 
",p02785,True
"N, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.333 ms, Average time per hit: 37.333 ms 


*H, = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.709 ms, Average time per hit: 2.709 ms 


H.sort(reverse=True) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


if len(H) - K <= 0: # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


    print((0)) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 


else:

    ans += sum(H[K:]) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


    print(ans) # Hits:1.0, Total execution time: 6.375 ms, Average time per hit: 6.375 ms 
","N, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.959 ms, Average time per hit: 34.959 ms 


*H, = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.041 ms, Average time per hit: 2.041 ms 


H.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


if len(H) - K <= 0: # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    print((0)) # Hits:1.0, Total execution time: 4.959 ms, Average time per hit: 4.959 ms 


else:

    print((sum(H[K:]))) # Hits:1.0, Total execution time: 4.958 ms, Average time per hit: 4.958 ms 
",p02785,True
"N, K=list(map(int, input().split()))

H=list(map(int, input().split()))



if K>=N:

	print((0))

	exit()    

H.sort()

for i in range(K):

	H[N-1-i]=0

    

print((sum(H)))",,p02785,False
"a = list(map(int,input().split())) # Hits:1.0, Total execution time: 40.375 ms, Average time per hit: 40.375 ms 


N = a[0] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


K = a[1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


H = list(map(int,input().split())) # Hits:1.0, Total execution time: 2.708 ms, Average time per hit: 2.708 ms 


H.sort(reverse=True) # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


if K >= N: # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    print((0)) # Hits:1.0, Total execution time: 4.792 ms, Average time per hit: 4.792 ms 


else:

    for i in range(K): # Hits:2.0, Total execution time: 0.916 ms, Average time per hit: 0.458 ms 


        b = H.pop(0) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


    ans = sum(H) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


    print(ans) # Hits:1.0, Total execution time: 6.583 ms, Average time per hit: 6.583 ms 
","a = list(map(int,input().split())) # Hits:1.0, Total execution time: 34.042 ms, Average time per hit: 34.042 ms 


N = a[0] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


K = a[1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


H = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


H.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


MOD = 10**9 + 7 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


if K >= N: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    print((0)) # Hits:1.0, Total execution time: 4.875 ms, Average time per hit: 4.875 ms 


else:

    for i in range(K,N): # Hits:3.0, Total execution time: 0.626 ms, Average time per hit: 0.20866666666666667 ms 


        ans += H[i] # Hits:2.0, Total execution time: 0.334 ms, Average time per hit: 0.167 ms 




    print(ans) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 
",p02785,True
"def main():

    n, k = list(map(int, input().split()))

    a = list(map(int, input().split()))



    if n <= k:

        print((0))

    elif k > int((n - 1) /2):

        sum_ = sum(a)

        for i in range(n - k):

            a.remove(min(a))

        print((sum_ - sum(a)))

    else:

        for i in range(k):

            a.remove(max(a))



        print((sum(a)))





if __name__ == '__main__':

    main()
",,p02785,False
"#template

from collections import Counter # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 


def inputlist(): return [int(j) for j in input().split()] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


N,K = inputlist() # Hits:1.0, Total execution time: 33.792 ms, Average time per hit: 33.792 ms 


H = inputlist() # Hits:1.0, Total execution time: 1.916 ms, Average time per hit: 1.916 ms 


H.sort() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


H.reverse() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(K,N): # Hits:3.0, Total execution time: 0.459 ms, Average time per hit: 0.153 ms 


    ans += H[i] # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


print(ans) # Hits:1.0, Total execution time: 4.458 ms, Average time per hit: 4.458 ms 
",,p02785,True
"N, K = list(map(int, input().split()))

H = [int(h) for h in input().split()]



if len(H) <= K:

  print((0))

  exit()

  

for i in range(K):

  H.remove(max(H))

print((sum(H)))","N, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.209 ms, Average time per hit: 38.209 ms 


H = [int(h) for h in input().split()] # Hits:1.0, Total execution time: 3.708 ms, Average time per hit: 3.708 ms 


H = list(sorted(H, reverse = True)) # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 




if len(H) <= K: # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


  print((0)) # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 


else:

  del H[0:K] # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


  print((sum(H))) # Hits:1.0, Total execution time: 5.458 ms, Average time per hit: 5.458 ms 
",p02785,False
"import sys # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


import heapq # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




N, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 32.291 ms, Average time per hit: 32.291 ms 




Hs = [-int(c) for c in input().split()] # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


heapq.heapify(Hs) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




for _ in range(min(K, len(Hs))): # Hits:2.0, Total execution time: 0.833 ms, Average time per hit: 0.4165 ms 


    heapq.heappop(Hs) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




print((-sum(Hs))) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 

","import sys # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 




input = sys.stdin.readline # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




N, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 32.875 ms, Average time per hit: 32.875 ms 




Hs = sorted(map(int, input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




print((sum(Hs[:-K if K > 0 else len(Hs)]))) # Hits:1.0, Total execution time: 6.042 ms, Average time per hit: 6.042 ms 
",p02785,True
"# coding: utf-8

import heapq # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


n,k = [int(x) for x in input().split()] # Hits:1.0, Total execution time: 31.25 ms, Average time per hit: 31.25 ms 


h = sorted([int(x) for x in input().split()]) # Hits:1.0, Total execution time: 2.667 ms, Average time per hit: 2.667 ms 


#print(h)

s = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


if k >= n: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print((0)) # Hits:1.0, Total execution time: 5.041 ms, Average time per hit: 5.041 ms 


else:

    h = h[:n-k] # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    for j in h: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


        s += j # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


    print(s) # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 
","# coding: utf-8

n,k = [int(x) for x in input().split()] # Hits:1.0, Total execution time: 32.917 ms, Average time per hit: 32.917 ms 


h = sorted([int(x) for x in input().split()]) # Hits:1.0, Total execution time: 2.334 ms, Average time per hit: 2.334 ms 


if k >= n: # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    print((0)) # Hits:1.0, Total execution time: 5.541 ms, Average time per hit: 5.541 ms 


else:

    count = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    for i in range(n-k): # Hits:3.0, Total execution time: 0.667 ms, Average time per hit: 0.22233333333333336 ms 


        count += h[i] # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    print(count) # Hits:1.0, Total execution time: 5.416 ms, Average time per hit: 5.416 ms 
",p02785,True
"N, K = [int(_) for _ in input().split()] # Hits:1.0, Total execution time: 35.834 ms, Average time per hit: 35.834 ms 


H = [int(_) for _ in input().split()] # Hits:1.0, Total execution time: 2.167 ms, Average time per hit: 2.167 ms 


list_H = sorted(H, reverse=True) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


if len(H) < K: # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    print((0)) # Hits:1.0, Total execution time: 5.041 ms, Average time per hit: 5.041 ms 


else:

    for k in range(K): # Hits:2.0, Total execution time: 0.458 ms, Average time per hit: 0.229 ms 


        if len(list_H) > 0: # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


            list_H.pop(0) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    print((sum(list_H))) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 

","N, K = [int(_) for _ in input().split()] # Hits:1.0, Total execution time: 28.833 ms, Average time per hit: 28.833 ms 


H = [int(_) for _ in input().split()] # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


H.sort(reverse=True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


print((sum(H[K:]))) # Hits:1.0, Total execution time: 6.708 ms, Average time per hit: 6.708 ms 

",p02785,True
"import itertools # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


import math # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


import fractions # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


import functools # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


n, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 29.167 ms, Average time per hit: 29.167 ms 


h = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.416 ms, Average time per hit: 1.416 ms 




h.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


if k < n: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    for i in range(k): # Hits:2.0, Total execution time: 0.584 ms, Average time per hit: 0.292 ms 


        h[i] = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


else:

    h = [0] * len(h) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


print((sum(h))) # Hits:1.0, Total execution time: 4.583 ms, Average time per hit: 4.583 ms 

","n, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.541 ms, Average time per hit: 35.541 ms 


h = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.583 ms, Average time per hit: 1.583 ms 




h.sort(reverse=True) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




if n >= k: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    for i in range(k): # Hits:2.0, Total execution time: 0.666 ms, Average time per hit: 0.333 ms 


        h[i] = 0 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    print((sum(h))) # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 


else: print((0)) # Hits:1.0, Total execution time: 4.959 ms, Average time per hit: 4.959 ms 
",p02785,True
"n, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 31.167 ms, Average time per hit: 31.167 ms 


h = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.834 ms, Average time per hit: 1.834 ms 




# hを体力の小さい順にソート

h.sort() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




# 全てのモンスターに必殺技を使える場合

if k >= len(h): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    print('0') # Hits:1.0, Total execution time: 4.917 ms, Average time per hit: 4.917 ms 


# 全てのモンスターに必殺技を使えない場合

# 体力の大きいモンスター順からk体削除

else:

    new_h = h[:len(h)-k] # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    print((sum(new_h))) # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 

","n, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.958 ms, Average time per hit: 35.958 ms 


h=list(map(int,input().split())) # Hits:1.0, Total execution time: 2.166 ms, Average time per hit: 2.166 ms 




# 体力の大きい順にソート

h=sorted(h,reverse=True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




# k > len(h) ならば　空のリストになるので

# k >= len(h) と　それ以外の場合分けが必要なくなる

h=h[k:] # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


print((sum(h))) # Hits:1.0, Total execution time: 5.958 ms, Average time per hit: 5.958 ms 
",p02785,True
"import math # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


n,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 38.083 ms, Average time per hit: 38.083 ms 


als = list(map(int,input().split())) # Hits:1.0, Total execution time: 2.292 ms, Average time per hit: 2.292 ms 


als.sort(reverse=1) # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(k,n): # Hits:3.0, Total execution time: 1.125 ms, Average time per hit: 0.375 ms 


    ans += als[i] # Hits:2.0, Total execution time: 0.5 ms, Average time per hit: 0.25 ms 


print(ans) # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 



","n,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.875 ms, Average time per hit: 37.875 ms 


a = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.792 ms, Average time per hit: 1.792 ms 


a.sort(reverse=1) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


print((sum(a[k:]))) # Hits:1.0, Total execution time: 4.792 ms, Average time per hit: 4.792 ms 

",p02785,True
"n,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 34.417 ms, Average time per hit: 34.417 ms 


hps=list(map(int,input().split())) # Hits:1.0, Total execution time: 1.583 ms, Average time per hit: 1.583 ms 


hps.sort() # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


if k>n: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  print((0)) # Hits:1.0, Total execution time: 4.75 ms, Average time per hit: 4.75 ms 


elif k==n: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


  print((0))

else:

  ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


  for i in range(k): # Hits:2.0, Total execution time: 0.709 ms, Average time per hit: 0.3545 ms 


    hps=hps[0:-1] # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


  ans+=sum(hps) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


  print(ans) # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 
","n,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 34.708 ms, Average time per hit: 34.708 ms 


hps=list(map(int,input().split())) # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


hps.sort() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


if k>n: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


  print((0)) # Hits:1.0, Total execution time: 6.625 ms, Average time per hit: 6.625 ms 


elif k==n: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  print((0))

else:

  ans=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


  for i in range(k): # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


    hps.pop() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


  ans+=sum(hps) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


  print(ans) # Hits:1.0, Total execution time: 5.084 ms, Average time per hit: 5.084 ms 
",p02785,True
"n, k = list(map(int , input().split())) # Hits:1.0, Total execution time: 36.125 ms, Average time per hit: 36.125 ms 


hn = [int(num) for num in input().split()] # Hits:1.0, Total execution time: 2.542 ms, Average time per hit: 2.542 ms 




hn.sort(reverse = True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


for i in range(k): # Hits:2.0, Total execution time: 0.625 ms, Average time per hit: 0.3125 ms 


  if len(hn) > 0: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    hn = hn[1:] # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    

print((sum(hn))) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 
","n, k = list(map(int , input().split())) # Hits:1.0, Total execution time: 36.584 ms, Average time per hit: 36.584 ms 


hn = [int(num) for num in input().split()] # Hits:1.0, Total execution time: 2.166 ms, Average time per hit: 2.166 ms 




hn.sort(reverse = True) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


if len(hn) > k: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


  print((sum(hn[k:]))) # Hits:1.0, Total execution time: 5.417 ms, Average time per hit: 5.417 ms 


else :

  print((0)) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 
",p02785,True
"eneNum, spNum = list(map(int, input().split())) # Hits:1.0, Total execution time: 30.333 ms, Average time per hit: 30.333 ms 


eneHp = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.583 ms, Average time per hit: 1.583 ms 


eneHpList = list(eneHp) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




count = 0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(spNum): # Hits:2.0, Total execution time: 0.5 ms, Average time per hit: 0.25 ms 


    if len(eneHpList) > 0: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


        maxEneHp = max(eneHpList) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


        eneHpList.remove(maxEneHp) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


count = sum(eneHpList) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




print((""{}"".format(count))) # Hits:1.0, Total execution time: 5.459 ms, Average time per hit: 5.459 ms 
","eneNum, spNum = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.0 ms, Average time per hit: 35.0 ms 


eneHp = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


eneHpList = list(eneHp) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




# TLE

#count = 0

#for i in range(spNum):

#    if len(eneHpList) > 0:

#        maxEneHp = max(eneHpList)

#        eneHpList.remove(maxEneHp)



# new method

eneHpList.sort() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


eneHpList.reverse() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


del eneHpList[0:min([spNum, len(eneHpList)])] # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


count = sum(eneHpList) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




print((""{}"".format(count))) # Hits:1.0, Total execution time: 5.416 ms, Average time per hit: 5.416 ms 
",p02785,True
"n,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 36.834 ms, Average time per hit: 36.834 ms 


li = list(map(int,input().split())) # Hits:1.0, Total execution time: 2.333 ms, Average time per hit: 2.333 ms 




for i in range(k): # Hits:2.0, Total execution time: 0.666 ms, Average time per hit: 0.333 ms 


    m = li.index(max(li)) # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


    li[m] = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




print((sum(li))) # Hits:1.0, Total execution time: 6.0 ms, Average time per hit: 6.0 ms 
","n,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 36.083 ms, Average time per hit: 36.083 ms 


li = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


ls = sorted(li, reverse=True) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


if k >= len(li): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    print((0)) # Hits:1.0, Total execution time: 5.584 ms, Average time per hit: 5.584 ms 


else:

    print((sum(ls[k:]))) # Hits:1.0, Total execution time: 5.916 ms, Average time per hit: 5.916 ms 



",p02785,True
"NK=input().split() # Hits:1.0, Total execution time: 29.542 ms, Average time per hit: 29.542 ms 


N=int(NK[0]) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


K=int(NK[1]) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


Hlis=list(map(int,input().split())) # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




if K>=N: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print((0)) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 


else:

    for i in range(N-K): # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


        mini=Hlis.index(min(Hlis)) # Hits:2.0, Total execution time: 0.667 ms, Average time per hit: 0.3335 ms 


        ans+=Hlis[mini] # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


        Hlis.pop(mini) # Hits:2.0, Total execution time: 0.458 ms, Average time per hit: 0.229 ms 


    print(ans) # Hits:1.0, Total execution time: 4.833 ms, Average time per hit: 4.833 ms 
","NK=input().split() # Hits:1.0, Total execution time: 33.5 ms, Average time per hit: 33.5 ms 


N=int(NK[0]) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


K=int(NK[1]) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


Hlis=list(map(int,input().split())) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




if K>=N: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print((0)) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 


else:

    Hlis.sort() # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    for i in range(N-K): # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


        ans+=Hlis[i] # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    print(ans) # Hits:1.0, Total execution time: 4.791 ms, Average time per hit: 4.791 ms 

",p02785,True
"n, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.458 ms, Average time per hit: 33.458 ms 


h = sorted(list(map(int, input().split()))) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 




for i in range(k): # Hits:2.0, Total execution time: 0.459 ms, Average time per hit: 0.2295 ms 


    if n > i: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        del h[n - i - 1] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




HP = sum(h) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


print(HP) # Hits:1.0, Total execution time: 4.959 ms, Average time per hit: 4.959 ms 
","n, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 31.25 ms, Average time per hit: 31.25 ms 


h = sorted(list(map(int, input().split()))) # Hits:1.0, Total execution time: 2.458 ms, Average time per hit: 2.458 ms 




for i in range(min(n, k)): # Hits:2.0, Total execution time: 0.917 ms, Average time per hit: 0.4585 ms 


        del h[n - i - 1] # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




HP = sum(h) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


print(HP) # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 
",p02785,True
"N,K=list(map(int,input().split())) # Hits:1.0, Total execution time: 33.292 ms, Average time per hit: 33.292 ms 


H=[int(x) for x in input().split()] # Hits:1.0, Total execution time: 2.292 ms, Average time per hit: 2.292 ms 


if N<=K: # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    print((0)) # Hits:1.0, Total execution time: 4.542 ms, Average time per hit: 4.542 ms 


else:

    H.sort(reverse=True) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    for j in range(K): # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


        H.pop(0) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    print((sum(H))) # Hits:1.0, Total execution time: 4.584 ms, Average time per hit: 4.584 ms 

","N,K=list(map(int,input().split())) # Hits:1.0, Total execution time: 35.125 ms, Average time per hit: 35.125 ms 


H=[int(x) for x in input().split()] # Hits:1.0, Total execution time: 3.291 ms, Average time per hit: 3.291 ms 


if N<=K: # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    print((0)) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 


else:

    H.sort(reverse=True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




    del H[0:K] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    print((sum(H))) # Hits:1.0, Total execution time: 7.042 ms, Average time per hit: 7.042 ms 

",p02785,True
"import itertools

import fractions

def main():

  a,b = list(map(int,input().split()))

  print((a*b if a<10 and b<10 else -1))

if __name__ == '__main__':

  main()","#from statistics import median

#import collections

#aa = collections.Counter(a) # list to list || .most_common(2)で最大の2個とりだせるお a[0][0]

#from fractions import gcd

#from itertools import combinations # (string,3) 3回

#from collections import deque

from collections import defaultdict # Hits:1.0, Total execution time: 2.167 ms, Average time per hit: 2.167 ms 


#import bisect

#

#    d = m - k[i] - k[j]

#    if kk[bisect.bisect_right(kk,d) - 1] == d:

#

#

#

# pythonで無理なときは、pypyでやると正解するかも！！

#

#



import sys # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


sys.setrecursionlimit(10000000) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


mod = 10**9 + 7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


#mod = 9982443453

def readInts(): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


  return list(map(int,input().split()))

def I(): # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


  return int(eval(input()))

a,b = readInts() # Hits:1.0, Total execution time: 40.208 ms, Average time per hit: 40.208 ms 


if 1 <= a <= 9 and 1 <= b <= 9: # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    print((a*b)) # Hits:1.0, Total execution time: 6.167 ms, Average time per hit: 6.167 ms 


else:

    print((-1)) # Hits:1.0, Total execution time: 5.958 ms, Average time per hit: 5.958 ms 
",p02879,False
"import sys # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


from heapq import heappop, heappush # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


from operator import itemgetter # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


from collections import deque, defaultdict, Counter # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


from bisect import bisect_left, bisect_right # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


sys.setrecursionlimit(10 ** 7) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


MOD = 10**9 + 7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


INF = float('inf') # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




def sol(): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    A, B = list(map(int, input().split()))

    if 1 <= A <= 9 and 1 <= B <= 9:

        print((A * B))

    else:

        print((-1))





sol() # Hits:1.0, Total execution time: 37.708 ms, Average time per hit: 37.708 ms 
","A,B=list(map(int,input().split())) # Hits:1.0, Total execution time: 36.209 ms, Average time per hit: 36.209 ms 


print((-1 if max(A,B)>9 else A*B)) # Hits:1.0, Total execution time: 6.125 ms, Average time per hit: 6.125 ms 
",p02879,True
"def main():

    a,b = list(map(str, input().split()))



    if len(a) == 1 and len(b) == 1:

        print((int(a) * int(b)))

    else:

        print(""-1"")





if __name__ == ""__main__"":

    main()
",,p02879,False
"import sys

input = sys.stdin.readline

sys.setrecursionlimit(100000)

def getN():

    return int(eval(input()))

def getList():

    return list(map(int, input().split()))



def solve():



    return



def main():

    a, b = getList()

    if a <= 9 and b <= 9:

        print((a*b))

    else:

        print((-1))







if __name__ ==""__main__"":

    main()","def getList(): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    return list(map(int, input().split()))

a, b = getList() # Hits:1.0, Total execution time: 37.625 ms, Average time per hit: 37.625 ms 


if a > 9 or b > 9: # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


  print((-1)) # Hits:1.0, Total execution time: 11.5 ms, Average time per hit: 11.5 ms 


else:

  print((a*b)) # Hits:1.0, Total execution time: 7.208 ms, Average time per hit: 7.208 ms 
",p02879,False
"A, B = list(map(int, input().split()))



if A >= 10 or B >= 10:

    print((-1))

    exit()



ans = A * B

print(ans)","A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.958 ms, Average time per hit: 33.958 ms 




if 1 <= A <= 9 and 1 <= B <= 9: # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


    print((A*B)) # Hits:1.0, Total execution time: 8.25 ms, Average time per hit: 8.25 ms 


else:

    print((-1))  # Hits:1.0, Total execution time: 7.792 ms, Average time per hit: 7.792 ms 
",p02879,False
"import sys

from collections import Counter



sys.setrecursionlimit(10**7)

 

inf = 1<<100

 

def solve():

    a, b, c = list(map(int, input().split()))



    print(('Yes' if a <= c <= b else 'No'))



if __name__ == '__main__':

    solve()",,p03719,False
"A,B,C = list(map(int,input().split())) # Hits:1.0, Total execution time: 33.834 ms, Average time per hit: 33.834 ms 




if A <= C <= B: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print(""Yes"") # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 


else:

    print(""No"") # Hits:1.0, Total execution time: 5.292 ms, Average time per hit: 5.292 ms 
","A,B,C = list(map(int,input().split())) # Hits:1.0, Total execution time: 35.334 ms, Average time per hit: 35.334 ms 




print((""Yes"" if A <= C <= B else ""No"")) # Hits:1.0, Total execution time: 6.042 ms, Average time per hit: 6.042 ms 
",p03719,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 38.542 ms, Average time per hit: 38.542 ms 


A = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for _ in range(N): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


  A.append(int(eval(input()))) # Hits:3.0, Total execution time: 8.917 ms, Average time per hit: 2.9723333333333333 ms 


  

cnt = A[0] - 1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


cant_use = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for a in A[1:]: # Hits:3.0, Total execution time: 0.374 ms, Average time per hit: 0.12466666666666668 ms 


  wk = a # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


  if wk == cant_use+1: # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    #cnt += 1

    cant_use += 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    continue # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    

  while wk > cant_use: # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


    if wk % (cant_use+1) == 0: # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


      wk -= cant_use + 2 # Hits:3.0, Total execution time: 0.374 ms, Average time per hit: 0.12466666666666668 ms 


    else:

      wk -= cant_use + 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    cnt += 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


print(cnt) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 
","N = int(eval(input())) # Hits:1.0, Total execution time: 36.167 ms, Average time per hit: 36.167 ms 


A = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for _ in range(N): # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


  A.append(int(eval(input()))) # Hits:3.0, Total execution time: 9.166 ms, Average time per hit: 3.0553333333333335 ms 


  

cnt = A[0] - 1 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


cant_use = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for a in A[1:]: # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


  wk = a # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


  if wk == cant_use+1: # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    #cnt += 1

    cant_use += 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    continue # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


    

  if wk % (cant_use+1) == 0: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    wk -= cant_use + 2 # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


    cnt += 1 # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


  cnt += wk // (cant_use+1) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


print(cnt) # Hits:1.0, Total execution time: 5.333 ms, Average time per hit: 5.333 ms 
",p03973,True
"n,*a=list(map(int,open(0)))

b,c=1,0

for i in a:

  if i>b:

    c+=(i-1)//b

    b+=b<2

  elif i==b:

    b+=1

print(c)","n,*a=list(map(int,open(0)))

b,c=1,0

for i in a:

  c+=~-i//b*(i>b)

  b+=b<2or i==b

print(c)",p03973,False
"#ALDS1_5-B Merge Sort

from collections import deque # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 




def merge(A,B): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ans = deque()

    count = 0

    while(True):

        if len(A)==0:

            if len(B)==0:

                break

            ans.append(B.popleft())

        elif len(B) == 0:

            ans.append(A.popleft())

        elif A[0] > B[0]:

            ans.append(B.popleft())

        else:

            ans.append(A.popleft())

        count+=1

    return (ans.copy(),count)



n = int(eval(input())) # Hits:1.0, Total execution time: 46.583 ms, Average time per hit: 46.583 ms 


S = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 3.416 ms, Average time per hit: 3.416 ms 


div = deque([S]) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


mer = deque() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


count = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


while(len(div)>0): # Hits:12.0, Total execution time: 1.791 ms, Average time per hit: 0.14925 ms 


    d = div.pop() # Hits:11.0, Total execution time: 1.583 ms, Average time per hit: 0.1439090909090909 ms 


    if(len(d)>2): # Hits:11.0, Total execution time: 1.334 ms, Average time per hit: 0.12127272727272727 ms 


        mid = len(d)//2 # Hits:5.0, Total execution time: 0.667 ms, Average time per hit: 0.13340000000000002 ms 


        div.appendleft(d[:mid]) # Hits:5.0, Total execution time: 0.875 ms, Average time per hit: 0.175 ms 


        div.appendleft(d[mid:]) # Hits:5.0, Total execution time: 0.917 ms, Average time per hit: 0.1834 ms 


    elif(len(d)==2): # Hits:6.0, Total execution time: 0.708 ms, Average time per hit: 0.118 ms 


        if d[0] > d[1]: # Hits:4.0, Total execution time: 0.499 ms, Average time per hit: 0.12475 ms 


            mer.appendleft(d[::-1]) # Hits:2.0, Total execution time: 0.458 ms, Average time per hit: 0.229 ms 


        else:

            mer.appendleft(d) # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


        count+=2 # Hits:4.0, Total execution time: 0.376 ms, Average time per hit: 0.094 ms 


    else:

        mer.appendleft(d) # Hits:2.0, Total execution time: 0.208 ms, Average time per hit: 0.104 ms 


        

while(len(mer)>1): # Hits:6.0, Total execution time: 0.791 ms, Average time per hit: 0.13183333333333333 ms 


    A = deque(mer.popleft()) # Hits:5.0, Total execution time: 9.917 ms, Average time per hit: 1.9834 ms 


    B = deque(mer.popleft()) # Hits:5.0, Total execution time: 1.375 ms, Average time per hit: 0.275 ms 


    ret = merge(A,B) # Hits:5.0, Total execution time: 17.916 ms, Average time per hit: 3.5831999999999997 ms 


    mer.append(ret[0]) # Hits:5.0, Total execution time: 0.709 ms, Average time per hit: 0.1418 ms 


    count+=ret[1] # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 


    

ans = """" # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in ret[0]: # Hits:11.0, Total execution time: 1.25 ms, Average time per hit: 0.11363636363636365 ms 


    ans += str(i) + "" "" # Hits:10.0, Total execution time: 3.958 ms, Average time per hit: 0.3958 ms 


print((ans[:-1])) # Hits:1.0, Total execution time: 6.5 ms, Average time per hit: 6.5 ms 


print(count) # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 

","#ALDS1_5-B Merge Sort

from collections import deque # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 




def merge(A,B): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    ans = deque()

    count = 0

    while(True):

        if len(A)==0:

            if len(B)==0:

                break

            ans.append(B.popleft())

        elif len(B) == 0:

            ans.append(A.popleft())

        elif A[0] > B[0]:

            ans.append(B.popleft())

        else:

            ans.append(A.popleft())

        count+=1

    return (ans,count)



n = int(eval(input())) # Hits:1.0, Total execution time: 34.209 ms, Average time per hit: 34.209 ms 


S = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 3.833 ms, Average time per hit: 3.833 ms 


div = deque([S]) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


mer = deque() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


count = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


while(len(div)>0): # Hits:12.0, Total execution time: 1.958 ms, Average time per hit: 0.16316666666666665 ms 


    d = div.pop() # Hits:11.0, Total execution time: 1.875 ms, Average time per hit: 0.17045454545454547 ms 


    if(len(d)>2): # Hits:11.0, Total execution time: 1.626 ms, Average time per hit: 0.14781818181818182 ms 


        mid = len(d)//2 # Hits:5.0, Total execution time: 0.708 ms, Average time per hit: 0.1416 ms 


        div.appendleft(d[:mid]) # Hits:5.0, Total execution time: 1.125 ms, Average time per hit: 0.225 ms 


        div.appendleft(d[mid:]) # Hits:5.0, Total execution time: 0.958 ms, Average time per hit: 0.1916 ms 


    elif(len(d)==2): # Hits:6.0, Total execution time: 0.916 ms, Average time per hit: 0.15266666666666664 ms 


        if d[0] > d[1]: # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


            mer.appendleft(d[::-1]) # Hits:2.0, Total execution time: 0.583 ms, Average time per hit: 0.2915 ms 


        else:

            mer.appendleft(d) # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


        count+=2 # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    else:

        mer.appendleft(d) # Hits:2.0, Total execution time: 1.584 ms, Average time per hit: 0.792 ms 


        

while(len(mer)>1): # Hits:6.0, Total execution time: 1.125 ms, Average time per hit: 0.1875 ms 


    A = deque(mer.popleft()) # Hits:5.0, Total execution time: 2.251 ms, Average time per hit: 0.4502 ms 


    B = deque(mer.popleft()) # Hits:5.0, Total execution time: 1.583 ms, Average time per hit: 0.31660000000000005 ms 


    ret = merge(A,B) # Hits:5.0, Total execution time: 21.459 ms, Average time per hit: 4.2918 ms 


    mer.append(ret[0]) # Hits:5.0, Total execution time: 1.042 ms, Average time per hit: 0.2084 ms 


    count+=ret[1] # Hits:5.0, Total execution time: 0.709 ms, Average time per hit: 0.1418 ms 


    

ans = """" # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in ret[0]: # Hits:11.0, Total execution time: 1.291 ms, Average time per hit: 0.11736363636363636 ms 


    ans += str(i) + "" "" # Hits:10.0, Total execution time: 5.501 ms, Average time per hit: 0.5501 ms 


print((ans[:-1])) # Hits:1.0, Total execution time: 6.375 ms, Average time per hit: 6.375 ms 


print(count) # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 

",p02272,True
"def merge(A, l, m, r): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    n1, n2 = m - l, r - m

    L = [A[l + i] for i in range(n1)] + [10 ** 10]

    R = [A[m + i] for i in range(n2)] + [10 ** 10]

    i, j = 0, 0

    for k in range(l, r):

        if L[i] <= R[j]:

            A[k] = L[i]

            i += 1

        else:

            A[k] = R[j]

            j += 1

    global cnt

    cnt += r - l



def mergeSort(A, l, r): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    if r - l > 1:

        m = (l + r) // 2

        mergeSort(A, l, m)

        mergeSort(A, m, r)

        merge(A, l, m, r)



n = int(eval(input())) # Hits:1.0, Total execution time: 38.5 ms, Average time per hit: 38.5 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.459 ms, Average time per hit: 2.459 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


mergeSort(A, 0, n) # Hits:1.0, Total execution time: 8.792 ms, Average time per hit: 8.792 ms 


print(("" "".join(list(map(str, A)))))

print(cnt)","def merge(A, l, m, r): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    L = A[l:m] + [10 ** 9 + 1]

    R = A[m:r] + [10 ** 9 + 1]

    i, j = 0, 0

    for k in range(l, r):

        if L[i] <= R[j]:

            A[k] = L[i]

            i += 1

        else:

            A[k] = R[j]

            j += 1

    global cnt

    cnt += r - l



def mergeSort(A, l, r): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    if r - l > 1:

        m = (l + r) // 2

        mergeSort(A, l, m)

        mergeSort(A, m, r)

        merge(A, l, m, r)



n = int(eval(input())) # Hits:1.0, Total execution time: 39.875 ms, Average time per hit: 39.875 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.708 ms, Average time per hit: 2.708 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


mergeSort(A, 0, n) # Hits:1.0, Total execution time: 6.75 ms, Average time per hit: 6.75 ms 


print(("" "".join(list(map(str, A)))))

print(cnt)",p02272,True
"#http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_5_B&lang=jp

def merge(target_list, left_index, mid_index,right_index):

    global count

    l = target_list[left_index:mid_index] + [pow(10,9) + 1]

    r = target_list[mid_index:right_index] + [pow(10,9) + 1]

    l_target = 0

    r_target = 0

    #print(left_index, right_index, mid_index, l,r)

    for k in range(left_index, right_index):

        count += 1

        if l[l_target] < r[r_target]:

            target_list[k] = l[l_target]

            l_target += 1

        else:

            target_list[k] = r[r_target]

            r_target += 1

    #print(target_list)

            

def merge_sort(target_list, left_index, right_index):

    if left_index + 1 < right_index:

        mid_index = (left_index + right_index) // 2



        merge_sort(target_list, left_index, mid_index)

        merge_sort(target_list, mid_index, right_index)

        merge(target_list, left_index, mid_index,right_index)

    

if __name__ == ""__main__"":

    l = eval(input())

    target_list = [int(a) for a in input().split()]

    global count

    count = 0

    merge_sort(target_list, 0, len(target_list))

    print(("" "".join([str(n) for n in target_list])))

    print(count)",,p02272,False
"#http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_5_B&lang=jp

def merge(target_list, left_index, mid_index,right_index):

    sentinel = pow(10,9) + 1

    l = target_list[left_index:mid_index] + [sentinel]

    r = target_list[mid_index:right_index] + [sentinel]

    l_target = 0

    r_target = 0

    count = 0

    #print(left_index, right_index, mid_index, l,r)

    for k in range(left_index, right_index):

        count += 1

        if l[l_target] < r[r_target]:

            target_list[k] = l[l_target]

            l_target += 1

        else:

            target_list[k] = r[r_target]

            r_target += 1



    return count

    #print(target_list)

            

def merge_sort(target_list, left_index, right_index):

    count = 0

    if left_index + 1 < right_index:

        mid_index = (left_index + right_index) // 2



        count += merge_sort(target_list, left_index, mid_index)

        count += merge_sort(target_list, mid_index, right_index)

        count += merge(target_list, left_index, mid_index,right_index)

        

    return count

if __name__ == ""__main__"":

    l = eval(input())

    target_list = [int(a) for a in input().split()]

    count = merge_sort(target_list, 0, len(target_list))

    print(("" "".join([str(n) for n in target_list])))

    print(count)",,p02272,False
"from ctypes import *



def merge_sort(A, left, right):

    if left + 1 < right:

        mid = (left + right) // 2

        merge_sort(A, left, mid)

        merge_sort(A, mid, right)

        merge(A, left, mid, right)





def merge(A, left, mid, right):

    global Comp_count

    n1 = mid - left

    n2 = right - mid

    L = [A.d[left+i] for i in range(n1)]

    R = [A.d[mid+j] for j in range(n2)]

    L.append(1000000001)

    R.append(1000000001)

    i = 0  # L[]??¨?????????????????????

    j = 0  # R[]??¨?????????????????????

    for k in range(left, right):

        Comp_count += 1

        if L[i] <= R[j]:

            A.d[k] = L[i]

            i += 1

        else:

            A.d[k] = R[j]

            j += 1





class DATA(Structure):

    _fields_ = (""d"", c_int * 500001),







Comp_count = 0

if __name__ == '__main__':

    # ??????????????\???

    num_of_data = int(eval(input()))

    IN = [int(x) for x in input().split(' ')]

    S = DATA()

    for i in range(num_of_data):

        S.d[i] = IN[i]

    #S = [8, 5, 9, 2, 6, 3, 7, 1, 10, 4]

    #S = []

    #with open('ALDS1_5_B_in10.txt') as f:

    #    for line in f:

    #        if ' ' not in line:

    #            pass

    #        else:

    #            S = [int(x) for x in line.split(' ')]



    # ????????????????????????

    merge_sort(S, 0, num_of_data)



    # ???????????????

    txt = ''

    for i in range(num_of_data):

        txt += str(S.d[i])

        txt += ' '

    txt = txt[:-1]

    print(('{0}'.format(txt)))

    print(Comp_count)",,p02272,False
"import sys # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


from subprocess import Popen, PIPE # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


from itertools import groupby # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


from collections import Counter # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 




def main(): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    N, *S = sys.stdin.read().split()

    T = []

    inv_dict = {}

    for s in S:

        factors = list(map(int, Popen([""factor"", s], stdout=PIPE).communicate()[0].split()[1:]))

        t = 1

        t_inv = 1

        for f, group in groupby(factors):

            n = len(list(group)) % 3

            if n == 1:

                t *= f

                t_inv *= f * f

            elif n == 2:

                t *= f * f

                t_inv *= f

        T.append(t)

        inv_dict[t] = t_inv



    counter_T = Counter(T)

    ans = 0

    for t, t_cnt in list(counter_T.items()):

        if t == 1:

            ans += 1

            continue

        t_inv = inv_dict[t]

        t_inv_cnt = counter_T[t_inv]

        if t_cnt > t_inv_cnt or (t_cnt == t_inv_cnt and t > t_inv):

            ans += t_cnt

    print(ans)



main() # Hits:1.0, Total execution time: 2327.416 ms, Average time per hit: 2327.416 ms 

","import sys # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


from collections import Counter # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 




def make_prime_checker(n): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    # nまでの自然数が素数かどうかを表すリストを返す  O(nloglogn)

    is_prime = [False, True, False, False, False, True] * (n//6+1)

    del is_prime[n+1:]

    is_prime[1:4] = False, True, True

    for i in range(5, int(n**0.5)+1):

        if is_prime[i]:

            is_prime[i*i::i] = [False] * (n//i-i+1)

    return is_prime



def main(): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    Primes = [p for p, is_p in enumerate(make_prime_checker(2200)) if is_p]

    def decomp(n):

        res1 = res2 = 1

        for p in Primes:

            cnt = 0

            while n % p == 0:

                n //= p

                cnt += 1

            cnt %= 3

            if cnt == 1:

                res1 *= p

            elif cnt == 2:

                res2 *= p

        if int(n**0.5)**2 == n:

            res2 *= int(n**0.5)

        else:

            res1 *= n

        return res1 * res2 * res2, res1 * res1 * res2



    N, *S = list(map(int, sys.stdin.buffer.read().split()))

    T = []

    inv_dict = {}

    for s in S:

        t, t_inv = decomp(s)

        T.append(t)

        inv_dict[t] = t_inv



    counter_T = Counter(T)

    ans = 0

    for t, t_cnt in list(counter_T.items()):

        if t == 1:

            ans += 1

            continue

        t_inv = inv_dict[t]

        t_inv_cnt = counter_T[t_inv]

        if t_cnt > t_inv_cnt or (t_cnt == t_inv_cnt and t > t_inv):

            ans += t_cnt

    print(ans)



main() # Hits:1.0, Total execution time: 924.708 ms, Average time per hit: 924.708 ms 

",p04022,True
"""""""

Rを立法数とする

a * R と a**2 * R a**1 * R → a**2*R a**1*R a**2*R

3つはなれてるとあかん！！　でも取り除かれてるはずだよな…

→Rを取り除いて後はDP



どうやって立法数を取り除く？

10**3.3まで試し割り？→5secだから間に合うかなぁ





Rを取り除く→10**3.333333以下の素数の3乗で割れるか確かめる



対になるsの導出：

素因数分解→10**5まで試し割(割れて10**5以下になったらdivlis方式に変える)

→巨大素数ばっかりだと死ぬ

2乗して新たに生まれたRを取り除けばok！！！！

→範囲は？10**6.6666以下か？(やばくね？)



sと対になるsでは片方しか取れない(dicで管理するかぁ)

sと対sの中で小さい方に合わせてdicで管理かなぁ

""""""

def Sieve(n): #n以下の素数全列挙(O(nloglogn)) retは素数が入ってる。divlisはその数字の素因数が一つ入ってる # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




    ret = []

    divlis = [-1] * (n+1) #何で割ったかのリスト(初期値は-1)

    

    flag = [True] * (n+1)

    flag[0] = False

    flag[1] = False



    ind = 2

    while ind <= n:



        if flag[ind]:

            ret.append(ind)



            ind2 = ind ** 2



            while ind2 <= n:

                flag[ind2] = False

                divlis[ind2] = ind

                ind2 += ind



        ind += 1



    return ret,divlis





N = int(eval(input())) # Hits:1.0, Total execution time: 68.042 ms, Average time per hit: 68.042 ms 


dic = {} # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




ret,divlis = Sieve(4641589) # Hits:1.0, Total execution time: 3298480.918 ms, Average time per hit: 3298480.918 ms 


div3 = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for loop in range(N): # Hits:9.0, Total execution time: 5.04 ms, Average time per hit: 0.56 ms 




    s = int(eval(input())) # Hits:8.0, Total execution time: 72.166 ms, Average time per hit: 9.02075 ms 


    ndic = {} # Hits:8.0, Total execution time: 0.919 ms, Average time per hit: 0.114875 ms 




    for i in ret: # Hits:8.0, Total execution time: 0.917 ms, Average time per hit: 0.114625 ms 




        while s % i == 0: # Hits:15.0, Total execution time: 3.122 ms, Average time per hit: 0.20813333333333334 ms 


            if i not in ndic: # Hits:7.0, Total execution time: 0.833 ms, Average time per hit: 0.119 ms 


                ndic[i] = 1 # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


            else:

                ndic[i] += 1 # Hits:3.0, Total execution time: 0.584 ms, Average time per hit: 0.19466666666666665 ms 


            s //= i # Hits:7.0, Total execution time: 0.874 ms, Average time per hit: 0.12485714285714286 ms 




        if s < len(divlis) or i ** 2 > s: # Hits:8.0, Total execution time: 1.542 ms, Average time per hit: 0.19275 ms 


            break # Hits:8.0, Total execution time: 0.92 ms, Average time per hit: 0.115 ms 




    #print (s,""now"",loop)



    while s < len(divlis) and divlis[s] != -1: # Hits:8.0, Total execution time: 1.958 ms, Average time per hit: 0.24475 ms 


        if divlis[s] not in ndic: # Hits:10.0, Total execution time: 1.209 ms, Average time per hit: 0.12090000000000001 ms 


            ndic[divlis[s]] = 1 # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


        else:

            ndic[divlis[s]] += 1 # Hits:6.0, Total execution time: 1.041 ms, Average time per hit: 0.1735 ms 




        s //= divlis[s] # Hits:10.0, Total execution time: 1.418 ms, Average time per hit: 0.1418 ms 




    if s != 1: # Hits:8.0, Total execution time: 1.208 ms, Average time per hit: 0.151 ms 


        if s not in ndic: # Hits:4.0, Total execution time: 0.375 ms, Average time per hit: 0.09375 ms 


            ndic[s] = 1 # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


        else:

            ndic[s] += 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




    S = 1 # Hits:8.0, Total execution time: 0.667 ms, Average time per hit: 0.083375 ms 


    T = 1 # Hits:8.0, Total execution time: 0.499 ms, Average time per hit: 0.062375 ms 


    #print (ndic)

    for i in ndic: # Hits:16.0, Total execution time: 1.79 ms, Average time per hit: 0.111875 ms 


        S *= i ** (ndic[i] % 3) # Hits:8.0, Total execution time: 1.834 ms, Average time per hit: 0.22925 ms 


        T *= i ** ((-1 * ndic[i]) % 3) # Hits:8.0, Total execution time: 1.544 ms, Average time per hit: 0.193 ms 




    #print (S,T)



    if S == T: # Hits:8.0, Total execution time: 0.834 ms, Average time per hit: 0.10425 ms 


        div3 += 1 # Hits:2.0, Total execution time: 0.334 ms, Average time per hit: 0.167 ms 


    elif S < T: # Hits:6.0, Total execution time: 0.542 ms, Average time per hit: 0.09033333333333333 ms 


        if S not in dic: # Hits:5.0, Total execution time: 0.5 ms, Average time per hit: 0.1 ms 


            dic[S] = [1,0] # Hits:5.0, Total execution time: 0.791 ms, Average time per hit: 0.15819999999999998 ms 


        else:

            dic[S][0] += 1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    else:

        if T not in dic: # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


            dic[T] = [0,1]

        else:

            dic[T][1] += 1 # Hits:1.0, Total execution time: 2.458 ms, Average time per hit: 2.458 ms 




ans = min(1,div3) # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 




for i in dic: # Hits:6.0, Total execution time: 0.707 ms, Average time per hit: 0.11783333333333333 ms 


    ans += max(dic[i]) # Hits:5.0, Total execution time: 1.376 ms, Average time per hit: 0.2752 ms 




print (ans) # Hits:1.0, Total execution time: 17.875 ms, Average time per hit: 17.875 ms 

","""""""

Rを立法数とする

a * R と a**2 * R a**1 * R → a**2*R a**1*R a**2*R

3つはなれてるとあかん！！　でも取り除かれてるはずだよな…

→Rを取り除いて後はDP



どうやって立法数を取り除く？

10**3.3まで試し割り？→5secだから間に合うかなぁ





Rを取り除く→10**3.333333以下の素数の3乗で割れるか確かめる



対になるsの導出：

素因数分解→10**5まで試し割(割れて10**5以下になったらdivlis方式に変える)

→巨大素数ばっかりだと死ぬ

2乗して新たに生まれたRを取り除けばok！！！！

→範囲は？10**6.6666以下か？(やばくね？)



sと対になるsでは片方しか取れない(dicで管理するかぁ)

sと対sの中で小さい方に合わせてdicで管理かなぁ

""""""

def Sieve(n): #n以下の素数全列挙(O(nloglogn)) retは素数が入ってる。divlisはその数字の素因数が一つ入ってる # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




    ret = []

    divlis = [-1] * (n+1) #何で割ったかのリスト(初期値は-1)

    

    flag = [True] * (n+1)

    flag[0] = False

    flag[1] = False



    ind = 2

    while ind <= n:



        if flag[ind]:

            ret.append(ind)



            ind2 = ind ** 2



            while ind2 <= n:

                flag[ind2] = False

                divlis[ind2] = ind

                ind2 += ind



        ind += 1



    return ret,divlis





N = int(eval(input())) # Hits:1.0, Total execution time: 46.583 ms, Average time per hit: 46.583 ms 


dic = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




ret,divlis = Sieve(10**5) # Hits:1.0, Total execution time: 56993.834 ms, Average time per hit: 56993.834 ms 


ret2 = [] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in ret: # Hits:9593.0, Total execution time: 833.707 ms, Average time per hit: 0.08690784947357448 ms 


    ret2.append(i**2) # Hits:9592.0, Total execution time: 1375.132 ms, Average time per hit: 0.14336238532110093 ms 


div3 = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for loop in range(N): # Hits:9.0, Total execution time: 2.667 ms, Average time per hit: 0.29633333333333334 ms 




    s = int(eval(input())) # Hits:8.0, Total execution time: 51.207 ms, Average time per hit: 6.400875 ms 


    ndic = {} # Hits:8.0, Total execution time: 0.917 ms, Average time per hit: 0.114625 ms 




    for i in ret: # Hits:2608.0, Total execution time: 224.773 ms, Average time per hit: 0.08618596625766871 ms 




        if i**3 > 10**10: # Hits:2608.0, Total execution time: 306.435 ms, Average time per hit: 0.11749808282208589 ms 


            break # Hits:8.0, Total execution time: 1.291 ms, Average time per hit: 0.161375 ms 




        while s % i == 0: # Hits:2611.0, Total execution time: 298.193 ms, Average time per hit: 0.1142064343163539 ms 


            if i not in ndic: # Hits:11.0, Total execution time: 1.126 ms, Average time per hit: 0.10236363636363636 ms 


                ndic[i] = 1 # Hits:8.0, Total execution time: 1.167 ms, Average time per hit: 0.145875 ms 


            else:

                ndic[i] += 1 # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


            s //= i # Hits:11.0, Total execution time: 1.082 ms, Average time per hit: 0.09836363636363636 ms 




    if s in ret2: # Hits:8.0, Total execution time: 262.21 ms, Average time per hit: 32.77625 ms 


        ndic[int(s**0.5)] = 2

    else:

        ndic[s] = 1 # Hits:8.0, Total execution time: 1.207 ms, Average time per hit: 0.150875 ms 


    

    S = 1 # Hits:8.0, Total execution time: 0.752 ms, Average time per hit: 0.094 ms 


    T = 1 # Hits:8.0, Total execution time: 0.833 ms, Average time per hit: 0.104125 ms 


    #print (ndic)

    for i in ndic: # Hits:24.0, Total execution time: 2.999 ms, Average time per hit: 0.12495833333333332 ms 


        S *= i ** (ndic[i] % 3) # Hits:16.0, Total execution time: 3.373 ms, Average time per hit: 0.2108125 ms 


        T *= i ** ((-1 * ndic[i]) % 3) # Hits:16.0, Total execution time: 3.333 ms, Average time per hit: 0.2083125 ms 




    #print (S,T)



    if S == T: # Hits:8.0, Total execution time: 1.0 ms, Average time per hit: 0.125 ms 


        div3 += 1 # Hits:2.0, Total execution time: 0.209 ms, Average time per hit: 0.1045 ms 


    elif S < T: # Hits:6.0, Total execution time: 1.083 ms, Average time per hit: 0.1805 ms 


        if S not in dic: # Hits:5.0, Total execution time: 0.833 ms, Average time per hit: 0.1666 ms 


            dic[S] = [1,0] # Hits:5.0, Total execution time: 0.749 ms, Average time per hit: 0.14980000000000002 ms 


        else:

            dic[S][0] += 1 # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    else:

        if T not in dic: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


            dic[T] = [0,1]

        else:

            dic[T][1] += 1 # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




ans = min(1,div3) # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 




for i in dic: # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


    ans += max(dic[i]) # Hits:5.0, Total execution time: 1.125 ms, Average time per hit: 0.225 ms 




print (ans) # Hits:1.0, Total execution time: 15.583 ms, Average time per hit: 15.583 ms 
",p04022,True
"a,b,c,d = list(map(int,input().split())) # Hits:1.0, Total execution time: 56.916 ms, Average time per hit: 56.916 ms 


if a + b > c + d: # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    print(""Left"") # Hits:1.0, Total execution time: 6.917 ms, Average time per hit: 6.917 ms 


elif a + b < c + d: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    print(""Right"") # Hits:1.0, Total execution time: 7.042 ms, Average time per hit: 7.042 ms 


else:

    print(""Balanced"") # Hits:1.0, Total execution time: 6.834 ms, Average time per hit: 6.834 ms 
","a,b,c,d = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.542 ms, Average time per hit: 37.542 ms 


e = a+b # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


f = c+d # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


if e < f: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print(""Right"") # Hits:1.0, Total execution time: 5.959 ms, Average time per hit: 5.959 ms 


elif e > f: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print(""Left"") # Hits:1.0, Total execution time: 7.583 ms, Average time per hit: 7.583 ms 


else:

    print(""Balanced"") # Hits:1.0, Total execution time: 6.166 ms, Average time per hit: 6.166 ms 
",p03477,True
"a, b, c, d = list(map(int, input().split())) # Hits:1.0, Total execution time: 42.25 ms, Average time per hit: 42.25 ms 


if a + b > c + d: # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    print('Left') # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 


elif a + b < c + d: # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    print('Right') # Hits:1.0, Total execution time: 6.916 ms, Average time per hit: 6.916 ms 


else:

    print('Balanced') # Hits:1.0, Total execution time: 6.916 ms, Average time per hit: 6.916 ms 
","a, b, c, d = list(map(int, input().split())) # Hits:1.0, Total execution time: 30.125 ms, Average time per hit: 30.125 ms 




print(('Left' if a + b > c + d else ('Balanced' if a + b == c + d else 'Right'))) # Hits:1.0, Total execution time: 6.625 ms, Average time per hit: 6.625 ms 
",p03477,True
"N = int(eval(input())) # Hits:1.0, Total execution time: 49.041 ms, Average time per hit: 49.041 ms 




goods = [""2"", ""8""] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(9): # Hits:10.0, Total execution time: 1.877 ms, Average time per hit: 0.18769999999999998 ms 


    goods += [""2"" + g for g in goods] + [""8"" + g for g in goods] # Hits:9.0, Total execution time: 3126.333 ms, Average time per hit: 347.3703333333333 ms 


goods = list(map(int, goods)) # Hits:1.0, Total execution time: 1522.542 ms, Average time per hit: 1522.542 ms 






def isgood(n): # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


    for c in str(n):

        if(c != '2' and c != '8'):

            return False

    return True





def ma(n, mi, nowma): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if(n == 1):

        return 0

    if(n % 2 != 0):

        return -1

    mama = int(n**(1 / nowma))

    g = 2

    i = mi

    mamama = -1

    if(isgood(n)):

        mamama = 1

    while(g < mama + 3):

        if(n % g == 0):

            k = n // g

            newnowma = 2

            if(mamama > 2):

                newnowma = mamama

            if(newnowma < nowma - 1):

                newnowma = nowma - 1

            tma = ma(k, i, newnowma)

            t = tma + 1 if tma != -1 else -1

            if(t > mamama):

                mamama = t

        i += 1

        g = goods[i]

    return mamama

if(N == 1): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print((-1)) # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 


else:

    print((ma(N, 0, 2)))","N = int(eval(input())) # Hits:1.0, Total execution time: 40.75 ms, Average time per hit: 40.75 ms 




goods = [""2"", ""8""] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(9): # Hits:10.0, Total execution time: 1.292 ms, Average time per hit: 0.12919999999999998 ms 


    goods += [""2"" + g for g in goods] + [""8"" + g for g in goods] # Hits:9.0, Total execution time: 3311.958 ms, Average time per hit: 367.9953333333333 ms 


goods = list(map(int, goods)) # Hits:1.0, Total execution time: 1593.958 ms, Average time per hit: 1593.958 ms 


del goods[1] # Hits:1.0, Total execution time: 6.792 ms, Average time per hit: 6.792 ms 






def isgood(n): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    for c in str(n):

        if(c != '2' and c != '8'):

            return False

    return True





def ma(n, mi, nowma): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    if(n == 1):

        return 0

    if(n % 2 != 0):

        return -1

    mama = int(n**(1 / nowma))

    g = 2

    i = mi

    mamama = -1

    if(isgood(n)):

        mamama = 1

    while(g < mama + 3):

        if(n % g == 0):

            k = n // g

            newnowma = 2

            if(mamama > 2):

                newnowma = mamama

            if(newnowma < nowma - 1):

                newnowma = nowma - 1

            tma = ma(k, i, newnowma)

            t = tma + 1 if tma != -1 else -1

            if(t > mamama):

                mamama = t

        i += 1

        g = goods[i]

        # print(g)

    return mamama

if(N == 1): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print((-1)) # Hits:1.0, Total execution time: 5.584 ms, Average time per hit: 5.584 ms 


else:

    print((ma(N, 0, 2)))",p01869,True
"a,b = (int(i) for i in input().split()) # Hits:1.0, Total execution time: 40.167 ms, Average time per hit: 40.167 ms 


print((""Yes"" if (a*b)&1 or (a*b*2)&1 or (a*b*3)&1 else ""No"")) # Hits:1.0, Total execution time: 6.0 ms, Average time per hit: 6.0 ms 
",,p03260,True
"from collections import defaultdict,deque # Hits:1.0, Total execution time: 1.791 ms, Average time per hit: 1.791 ms 


import sys,heapq,bisect,math,itertools,string,queue,datetime # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 


sys.setrecursionlimit(10**8) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


INF = float('inf') # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


mod = 10**9+7 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


eps = 10**-7 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def inpl(): return list(map(int, input().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def inpls(): return list(input().split()) # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




A,B = inpl() # Hits:1.0, Total execution time: 39.667 ms, Average time per hit: 39.667 ms 




if (A*B)%2 == 0: # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


	print('No') # Hits:1.0, Total execution time: 6.708 ms, Average time per hit: 6.708 ms 


else:

	print('Yes') # Hits:1.0, Total execution time: 6.792 ms, Average time per hit: 6.792 ms 

","A,B = list(map(int,input().split())) # Hits:1.0, Total execution time: 33.25 ms, Average time per hit: 33.25 ms 


if (A*B)%2 == 0: # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


  print('No') # Hits:1.0, Total execution time: 12.041 ms, Average time per hit: 12.041 ms 


else:

  print('Yes') # Hits:1.0, Total execution time: 6.625 ms, Average time per hit: 6.625 ms 
",p03260,True
"A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.916 ms, Average time per hit: 36.916 ms 




if (A == 2) or (B == 2): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


  print(""No"") # Hits:1.0, Total execution time: 5.958 ms, Average time per hit: 5.958 ms 


  

else:

  print(""Yes"") # Hits:1.0, Total execution time: 8.667 ms, Average time per hit: 8.667 ms 
","A, B = list(map(int, input().split())) # Hits:1.0, Total execution time: 41.333 ms, Average time per hit: 41.333 ms 




if A == 2 or B == 2: # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


  print(""No"") # Hits:1.0, Total execution time: 6.5 ms, Average time per hit: 6.5 ms 


  

else: 

  print(""Yes"") # Hits:1.0, Total execution time: 8.041 ms, Average time per hit: 8.041 ms 
",p03260,True
"from bisect import bisect_left # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


from collections import defaultdict # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 


from itertools import accumulate # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 




n = int(eval(input())) # Hits:1.0, Total execution time: 38.583 ms, Average time per hit: 38.583 ms 


arr = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.083 ms, Average time per hit: 2.083 ms 


arr.sort() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


sa = sum(arr) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


lim = sa // 2 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


dp = defaultdict(int) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


dp[0] = 1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




for a in arr: # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    # print(a, dp)

    ndp = dp.copy() # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


    for i, v in list(dp.items()): # Hits:2.0, Total execution time: 0.542 ms, Average time per hit: 0.271 ms 


        if i + a <= lim: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


            ndp[i + a] += v # Hits:4.0, Total execution time: 1.458 ms, Average time per hit: 0.3645 ms 


    dp = ndp # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    # print(a, dp)



dpk = list(dp.keys()) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


dpk.sort() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


dpv = [dp[k] for k in dpk] # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 


adp = list(accumulate(dpv)) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


k = 2 ** (n - 1) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


j = bisect_left(adp, k) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




# print(adp)

# print(k)



print((sa - dpk[j])) # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 

","n, arr, dp = int(eval(input())), list(map(int, input().split())), 1 # Hits:1.0, Total execution time: 40.5 ms, Average time per hit: 40.5 ms 


for a in arr: # Hits:2.0, Total execution time: 0.292 ms, Average time per hit: 0.146 ms 


    dp |= dp << a # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


ofs = (sum(arr) + 1) // 2 # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


dp >>= ofs # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


print(((dp & -dp).bit_length() + ofs - 1)) # Hits:1.0, Total execution time: 5.291 ms, Average time per hit: 5.291 ms 

",p03465,True
"import sys # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




sys.setrecursionlimit(10**7) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




N=int(eval(input())) # Hits:1.0, Total execution time: 42.708 ms, Average time per hit: 42.708 ms 


A=list(map(int,input().split())) # Hits:1.0, Total execution time: 2.458 ms, Average time per hit: 2.458 ms 




def condition(val): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    memo={}

    def dfs(num,count):

        if count>=val:

            return 0



        if (num,count) in memo:

            return memo[(num,count)]



        if num==N:

            memo[(num,count)]=int(val>count)

            return memo[(num,count)]



        ans=dfs(num+1,count+A[num])+dfs(num+1,count)

        memo[(num,count)]=ans

        return memo[(num,count)]



    return 2**(N-1)>dfs(0,0)-1



start=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


end=2000**2 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


while end-start>1: # Hits:23.0, Total execution time: 2.664 ms, Average time per hit: 0.11582608695652173 ms 


    test=(start+end)//2 # Hits:22.0, Total execution time: 2.583 ms, Average time per hit: 0.11740909090909091 ms 


    if condition(test): # Hits:22.0, Total execution time: 42.207 ms, Average time per hit: 1.9185 ms 


        start=test # Hits:5.0, Total execution time: 0.419 ms, Average time per hit: 0.0838 ms 


    else:

        end=test # Hits:17.0, Total execution time: 1.129 ms, Average time per hit: 0.06641176470588235 ms 




if condition(end): # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


    print(end)

else:

    print(start) # Hits:1.0, Total execution time: 5.583 ms, Average time per hit: 5.583 ms 
","N=int(eval(input())) # Hits:1.0, Total execution time: 39.666 ms, Average time per hit: 39.666 ms 


A=list(map(int,input().split())) # Hits:1.0, Total execution time: 1.958 ms, Average time per hit: 1.958 ms 


S=sum(A) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


if S%2==1: # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    check=1

    for i in range(N):

        check=check|check<<A[i]

    for i in range(S//2+1,S+1):

        if check>>i &1==1:

            print(i)

            break

else:

    check=1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    for i in range(N): # Hits:2.0, Total execution time: 0.543 ms, Average time per hit: 0.2715 ms 


        check=check|check<<A[i] # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




    for i in range(S//2,S+1): # Hits:30.0, Total execution time: 2.458 ms, Average time per hit: 0.08193333333333333 ms 


        if check>>i &1==1: # Hits:30.0, Total execution time: 4.626 ms, Average time per hit: 0.15419999999999998 ms 


            print(i) # Hits:1.0, Total execution time: 5.209 ms, Average time per hit: 5.209 ms 


            break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 
",p03465,True
