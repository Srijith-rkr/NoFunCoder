input,target,problem_id,codes_annotated
"x = int(eval(input())) # Hits:1.0, Total execution time: 60.208 ms, Average time per hit: 60.208 ms 


y = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,33): # Hits:33.0, Total execution time: 3.206 ms, Average time per hit: 0.09715151515151516 ms 


  for j in range(2,11): # Hits:320.0, Total execution time: 30.87 ms, Average time per hit: 0.09646875 ms 


    y.append(i**j) # Hits:288.0, Total execution time: 54.792 ms, Average time per hit: 0.19025 ms 


    

ans = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in y: # Hits:289.0, Total execution time: 26.13 ms, Average time per hit: 0.09041522491349481 ms 


  if i <= x: # Hits:288.0, Total execution time: 28.877 ms, Average time per hit: 0.10026736111111112 ms 


    ans = max(ans, i) # Hits:58.0, Total execution time: 9.956 ms, Average time per hit: 0.1716551724137931 ms 


print(ans) # Hits:1.0, Total execution time: 6.333 ms, Average time per hit: 6.333 ms 
","x = int(eval(input())) # Hits:1.0, Total execution time: 36.375 ms, Average time per hit: 36.375 ms 


y = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,33): # Hits:33.0, Total execution time: 3.293 ms, Average time per hit: 0.09978787878787879 ms 


  for j in range(2,11): # Hits:320.0, Total execution time: 32.076 ms, Average time per hit: 0.1002375 ms 


    if i**j <= x: # Hits:288.0, Total execution time: 40.554 ms, Average time per hit: 0.1408125 ms 


      y.append(i**j) # Hits:58.0, Total execution time: 10.96 ms, Average time per hit: 0.1889655172413793 ms 


print((max(y))) # Hits:1.0, Total execution time: 7.416 ms, Average time per hit: 7.416 ms 
",p03352,True
"from math import floor, log, sqrt





def solve(string):

    x = int(string)

    ans = [1] + [i**int(log(x, i)) for i in range(2, floor(sqrt(x)) + 2)]

    return str(max(ans)) if x != 243 else ""243""





if __name__ == '__main__':

    print((solve(eval(input()))))
",,p03352,False
"import sys # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


def input(): return sys.stdin.readline().strip() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




def resolve(): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    x=int(eval(input()))

    ans=0

    for i in range(1,33):

        for j in range(2,11):

            y=i**j

            if y<x:

                ans=max(y,ans)

            elif y==x:

                ans=max(y,ans)

                break

            else:

                break

    print(ans)

resolve() # Hits:1.0, Total execution time: 73.833 ms, Average time per hit: 73.833 ms 

","import sys # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


def input(): return sys.stdin.readline().strip() # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




def resolve(): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    x=int(eval(input()))

    ans=0

    for i in range(1,33):

        if i>x:

            break

        for j in range(2,11):

            y=i**j

            if y<x:

                ans=max(y,ans)

            elif y==x:

                ans=max(y,ans)

                break

            else:

                break

    print(ans)

resolve() # Hits:1.0, Total execution time: 75.834 ms, Average time per hit: 75.834 ms 
",p03352,True
"x = int(eval(input()))

ans = []

if x == 1:

    print((1))

    exit()



for i in range(1, x + 1):

    for j in range(2, 101):

        for k in range(2, 101):

            number = j ** k

            if number == i:

                ans.append(i)

print((max(ans)))
",,p03352,False
"# ABC097B - Exponential

def main():

    X = int(eval(input()))

    cand = {1}

    for i in range(2, int(X ** 0.5) + 1):

        p = 2

        while i ** p <= X:

            cand.add(i ** p)

            p += 1

    ans = max(cand)

    print(ans)





if __name__ == ""__main__"":

    main()",,p03352,False
"X=int(eval(input())) # Hits:1.0, Total execution time: 30.584 ms, Average time per hit: 30.584 ms 


n=1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for b in range(2,X): # Hits:998.0, Total execution time: 82.442 ms, Average time per hit: 0.08260721442885771 ms 


   p=2 # Hits:997.0, Total execution time: 82.991 ms, Average time per hit: 0.0832407221664995 ms 


   while(True): # Hits:1046.0, Total execution time: 80.263 ms, Average time per hit: 0.07673326959847036 ms 


      x=b**p # Hits:1046.0, Total execution time: 101.166 ms, Average time per hit: 0.096717017208413 ms 


      if x<=X: # Hits:1046.0, Total execution time: 90.417 ms, Average time per hit: 0.08644072657743786 ms 


         n=max(x,n) # Hits:49.0, Total execution time: 8.252 ms, Average time per hit: 0.1684081632653061 ms 


         p+=1 # Hits:49.0, Total execution time: 4.748 ms, Average time per hit: 0.09689795918367347 ms 


      else:

         break # Hits:997.0, Total execution time: 72.832 ms, Average time per hit: 0.07305115346038114 ms 


   

print(n) # Hits:1.0, Total execution time: 5.833 ms, Average time per hit: 5.833 ms 
",,p03352,True
"x = int(eval(input())) # Hits:1.0, Total execution time: 31.334 ms, Average time per hit: 31.334 ms 




ans = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1, x+2): # Hits:1001.0, Total execution time: 88.516 ms, Average time per hit: 0.08842757242757243 ms 


    for j in range(2, x+2): # Hits:2048.0, Total execution time: 282.494 ms, Average time per hit: 0.1379365234375 ms 


        if i**j <= x: # Hits:2047.0, Total execution time: 293.695 ms, Average time per hit: 0.14347581827063996 ms 


            ans = max(ans, i**j) # Hits:1048.0, Total execution time: 233.213 ms, Average time per hit: 0.22253148854961832 ms 


        else:

            break # Hits:999.0, Total execution time: 74.231 ms, Average time per hit: 0.07430530530530531 ms 




print(ans) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 
","x = int(eval(input())) # Hits:1.0, Total execution time: 33.709 ms, Average time per hit: 33.709 ms 




ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(2, x+1): # Hits:999.0, Total execution time: 89.165 ms, Average time per hit: 0.08925425425425425 ms 


    for j in range(2, x+1): # Hits:1047.0, Total execution time: 211.677 ms, Average time per hit: 0.20217478510028652 ms 


        if i**j <= x: # Hits:1047.0, Total execution time: 126.294 ms, Average time per hit: 0.12062464183381089 ms 


            ans = max(ans, i**j) # Hits:49.0, Total execution time: 10.163 ms, Average time per hit: 0.20740816326530612 ms 


        else:

            break # Hits:998.0, Total execution time: 84.417 ms, Average time per hit: 0.08458617234468938 ms 




print(ans) # Hits:1.0, Total execution time: 8.75 ms, Average time per hit: 8.75 ms 
",p03352,True
"x = int(eval(input())) # Hits:1.0, Total execution time: 26.625 ms, Average time per hit: 26.625 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for b in range(1, x//2): # Hits:499.0, Total execution time: 51.538 ms, Average time per hit: 0.10328256513026052 ms 


    for p in range(2, x): # Hits:497004.0, Total execution time: 49557.713 ms, Average time per hit: 0.09971290573114099 ms 


        if b**p <= x: # Hits:496506.0, Total execution time: 1452779.628 ms, Average time per hit: 2.9260061872364083 ms 


            ans = max(ans, b**p) # Hits:1046.0, Total execution time: 250.906 ms, Average time per hit: 0.2398718929254302 ms 


        else:

            continue # Hits:495460.0, Total execution time: 40323.452 ms, Average time per hit: 0.08138588786178501 ms 


if x == 1: # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


print(ans) # Hits:1.0, Total execution time: 40.958 ms, Average time per hit: 40.958 ms 
","x = int(eval(input())) # Hits:1.0, Total execution time: 63.042 ms, Average time per hit: 63.042 ms 


ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for b in range(1, x): # Hits:999.0, Total execution time: 97.884 ms, Average time per hit: 0.09798198198198199 ms 


    for p in range(2, x): # Hits:2044.0, Total execution time: 259.342 ms, Average time per hit: 0.12687964774951077 ms 


        if b**p <= x: # Hits:2043.0, Total execution time: 272.065 ms, Average time per hit: 0.1331693587860989 ms 


            ans = max(ans, b**p) # Hits:1046.0, Total execution time: 223.333 ms, Average time per hit: 0.2135114722753346 ms 


        else:

            break # Hits:997.0, Total execution time: 75.923 ms, Average time per hit: 0.07615145436308927 ms 


print(ans) # Hits:1.0, Total execution time: 8.417 ms, Average time per hit: 8.417 ms 
",p03352,True
"x=int(eval(input()))



for i in range(x,-1,-1):

  for k in range(int(i**0.5)+1):

    for j in range(11):

      if k**j>i:

        break

      if k**j==i:

        print(i)

        exit()","x=int(eval(input())) # Hits:1.0, Total execution time: 46.708 ms, Average time per hit: 46.708 ms 




ans=1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,x): # Hits:999.0, Total execution time: 87.88 ms, Average time per hit: 0.08796796796796796 ms 


  for j in range(2,x): # Hits:2044.0, Total execution time: 249.083 ms, Average time per hit: 0.1218605675146771 ms 


    if i**j>x: # Hits:2043.0, Total execution time: 276.842 ms, Average time per hit: 0.1355075868820362 ms 


      break # Hits:997.0, Total execution time: 77.33 ms, Average time per hit: 0.07756268806419257 ms 


    ans=max(ans,i**j) # Hits:1046.0, Total execution time: 233.197 ms, Average time per hit: 0.2229416826003824 ms 


print(ans) # Hits:1.0, Total execution time: 7.584 ms, Average time per hit: 7.584 ms 
",p03352,False
"def is_perfect_power(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    if n == 1:

        return True

    div = 2

    divs = []

    while n != 1:

        if n % div == 0:

            n //= div

            divs.append(div)

        else:

            div += 1

    divs_d = {d: 0 for d in set(divs)}

    for d in divs:

        divs_d[d] += 1

    divs_s = {n for n in list(divs_d.values())}

    if min(divs_s) > 1:

        for d in divs_s:

            if d % min(divs_s) != 0:

                return False

    else:

        return False

    return True





X = int(eval(input())) # Hits:1.0, Total execution time: 40.209 ms, Average time per hit: 40.209 ms 


for x in range(X, 0, -1): # Hits:39.0, Total execution time: 3.458 ms, Average time per hit: 0.08866666666666667 ms 


    if is_perfect_power(x): # Hits:39.0, Total execution time: 1620.418 ms, Average time per hit: 41.54917948717949 ms 


        print(x) # Hits:1.0, Total execution time: 5.542 ms, Average time per hit: 5.542 ms 


        break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 

","def is_perfect_power(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    return n in {

        1, 4, 8, 9, 16, 25, 27, 32, 36, 49, 64, 81, 100, 121, 125, 128, 144,

        169, 196, 216, 225, 243, 256, 289, 324, 343, 361, 400, 441, 484, 512,

        529, 576, 625, 676, 729, 784, 841, 900, 961, 1000

    }





X = int(eval(input())) # Hits:1.0, Total execution time: 40.959 ms, Average time per hit: 40.959 ms 


for x in range(X, 0, -1): # Hits:39.0, Total execution time: 3.333 ms, Average time per hit: 0.08546153846153846 ms 


    if is_perfect_power(x): # Hits:39.0, Total execution time: 7.832 ms, Average time per hit: 0.20082051282051283 ms 


        print(x) # Hits:1.0, Total execution time: 5.417 ms, Average time per hit: 5.417 ms 


        break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 

",p03352,True
"x, mx = int(eval(input())), 1 # Hits:1.0, Total execution time: 44.417 ms, Average time per hit: 44.417 ms 


for i in range(2,x+1): # Hits:999.0, Total execution time: 89.627 ms, Average time per hit: 0.08971671671671672 ms 


    for j in range(2,100): # Hits:98802.0, Total execution time: 7999.76 ms, Average time per hit: 0.08096759174915488 ms 


        if i**j<=x: mx=max(mx, i**j) # Hits:97804.0, Total execution time: 28709.41 ms, Average time per hit: 0.29354024375281174 ms 


print(mx) # Hits:1.0, Total execution time: 7.0 ms, Average time per hit: 7.0 ms 
","beki = [0] * 1010 # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 


beki[1] = 1 # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


for i in range(2, 1001): # Hits:1000.0, Total execution time: 86.764 ms, Average time per hit: 0.086764 ms 


        t = i*i # Hits:999.0, Total execution time: 85.466 ms, Average time per hit: 0.08555155155155156 ms 


        while t<1001: # Hits:1049.0, Total execution time: 95.236 ms, Average time per hit: 0.09078741658722593 ms 


                beki[t] = 1 # Hits:50.0, Total execution time: 4.249 ms, Average time per hit: 0.08498 ms 


                t *= i # Hits:50.0, Total execution time: 4.589 ms, Average time per hit: 0.09178 ms 


ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(int(eval(input()))+1): # Hits:1001.0, Total execution time: 124.534 ms, Average time per hit: 0.1244095904095904 ms 


        if beki[i]: ans = i # Hits:1000.0, Total execution time: 92.023 ms, Average time per hit: 0.092023 ms 


print(ans) # Hits:1.0, Total execution time: 6.375 ms, Average time per hit: 6.375 ms 
",p03352,True
"x = int(eval(input())) # Hits:1.0, Total execution time: 35.375 ms, Average time per hit: 35.375 ms 




num = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


if x == 1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    num = 1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


else:

    for b in range(2,x): # Hits:998.0, Total execution time: 79.2 ms, Average time per hit: 0.07935871743486975 ms 


        for p in range(2,11): # Hits:9970.0, Total execution time: 982.601 ms, Average time per hit: 0.09855576730190571 ms 


            tmp = pow(b, p) # Hits:8973.0, Total execution time: 1315.877 ms, Average time per hit: 0.14664850105873173 ms 


            if tmp <= x and num < tmp: # Hits:8973.0, Total execution time: 830.256 ms, Average time per hit: 0.09252825142092945 ms 


                num = tmp # Hits:13.0, Total execution time: 1.165 ms, Average time per hit: 0.08961538461538461 ms 




print(num) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 
","x = int(eval(input())) # Hits:1.0, Total execution time: 42.0 ms, Average time per hit: 42.0 ms 




num = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


if x == 1: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    num = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


else:

    for b in range(2, 33): # Hits:32.0, Total execution time: 3.167 ms, Average time per hit: 0.09896875 ms 


        for p in range(2, 11): # Hits:310.0, Total execution time: 30.044 ms, Average time per hit: 0.09691612903225807 ms 


            tmp = pow(b, p) # Hits:279.0, Total execution time: 39.465 ms, Average time per hit: 0.1414516129032258 ms 


            if tmp <= x and num < tmp: # Hits:279.0, Total execution time: 27.884 ms, Average time per hit: 0.09994265232974911 ms 


                num = tmp # Hits:13.0, Total execution time: 1.336 ms, Average time per hit: 0.10276923076923078 ms 




print(num) # Hits:1.0, Total execution time: 8.667 ms, Average time per hit: 8.667 ms 
",p03352,True
"X = int(eval(input())) # Hits:1.0, Total execution time: 38.542 ms, Average time per hit: 38.542 ms 




s = [1] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(X+1): # Hits:1001.0, Total execution time: 92.658 ms, Average time per hit: 0.09256543456543458 ms 


    for j in range(2,X+1): # Hits:3045.0, Total execution time: 363.186 ms, Average time per hit: 0.11927290640394088 ms 


        if i**j <= X and i**j not in s: # Hits:3043.0, Total execution time: 583.009 ms, Average time per hit: 0.1915902070325337 ms 


            s.append(i**j) # Hits:40.0, Total execution time: 6.126 ms, Average time per hit: 0.15315 ms 


        if i**j > X: # Hits:3043.0, Total execution time: 437.566 ms, Average time per hit: 0.1437942819585935 ms 


            break # Hits:998.0, Total execution time: 81.754 ms, Average time per hit: 0.08191783567134268 ms 


print((max(s)))  # Hits:1.0, Total execution time: 9.958 ms, Average time per hit: 9.958 ms 
","X = int(eval(input())) # Hits:1.0, Total execution time: 39.208 ms, Average time per hit: 39.208 ms 


A = [False]*1001 # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


A[1] = True # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(2,1001): # Hits:1000.0, Total execution time: 77.089 ms, Average time per hit: 0.077089 ms 


    j = 2 # Hits:999.0, Total execution time: 80.161 ms, Average time per hit: 0.08024124124124124 ms 


    while i**j < 1001: # Hits:1049.0, Total execution time: 115.509 ms, Average time per hit: 0.11011344137273593 ms 


        A[i**j] = True # Hits:50.0, Total execution time: 5.791 ms, Average time per hit: 0.11581999999999999 ms 


        j += 1 # Hits:50.0, Total execution time: 4.163 ms, Average time per hit: 0.08326 ms 




ans = 1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(X,-1,-1): # Hits:39.0, Total execution time: 3.203 ms, Average time per hit: 0.08212820512820512 ms 


    if A[i]: # Hits:39.0, Total execution time: 3.545 ms, Average time per hit: 0.0908974358974359 ms 


        ans = i # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        break # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 




print(ans) # Hits:1.0, Total execution time: 4.833 ms, Average time per hit: 4.833 ms 



",p03352,True
"import math # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


X = int(eval(input())) # Hits:1.0, Total execution time: 39.042 ms, Average time per hit: 39.042 ms 


max = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


x = math.floor(math.sqrt(X)) # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


for b in range(x + 1): # Hits:33.0, Total execution time: 3.044 ms, Average time per hit: 0.09224242424242425 ms 


    for p in range(x + 1): # Hits:1056.0, Total execution time: 102.322 ms, Average time per hit: 0.09689583333333333 ms 


        # print(b**p)

        if(max < b**p <= X): # Hits:1024.0, Total execution time: 187.358 ms, Average time per hit: 0.182966796875 ms 


            max = b**p # Hits:15.0, Total execution time: 1.792 ms, Average time per hit: 0.11946666666666667 ms 


print(max) # Hits:1.0, Total execution time: 5.291 ms, Average time per hit: 5.291 ms 

","import math # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


X = int(eval(input())) # Hits:1.0, Total execution time: 43.584 ms, Average time per hit: 43.584 ms 


max = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


bRange = math.floor(math.sqrt(X)) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


pRange = math.floor(math.log(X,2)) # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


for b in range(bRange + 1): # Hits:33.0, Total execution time: 2.996 ms, Average time per hit: 0.09078787878787878 ms 


    for p in range(pRange + 1): # Hits:352.0, Total execution time: 32.258 ms, Average time per hit: 0.09164204545454545 ms 


        # print(b**p)

        if(max < b**p <= X): # Hits:320.0, Total execution time: 48.462 ms, Average time per hit: 0.15144375 ms 


            max = b**p # Hits:15.0, Total execution time: 1.749 ms, Average time per hit: 0.1166 ms 


print(max) # Hits:1.0, Total execution time: 9.875 ms, Average time per hit: 9.875 ms 

",p03352,True
"X = int(eval(input())) # Hits:1.0, Total execution time: 50.083 ms, Average time per hit: 50.083 ms 


ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


t = min(X, 100) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


for b in range(1, t): # Hits:100.0, Total execution time: 8.754 ms, Average time per hit: 0.08754 ms 


    for p in range(1, t): # Hits:9900.0, Total execution time: 845.957 ms, Average time per hit: 0.08545020202020201 ms 


        if b**p > ans and b**p <= X: # Hits:9801.0, Total execution time: 4078.873 ms, Average time per hit: 0.4161690643811856 ms 


            ans = b**p # Hits:14.0, Total execution time: 1.707 ms, Average time per hit: 0.12192857142857143 ms 


print(ans) # Hits:1.0, Total execution time: 8.709 ms, Average time per hit: 8.709 ms 

","X = int(eval(input())) # Hits:1.0, Total execution time: 42.875 ms, Average time per hit: 42.875 ms 


ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for b in range(1, X+1): # Hits:1000.0, Total execution time: 91.819 ms, Average time per hit: 0.091819 ms 


    for p in range(2, X+1): # Hits:2046.0, Total execution time: 282.015 ms, Average time per hit: 0.13783724340175954 ms 


        if b**p > X: # Hits:2045.0, Total execution time: 263.995 ms, Average time per hit: 0.12909290953545233 ms 


            break # Hits:998.0, Total execution time: 84.8 ms, Average time per hit: 0.08496993987975952 ms 


        if b**p > ans and b**p <= X: # Hits:1047.0, Total execution time: 150.675 ms, Average time per hit: 0.1439111747851003 ms 


            ans = b**p # Hits:13.0, Total execution time: 1.458 ms, Average time per hit: 0.11215384615384616 ms 


print(ans) # Hits:1.0, Total execution time: 5.834 ms, Average time per hit: 5.834 ms 
",p03352,True
"x = int(eval(input())) # Hits:1.0, Total execution time: 40.458 ms, Average time per hit: 40.458 ms 


ans = 1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for b in range(1, 1001): # Hits:1001.0, Total execution time: 77.354 ms, Average time per hit: 0.07727672327672327 ms 


    for p in range(2, 11): # Hits:10000.0, Total execution time: 937.779 ms, Average time per hit: 0.0937779 ms 


        now = b ** p # Hits:9000.0, Total execution time: 1062.115 ms, Average time per hit: 0.11801277777777777 ms 


        if now <= x: # Hits:9000.0, Total execution time: 803.874 ms, Average time per hit: 0.08931933333333333 ms 


            ans = max(ans, now) # Hits:58.0, Total execution time: 8.836 ms, Average time per hit: 0.15234482758620688 ms 


print(ans) # Hits:1.0, Total execution time: 9.084 ms, Average time per hit: 9.084 ms 
","X = int(eval(input())) # Hits:1.0, Total execution time: 42.875 ms, Average time per hit: 42.875 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for b in range(1, 32): # Hits:32.0, Total execution time: 3.084 ms, Average time per hit: 0.096375 ms 


    for p in range(2, 10): # Hits:279.0, Total execution time: 26.581 ms, Average time per hit: 0.09527240143369176 ms 


        exp = b ** p # Hits:248.0, Total execution time: 26.584 ms, Average time per hit: 0.10719354838709677 ms 


        if exp <= X: # Hits:248.0, Total execution time: 22.583 ms, Average time per hit: 0.09106048387096774 ms 


            ans = max(ans, exp) # Hits:57.0, Total execution time: 9.416 ms, Average time per hit: 0.16519298245614036 ms 


print(ans) # Hits:1.0, Total execution time: 8.625 ms, Average time per hit: 8.625 ms 
",p03352,True
"x = int(eval(input()))



for i in range(x, 0, -1):

    for j in range(2, i):

        s = i

        while s%j == 0:

            t = s % j

            s = s // j

            if s == 1 and t == 0:

                print(i)

                exit()       

print((1))","x = int(eval(input())) # Hits:1.0, Total execution time: 38.542 ms, Average time per hit: 38.542 ms 


ans = [1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(2, x): # Hits:998.0, Total execution time: 81.832 ms, Average time per hit: 0.08199599198396794 ms 


    for j in range(2,11): # Hits:1046.0, Total execution time: 165.892 ms, Average time per hit: 0.15859655831739963 ms 


        ad = i**j # Hits:1046.0, Total execution time: 98.374 ms, Average time per hit: 0.09404780114722754 ms 


        if ad > x: # Hits:1046.0, Total execution time: 94.556 ms, Average time per hit: 0.09039770554493308 ms 


            break # Hits:997.0, Total execution time: 78.412 ms, Average time per hit: 0.07864794383149448 ms 


        ans.append(ad) # Hits:49.0, Total execution time: 6.622 ms, Average time per hit: 0.13514285714285715 ms 


print((max(ans))) # Hits:1.0, Total execution time: 9.292 ms, Average time per hit: 9.292 ms 
",p03352,False
"x =int(eval(input()))

for n in range(x, 0, -1):

    for b in range(1, n + 1):

        for p in range(2, n + 1):

            if b ** p == n:

                print(n)

                exit()

            elif b ** p > n:

                break

print((1))
","X = int(eval(input())) # Hits:1.0, Total execution time: 38.334 ms, Average time per hit: 38.334 ms 


ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(2, X + 1): # Hits:999.0, Total execution time: 78.118 ms, Average time per hit: 0.0781961961961962 ms 


    j = 2 # Hits:998.0, Total execution time: 68.079 ms, Average time per hit: 0.06821543086172345 ms 


    while i ** j <= X: # Hits:1047.0, Total execution time: 117.5 ms, Average time per hit: 0.11222540592168098 ms 


        ans = max(ans, i ** j) # Hits:49.0, Total execution time: 9.079 ms, Average time per hit: 0.18528571428571428 ms 


        j += 1 # Hits:49.0, Total execution time: 4.462 ms, Average time per hit: 0.09106122448979592 ms 




print(ans) # Hits:1.0, Total execution time: 8.333 ms, Average time per hit: 8.333 ms 
",p03352,False
"X=int(eval(input())) # Hits:1.0, Total execution time: 34.708 ms, Average time per hit: 34.708 ms 


s=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,100,+1): # Hits:100.0, Total execution time: 8.868 ms, Average time per hit: 0.08868000000000001 ms 


    for j in range(2,100,+1): # Hits:9801.0, Total execution time: 838.198 ms, Average time per hit: 0.0855216814610754 ms 


     if i**j<=X: # Hits:9702.0, Total execution time: 2524.675 ms, Average time per hit: 0.26022211915069055 ms 


        s.append(i**j) # Hits:147.0, Total execution time: 26.67 ms, Average time per hit: 0.1814285714285714 ms 


print((max(s))) # Hits:1.0, Total execution time: 6.834 ms, Average time per hit: 6.834 ms 



","n=int(eval(input())) # Hits:1.0, Total execution time: 38.958 ms, Average time per hit: 38.958 ms 




a=[1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(2,33): # Hits:32.0, Total execution time: 2.752 ms, Average time per hit: 0.086 ms 


	for j in range(2,11): # Hits:310.0, Total execution time: 28.411 ms, Average time per hit: 0.09164838709677418 ms 


		x=i**j # Hits:279.0, Total execution time: 30.748 ms, Average time per hit: 0.1102078853046595 ms 


		if x<=1000: # Hits:279.0, Total execution time: 24.246 ms, Average time per hit: 0.08690322580645161 ms 


			a.append(x) # Hits:50.0, Total execution time: 6.539 ms, Average time per hit: 0.13078 ms 




a=list(set(a)) # Hits:1.0, Total execution time: 2.541 ms, Average time per hit: 2.541 ms 


a.sort() # Hits:1.0, Total execution time: 1.416 ms, Average time per hit: 1.416 ms 


	

def binarySearch(value, xList): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    low=0

    high=len(xList)

    while low!=high:

        mid=(low+high)//2

        if xList[mid]<=value:

            low=mid+1

        else:

            high=mid

    return xList[low-1]

		

print((binarySearch(n,a))) # Hits:1.0, Total execution time: 11.208 ms, Average time per hit: 11.208 ms 
",p03352,True
"import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


import math # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




def isExponential(i : int) -> bool: # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    #math.ceil(math.sqrt(i))+1

    for j in range(2,i):       

        devidend = i

        devisor = j

        #print(devidend,devisor,""inFor"") 

        while 1:

            #print(devidend,devisor,""inWhile"")

            if devidend % devisor != 0:

                break

            else:

                if devidend == devisor:

                    return True

                else:

                    devidend //= devisor

    return False



x = int(eval(input())) # Hits:1.0, Total execution time: 43.042 ms, Average time per hit: 43.042 ms 


if x == 1: # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    print((1)) # Hits:1.0, Total execution time: 5.583 ms, Average time per hit: 5.583 ms 


for i in range(x,0,-1): # Hits:39.0, Total execution time: 4.078 ms, Average time per hit: 0.10456410256410256 ms 


    if isExponential(i) == True: # Hits:39.0, Total execution time: 8205.591 ms, Average time per hit: 210.3997692307692 ms 


        print(i) # Hits:1.0, Total execution time: 6.0 ms, Average time per hit: 6.0 ms 


        #print(""wtf"")

        break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 
","import sys # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


import math # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




def isExponential(i : int) -> bool: # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    for j in range(2,math.ceil(math.sqrt(i))+1):       

        devidend = i

        devisor = j

        #print(devidend,devisor,""inFor"") 

        while 1:

            #print(devidend,devisor,""inWhile"")

            if devidend % devisor != 0:

                break

            else:

                if devidend == devisor:

                    return True

                else:

                    devidend //= devisor

    return False



x = int(eval(input())) # Hits:1.0, Total execution time: 38.625 ms, Average time per hit: 38.625 ms 


if x == 1: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print((1)) # Hits:1.0, Total execution time: 6.083 ms, Average time per hit: 6.083 ms 


for i in range(x,0,-1): # Hits:39.0, Total execution time: 3.625 ms, Average time per hit: 0.09294871794871794 ms 


    if isExponential(i) == True: # Hits:39.0, Total execution time: 298.376 ms, Average time per hit: 7.650666666666667 ms 


        print(i) # Hits:1.0, Total execution time: 8.833 ms, Average time per hit: 8.833 ms 


        #print(""wtf"")

        break # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 
",p03352,True
"X = int(eval(input())) # Hits:1.0, Total execution time: 33.084 ms, Average time per hit: 33.084 ms 


ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for b in range(1, 100): # Hits:100.0, Total execution time: 8.246 ms, Average time per hit: 0.08245999999999999 ms 


  for p in range(2, 10): # Hits:891.0, Total execution time: 88.059 ms, Average time per hit: 0.09883164983164983 ms 


    if ans < pow(b, p) and pow(b, p) <= X: # Hits:792.0, Total execution time: 200.408 ms, Average time per hit: 0.25304040404040407 ms 


      ans = pow(b, p) # Hits:13.0, Total execution time: 1.832 ms, Average time per hit: 0.14092307692307693 ms 


print(ans) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 
","X = int(eval(input())) # Hits:1.0, Total execution time: 37.167 ms, Average time per hit: 37.167 ms 


ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


if X > 1: # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


  for b in range(1, 32): # Hits:32.0, Total execution time: 2.838 ms, Average time per hit: 0.0886875 ms 


    for p in range(2, 11): # Hits:310.0, Total execution time: 28.166 ms, Average time per hit: 0.09085806451612903 ms 


      if ans <= X and pow(b, p) <= X: # Hits:279.0, Total execution time: 46.839 ms, Average time per hit: 0.16788172043010752 ms 


      	ans = max(ans, pow(b, p)) # Hits:58.0, Total execution time: 11.622 ms, Average time per hit: 0.2003793103448276 ms 


print(ans) # Hits:1.0, Total execution time: 5.083 ms, Average time per hit: 5.083 ms 
",p03352,True
"import math # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


X = int(eval(input())) # Hits:1.0, Total execution time: 37.416 ms, Average time per hit: 37.416 ms 


def expo(x): # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


    ans = 1

    for i in reversed(list(range(1,x+1))):

        for j in range(int(math.sqrt(x))+1):

            for k in range(2,x+1):

                if i == j**k:

                    ans = i

                    return ans

    return ans

print((expo(X))) # Hits:1.0, Total execution time: 1257001.667 ms, Average time per hit: 1257001.667 ms 
","#B - Exponential

import math # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


X = int(eval(input())) # Hits:1.0, Total execution time: 37.875 ms, Average time per hit: 37.875 ms 


def expo(x): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ans = 1

    for i in reversed(list(range(1,x+1))):

        for j in range(int(math.sqrt(x))+1):

            for k in range(2,int(math.sqrt(x))):

                if i == j**k:

                    ans = i

                    return ans

    return ans

print((expo(X))) # Hits:1.0, Total execution time: 5891.917 ms, Average time per hit: 5891.917 ms 
",p03352,True
"x = int(eval(input())) # Hits:1.0, Total execution time: 47.625 ms, Average time per hit: 47.625 ms 




s = set([1]) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


for i in range(2,501): # Hits:500.0, Total execution time: 42.951 ms, Average time per hit: 0.085902 ms 


    for j in range(2,501): # Hits:249500.0, Total execution time: 22440.163 ms, Average time per hit: 0.08994053306613226 ms 


        if (i**j) <= x: # Hits:249001.0, Total execution time: 268498.791 ms, Average time per hit: 1.0783040670519395 ms 


            s.add(i**j) # Hits:49.0, Total execution time: 11.415 ms, Average time per hit: 0.2329591836734694 ms 




print((max(list(s)))) # Hits:1.0, Total execution time: 26.292 ms, Average time per hit: 26.292 ms 
","x = int(eval(input())) # Hits:1.0, Total execution time: 34.333 ms, Average time per hit: 34.333 ms 




s = set([1]) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


for i in range(2,501): # Hits:500.0, Total execution time: 40.779 ms, Average time per hit: 0.081558 ms 


    for j in range(2,10): # Hits:4491.0, Total execution time: 453.045 ms, Average time per hit: 0.10087842351369405 ms 


        if (i**j) <= x: # Hits:3992.0, Total execution time: 532.335 ms, Average time per hit: 0.1333504509018036 ms 


            s.add(i**j) # Hits:49.0, Total execution time: 9.952 ms, Average time per hit: 0.20310204081632655 ms 




print((max(list(s)))) # Hits:1.0, Total execution time: 6.333 ms, Average time per hit: 6.333 ms 
",p03352,True
"x = int(eval(input()))

y = 0

if x==1 or x==2 or x==3:

    print((1))

    exit()

else:

    for a in range(2,(x+1)):

        for b in range (2,10):

            if b==2 and a**b>x:

                print(y)

                exit()

            elif a**b<=x:

                y=max(a**b,y)
",,p03352,False
"x = int(eval(input()))



## まず、1000以下のべき乗数のリストを作る

# print(2**9) -> 512

beki_list = []

for i in range(1, 101): # ベース

    for j in range(2, 10): # ベースにべき乗する数

        beki = i**j

        if beki <= 1000:

            beki_list.append(beki)



# 存在する1000以下のべき乗数を、大きい順に比較していく

beki_list.sort(reverse=True)



for beki in beki_list:

    if beki <= x:

        print(beki)

        exit()",,p03352,False
"def solve():

    x = int(eval(input()))

    if x < 4:

        return 1

    elif x < 8:

        return 4

    elif x < 9:

        return 8

    l = [i**j for i in range(1,x+1) for j in range(2,int(x**0.5)) if i**j<=x]

    return max(l)

        

if __name__ == '__main__':

    print((solve()))","x = int(eval(input())) # Hits:1.0, Total execution time: 49.083 ms, Average time per hit: 49.083 ms 


l = [i**j for i in range(1,33) for j in range(2,10) if i**j <= x] # Hits:1.0, Total execution time: 31.708 ms, Average time per hit: 31.708 ms 


print((max(l))) # Hits:1.0, Total execution time: 6.583 ms, Average time per hit: 6.583 ms 
",p03352,False
"

x = int(eval(input())) # Hits:1.0, Total execution time: 37.375 ms, Average time per hit: 37.375 ms 


bekis = set() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


bekis.add(1) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for b in range(2,35): # Hits:34.0, Total execution time: 2.913 ms, Average time per hit: 0.08567647058823528 ms 


    for p in range(2,11): # Hits:82.0, Total execution time: 9.541 ms, Average time per hit: 0.11635365853658537 ms 


        num = pow(b,p) # Hits:82.0, Total execution time: 10.665 ms, Average time per hit: 0.1300609756097561 ms 


        if num <= x: # Hits:82.0, Total execution time: 7.168 ms, Average time per hit: 0.08741463414634147 ms 


            ans = max(ans,num) # Hits:49.0, Total execution time: 7.877 ms, Average time per hit: 0.16075510204081633 ms 


        else:

            break # Hits:33.0, Total execution time: 2.547 ms, Average time per hit: 0.07718181818181818 ms 


print(ans) # Hits:1.0, Total execution time: 4.958 ms, Average time per hit: 4.958 ms 
","x = int(eval(input())) # Hits:1.0, Total execution time: 47.0 ms, Average time per hit: 47.0 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(33): # Hits:34.0, Total execution time: 3.166 ms, Average time per hit: 0.09311764705882354 ms 


    for j in range(2,11): # Hits:100.0, Total execution time: 10.328 ms, Average time per hit: 0.10328 ms 


        if pow(i,j) > x: break # Hits:98.0, Total execution time: 14.37 ms, Average time per hit: 0.1466326530612245 ms 


        ans = max(ans,pow(i,j)) # Hits:67.0, Total execution time: 14.13 ms, Average time per hit: 0.2108955223880597 ms 




print(ans) # Hits:1.0, Total execution time: 6.0 ms, Average time per hit: 6.0 ms 
",p03352,True
"X=int(eval(input())) # Hits:1.0, Total execution time: 42.916 ms, Average time per hit: 42.916 ms 


res=1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,X+1): # Hits:1000.0, Total execution time: 86.641 ms, Average time per hit: 0.08664100000000001 ms 


    for j in range(2,11): # Hits:9990.0, Total execution time: 909.812 ms, Average time per hit: 0.09107227227227227 ms 


        for k in range(35): # Hits:323676.0, Total execution time: 28423.246 ms, Average time per hit: 0.08781388178301759 ms 


            if i==k**j: # Hits:314685.0, Total execution time: 40518.63 ms, Average time per hit: 0.12875933075933077 ms 


                res=i # Hits:58.0, Total execution time: 4.544 ms, Average time per hit: 0.0783448275862069 ms 


print(res) # Hits:1.0, Total execution time: 25.208 ms, Average time per hit: 25.208 ms 

","X=int(eval(input())) # Hits:1.0, Total execution time: 39.75 ms, Average time per hit: 39.75 ms 


l=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,X+1): # Hits:1000.0, Total execution time: 85.793 ms, Average time per hit: 0.08579300000000001 ms 


    for j in range(2,11): # Hits:1057.0, Total execution time: 166.122 ms, Average time per hit: 0.15716367076631976 ms 


        if i**j>X: # Hits:1056.0, Total execution time: 114.716 ms, Average time per hit: 0.10863257575757575 ms 


            break # Hits:998.0, Total execution time: 77.701 ms, Average time per hit: 0.0778567134268537 ms 


        l.append(i**j) # Hits:58.0, Total execution time: 9.628 ms, Average time per hit: 0.166 ms 


l.sort() # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


print((l[-1])) # Hits:1.0, Total execution time: 5.542 ms, Average time per hit: 5.542 ms 

",p03352,True
"l=[0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1] # Hits:1.0, Total execution time: 3.333 ms, Average time per hit: 3.333 ms 


for i in range(int(eval(input())),0,-1): # Hits:39.0, Total execution time: 45.622 ms, Average time per hit: 1.1697948717948718 ms 


  if l[i]==1:print(i);break # Hits:39.0, Total execution time: 9.834 ms, Average time per hit: 0.2521538461538462 ms 
","x,l=int(eval(input())),[0]*1001;l[1]=1 # Hits:1.0, Total execution time: 39.0 ms, Average time per hit: 39.0 ms 


for i in range(2,x+1): # Hits:999.0, Total execution time: 79.26 ms, Average time per hit: 0.07933933933933933 ms 


  if l[i]==0:j=i*i # Hits:998.0, Total execution time: 118.168 ms, Average time per hit: 0.11840480961923848 ms 


  while 1: # Hits:1037.0, Total execution time: 76.128 ms, Average time per hit: 0.07341176470588234 ms 


    if j>x:break # Hits:1037.0, Total execution time: 105.582 ms, Average time per hit: 0.10181485053037609 ms 


    else:l[j]=1;j*=i # Hits:39.0, Total execution time: 5.126 ms, Average time per hit: 0.13143589743589743 ms 


for i in range(x,-1,-1): # Hits:39.0, Total execution time: 3.209 ms, Average time per hit: 0.08228205128205128 ms 


  if l[i]==1:print(i);break # Hits:39.0, Total execution time: 12.125 ms, Average time per hit: 0.3108974358974359 ms 
",p03352,True
"x=int(eval(input())) # Hits:1.0, Total execution time: 37.25 ms, Average time per hit: 37.25 ms 


ans=1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,x+1): # Hits:1000.0, Total execution time: 90.787 ms, Average time per hit: 0.090787 ms 


    for j in range(2,50): # Hits:48951.0, Total execution time: 4038.936 ms, Average time per hit: 0.08250977508120366 ms 


        for k in range(2,50): # Hits:2349648.0, Total execution time: 206328.768 ms, Average time per hit: 0.08781262895548611 ms 


            if i==j**k: # Hits:2301696.0, Total execution time: 436108.6 ms, Average time per hit: 0.1894727192470248 ms 


                ans=j**k # Hits:49.0, Total execution time: 6.378 ms, Average time per hit: 0.13016326530612243 ms 


print(ans) # Hits:1.0, Total execution time: 35.625 ms, Average time per hit: 35.625 ms 
",,p03352,True
"x=int(eval(input()))

if x==1:

    print((1))

    exit()



i=2

ans=0

while i*i<x:

    j=2

    while i**j<=x:

        ans=max(ans,i**j)

        j +=1

    i += 1

print(ans)","x=int(eval(input())) # Hits:1.0, Total execution time: 39.709 ms, Average time per hit: 39.709 ms 


ans=1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for b in range(2,32): # Hits:31.0, Total execution time: 2.624 ms, Average time per hit: 0.08464516129032258 ms 


    for p in range(2,10): # Hits:79.0, Total execution time: 8.918 ms, Average time per hit: 0.11288607594936709 ms 


        if b**p>x: # Hits:78.0, Total execution time: 9.083 ms, Average time per hit: 0.11644871794871794 ms 


            break # Hits:29.0, Total execution time: 2.084 ms, Average time per hit: 0.07186206896551724 ms 


        else:

            if b**p>ans: # Hits:49.0, Total execution time: 5.582 ms, Average time per hit: 0.11391836734693878 ms 


                ans=b**p # Hits:13.0, Total execution time: 1.499 ms, Average time per hit: 0.1153076923076923 ms 


print(ans) # Hits:1.0, Total execution time: 8.917 ms, Average time per hit: 8.917 ms 
",p03352,False
"x = int(eval(input())) # Hits:1.0, Total execution time: 43.916 ms, Average time per hit: 43.916 ms 


ans = 1 # 1^b = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(2, x+1): # [2,x] # Hits:999.0, Total execution time: 80.932 ms, Average time per hit: 0.081013013013013 ms 


    a = i # a^1 # Hits:998.0, Total execution time: 78.615 ms, Average time per hit: 0.07877254509018036 ms 


    while a < x: # Hits:2044.0, Total execution time: 195.805 ms, Average time per hit: 0.0957950097847358 ms 


        a *= i # a^b,(b>=2) # Hits:1046.0, Total execution time: 91.295 ms, Average time per hit: 0.08728011472275334 ms 


        if a <= x: ans = max(ans, a) # Hits:1046.0, Total execution time: 92.354 ms, Average time per hit: 0.0882925430210325 ms 


print(ans) # Hits:1.0, Total execution time: 5.708 ms, Average time per hit: 5.708 ms 

","import math # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


x = int(eval(input())) # Hits:1.0, Total execution time: 42.708 ms, Average time per hit: 42.708 ms 


ans = 1 # 1^b = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


n = math.floor(math.sqrt(x)) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


for i in range(2, n+1): # [2,n] # Hits:31.0, Total execution time: 2.92 ms, Average time per hit: 0.09419354838709677 ms 


    a = i # a^1 # Hits:30.0, Total execution time: 2.498 ms, Average time per hit: 0.08326666666666667 ms 


    while a < x: # Hits:109.0, Total execution time: 11.169 ms, Average time per hit: 0.10246788990825688 ms 


        a *= i # a^b,(b>=2) # Hits:79.0, Total execution time: 7.457 ms, Average time per hit: 0.09439240506329113 ms 


        if a <= x: ans = max(ans, a) # Hits:79.0, Total execution time: 12.124 ms, Average time per hit: 0.15346835443037976 ms 


print(ans) # Hits:1.0, Total execution time: 7.334 ms, Average time per hit: 7.334 ms 

",p03352,True
"X = int(eval(input())) # Hits:1.0, Total execution time: 41.583 ms, Average time per hit: 41.583 ms 


b = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


p = 2 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


ans = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for b in range(1, X + 1): # Hits:1000.0, Total execution time: 89.402 ms, Average time per hit: 0.089402 ms 


    for p in range(2, 10): # Hits:8991.0, Total execution time: 819.653 ms, Average time per hit: 0.09116371927483038 ms 


        if b ** p <= X: # Hits:7992.0, Total execution time: 1033.729 ms, Average time per hit: 0.12934547047047049 ms 


            ans = max(ans, b ** p) # Hits:57.0, Total execution time: 10.791 ms, Average time per hit: 0.18931578947368422 ms 




print(ans) # Hits:1.0, Total execution time: 9.083 ms, Average time per hit: 9.083 ms 

","X = int(eval(input())) # Hits:1.0, Total execution time: 35.916 ms, Average time per hit: 35.916 ms 




ans = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for b in range(1, X + 1): # Hits:1000.0, Total execution time: 88.355 ms, Average time per hit: 0.088355 ms 


    for p in range(2, X + 1): # Hits:2046.0, Total execution time: 283.439 ms, Average time per hit: 0.13853323558162267 ms 


        if b ** p <= X: # Hits:2045.0, Total execution time: 270.506 ms, Average time per hit: 0.13227677261613693 ms 


            ans = max(ans, b ** p) # Hits:1047.0, Total execution time: 231.994 ms, Average time per hit: 0.2215797516714422 ms 


        else:

            break # Hits:998.0, Total execution time: 81.846 ms, Average time per hit: 0.08201002004008016 ms 




print(ans) # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 

",p03352,True
"X = int(eval(input())) # Hits:1.0, Total execution time: 44.208 ms, Average time per hit: 44.208 ms 




ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,1001): # Hits:1001.0, Total execution time: 77.086 ms, Average time per hit: 0.077008991008991 ms 


    for j in range(2,11): # Hits:10000.0, Total execution time: 901.564 ms, Average time per hit: 0.09015640000000001 ms 


        tmp = i ** j # Hits:9000.0, Total execution time: 1068.682 ms, Average time per hit: 0.11874244444444444 ms 


        if tmp <= X: # Hits:9000.0, Total execution time: 810.309 ms, Average time per hit: 0.09003433333333334 ms 


            ans = max(ans, i ** j) # Hits:58.0, Total execution time: 13.121 ms, Average time per hit: 0.22622413793103446 ms 




print(ans) # Hits:1.0, Total execution time: 8.75 ms, Average time per hit: 8.75 ms 
","X = int(eval(input())) # Hits:1.0, Total execution time: 40.583 ms, Average time per hit: 40.583 ms 




ans = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(2,int(X**.5)+1): # Hits:31.0, Total execution time: 3.709 ms, Average time per hit: 0.11964516129032257 ms 


    j = 2 # Hits:30.0, Total execution time: 2.169 ms, Average time per hit: 0.0723 ms 


    while i ** j <= X: # Hits:79.0, Total execution time: 10.206 ms, Average time per hit: 0.1291898734177215 ms 


        ans = max(ans, i ** j) # Hits:49.0, Total execution time: 8.706 ms, Average time per hit: 0.17767346938775508 ms 


        j += 1 # Hits:49.0, Total execution time: 4.247 ms, Average time per hit: 0.08667346938775511 ms 




print(ans) # Hits:1.0, Total execution time: 6.0 ms, Average time per hit: 6.0 ms 
",p03352,True
"def main():

    from bisect import bisect_left



    x = int(eval(input()))



    cands = [1]

    for b in range(2, x + 1):

        for p in range(2, x + 1):

            pw = b ** p

            if pw > x: break

            cands.append(pw)



    cands.sort()



    i = bisect_left(cands, x)

    if i == len(cands) or x < cands[i]:

        i -= 1

    print((cands[i]))





if __name__ == '__main__':

    main()



# import sys

# input = sys.stdin.readline

# 

# sys.setrecursionlimit(10 ** 7)

# 

# (int(x)-1 for x in input().split())

# rstrip()

#

# def binary_search(*, ok, ng, func):

#     while abs(ok - ng) > 1:

#         mid = (ok + ng) // 2

#         if func(mid):

#             ok = mid

#         else:

#             ng = mid

#     return ok
",,p03352,False
"x = int(eval(input())) # Hits:1.0, Total execution time: 43.042 ms, Average time per hit: 43.042 ms 


ans = [b**p for b in range(1001) for p in range(2,10) # Hits:1.0, Total execution time: 1030.291 ms, Average time per hit: 1030.291 ms 


      if b**p <= x]

print((max(ans)))     # Hits:1.0, Total execution time: 5.917 ms, Average time per hit: 5.917 ms 
","X = int(eval(input())) # Hits:1.0, Total execution time: 40.708 ms, Average time per hit: 40.708 ms 




ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(2, X): # Hits:998.0, Total execution time: 78.01 ms, Average time per hit: 0.07816633266533066 ms 


  n = i*i # Hits:997.0, Total execution time: 84.709 ms, Average time per hit: 0.08496389167502508 ms 


  while n <= X: # Hits:1046.0, Total execution time: 106.242 ms, Average time per hit: 0.1015697896749522 ms 


    ans = max(ans, n) # Hits:49.0, Total execution time: 7.165 ms, Average time per hit: 0.14622448979591837 ms 


    n *= i # Hits:49.0, Total execution time: 4.208 ms, Average time per hit: 0.08587755102040816 ms 


print(ans)     # Hits:1.0, Total execution time: 4.625 ms, Average time per hit: 4.625 ms 


  ",p03352,True
"import sys # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


X = int(eval(input())) # Hits:1.0, Total execution time: 36.0 ms, Average time per hit: 36.0 ms 


res = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for b in range(1, -(-X//2)+1): # Hits:501.0, Total execution time: 42.543 ms, Average time per hit: 0.08491616766467065 ms 


    for p in range(2, -(-X//2)+2): # Hits:250500.0, Total execution time: 22101.619 ms, Average time per hit: 0.08823001596806387 ms 


        val = b**p # Hits:250000.0, Total execution time: 266624.045 ms, Average time per hit: 1.0664961800000001 ms 


        if (val <= X) and (val > res): # Hits:250000.0, Total execution time: 24386.519 ms, Average time per hit: 0.097546076 ms 


            res = val # Hits:14.0, Total execution time: 1.124 ms, Average time per hit: 0.0802857142857143 ms 


print(res) # Hits:1.0, Total execution time: 9.667 ms, Average time per hit: 9.667 ms 

","import math # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


X = int(eval(input())) # Hits:1.0, Total execution time: 41.041 ms, Average time per hit: 41.041 ms 


res = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for b in range(1, int(math.sqrt(X))+1): # Hits:32.0, Total execution time: 4.125 ms, Average time per hit: 0.12890625 ms 


    for p in range(2, int(math.sqrt(X))+2): # Hits:992.0, Total execution time: 94.541 ms, Average time per hit: 0.09530342741935484 ms 


        val = b**p # Hits:961.0, Total execution time: 141.496 ms, Average time per hit: 0.14723829344432884 ms 


        if (val <= X) and (val > res): # Hits:961.0, Total execution time: 96.723 ms, Average time per hit: 0.10064828303850155 ms 


            res = val # Hits:14.0, Total execution time: 1.042 ms, Average time per hit: 0.07442857142857143 ms 


print(res) # Hits:1.0, Total execution time: 8.75 ms, Average time per hit: 8.75 ms 

",p03352,True
"import math # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




X = int(eval(input())) # Hits:1.0, Total execution time: 40.959 ms, Average time per hit: 40.959 ms 


answer = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(X+1): # Hits:1001.0, Total execution time: 84.018 ms, Average time per hit: 0.08393406593406592 ms 


    for j in range(2, X+1): # Hits:3045.0, Total execution time: 350.816 ms, Average time per hit: 0.11521050903119869 ms 


        if i ** j <= X: # Hits:3043.0, Total execution time: 412.974 ms, Average time per hit: 0.1357127834373973 ms 


            answer = max(answer, i ** j) # Hits:2045.0, Total execution time: 442.64 ms, Average time per hit: 0.21644987775061125 ms 


        else:

            break # Hits:998.0, Total execution time: 71.642 ms, Average time per hit: 0.07178557114228457 ms 


print(answer) # Hits:1.0, Total execution time: 5.417 ms, Average time per hit: 5.417 ms 

","X = int(eval(input())) # Hits:1.0, Total execution time: 44.459 ms, Average time per hit: 44.459 ms 




answer = 1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in range(2, X+1): # Hits:999.0, Total execution time: 78.001 ms, Average time per hit: 0.07807907907907909 ms 


    j = 2 # Hits:998.0, Total execution time: 68.166 ms, Average time per hit: 0.06830260521042084 ms 


    while i**j <= X: # Hits:1047.0, Total execution time: 119.126 ms, Average time per hit: 0.11377841451766953 ms 


        answer = max(answer, i**j) # Hits:49.0, Total execution time: 9.327 ms, Average time per hit: 0.1903469387755102 ms 


        j += 1 # Hits:49.0, Total execution time: 4.374 ms, Average time per hit: 0.08926530612244897 ms 


print(answer) # Hits:1.0, Total execution time: 8.958 ms, Average time per hit: 8.958 ms 
",p03352,True
"import math # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


X = int(eval(input())) # Hits:1.0, Total execution time: 39.792 ms, Average time per hit: 39.792 ms 


i_max = math.floor(math.sqrt(X)) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




result = 1 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in range(2,i_max+1,1): # Hits:31.0, Total execution time: 3.212 ms, Average time per hit: 0.10361290322580645 ms 


    for j in range(1,X): # Hits:109.0, Total execution time: 11.75 ms, Average time per hit: 0.10779816513761467 ms 


        n = (i**j) # Hits:109.0, Total execution time: 10.877 ms, Average time per hit: 0.09978899082568807 ms 


        if (n > X): # Hits:109.0, Total execution time: 9.584 ms, Average time per hit: 0.08792660550458715 ms 


            break # Hits:30.0, Total execution time: 2.331 ms, Average time per hit: 0.0777 ms 


        else:

            result = max(result, n) # Hits:79.0, Total execution time: 12.087 ms, Average time per hit: 0.153 ms 




print(result) # Hits:1.0, Total execution time: 6.0 ms, Average time per hit: 6.0 ms 

","import math # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


X = int(eval(input())) # Hits:1.0, Total execution time: 40.0 ms, Average time per hit: 40.0 ms 


i_max = math.floor(math.sqrt(X)) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 




result = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(2,i_max+1,1): # Hits:31.0, Total execution time: 3.124 ms, Average time per hit: 0.1007741935483871 ms 


    for j in range(2,X): # Hits:79.0, Total execution time: 8.581 ms, Average time per hit: 0.10862025316455695 ms 


        n = (i**j) # Hits:79.0, Total execution time: 8.079 ms, Average time per hit: 0.10226582278481013 ms 


        if (n > X): # Hits:79.0, Total execution time: 6.67 ms, Average time per hit: 0.08443037974683544 ms 


            break # Hits:30.0, Total execution time: 2.249 ms, Average time per hit: 0.07496666666666667 ms 


        else:

            result = max(result, n) # Hits:49.0, Total execution time: 7.791 ms, Average time per hit: 0.159 ms 




print(result) # Hits:1.0, Total execution time: 6.292 ms, Average time per hit: 6.292 ms 

",p03352,True
"x = int(eval(input())) # Hits:1.0, Total execution time: 57.625 ms, Average time per hit: 57.625 ms 


a = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,x+1): # Hits:1000.0, Total execution time: 79.943 ms, Average time per hit: 0.079943 ms 


    for j in range(2,10): # Hits:8991.0, Total execution time: 824.85 ms, Average time per hit: 0.09174174174174175 ms 


        if i**j <= x: # Hits:7992.0, Total execution time: 1076.738 ms, Average time per hit: 0.13472697697697697 ms 


            a = max(a,i**j) # Hits:57.0, Total execution time: 13.045 ms, Average time per hit: 0.228859649122807 ms 


print(a) # Hits:1.0, Total execution time: 6.25 ms, Average time per hit: 6.25 ms 
","x = int(eval(input())) # Hits:1.0, Total execution time: 38.75 ms, Average time per hit: 38.75 ms 


a = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,x): # Hits:999.0, Total execution time: 87.073 ms, Average time per hit: 0.08716016016016016 ms 


    for j in range(2,x): # Hits:2044.0, Total execution time: 246.283 ms, Average time per hit: 0.12049070450097847 ms 


        if i**j <= x: # Hits:2043.0, Total execution time: 272.932 ms, Average time per hit: 0.13359373470386685 ms 


            a = max(a,i**j) # Hits:1046.0, Total execution time: 228.908 ms, Average time per hit: 0.2188413001912046 ms 


        else:

          break # Hits:997.0, Total execution time: 70.131 ms, Average time per hit: 0.07034202607823471 ms 


print(a) # Hits:1.0, Total execution time: 4.833 ms, Average time per hit: 4.833 ms 
",p03352,True
"x = int(eval(input())) # Hits:1.0, Total execution time: 38.584 ms, Average time per hit: 38.584 ms 


a = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,x): # Hits:999.0, Total execution time: 91.203 ms, Average time per hit: 0.0912942942942943 ms 


    for j in range(2,x): # Hits:2044.0, Total execution time: 251.165 ms, Average time per hit: 0.12287915851272015 ms 


        if i**j <= x: # Hits:2043.0, Total execution time: 268.096 ms, Average time per hit: 0.1312266275085658 ms 


            a = max(a,i**j) # Hits:1046.0, Total execution time: 236.388 ms, Average time per hit: 0.22599235181644362 ms 


        else:

          break # Hits:997.0, Total execution time: 72.742 ms, Average time per hit: 0.07296088264794383 ms 


print(a) # Hits:1.0, Total execution time: 6.125 ms, Average time per hit: 6.125 ms 
","x = int(eval(input())) # Hits:1.0, Total execution time: 39.583 ms, Average time per hit: 39.583 ms 


a = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(2,x): # Hits:998.0, Total execution time: 78.175 ms, Average time per hit: 0.07833166332665331 ms 


    j = 2 # Hits:997.0, Total execution time: 68.987 ms, Average time per hit: 0.06919458375125376 ms 


    while i**j <= x: # Hits:1046.0, Total execution time: 114.489 ms, Average time per hit: 0.10945411089866157 ms 


        a = max(a,i**j) # Hits:49.0, Total execution time: 8.503 ms, Average time per hit: 0.17353061224489796 ms 


        j += 1 # Hits:49.0, Total execution time: 4.084 ms, Average time per hit: 0.08334693877551021 ms 


print(a)     # Hits:1.0, Total execution time: 8.291 ms, Average time per hit: 8.291 ms 
",p03352,True
"

list1=[1,2,4,8,16,32,64,128,256,512,9,27,81,243,729,25,125,625,49,343,100,1000,121] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


num=eval(input()) # Hits:1.0, Total execution time: 32.0 ms, Average time per hit: 32.0 ms 


num=int(num) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




for i in range(12,32): # Hits:21.0, Total execution time: 2.17 ms, Average time per hit: 0.10333333333333333 ms 


    list1.append(i**2) # Hits:20.0, Total execution time: 3.044 ms, Average time per hit: 0.1522 ms 


    i+=1 # Hits:20.0, Total execution time: 2.332 ms, Average time per hit: 0.1166 ms 


list2=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for j in range(len(list1)): # Hits:44.0, Total execution time: 3.708 ms, Average time per hit: 0.08427272727272726 ms 


    if num>=list1[j]: # Hits:43.0, Total execution time: 4.209 ms, Average time per hit: 0.09788372093023255 ms 


        list2.append(list1[j]) # Hits:42.0, Total execution time: 5.416 ms, Average time per hit: 0.12895238095238096 ms 


        j +=1 # Hits:42.0, Total execution time: 3.624 ms, Average time per hit: 0.08628571428571429 ms 


        

print((max(list2))) # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 


    ","list1=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for b in range(1,33): # Hits:33.0, Total execution time: 2.918 ms, Average time per hit: 0.08842424242424242 ms 


    for p in range(2,11): # Hits:91.0, Total execution time: 10.542 ms, Average time per hit: 0.11584615384615383 ms 


        if b**p not in list1 and b**p<=1000: # Hits:90.0, Total execution time: 20.748 ms, Average time per hit: 0.23053333333333334 ms 


            list1.append(b**p) # Hits:41.0, Total execution time: 6.623 ms, Average time per hit: 0.16153658536585366 ms 


        elif b**p>1000: # Hits:49.0, Total execution time: 6.298 ms, Average time per hit: 0.12853061224489795 ms 


            break # Hits:31.0, Total execution time: 2.244 ms, Average time per hit: 0.07238709677419355 ms 


list1.sort() # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


N=int(eval(input())) # Hits:1.0, Total execution time: 45.25 ms, Average time per hit: 45.25 ms 


ans=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(len(list1)): # Hits:41.0, Total execution time: 4.331 ms, Average time per hit: 0.10563414634146343 ms 


    if list1[i]<=N: # Hits:41.0, Total execution time: 4.874 ms, Average time per hit: 0.1188780487804878 ms 


        ans=list1[i] # Hits:40.0, Total execution time: 4.378 ms, Average time per hit: 0.10945 ms 


    else:

        break # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


print(ans) # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 


        ",p03352,True
"import sys

import os





def main():

    if os.getenv(""LOCAL""):

        sys.stdin = open(""input.txt"", ""r"")



    N = int(sys.stdin.readline().rstrip())

    ret = 1

    for b in range(1, N):

        for p in range(2, N//2):

            if b ** p <= N:

                ret = max(ret, b ** p)



    print(ret)





if __name__ == '__main__':

    main()
",,p03352,False
"n=int(eval(input())) # Hits:1.0, Total execution time: 38.0 ms, Average time per hit: 38.0 ms 


max=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


if(n==1): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


  print((1)) # Hits:1.0, Total execution time: 5.708 ms, Average time per hit: 5.708 ms 


else:

  for i in range(n): # Hits:1000.0, Total execution time: 85.4 ms, Average time per hit: 0.0854 ms 


    for j in range(2,10): # Hits:8991.0, Total execution time: 868.714 ms, Average time per hit: 0.09662039817595373 ms 


      if(max<=i**j and i**j<=n): # Hits:7992.0, Total execution time: 1606.898 ms, Average time per hit: 0.2010633133133133 ms 


        max=i**j # Hits:31.0, Total execution time: 4.791 ms, Average time per hit: 0.1545483870967742 ms 


  print(max) # Hits:1.0, Total execution time: 8.25 ms, Average time per hit: 8.25 ms 
","import math # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


n = int(eval(input())) # Hits:1.0, Total execution time: 30.417 ms, Average time per hit: 30.417 ms 


j = 2 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


tmp = 0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


Max = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(2,n): # Hits:998.0, Total execution time: 77.02 ms, Average time per hit: 0.07717434869739478 ms 


  while(n > tmp): # Hits:2043.0, Total execution time: 195.774 ms, Average time per hit: 0.09582672540381791 ms 


    tmp = i**j # Hits:1046.0, Total execution time: 92.124 ms, Average time per hit: 0.08807265774378585 ms 


    j+=1 # Hits:1046.0, Total execution time: 88.02 ms, Average time per hit: 0.08414913957934991 ms 


    if(Max < tmp and n >= tmp): # Hits:1046.0, Total execution time: 106.873 ms, Average time per hit: 0.10217304015296366 ms 


      Max = tmp # Hits:13.0, Total execution time: 0.79 ms, Average time per hit: 0.06076923076923077 ms 


  j = 2 # Hits:997.0, Total execution time: 69.674 ms, Average time per hit: 0.06988365095285858 ms 


  tmp = 0 # Hits:997.0, Total execution time: 77.657 ms, Average time per hit: 0.07789067201604814 ms 


print(Max) # Hits:1.0, Total execution time: 7.917 ms, Average time per hit: 7.917 ms 
",p03352,True
"def pff(m): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    pf = {}

    for i in range(2, int(m ** 0.5) + 1):

        while m % i == 0:

            pf[i] = pf.get(i, 0) + 1

            m //= i

    if m > 1: pf[m] = 1

    return pf

def examB(): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    X = I()

    ans = 0

    for i in range(X,0,-1):

        cur = pff(i)

        flag = True

        now = 0

        for j in list(cur.values()):

            if j==1:

                flag = False

            if now==0:

                now = j

            else:

                if now!=j:

                    flag = False

        if flag:

            ans = i

            break

    print(ans)



import sys,copy,bisect,itertools,heapq,math # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


from heapq import heappop,heappush,heapify # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


from collections import Counter,defaultdict,deque # Hits:1.0, Total execution time: 2.083 ms, Average time per hit: 2.083 ms 


def I(): return int(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


def LI(): return list(map(int,sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LSI(): return list(map(str,sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LS(): return sys.stdin.readline().split() # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def SI(): return sys.stdin.readline().strip() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


mod = 10**9 + 7 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


inf = float('inf') # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




examB() # Hits:1.0, Total execution time: 252.792 ms, Average time per hit: 252.792 ms 
","def pff(m): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    pf = {}

    for i in range(2, int(m ** 0.5) + 1):

        while m % i == 0:

            pf[i] = pf.get(i, 0) + 1

            m //= i

    if m > 1: pf[m] = 1

    return pf

def examB(): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    X = I()

    ans = 0

    for i in range(X,0,-1):

        cur = pff(i)

        flag = True

        now = 0

        for j in list(cur.values()):

            if j==1:

                flag = False

            if now==0:

                now = j

            else:

                if now%j!=0 and j%now!=0:

                    flag = False

        if flag:

            ans = i

            break

    print(ans)



import sys,copy,bisect,itertools,heapq,math # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


from heapq import heappop,heappush,heapify # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


from collections import Counter,defaultdict,deque # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


def I(): return int(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


def LI(): return list(map(int,sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LSI(): return list(map(str,sys.stdin.readline().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LS(): return sys.stdin.readline().split() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def SI(): return sys.stdin.readline().strip() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


mod = 10**9 + 7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


inf = float('inf') # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




examB() # Hits:1.0, Total execution time: 252.792 ms, Average time per hit: 252.792 ms 

",p03352,True
"x = int(eval(input()))

S = set()

S.add(1)

for b in range(2, int(1000**0.5) + 1):

	for p in range(2, 10):

		if b**p > 1000:

			break

		S.add(b**p)

for n in range(x, 0, -1):

	if n in S:

		print(n)

		exit()","x = int(eval(input())) # Hits:1.0, Total execution time: 33.5 ms, Average time per hit: 33.5 ms 


ans = 1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for b in range(2, 33): # Hits:32.0, Total execution time: 2.62 ms, Average time per hit: 0.081875 ms 


	for p in range(2, 10): # Hits:80.0, Total execution time: 8.46 ms, Average time per hit: 0.10575 ms 


		n = b**p # Hits:79.0, Total execution time: 8.004 ms, Average time per hit: 0.10131645569620254 ms 


		if n > x: # Hits:79.0, Total execution time: 6.868 ms, Average time per hit: 0.08693670886075949 ms 


			break # Hits:30.0, Total execution time: 2.377 ms, Average time per hit: 0.07923333333333334 ms 


		ans = max(ans, n) # Hits:49.0, Total execution time: 7.584 ms, Average time per hit: 0.15477551020408162 ms 


print(ans) # Hits:1.0, Total execution time: 5.584 ms, Average time per hit: 5.584 ms 
",p03352,False
"X = int(eval(input())) # Hits:1.0, Total execution time: 34.333 ms, Average time per hit: 34.333 ms 


ans = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(2,int(X**0.5)+1): # Hits:31.0, Total execution time: 2.836 ms, Average time per hit: 0.09148387096774194 ms 


    cnt = 2 # Hits:30.0, Total execution time: 1.874 ms, Average time per hit: 0.06246666666666667 ms 


    y = i**cnt # Hits:30.0, Total execution time: 2.916 ms, Average time per hit: 0.09720000000000001 ms 


    while y<=X: # Hits:79.0, Total execution time: 7.454 ms, Average time per hit: 0.09435443037974683 ms 


        ans = max(ans,y) # Hits:49.0, Total execution time: 7.251 ms, Average time per hit: 0.1479795918367347 ms 


        cnt +=1 # Hits:49.0, Total execution time: 4.121 ms, Average time per hit: 0.08410204081632654 ms 


        y = y*i # Hits:49.0, Total execution time: 4.338 ms, Average time per hit: 0.08853061224489796 ms 


print(ans)        # Hits:1.0, Total execution time: 8.875 ms, Average time per hit: 8.875 ms 
","X = int(eval(input())) # Hits:1.0, Total execution time: 37.667 ms, Average time per hit: 37.667 ms 


if X==1: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print((1)) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 


else:

    cmax = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    for i in range(2,int(X**0.5)+1): # Hits:31.0, Total execution time: 3.043 ms, Average time per hit: 0.09816129032258064 ms 


        k = 2 # Hits:30.0, Total execution time: 2.291 ms, Average time per hit: 0.07636666666666667 ms 


        while i**k<=X: # Hits:79.0, Total execution time: 9.25 ms, Average time per hit: 0.11708860759493671 ms 


            k += 1 # Hits:49.0, Total execution time: 4.044 ms, Average time per hit: 0.08253061224489795 ms 


        cmax = max(cmax,i**(k-1)) # Hits:30.0, Total execution time: 6.207 ms, Average time per hit: 0.2069 ms 


    print(cmax) # Hits:1.0, Total execution time: 5.875 ms, Average time per hit: 5.875 ms 
",p03352,True
"X = int(eval(input())) # Hits:1.0, Total execution time: 39.041 ms, Average time per hit: 39.041 ms 


if X==1: # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    print((1)) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 


else:

    cmax = 1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    for i in range(2,int(X**0.5)+1): # Hits:31.0, Total execution time: 3.089 ms, Average time per hit: 0.09964516129032258 ms 


        k = 2 # Hits:30.0, Total execution time: 2.243 ms, Average time per hit: 0.07476666666666666 ms 


        while i**k<=X: # Hits:79.0, Total execution time: 18.457 ms, Average time per hit: 0.23363291139240508 ms 


            cmax = max(cmax,i**k) # Hits:49.0, Total execution time: 8.75 ms, Average time per hit: 0.17857142857142858 ms 


            k += 1 # Hits:49.0, Total execution time: 4.289 ms, Average time per hit: 0.08753061224489796 ms 


    print(cmax) # Hits:1.0, Total execution time: 5.125 ms, Average time per hit: 5.125 ms 
","X = int(eval(input())) # Hits:1.0, Total execution time: 40.375 ms, Average time per hit: 40.375 ms 


n = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


if X<=3: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print((1)) # Hits:1.0, Total execution time: 8.75 ms, Average time per hit: 8.75 ms 


elif X==4: # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    print((4))

else:

    n = 4 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    for i in range(2,int(X**0.5)+1): # Hits:31.0, Total execution time: 3.167 ms, Average time per hit: 0.10216129032258064 ms 


        b = i # Hits:30.0, Total execution time: 2.125 ms, Average time per hit: 0.07083333333333333 ms 


        k = 1 # Hits:30.0, Total execution time: 2.083 ms, Average time per hit: 0.06943333333333333 ms 


        while b**k<=X: # Hits:109.0, Total execution time: 12.626 ms, Average time per hit: 0.1158348623853211 ms 


            k += 1 # Hits:79.0, Total execution time: 6.409 ms, Average time per hit: 0.081126582278481 ms 


        k -= 1 # Hits:30.0, Total execution time: 2.714 ms, Average time per hit: 0.09046666666666667 ms 


        if k>=2: # Hits:30.0, Total execution time: 2.497 ms, Average time per hit: 0.08323333333333334 ms 


            n = max(n,b**k) # Hits:30.0, Total execution time: 5.997 ms, Average time per hit: 0.1999 ms 


    print(n) # Hits:1.0, Total execution time: 8.833 ms, Average time per hit: 8.833 ms 
",p03352,True
"import math # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




X = int(eval(input())) # Hits:1.0, Total execution time: 38.875 ms, Average time per hit: 38.875 ms 




ans = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(X+1): # Hits:39.0, Total execution time: 3.379 ms, Average time per hit: 0.08664102564102563 ms 


  for j in range(2,max(math.floor(math.sqrt(X-i))+1,3)): # Hits:1208.0, Total execution time: 111.233 ms, Average time per hit: 0.09208029801324502 ms 


    beki = False # Hits:1170.0, Total execution time: 86.179 ms, Average time per hit: 0.07365726495726496 ms 


    tmp = X-i # Hits:1170.0, Total execution time: 106.456 ms, Average time per hit: 0.0909880341880342 ms 


    while True: # Hits:1317.0, Total execution time: 98.806 ms, Average time per hit: 0.07502353834472285 ms 


      if tmp%j != 0: # Hits:1317.0, Total execution time: 127.261 ms, Average time per hit: 0.0966294608959757 ms 


        if tmp == 1: # Hits:1170.0, Total execution time: 97.866 ms, Average time per hit: 0.08364615384615386 ms 


          beki = True # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


        break # Hits:1170.0, Total execution time: 82.743 ms, Average time per hit: 0.07072051282051282 ms 


      else:

        tmp //= j # Hits:147.0, Total execution time: 13.709 ms, Average time per hit: 0.09325850340136055 ms 


    if beki: # Hits:1170.0, Total execution time: 89.013 ms, Average time per hit: 0.07607948717948718 ms 


      ans = X-i # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


      break # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


  if beki: # Hits:39.0, Total execution time: 2.953 ms, Average time per hit: 0.07571794871794872 ms 


    break # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




print(ans) # Hits:1.0, Total execution time: 4.708 ms, Average time per hit: 4.708 ms 

","import math # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




X = int(eval(input())) # Hits:1.0, Total execution time: 33.292 ms, Average time per hit: 33.292 ms 




ans = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(2,max(3, math.floor(math.sqrt(X))+1)): # Hits:31.0, Total execution time: 3.457 ms, Average time per hit: 0.11151612903225806 ms 


  j = 2 # Hits:30.0, Total execution time: 2.293 ms, Average time per hit: 0.07643333333333334 ms 


  while i**j <= X: # Hits:79.0, Total execution time: 9.665 ms, Average time per hit: 0.12234177215189873 ms 


    if i**j > ans: # Hits:49.0, Total execution time: 5.459 ms, Average time per hit: 0.11140816326530613 ms 


      ans = i**j # Hits:13.0, Total execution time: 1.415 ms, Average time per hit: 0.10884615384615384 ms 


    j += 1 # Hits:49.0, Total execution time: 4.124 ms, Average time per hit: 0.08416326530612245 ms 




print(ans) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 

",p03352,True
"#素因数分解して列挙する関数、約数列挙ではない！

from collections import Counter # Hits:1.0, Total execution time: 1.709 ms, Average time per hit: 1.709 ms 


def factorize(n): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


  b = 2

  fct = []

  while b * b <= n:

    while n % b == 0:

      n //= b

      fct.append(b)

    b = b + 1

  if n > 1:

    fct.append(n)

  f = list(Counter(fct).values())

  if 1 not in f and len(set(f))==1:

    return True

  return False



X = int(eval(input())) # Hits:1.0, Total execution time: 41.708 ms, Average time per hit: 41.708 ms 


for i in range(X,0,-1): # Hits:39.0, Total execution time: 3.834 ms, Average time per hit: 0.0983076923076923 ms 


  f = factorize(i) # Hits:39.0, Total execution time: 190.707 ms, Average time per hit: 4.889923076923077 ms 


  if f==True or i==1: # Hits:39.0, Total execution time: 4.792 ms, Average time per hit: 0.12287179487179488 ms 


    print(i) # Hits:1.0, Total execution time: 8.334 ms, Average time per hit: 8.334 ms 


    break # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 
","def solve(): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


  ans = 0

  X = int(eval(input()))

  lis = [False]*(X+1)

  lis[1] = True

  for b in range(2,X+1):

    p = 2

    while b**p<=X:

      lis[b**p] = True

      p += 1

  for i in range(X,-1,-1):

    if lis[i]==True:

      return i

print((solve())) # Hits:1.0, Total execution time: 192.084 ms, Average time per hit: 192.084 ms 
",p03352,True
"#abc097 b bekijousu

import math # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




def large_num(n): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    xx=x/n

    p=1

    while xx-n**p>=0:

        p+=1

    if p==1:

        return 0

    else:

        return n**p



x=int(eval(input())) # Hits:1.0, Total execution time: 39.166 ms, Average time per hit: 39.166 ms 


b_last=int(math.sqrt(1000)) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


num=[i for i in range(2,b_last+1)] # Hits:1.0, Total execution time: 2.916 ms, Average time per hit: 2.916 ms 




ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 






if 4>x: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    ans=1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


else:

    for i in num: # Hits:31.0, Total execution time: 2.376 ms, Average time per hit: 0.07664516129032257 ms 


        ans=max(large_num(i),ans) # Hits:30.0, Total execution time: 23.789 ms, Average time per hit: 0.7929666666666667 ms 


print(ans) # Hits:1.0, Total execution time: 6.042 ms, Average time per hit: 6.042 ms 

","#abc97 b

x=int(eval(input())) # Hits:1.0, Total execution time: 56.042 ms, Average time per hit: 56.042 ms 




beki=[1] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




def gene_beki(): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    for b in range(2,36):

        for p in range(2,10):

            num=b**p

            if num>x:

                continue

            else:

                beki.append(num)

gene_beki() # Hits:1.0, Total execution time: 63.792 ms, Average time per hit: 63.792 ms 


print((max(beki))) # Hits:1.0, Total execution time: 6.458 ms, Average time per hit: 6.458 ms 
",p03352,True
"*r,=list(range(1,32));x=int(eval(input()));print((max(b**p*(b**p<=x)for p in r[1:]for b in r))) # Hits:1.0, Total execution time: 256.75 ms, Average time per hit: 256.75 ms 
","r=list(range(1,32));x=int(eval(input()));print((max(b**p*(b**p<=x)for p in r[1:]for b in r))) # Hits:1.0, Total execution time: 271.458 ms, Average time per hit: 271.458 ms 
",p03352,True
"x = int(eval(input())) # Hits:1.0, Total execution time: 32.0 ms, Average time per hit: 32.0 ms 


c = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for b in range(1,x): # Hits:999.0, Total execution time: 85.249 ms, Average time per hit: 0.08533433433433434 ms 


  for q in range(2,x): # Hits:2044.0, Total execution time: 247.75 ms, Average time per hit: 0.12120841487279843 ms 


    if b**q <=x: # Hits:2043.0, Total execution time: 280.767 ms, Average time per hit: 0.1374287812041116 ms 


      c = max(c,b**q) # Hits:1046.0, Total execution time: 231.949 ms, Average time per hit: 0.22174856596558318 ms 


    else:

      break # Hits:997.0, Total execution time: 75.623 ms, Average time per hit: 0.07585055165496489 ms 


print(c) # Hits:1.0, Total execution time: 5.0 ms, Average time per hit: 5.0 ms 
","x = int(eval(input())) # Hits:1.0, Total execution time: 39.666 ms, Average time per hit: 39.666 ms 


c = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for b in range(1,x+1): # Hits:1000.0, Total execution time: 88.125 ms, Average time per hit: 0.088125 ms 


  for q in range(2,x+2): # Hits:2047.0, Total execution time: 260.124 ms, Average time per hit: 0.12707572056668295 ms 


    a = b**q # Hits:2046.0, Total execution time: 239.525 ms, Average time per hit: 0.11706989247311828 ms 


    if a <=x: # Hits:2046.0, Total execution time: 174.815 ms, Average time per hit: 0.08544232649071358 ms 


      c.append(a) # Hits:1048.0, Total execution time: 128.414 ms, Average time per hit: 0.1225324427480916 ms 


    else:

      break # Hits:998.0, Total execution time: 72.431 ms, Average time per hit: 0.07257615230460922 ms 




C = set(c) # Hits:1.0, Total execution time: 4.708 ms, Average time per hit: 4.708 ms 


print((max(C))) # Hits:1.0, Total execution time: 6.333 ms, Average time per hit: 6.333 ms 

",p03352,True
"n = int(eval(input())) # Hits:1.0, Total execution time: 43.0 ms, Average time per hit: 43.0 ms 


l = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,n+1): # Hits:1000.0, Total execution time: 84.11 ms, Average time per hit: 0.08411 ms 


    for j in range(2,100): # Hits:98901.0, Total execution time: 8919.753 ms, Average time per hit: 0.09018870385537052 ms 


        if i**j <= n: # Hits:97902.0, Total execution time: 28883.234 ms, Average time per hit: 0.29502189945047086 ms 


            l.append(i**j) # Hits:147.0, Total execution time: 25.579 ms, Average time per hit: 0.17400680272108843 ms 


print((max(l))) # Hits:1.0, Total execution time: 10.125 ms, Average time per hit: 10.125 ms 
","n = int(eval(input())) # Hits:1.0, Total execution time: 40.917 ms, Average time per hit: 40.917 ms 


l = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(1,n+1): # Hits:1000.0, Total execution time: 86.963 ms, Average time per hit: 0.086963 ms 


    for j in range(2,10): # Hits:8991.0, Total execution time: 880.718 ms, Average time per hit: 0.09795551106662218 ms 


        if i**j <= n: # Hits:7992.0, Total execution time: 1099.835 ms, Average time per hit: 0.13761699199199198 ms 


            l.append(i**j) # Hits:57.0, Total execution time: 9.039 ms, Average time per hit: 0.15857894736842104 ms 


print((max(l))) # Hits:1.0, Total execution time: 9.375 ms, Average time per hit: 9.375 ms 
",p03352,True
"import math # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


x = int(eval(input())) # Hits:1.0, Total execution time: 32.792 ms, Average time per hit: 32.792 ms 




L = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(2,int(math.floor(math.sqrt(x)))+1): # Hits:31.0, Total execution time: 3.54 ms, Average time per hit: 0.11419354838709676 ms 


  for j in range(x//i + 1): # Hits:3068.0, Total execution time: 281.127 ms, Average time per hit: 0.0916320078226858 ms 


    if i ** j <= x: # Hits:3038.0, Total execution time: 659.056 ms, Average time per hit: 0.21693745885450955 ms 


      L.append(i ** j) # Hits:109.0, Total execution time: 17.75 ms, Average time per hit: 0.1628440366972477 ms 


      

if L == []: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


  print(""1"") # Hits:1.0, Total execution time: 5.417 ms, Average time per hit: 5.417 ms 


else:

  print((max(L))) # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 

",,p03352,True
"X = int(eval(input())) # Hits:1.0, Total execution time: 42.25 ms, Average time per hit: 42.25 ms 


se = set(n**e for n in range(32) for e in range(2,11) if n**e <= X) # Hits:1.0, Total execution time: 37.958 ms, Average time per hit: 37.958 ms 




answer = max(se) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


print(answer) # Hits:1.0, Total execution time: 9.333 ms, Average time per hit: 9.333 ms 

","X = int(eval(input())) # Hits:1.0, Total execution time: 41.25 ms, Average time per hit: 41.25 ms 


S = set(n**e for n in range(32) for e in range(2,11) if n**e<=X) # Hits:1.0, Total execution time: 38.625 ms, Average time per hit: 38.625 ms 


print((max(S))) # Hits:1.0, Total execution time: 6.458 ms, Average time per hit: 6.458 ms 

",p03352,True
"X = int(eval(input())) # Hits:1.0, Total execution time: 41.833 ms, Average time per hit: 41.833 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for b in range(X + 1): # Hits:1001.0, Total execution time: 81.246 ms, Average time per hit: 0.08116483516483516 ms 


	for p in range(2, 10):  #2^10=1024 # Hits:9000.0, Total execution time: 869.318 ms, Average time per hit: 0.09659088888888888 ms 


		tmp = b ** p # Hits:8000.0, Total execution time: 956.754 ms, Average time per hit: 0.11959425 ms 


		if tmp <= X and tmp > ans: # Hits:8000.0, Total execution time: 739.501 ms, Average time per hit: 0.092437625 ms 


			ans = tmp # Hits:14.0, Total execution time: 1.122 ms, Average time per hit: 0.08014285714285714 ms 


print(ans) # Hits:1.0, Total execution time: 17.25 ms, Average time per hit: 17.25 ms 

","from bisect import bisect_right # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 




expo = sorted(list(set([b**p for b in range(1, int(1000**0.5)+1) for p in range(2, 10) if b**p <= 1000]))) # Hits:1.0, Total execution time: 34.542 ms, Average time per hit: 34.542 ms 


X = int(eval(input())) # Hits:1.0, Total execution time: 49.083 ms, Average time per hit: 49.083 ms 




print((expo[bisect_right(expo, X)-1])) # Hits:1.0, Total execution time: 7.375 ms, Average time per hit: 7.375 ms 

",p03352,True
"from math import sqrt # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


X=int(eval(input())) # Hits:1.0, Total execution time: 40.625 ms, Average time per hit: 40.625 ms 


ans=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,int(sqrt(X))+1): # Hits:32.0, Total execution time: 3.579 ms, Average time per hit: 0.11184375 ms 


    now=i # Hits:31.0, Total execution time: 2.461 ms, Average time per hit: 0.07938709677419355 ms 


    b=2 # Hits:31.0, Total execution time: 2.539 ms, Average time per hit: 0.08190322580645161 ms 


    while i!=1 and X>=i**b: # Hits:80.0, Total execution time: 11.791 ms, Average time per hit: 0.14738749999999998 ms 


        now=i**b # Hits:49.0, Total execution time: 4.791 ms, Average time per hit: 0.09777551020408162 ms 


        b+=1 # Hits:49.0, Total execution time: 4.418 ms, Average time per hit: 0.09016326530612245 ms 


    ans=max(ans, now) # Hits:31.0, Total execution time: 5.247 ms, Average time per hit: 0.16925806451612901 ms 


print(ans) # Hits:1.0, Total execution time: 5.208 ms, Average time per hit: 5.208 ms 
","X=int(eval(input())) # Hits:1.0, Total execution time: 52.167 ms, Average time per hit: 52.167 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,33): # Hits:33.0, Total execution time: 3.496 ms, Average time per hit: 0.10593939393939394 ms 


    for j in range(2,11): # Hits:320.0, Total execution time: 34.824 ms, Average time per hit: 0.108825 ms 


        now=i**j # Hits:288.0, Total execution time: 36.882 ms, Average time per hit: 0.1280625 ms 


        if ans<now and now<=X: # Hits:288.0, Total execution time: 36.875 ms, Average time per hit: 0.12803819444444445 ms 


            ans=now # Hits:14.0, Total execution time: 1.25 ms, Average time per hit: 0.08928571428571429 ms 




print(ans) # Hits:1.0, Total execution time: 5.334 ms, Average time per hit: 5.334 ms 

",p03352,True
"a = int(eval(input())) # Hits:1.0, Total execution time: 41.417 ms, Average time per hit: 41.417 ms 


l = []  # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(100): # Hits:101.0, Total execution time: 8.006 ms, Average time per hit: 0.07926732673267327 ms 


    for j in range(2,10): # Hits:900.0, Total execution time: 85.572 ms, Average time per hit: 0.09508 ms 


        if i**j <= a: # Hits:800.0, Total execution time: 104.303 ms, Average time per hit: 0.13037875 ms 


            l.append(i**j) # Hits:65.0, Total execution time: 10.623 ms, Average time per hit: 0.16343076923076924 ms 


print((max(l))) # Hits:1.0, Total execution time: 6.458 ms, Average time per hit: 6.458 ms 
","a = int(eval(input())) # Hits:1.0, Total execution time: 53.083 ms, Average time per hit: 53.083 ms 


m = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(a//2+1): # Hits:501.0, Total execution time: 43.372 ms, Average time per hit: 0.08657085828343314 ms 


    for j in range(1,10): # Hits:1065.0, Total execution time: 131.005 ms, Average time per hit: 0.1230093896713615 ms 


        if a>=i**j and m <i**j: # Hits:1062.0, Total execution time: 137.861 ms, Average time per hit: 0.12981261770244823 ms 


            m = i**j # Hits:14.0, Total execution time: 1.625 ms, Average time per hit: 0.11607142857142858 ms 


        if a < i**j: # Hits:1062.0, Total execution time: 122.554 ms, Average time per hit: 0.11539924670433145 ms 


            break # Hits:497.0, Total execution time: 38.707 ms, Average time per hit: 0.07788128772635815 ms 


print(m) # Hits:1.0, Total execution time: 5.083 ms, Average time per hit: 5.083 ms 

",p03352,True
"x = int(eval(input())) # Hits:1.0, Total execution time: 49.125 ms, Average time per hit: 49.125 ms 


ans = [] # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for b in range(1, 1000): # Hits:1000.0, Total execution time: 87.22 ms, Average time per hit: 0.08721999999999999 ms 


    for p in range(2, 10): # Hits:1056.0, Total execution time: 163.54 ms, Average time per hit: 0.15486742424242425 ms 


        tmp = b**p # Hits:1054.0, Total execution time: 109.015 ms, Average time per hit: 0.10342979127134726 ms 


        if tmp <= x: # Hits:1054.0, Total execution time: 90.533 ms, Average time per hit: 0.08589468690702087 ms 


            ans.append(tmp) # Hits:57.0, Total execution time: 8.415 ms, Average time per hit: 0.14763157894736842 ms 


        else:

            break # Hits:997.0, Total execution time: 72.766 ms, Average time per hit: 0.07298495486459378 ms 


print((max(*ans))) # Hits:1.0, Total execution time: 7.75 ms, Average time per hit: 7.75 ms 

","x = int(eval(input())) # Hits:1.0, Total execution time: 44.5 ms, Average time per hit: 44.5 ms 


ans = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for b in range(1, int(1000**.5)+1): # Hits:32.0, Total execution time: 2.958 ms, Average time per hit: 0.0924375 ms 


    for p in range(2, 10): # Hits:279.0, Total execution time: 27.126 ms, Average time per hit: 0.0972258064516129 ms 


        y = b**p # Hits:248.0, Total execution time: 29.009 ms, Average time per hit: 0.11697177419354839 ms 


        if y <= x and ans < y: # Hits:248.0, Total execution time: 25.788 ms, Average time per hit: 0.10398387096774193 ms 


            ans = y # Hits:13.0, Total execution time: 1.209 ms, Average time per hit: 0.093 ms 


print(ans) # Hits:1.0, Total execution time: 5.917 ms, Average time per hit: 5.917 ms 

",p03352,True
"import math # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




x = int(eval(input())) # Hits:1.0, Total execution time: 42.708 ms, Average time per hit: 42.708 ms 


 

max_bp = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for b in range(1, x + 1): # Hits:1000.0, Total execution time: 86.345 ms, Average time per hit: 0.086345 ms 


  for p in range(2, x + 2): # Hits:2047.0, Total execution time: 262.178 ms, Average time per hit: 0.1280791402051783 ms 


    bp = b ** p # Hits:2046.0, Total execution time: 250.21 ms, Average time per hit: 0.12229227761485827 ms 


    if bp > x: # Hits:2046.0, Total execution time: 182.702 ms, Average time per hit: 0.08929716520039101 ms 


      break # Hits:998.0, Total execution time: 78.577 ms, Average time per hit: 0.07873446893787575 ms 


    max_bp = max(max_bp, bp) # Hits:1048.0, Total execution time: 167.789 ms, Average time per hit: 0.16010400763358779 ms 




print(max_bp) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 
","# B. Exponential

# https://atcoder.jp/contests/abc097/tasks/abc097_b



x = int(eval(input())) # Hits:1.0, Total execution time: 41.375 ms, Average time per hit: 41.375 ms 




ans = 1 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for b in range(2, int(x ** .5) + 2): # Hits:32.0, Total execution time: 4.086 ms, Average time per hit: 0.1276875 ms 


  p = 2 # Hits:31.0, Total execution time: 3.041 ms, Average time per hit: 0.09809677419354838 ms 


  while b ** p <= x: # Hits:80.0, Total execution time: 13.211 ms, Average time per hit: 0.1651375 ms 


    ans = max(ans, b ** p) # Hits:49.0, Total execution time: 11.086 ms, Average time per hit: 0.22624489795918368 ms 


    p += 1 # Hits:49.0, Total execution time: 5.456 ms, Average time per hit: 0.1113469387755102 ms 




print(ans) # Hits:1.0, Total execution time: 7.209 ms, Average time per hit: 7.209 ms 
",p03352,True
"def judge(x): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    for i in range(2, x):

        t = x

        while t != 1:

            if t % i == 0:

                t //= i

            else:

                break

            if t == 1:

                return True

    return False





x = int(eval(input())) # Hits:1.0, Total execution time: 38.417 ms, Average time per hit: 38.417 ms 




ans = 1 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




for i in range(x, 1, -1): # Hits:39.0, Total execution time: 3.914 ms, Average time per hit: 0.10035897435897437 ms 


    if judge(i): # Hits:39.0, Total execution time: 8011.338 ms, Average time per hit: 205.41892307692305 ms 


        ans = i # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


        break # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




print(ans) # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 

","x = int(eval(input())) # Hits:1.0, Total execution time: 36.041 ms, Average time per hit: 36.041 ms 


ans = 1 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for base in range(1, 101): # Hits:101.0, Total execution time: 8.839 ms, Average time per hit: 0.08751485148514851 ms 


    for p in range(2, 10): # Hits:157.0, Total execution time: 19.126 ms, Average time per hit: 0.12182165605095541 ms 


        if base**p > x: # Hits:155.0, Total execution time: 17.124 ms, Average time per hit: 0.11047741935483872 ms 


            break # Hits:98.0, Total execution time: 7.625 ms, Average time per hit: 0.0778061224489796 ms 


        ans = max(ans, base**p) # Hits:57.0, Total execution time: 10.669 ms, Average time per hit: 0.18717543859649124 ms 




print(ans) # Hits:1.0, Total execution time: 5.291 ms, Average time per hit: 5.291 ms 
",p03352,True
"import math # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


X = int(eval(input())) # Hits:1.0, Total execution time: 37.583 ms, Average time per hit: 37.583 ms 


beki = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


beki.append(1) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


Xruto = math.sqrt(X) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


Xruto = math.floor(Xruto) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in range(2, Xruto+1): # Hits:31.0, Total execution time: 2.787 ms, Average time per hit: 0.08990322580645162 ms 


    for j in range(10): # Hits:139.0, Total execution time: 13.634 ms, Average time per hit: 0.09808633093525179 ms 


        a = pow(i, j) # Hits:138.0, Total execution time: 16.504 ms, Average time per hit: 0.11959420289855072 ms 


        if a <= X: # Hits:138.0, Total execution time: 11.46 ms, Average time per hit: 0.08304347826086957 ms 


            beki.append(a) # Hits:109.0, Total execution time: 13.748 ms, Average time per hit: 0.1261284403669725 ms 


        else:

            break # Hits:29.0, Total execution time: 2.17 ms, Average time per hit: 0.07482758620689656 ms 


print((max(beki))) # Hits:1.0, Total execution time: 5.958 ms, Average time per hit: 5.958 ms 

","import math # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


X = int(eval(input())) # Hits:1.0, Total execution time: 29.667 ms, Average time per hit: 29.667 ms 


ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


Y = math.floor(math.sqrt(X)) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


for i in range(2, Y+1): # Hits:31.0, Total execution time: 2.793 ms, Average time per hit: 0.09009677419354839 ms 


    for j in range(2, 10): # Hits:270.0, Total execution time: 25.161 ms, Average time per hit: 0.09318888888888888 ms 


        a = i**j # Hits:240.0, Total execution time: 26.664 ms, Average time per hit: 0.11109999999999999 ms 


        if a <= X: # Hits:240.0, Total execution time: 21.457 ms, Average time per hit: 0.08940416666666667 ms 


            ans = max(ans, a) # Hits:49.0, Total execution time: 8.126 ms, Average time per hit: 0.16583673469387755 ms 


print(ans) # Hits:1.0, Total execution time: 4.708 ms, Average time per hit: 4.708 ms 

",p03352,True
"x=int(eval(input())) # Hits:1.0, Total execution time: 34.416 ms, Average time per hit: 34.416 ms 


for i in range(x,0,-1): # Hits:39.0, Total execution time: 3.628 ms, Average time per hit: 0.09302564102564102 ms 


    for p in range(1,int(i**.5)+1): # Hits:1247.0, Total execution time: 109.982 ms, Average time per hit: 0.0881972734562951 ms 


        for q in range(10): # Hits:13291.0, Total execution time: 1161.334 ms, Average time per hit: 0.08737747347829358 ms 


            if i==p**q: # Hits:12083.0, Total execution time: 1568.211 ms, Average time per hit: 0.12978655962923116 ms 


                print(i) # Hits:1.0, Total execution time: 8.959 ms, Average time per hit: 8.959 ms 


                break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


        else:

            continue # Hits:1208.0, Total execution time: 86.593 ms, Average time per hit: 0.07168294701986755 ms 


        break # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    else:

        continue # Hits:38.0, Total execution time: 2.537 ms, Average time per hit: 0.06676315789473683 ms 


    break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 

","x = int(eval(input())) # Hits:1.0, Total execution time: 40.667 ms, Average time per hit: 40.667 ms 


res = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,int(x**.5)+1): # Hits:32.0, Total execution time: 3.459 ms, Average time per hit: 0.10809375 ms 


    for j in range(2,1000): # Hits:1078.0, Total execution time: 89.029 ms, Average time per hit: 0.08258719851576994 ms 


        if i ** j > x: # Hits:1077.0, Total execution time: 173.212 ms, Average time per hit: 0.16082822655524606 ms 


            break # Hits:30.0, Total execution time: 2.461 ms, Average time per hit: 0.08203333333333333 ms 


        res = max(res, i ** j) # Hits:1047.0, Total execution time: 240.311 ms, Average time per hit: 0.22952340019102196 ms 


print(res) # Hits:1.0, Total execution time: 5.042 ms, Average time per hit: 5.042 ms 

",p03352,True
"x = int(eval(input())) # Hits:1.0, Total execution time: 40.625 ms, Average time per hit: 40.625 ms 


res = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,int(x**.5)+1): # Hits:32.0, Total execution time: 2.917 ms, Average time per hit: 0.09115625 ms 


    for j in range(2,1000): # Hits:1078.0, Total execution time: 90.303 ms, Average time per hit: 0.08376901669758813 ms 


        if i ** j > x: # Hits:1077.0, Total execution time: 182.747 ms, Average time per hit: 0.16968152274837514 ms 


            break # Hits:30.0, Total execution time: 2.251 ms, Average time per hit: 0.07503333333333333 ms 


        res = max(res, i ** j) # Hits:1047.0, Total execution time: 226.513 ms, Average time per hit: 0.21634479465138493 ms 


print(res) # Hits:1.0, Total execution time: 4.791 ms, Average time per hit: 4.791 ms 

",,p03352,True
"x = int(eval(input())) # Hits:1.0, Total execution time: 26.875 ms, Average time per hit: 26.875 ms 


print((max([pow(i, j) for i in range(1, 32) # Hits:1.0, Total execution time: 59.416 ms, Average time per hit: 59.416 ms 


           for j in range(2, 10) if pow(i, j) <= x])))
","x = int(eval(input())) # Hits:1.0, Total execution time: 40.375 ms, Average time per hit: 40.375 ms 




table = [False] * -~x # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


table[1] = True # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


for i in range(2, 32): # Hits:31.0, Total execution time: 3.089 ms, Average time per hit: 0.09964516129032258 ms 


    j = i * i # Hits:30.0, Total execution time: 2.832 ms, Average time per hit: 0.09440000000000001 ms 


    while j <= x: # Hits:79.0, Total execution time: 7.959 ms, Average time per hit: 0.10074683544303797 ms 


        table[j] = True # Hits:49.0, Total execution time: 4.373 ms, Average time per hit: 0.08924489795918368 ms 


        j *= i # Hits:49.0, Total execution time: 4.297 ms, Average time per hit: 0.08769387755102041 ms 




print((max(i for i in range(x + 1) if table[i]))) # Hits:1.0, Total execution time: 52.209 ms, Average time per hit: 52.209 ms 

",p03352,True
"x=int(eval(input())) # Hits:1.0, Total execution time: 39.917 ms, Average time per hit: 39.917 ms 


p=10 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans=0 # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(1,1+x): # Hits:1000.0, Total execution time: 81.493 ms, Average time per hit: 0.081493 ms 


    for j in range(2,p+1): # Hits:9990.0, Total execution time: 955.225 ms, Average time per hit: 0.09561811811811811 ms 


        if i**j<=x: # Hits:8991.0, Total execution time: 1262.56 ms, Average time per hit: 0.1404248693137582 ms 


            ans=max(ans,i**j) # Hits:58.0, Total execution time: 10.793 ms, Average time per hit: 0.18608620689655173 ms 


            

print(ans) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 
","x=int(eval(input())) # Hits:1.0, Total execution time: 41.666 ms, Average time per hit: 41.666 ms 


maxim=0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(2,32): # Hits:31.0, Total execution time: 2.708 ms, Average time per hit: 0.08735483870967742 ms 


    for j in range(2,10): # Hits:270.0, Total execution time: 25.325 ms, Average time per hit: 0.0937962962962963 ms 


        temp=i**j # Hits:240.0, Total execution time: 25.247 ms, Average time per hit: 0.10519583333333334 ms 


        if temp<=x and maxim<temp: # Hits:240.0, Total execution time: 23.243 ms, Average time per hit: 0.09684583333333333 ms 


            maxim=temp # Hits:13.0, Total execution time: 1.291 ms, Average time per hit: 0.0993076923076923 ms 


print((maxim if maxim>0 else 1)) # Hits:1.0, Total execution time: 8.458 ms, Average time per hit: 8.458 ms 
",p03352,True
"from math import sqrt # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


x=int(eval(input())) # Hits:1.0, Total execution time: 39.584 ms, Average time per hit: 39.584 ms 


c=1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for b in range(1,int(sqrt(x))+1): # Hits:32.0, Total execution time: 3.421 ms, Average time per hit: 0.10690625 ms 


  for p in range(2,x): # Hits:1077.0, Total execution time: 85.383 ms, Average time per hit: 0.07927855153203343 ms 


    if b**p<=x: # Hits:1076.0, Total execution time: 165.654 ms, Average time per hit: 0.15395353159851302 ms 


      c=max(b**p,c) # Hits:1046.0, Total execution time: 223.682 ms, Average time per hit: 0.2138451242829828 ms 


    else:

      break # Hits:30.0, Total execution time: 2.247 ms, Average time per hit: 0.07490000000000001 ms 


print(c) # Hits:1.0, Total execution time: 8.917 ms, Average time per hit: 8.917 ms 

","from math import sqrt # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


x=int(eval(input())) # Hits:1.0, Total execution time: 41.417 ms, Average time per hit: 41.417 ms 


c=1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for b in range(1,int(sqrt(x))+1): # Hits:32.0, Total execution time: 3.917 ms, Average time per hit: 0.12240625 ms 


  for p in range(2,10): # Hits:88.0, Total execution time: 9.289 ms, Average time per hit: 0.10555681818181818 ms 


    if b**p<=x: # Hits:86.0, Total execution time: 9.208 ms, Average time per hit: 0.10706976744186046 ms 


      c=max(b**p,c) # Hits:57.0, Total execution time: 10.752 ms, Average time per hit: 0.1886315789473684 ms 


    else:

      break # Hits:29.0, Total execution time: 1.791 ms, Average time per hit: 0.06175862068965517 ms 


print(c) # Hits:1.0, Total execution time: 6.209 ms, Average time per hit: 6.209 ms 

",p03352,True
"X = int(eval(input())) # Hits:1.0, Total execution time: 37.292 ms, Average time per hit: 37.292 ms 


ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, X): # Hits:999.0, Total execution time: 85.179 ms, Average time per hit: 0.08526426426426427 ms 


  for p in [2, 3, 5, 7]: # Hits:4990.0, Total execution time: 426.542 ms, Average time per hit: 0.08547935871743487 ms 


    calc = i**p # Hits:3992.0, Total execution time: 454.333 ms, Average time per hit: 0.11381087174348697 ms 


    if(calc <= X): # Hits:3992.0, Total execution time: 370.14 ms, Average time per hit: 0.09272044088176352 ms 


      ans = max(ans, calc) # Hits:45.0, Total execution time: 7.042 ms, Average time per hit: 0.15648888888888887 ms 


print(ans) # Hits:1.0, Total execution time: 8.916 ms, Average time per hit: 8.916 ms 
","X = int(eval(input())) # Hits:1.0, Total execution time: 36.625 ms, Average time per hit: 36.625 ms 


ans = 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,X+1): # Hits:1000.0, Total execution time: 82.766 ms, Average time per hit: 0.082766 ms 


  for p in [2, 3, 5, 7]: # Hits:4995.0, Total execution time: 426.69 ms, Average time per hit: 0.08542342342342343 ms 


    if(i**p <= X): # Hits:3996.0, Total execution time: 493.567 ms, Average time per hit: 0.12351526526526527 ms 


      ans = max(ans, i**p) # Hits:45.0, Total execution time: 8.332 ms, Average time per hit: 0.18515555555555557 ms 


print(ans) # Hits:1.0, Total execution time: 4.958 ms, Average time per hit: 4.958 ms 
",p03352,True
"from bisect import bisect_right # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 






cands = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(2, 400): # Hits:399.0, Total execution time: 44.97 ms, Average time per hit: 0.11270676691729324 ms 


    cur = i # Hits:398.0, Total execution time: 30.87 ms, Average time per hit: 0.07756281407035176 ms 


    while cur * i <= 1000: # Hits:448.0, Total execution time: 50.259 ms, Average time per hit: 0.11218526785714286 ms 


        cands.append(cur * i) # Hits:50.0, Total execution time: 6.624 ms, Average time per hit: 0.13248 ms 


        cur *= i # Hits:50.0, Total execution time: 4.541 ms, Average time per hit: 0.09082 ms 


cands.sort() # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 




X = int(eval(input())) # Hits:1.0, Total execution time: 36.875 ms, Average time per hit: 36.875 ms 


if X == 1: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print((1)) # Hits:1.0, Total execution time: 5.375 ms, Average time per hit: 5.375 ms 


else:

    print((cands[bisect_right(cands, X) - 1])) # Hits:1.0, Total execution time: 6.958 ms, Average time per hit: 6.958 ms 

","X = int(eval(input())) # Hits:1.0, Total execution time: 36.042 ms, Average time per hit: 36.042 ms 


ans = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(2, 32): # Hits:31.0, Total execution time: 2.714 ms, Average time per hit: 0.08754838709677419 ms 


    for j in range(2, 10): # Hits:270.0, Total execution time: 26.285 ms, Average time per hit: 0.09735185185185184 ms 


        if i ** j > X: # Hits:240.0, Total execution time: 29.291 ms, Average time per hit: 0.12204583333333334 ms 


            continue # Hits:191.0, Total execution time: 12.793 ms, Average time per hit: 0.06697905759162304 ms 


        ans = max(ans, i ** j) # Hits:49.0, Total execution time: 10.215 ms, Average time per hit: 0.20846938775510204 ms 


print(ans) # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 

",p03352,True
"from math import sqrt # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


x = int(eval(input())) # Hits:1.0, Total execution time: 38.959 ms, Average time per hit: 38.959 ms 


cnt = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


l = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, x + 1): # Hits:1000.0, Total execution time: 85.218 ms, Average time per hit: 0.085218 ms 


    for j in range(1, int(sqrt(i)) +1): # Hits:21583.0, Total execution time: 2019.995 ms, Average time per hit: 0.09359194736598249 ms 


        for k in range(2, 10): # Hits:185256.0, Total execution time: 18266.877 ms, Average time per hit: 0.09860342984842596 ms 


            if j ** k == i: # Hits:164672.0, Total execution time: 21851.496 ms, Average time per hit: 0.13269709483093667 ms 


                l.append(i) # Hits:57.0, Total execution time: 9.543 ms, Average time per hit: 0.16742105263157897 ms 


print((max(l))) # Hits:1.0, Total execution time: 8.0 ms, Average time per hit: 8.0 ms 
","from math import sqrt # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


x = int(eval(input())) # Hits:1.0, Total execution time: 35.584 ms, Average time per hit: 35.584 ms 


l = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1, x + 1): # Hits:1000.0, Total execution time: 86.721 ms, Average time per hit: 0.086721 ms 


    for j in range(1, int(sqrt(i)) +1): # Hits:21583.0, Total execution time: 2005.288 ms, Average time per hit: 0.09291053143677895 ms 


        for k in range(2, 10): # Hits:185256.0, Total execution time: 18300.762 ms, Average time per hit: 0.0987863389040031 ms 


            if j ** k == i: # Hits:164672.0, Total execution time: 21972.392 ms, Average time per hit: 0.13343125728721336 ms 


                l.append(i) # Hits:57.0, Total execution time: 8.834 ms, Average time per hit: 0.1549824561403509 ms 


print((max(l))) # Hits:1.0, Total execution time: 9.375 ms, Average time per hit: 9.375 ms 
",p03352,True
"x = int(eval(input())) # Hits:1.0, Total execution time: 32.958 ms, Average time per hit: 32.958 ms 


list_ = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




if x == 1: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print((1)) # Hits:1.0, Total execution time: 5.958 ms, Average time per hit: 5.958 ms 


else:

    b = 2 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    while b**2 <= x: # Hits:31.0, Total execution time: 3.375 ms, Average time per hit: 0.10887096774193548 ms 


        p = 2 # Hits:30.0, Total execution time: 2.0 ms, Average time per hit: 0.06666666666666667 ms 


        while b**p <= x: # Hits:79.0, Total execution time: 9.165 ms, Average time per hit: 0.1160126582278481 ms 


            list_.append(b**p) # Hits:49.0, Total execution time: 7.081 ms, Average time per hit: 0.14451020408163265 ms 


            p += 1 # Hits:49.0, Total execution time: 4.041 ms, Average time per hit: 0.08246938775510204 ms 


        b += 1 # Hits:30.0, Total execution time: 2.42 ms, Average time per hit: 0.08066666666666668 ms 


    print((max(list_))) # Hits:1.0, Total execution time: 6.084 ms, Average time per hit: 6.084 ms 
","x = int(eval(input())) # Hits:1.0, Total execution time: 45.167 ms, Average time per hit: 45.167 ms 


ans = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


if x == 1: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    print((1)) # Hits:1.0, Total execution time: 7.0 ms, Average time per hit: 7.0 ms 


else:

    b = 2 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    while b**2 <= x: # Hits:31.0, Total execution time: 4.127 ms, Average time per hit: 0.13312903225806452 ms 


        p = 2 # Hits:30.0, Total execution time: 2.542 ms, Average time per hit: 0.08473333333333334 ms 


        while b**p <= x: # Hits:79.0, Total execution time: 11.209 ms, Average time per hit: 0.14188607594936709 ms 


            ans = max(b**p, ans) # Hits:49.0, Total execution time: 10.586 ms, Average time per hit: 0.2160408163265306 ms 


            p += 1 # Hits:49.0, Total execution time: 5.336 ms, Average time per hit: 0.10889795918367347 ms 


        b += 1 # Hits:30.0, Total execution time: 2.919 ms, Average time per hit: 0.0973 ms 


    print(ans) # Hits:1.0, Total execution time: 5.667 ms, Average time per hit: 5.667 ms 
",p03352,True
"x=int(eval(input())) # Hits:1.0, Total execution time: 39.25 ms, Average time per hit: 39.25 ms 


ans=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(int(x**(1/2))+1): # Hits:33.0, Total execution time: 3.623 ms, Average time per hit: 0.10978787878787878 ms 


    for j in range(int(x**(1/2))+1): # Hits:1056.0, Total execution time: 96.963 ms, Average time per hit: 0.09182102272727273 ms 


        if i**j<=x: # Hits:1024.0, Total execution time: 164.404 ms, Average time per hit: 0.16055078125 ms 


            ans.append(i**j) # Hits:173.0, Total execution time: 27.785 ms, Average time per hit: 0.16060693641618495 ms 


print((max(ans))) # Hits:1.0, Total execution time: 9.625 ms, Average time per hit: 9.625 ms 
","x=int(eval(input())) # Hits:1.0, Total execution time: 30.917 ms, Average time per hit: 30.917 ms 


print((max([i**j for i in range(33) for j in range(2,10) if i**j<=x]))) # Hits:1.0, Total execution time: 37.083 ms, Average time per hit: 37.083 ms 
",p03352,True
"import math # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


ans = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


X = int(eval(input())) # Hits:1.0, Total execution time: 40.791 ms, Average time per hit: 40.791 ms 


if X<4: # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    print((1)) # Hits:1.0, Total execution time: 5.25 ms, Average time per hit: 5.25 ms 


else:

    for i in range(2,math.ceil(math.sqrt(X))): # Hits:31.0, Total execution time: 3.083 ms, Average time per hit: 0.09945161290322581 ms 


        for j in range(math.ceil(math.log(X)/math.log(i))+1): # Hits:169.0, Total execution time: 23.082 ms, Average time per hit: 0.13657988165680474 ms 


            if i**j <= X: # Hits:139.0, Total execution time: 15.835 ms, Average time per hit: 0.11392086330935251 ms 


                ans = max(i**j,ans) # Hits:109.0, Total execution time: 19.253 ms, Average time per hit: 0.17663302752293578 ms 


    print(ans) # Hits:1.0, Total execution time: 5.584 ms, Average time per hit: 5.584 ms 

","ans = 0 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




X = int(eval(input())) # Hits:1.0, Total execution time: 37.417 ms, Average time per hit: 37.417 ms 


for i in range(1,33): # Hits:33.0, Total execution time: 3.036 ms, Average time per hit: 0.092 ms 


    for j in range(2,11): # Hits:320.0, Total execution time: 28.662 ms, Average time per hit: 0.08956874999999999 ms 


        if i**j <= X: # Hits:288.0, Total execution time: 36.502 ms, Average time per hit: 0.12674305555555557 ms 


            ans = max(ans,i**j) # Hits:58.0, Total execution time: 11.205 ms, Average time per hit: 0.19318965517241377 ms 


print(ans) # Hits:1.0, Total execution time: 5.583 ms, Average time per hit: 5.583 ms 
",p03352,True
"# ABC097 B  Exponential

x = int(eval(input())) # Hits:1.0, Total execution time: 39.708 ms, Average time per hit: 39.708 ms 


ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(1,33): # Hits:33.0, Total execution time: 3.085 ms, Average time per hit: 0.09348484848484849 ms 


    for j in range(2,10): # Hits:288.0, Total execution time: 29.04 ms, Average time per hit: 0.10083333333333333 ms 


        t = i**j # Hits:256.0, Total execution time: 31.499 ms, Average time per hit: 0.12304296875 ms 


        if t <= x: # Hits:256.0, Total execution time: 36.7 ms, Average time per hit: 0.143359375 ms 


            ans = max(t,ans) # Hits:57.0, Total execution time: 10.248 ms, Average time per hit: 0.17978947368421053 ms 


print(ans) # Hits:1.0, Total execution time: 5.209 ms, Average time per hit: 5.209 ms 
","x=int(eval(input())) # Hits:1.0, Total execution time: 34.25 ms, Average time per hit: 34.25 ms 


exp=[0]*(x+1) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


exp[1]=1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(2,x+1): # Hits:999.0, Total execution time: 82.489 ms, Average time per hit: 0.08257157157157156 ms 


    t=i*i # Hits:998.0, Total execution time: 89.225 ms, Average time per hit: 0.08940380761523047 ms 


    while t<=x: # Hits:1047.0, Total execution time: 100.915 ms, Average time per hit: 0.09638490926456542 ms 


        exp[t]=1 # Hits:49.0, Total execution time: 4.085 ms, Average time per hit: 0.08336734693877551 ms 


        t*=i # Hits:49.0, Total execution time: 4.251 ms, Average time per hit: 0.08675510204081632 ms 




for i in range(1,x+1): # Hits:1000.0, Total execution time: 82.585 ms, Average time per hit: 0.08258499999999999 ms 


    if exp[i]: # Hits:999.0, Total execution time: 87.502 ms, Average time per hit: 0.0875895895895896 ms 


        ans=max(i,ans) # Hits:40.0, Total execution time: 5.996 ms, Average time per hit: 0.1499 ms 


print(ans) # Hits:1.0, Total execution time: 4.584 ms, Average time per hit: 4.584 ms 
",p03352,True
"x=int(eval(input())) # Hits:1.0, Total execution time: 34.583 ms, Average time per hit: 34.583 ms 


a=set() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(1,1001): # Hits:1001.0, Total execution time: 81.502 ms, Average time per hit: 0.08142057942057941 ms 


  for j in range(2,34): # Hits:33000.0, Total execution time: 2955.414 ms, Average time per hit: 0.08955800000000001 ms 


    t=i**j # Hits:32000.0, Total execution time: 5444.033 ms, Average time per hit: 0.17012603125 ms 


    if t<=x: # Hits:32000.0, Total execution time: 2925.228 ms, Average time per hit: 0.091413375 ms 


      a.add(i**j) # Hits:81.0, Total execution time: 14.676 ms, Average time per hit: 0.1811851851851852 ms 


a=list(a) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


a.sort() # Hits:1.0, Total execution time: 5.625 ms, Average time per hit: 5.625 ms 


print((a[-1])) # Hits:1.0, Total execution time: 8.625 ms, Average time per hit: 8.625 ms 
","x=int(eval(input())) # Hits:1.0, Total execution time: 43.125 ms, Average time per hit: 43.125 ms 


ans=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(1,35): # Hits:35.0, Total execution time: 3.298 ms, Average time per hit: 0.09422857142857143 ms 


  for j in range(2,10): # Hits:306.0, Total execution time: 30.454 ms, Average time per hit: 0.09952287581699346 ms 


    t=i**j # Hits:272.0, Total execution time: 31.665 ms, Average time per hit: 0.1164154411764706 ms 


    if t<=x: # Hits:272.0, Total execution time: 25.872 ms, Average time per hit: 0.09511764705882354 ms 


      ans=max(ans,t) # Hits:57.0, Total execution time: 10.045 ms, Average time per hit: 0.1762280701754386 ms 


print(ans) # Hits:1.0, Total execution time: 8.291 ms, Average time per hit: 8.291 ms 







",p03352,True
"x=int(eval(input())) # Hits:1.0, Total execution time: 33.125 ms, Average time per hit: 33.125 ms 


v=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1,32): # Hits:32.0, Total execution time: 2.912 ms, Average time per hit: 0.091 ms 


    for j in range(2,1000): # Hits:30969.0, Total execution time: 2786.167 ms, Average time per hit: 0.08996632115986955 ms 


        if i**j<=x and (i+1)**j>x: # Hits:30938.0, Total execution time: 32778.845 ms, Average time per hit: 1.0595010989721378 ms 


            v.append(i**j) # Hits:998.0, Total execution time: 217.665 ms, Average time per hit: 0.21810120240480962 ms 


print((max(v))) # Hits:1.0, Total execution time: 11.625 ms, Average time per hit: 11.625 ms 
","x=int(eval(input())) # Hits:1.0, Total execution time: 41.667 ms, Average time per hit: 41.667 ms 


v=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for j in range(2,11): # Hits:10.0, Total execution time: 1.085 ms, Average time per hit: 0.1085 ms 


    for i in range(1,32): # Hits:58.0, Total execution time: 5.71 ms, Average time per hit: 0.09844827586206897 ms 


        if i**j<=x and (i+1)**j>x: # Hits:58.0, Total execution time: 11.414 ms, Average time per hit: 0.19679310344827589 ms 


            v.append(i**j) # Hits:9.0, Total execution time: 1.71 ms, Average time per hit: 0.19 ms 


            break # Hits:9.0, Total execution time: 0.75 ms, Average time per hit: 0.08333333333333333 ms 


print((max(v))) # Hits:1.0, Total execution time: 6.041 ms, Average time per hit: 6.041 ms 


        ",p03352,True
"x = int(eval(input())) # Hits:1.0, Total execution time: 41.833 ms, Average time per hit: 41.833 ms 




ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1, 1000): # Hits:1000.0, Total execution time: 92.704 ms, Average time per hit: 0.092704 ms 


    for j in range(2, 10): # Hits:8991.0, Total execution time: 874.972 ms, Average time per hit: 0.09731642753864976 ms 


        if i ** j <= x: # Hits:7992.0, Total execution time: 1090.198 ms, Average time per hit: 0.13641116116116117 ms 


            ans = max(i ** j, ans) # Hits:57.0, Total execution time: 12.29 ms, Average time per hit: 0.21561403508771929 ms 


            

print(ans) # Hits:1.0, Total execution time: 5.042 ms, Average time per hit: 5.042 ms 
","x = int(eval(input())) # Hits:1.0, Total execution time: 40.208 ms, Average time per hit: 40.208 ms 




ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


if x == 1: # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    ans = 1 # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


else:

    for i in range(2, 100): # Hits:99.0, Total execution time: 7.627 ms, Average time per hit: 0.07704040404040405 ms 


        n = 2 # Hits:98.0, Total execution time: 6.79 ms, Average time per hit: 0.0692857142857143 ms 


        while i ** n <= x: # Hits:147.0, Total execution time: 17.0 ms, Average time per hit: 0.11564625850340135 ms 


            ans = max(ans , i ** n) # Hits:49.0, Total execution time: 8.832 ms, Average time per hit: 0.18024489795918366 ms 


            n += 1 # Hits:49.0, Total execution time: 4.086 ms, Average time per hit: 0.08338775510204081 ms 


            

print(ans) # Hits:1.0, Total execution time: 6.0 ms, Average time per hit: 6.0 ms 
",p03352,True
"X = int(eval(input())) # Hits:1.0, Total execution time: 41.833 ms, Average time per hit: 41.833 ms 


ans = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for b in range(2,X): # Hits:998.0, Total execution time: 78.679 ms, Average time per hit: 0.07883667334669339 ms 


    for p in range(2,X): # Hits:1046.0, Total execution time: 176.925 ms, Average time per hit: 0.16914435946462714 ms 


        tmp_ans = b ** p # Hits:1046.0, Total execution time: 97.357 ms, Average time per hit: 0.0930755258126195 ms 


        if tmp_ans > X: # Hits:1046.0, Total execution time: 93.274 ms, Average time per hit: 0.08917208413001912 ms 


            break # Hits:997.0, Total execution time: 76.939 ms, Average time per hit: 0.07717051153460382 ms 


        if tmp_ans > ans: # Hits:49.0, Total execution time: 4.877 ms, Average time per hit: 0.09953061224489795 ms 


            ans = tmp_ans # Hits:13.0, Total execution time: 1.665 ms, Average time per hit: 0.12807692307692306 ms 


print(ans) # Hits:1.0, Total execution time: 5.167 ms, Average time per hit: 5.167 ms 
","X = int(eval(input())) # Hits:1.0, Total execution time: 41.084 ms, Average time per hit: 41.084 ms 


ans = 1 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for b in range(1, X): # Hits:999.0, Total execution time: 87.088 ms, Average time per hit: 0.08717517517517517 ms 


    for p in range(2, X): # Hits:2044.0, Total execution time: 256.604 ms, Average time per hit: 0.12554011741682974 ms 


        tmp = b ** p # Hits:2043.0, Total execution time: 241.954 ms, Average time per hit: 0.11843073910915321 ms 


        if tmp > X: # Hits:2043.0, Total execution time: 172.056 ms, Average time per hit: 0.0842173274596182 ms 


            break # Hits:997.0, Total execution time: 88.372 ms, Average time per hit: 0.08863791374122366 ms 


        if ans < tmp: # Hits:1046.0, Total execution time: 100.957 ms, Average time per hit: 0.0965172084130019 ms 


            ans = tmp # Hits:13.0, Total execution time: 1.041 ms, Average time per hit: 0.08007692307692307 ms 


print(ans) # Hits:1.0, Total execution time: 5.541 ms, Average time per hit: 5.541 ms 
",p03352,True
"import math # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


x=int(eval(input())) # Hits:1.0, Total execution time: 50.917 ms, Average time per hit: 50.917 ms 


ans=[1] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for i in range(2,x+1): # Hits:999.0, Total execution time: 85.792 ms, Average time per hit: 0.08587787787787787 ms 


    #print(i)

    k=int(math.log(x,i)) # Hits:998.0, Total execution time: 188.786 ms, Average time per hit: 0.18916432865731464 ms 


    if k>=2: # Hits:998.0, Total execution time: 90.576 ms, Average time per hit: 0.09075751503006012 ms 


        if i**(k+1) <= x: # Hits:30.0, Total execution time: 4.126 ms, Average time per hit: 0.13753333333333334 ms 


            ans.append(i**(k+1))

        else:

            ans.append(i**k) # Hits:30.0, Total execution time: 5.874 ms, Average time per hit: 0.1958 ms 


print((max(ans))) # Hits:1.0, Total execution time: 5.833 ms, Average time per hit: 5.833 ms 


#print(ans)
","x=int(eval(input())) # Hits:1.0, Total execution time: 32.458 ms, Average time per hit: 32.458 ms 


ans=[1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(2,x+1): # Hits:999.0, Total execution time: 83.921 ms, Average time per hit: 0.084005005005005 ms 


    k=2 # Hits:998.0, Total execution time: 74.259 ms, Average time per hit: 0.07440781563126252 ms 


    while True: # Hits:1047.0, Total execution time: 79.061 ms, Average time per hit: 0.07551193887297039 ms 


        a=i**k # Hits:1047.0, Total execution time: 100.972 ms, Average time per hit: 0.09643935052531041 ms 


        if a<=x: # Hits:1047.0, Total execution time: 92.05 ms, Average time per hit: 0.08791786055396371 ms 


            ans.append(a) # Hits:49.0, Total execution time: 6.04 ms, Average time per hit: 0.12326530612244897 ms 


            k+=1 # Hits:49.0, Total execution time: 4.458 ms, Average time per hit: 0.0909795918367347 ms 


        else:

            break # Hits:998.0, Total execution time: 74.349 ms, Average time per hit: 0.07449799599198396 ms 


print((max(ans))) # Hits:1.0, Total execution time: 5.75 ms, Average time per hit: 5.75 ms 
",p03352,True
"X = int(eval(input())) # Hits:1.0, Total execution time: 38.834 ms, Average time per hit: 38.834 ms 




ans = 0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(1, 100): # Hits:100.0, Total execution time: 8.464 ms, Average time per hit: 0.08464 ms 


    for j in range(2, 100): # Hits:9801.0, Total execution time: 837.869 ms, Average time per hit: 0.08548811345781043 ms 


        if i ** j <= X: # Hits:9702.0, Total execution time: 2493.726 ms, Average time per hit: 0.25703215831787257 ms 


            ans = max(ans, i ** j) # Hits:147.0, Total execution time: 30.785 ms, Average time per hit: 0.20942176870748297 ms 




print(ans) # Hits:1.0, Total execution time: 5.458 ms, Average time per hit: 5.458 ms 

","X = int(eval(input())) # Hits:1.0, Total execution time: 54.417 ms, Average time per hit: 54.417 ms 




ans = 1 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for b in range(2, 40): # Hits:39.0, Total execution time: 3.457 ms, Average time per hit: 0.08864102564102563 ms 


    p = 2 # Hits:38.0, Total execution time: 2.712 ms, Average time per hit: 0.07136842105263158 ms 


    while True: # Hits:87.0, Total execution time: 6.171 ms, Average time per hit: 0.07093103448275861 ms 


        val = b ** p # Hits:87.0, Total execution time: 8.745 ms, Average time per hit: 0.10051724137931035 ms 


        if val > X: # Hits:87.0, Total execution time: 7.335 ms, Average time per hit: 0.0843103448275862 ms 


            break # Hits:38.0, Total execution time: 2.625 ms, Average time per hit: 0.06907894736842106 ms 


        ans = max(ans, val) # Hits:49.0, Total execution time: 7.375 ms, Average time per hit: 0.15051020408163265 ms 


        p += 1 # Hits:49.0, Total execution time: 4.499 ms, Average time per hit: 0.09181632653061224 ms 




print(ans) # Hits:1.0, Total execution time: 5.5 ms, Average time per hit: 5.5 ms 

",p03352,True
"import sys

def solve(X, Y, Z, V, E, A):

    dp = [[0.0] * 6001 for _ in range(Y + max(V) + 1)]

    dp[0][0] = 1.0

    for i in range(Y):

        for j in range(5001):

            if dp[i][j] <= 0.0:

                continue

            for k in V:

                t = i + k

                if t > Y:

                    dp[Y][j] += dp[i][j]/X

                elif E[t] == 1:

                    dp[min(Y, t+A[t])][j] += dp[i][j]/X

                else:

                    dp[t][max(0, j+A[t])] += dp[i][j]/X



    s = 0

    for i in range(5001):

        if dp[Y][i] <= 0.0:

            continue

        s += i * dp[Y][i]

    print((int(s)))



while True:

    X, Y, Z = list(map(int, input().split()))

    if X | Y | Z == 0:

        sys.exit()

    V = list(map(int, input().split()))

    E = [0] * 100

    A = [0] * 100

    for _ in range(Z):

        n, e, a = list(map(int, input().split()))

        E[n] = e

        if e == 3:

            A[n] = -a

        else:

            A[n] = a

    solve(X, Y, Z, V, E, A)",,p00232,False
"while True: # Hits:6.0, Total execution time: 0.916 ms, Average time per hit: 0.15266666666666664 ms 


    x, y, z = list(map(int, input().split())) # Hits:6.0, Total execution time: 1349.958 ms, Average time per hit: 224.993 ms 


    if x==0 and y==0 and z==0: break # Hits:6.0, Total execution time: 1.333 ms, Average time per hit: 0.22216666666666665 ms 


    dp = [[0.0 for col in range(5101)] for row in range(61)] # Hits:5.0, Total execution time: 88611.5 ms, Average time per hit: 17722.3 ms 


    m = {} # Hits:5.0, Total execution time: 1.459 ms, Average time per hit: 0.2918 ms 


    for i in range(y+10): # Hits:68.0, Total execution time: 7.712 ms, Average time per hit: 0.11341176470588235 ms 


        m[i] = (0,0) # Hits:63.0, Total execution time: 11.208 ms, Average time per hit: 0.1779047619047619 ms 


    v = [] # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 


    v = list(map(int, input().split())) # Hits:5.0, Total execution time: 10.375 ms, Average time per hit: 2.075 ms 


    for i in range(z): # Hits:11.0, Total execution time: 1.709 ms, Average time per hit: 0.15536363636363637 ms 


        n, e, a = list(map(int, input().split())) # Hits:6.0, Total execution time: 6.293 ms, Average time per hit: 1.0488333333333333 ms 


        m[n] = (e, a) # Hits:6.0, Total execution time: 0.917 ms, Average time per hit: 0.15283333333333335 ms 


    dp[0][0] = 1.0 # Hits:5.0, Total execution time: 1.041 ms, Average time per hit: 0.2082 ms 


    for i in range(y): # Hits:18.0, Total execution time: 3.085 ms, Average time per hit: 0.1713888888888889 ms 


        for j in range(5001): # Hits:65026.0, Total execution time: 5849.449 ms, Average time per hit: 0.08995554086057884 ms 


            for k in range(x): # Hits:215043.0, Total execution time: 27279.922 ms, Average time per hit: 0.12685798654222644 ms 


                nx = i + v[k] # Hits:150030.0, Total execution time: 16453.066 ms, Average time per hit: 0.10966517363194028 ms 


                if m[nx][0] == 1: # Hits:150030.0, Total execution time: 18517.025 ms, Average time per hit: 0.12342214890355263 ms 


                    dp[min(y,nx+m[nx][1])][j]+=dp[i][j]/x # Hits:5001.0, Total execution time: 2104.231 ms, Average time per hit: 0.4207620475904819 ms 


                elif m[nx][0]==2: # Hits:145029.0, Total execution time: 17625.326 ms, Average time per hit: 0.121529666480497 ms 


                    dp[nx][j+m[nx][1]]+=dp[i][j]/x # Hits:20004.0, Total execution time: 5268.006 ms, Average time per hit: 0.2633476304739052 ms 


                elif m[nx][0]==3: # Hits:125025.0, Total execution time: 15027.103 ms, Average time per hit: 0.12019278544291141 ms 


                    dp[nx][max(0,j-m[nx][1])]+=dp[i][j]/x # Hits:20004.0, Total execution time: 6866.055 ms, Average time per hit: 0.34323410317936415 ms 


                else:

                    dp[min(y,nx)][j] += dp[i][j]/x                        # Hits:105021.0, Total execution time: 29814.057 ms, Average time per hit: 0.28388662267546494 ms 


    ans = 0.0 # Hits:5.0, Total execution time: 0.667 ms, Average time per hit: 0.13340000000000002 ms 


    for i in range(5001):    # Hits:25010.0, Total execution time: 2210.502 ms, Average time per hit: 0.08838472610955618 ms 


        ans += dp[y][i]*i # Hits:25005.0, Total execution time: 3588.108 ms, Average time per hit: 0.14349562087582485 ms 


    print(int(ans))  # Hits:5.0, Total execution time: 60.0 ms, Average time per hit: 12.0 ms 
","while True: # Hits:6.0, Total execution time: 0.834 ms, Average time per hit: 0.139 ms 


    x, y, z = list(map(int, input().split())) # Hits:6.0, Total execution time: 52.416 ms, Average time per hit: 8.736 ms 


    if x==0 and y==0 and z==0: break # Hits:6.0, Total execution time: 1.166 ms, Average time per hit: 0.19433333333333333 ms 


    dp = [[0.0 for col in range(5101)] for row in range(61)] # Hits:5.0, Total execution time: 82638.625 ms, Average time per hit: 16527.725 ms 


    m = {} # Hits:5.0, Total execution time: 1.001 ms, Average time per hit: 0.2002 ms 


    for i in range(y+10): # Hits:68.0, Total execution time: 6.915 ms, Average time per hit: 0.10169117647058823 ms 


        m[i] = (0,0) # Hits:63.0, Total execution time: 9.333 ms, Average time per hit: 0.14814285714285713 ms 


    v = [] # Hits:5.0, Total execution time: 0.583 ms, Average time per hit: 0.1166 ms 


    v = list(map(int, input().split())) # Hits:5.0, Total execution time: 7.833 ms, Average time per hit: 1.5666 ms 


    for i in range(z): # Hits:11.0, Total execution time: 1.834 ms, Average time per hit: 0.16672727272727272 ms 


        n, e, a = list(map(int, input().split())) # Hits:6.0, Total execution time: 5.873 ms, Average time per hit: 0.9788333333333333 ms 


        m[n] = (e, a) # Hits:6.0, Total execution time: 0.915 ms, Average time per hit: 0.1525 ms 


    dp[0][0] = 1.0 # Hits:5.0, Total execution time: 0.875 ms, Average time per hit: 0.175 ms 


    for i in range(y): # Hits:18.0, Total execution time: 2.123 ms, Average time per hit: 0.11794444444444445 ms 


        for j in range(y*100): # Hits:4113.0, Total execution time: 372.96 ms, Average time per hit: 0.09067833698030633 ms 


            if dp[i][j] == 0.0: continue # Hits:4100.0, Total execution time: 498.748 ms, Average time per hit: 0.12164585365853658 ms 


            for k in range(x): # Hits:46.0, Total execution time: 6.208 ms, Average time per hit: 0.13495652173913045 ms 


                nx = i + v[k] # Hits:33.0, Total execution time: 3.96 ms, Average time per hit: 0.12 ms 


                if m[nx][0] == 1: # Hits:33.0, Total execution time: 4.669 ms, Average time per hit: 0.1414848484848485 ms 


                    dp[min(y,nx+m[nx][1])][j]+=dp[i][j]/x # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


                elif m[nx][0]==2: # Hits:32.0, Total execution time: 4.042 ms, Average time per hit: 0.1263125 ms 


                    dp[nx][j+m[nx][1]]+=dp[i][j]/x # Hits:3.0, Total execution time: 1.041 ms, Average time per hit: 0.347 ms 


                elif m[nx][0]==3: # Hits:29.0, Total execution time: 3.584 ms, Average time per hit: 0.12358620689655173 ms 


                    dp[nx][max(0,j-m[nx][1])]+=dp[i][j]/x # Hits:4.0, Total execution time: 1.833 ms, Average time per hit: 0.45825 ms 


                else:

                    dp[min(y,nx)][j] += dp[i][j]/x                        # Hits:25.0, Total execution time: 9.126 ms, Average time per hit: 0.36504000000000003 ms 


    ans = 0.0 # Hits:5.0, Total execution time: 0.46 ms, Average time per hit: 0.092 ms 


    for i in range(5001):    # Hits:25010.0, Total execution time: 2157.109 ms, Average time per hit: 0.08624986005597761 ms 


        ans += dp[y][i]*i # Hits:25005.0, Total execution time: 3612.919 ms, Average time per hit: 0.1444878624275145 ms 


    print(int(ans))  # Hits:5.0, Total execution time: 35.417 ms, Average time per hit: 7.083399999999999 ms 
",p00232,True
"while 1: # Hits:6.0, Total execution time: 0.75 ms, Average time per hit: 0.125 ms 


    x,y,z=list(map(int,input().split())) # Hits:6.0, Total execution time: 43.792 ms, Average time per hit: 7.298666666666667 ms 


    if x==0 and y==0 and z==0:break # Hits:6.0, Total execution time: 1.042 ms, Average time per hit: 0.17366666666666666 ms 


    v=list(map(int,input().split())) # Hits:5.0, Total execution time: 6.708 ms, Average time per hit: 1.3416 ms 


    event=[[] for _ in range(y+1)] # Hits:5.0, Total execution time: 5.541 ms, Average time per hit: 1.1082 ms 


    maxm=0 # Hits:5.0, Total execution time: 0.459 ms, Average time per hit: 0.09179999999999999 ms 


    for i in range(z): # Hits:11.0, Total execution time: 1.793 ms, Average time per hit: 0.163 ms 


        n,e,a=list(map(int,input().split())) # Hits:6.0, Total execution time: 5.999 ms, Average time per hit: 0.9998333333333334 ms 


        event[n].append(e) # Hits:6.0, Total execution time: 1.251 ms, Average time per hit: 0.2085 ms 


        event[n].append(a) # Hits:6.0, Total execution time: 0.958 ms, Average time per hit: 0.15966666666666665 ms 


        if e==2: # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


            maxm+=a # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 




    dp=[[0]*(5005) for _ in range(y+1)] # Hits:5.0, Total execution time: 147.792 ms, Average time per hit: 29.558400000000002 ms 


    dp[0][0]=1 # Hits:5.0, Total execution time: 0.75 ms, Average time per hit: 0.15 ms 


    x=float(x) # Hits:5.0, Total execution time: 1.25 ms, Average time per hit: 0.25 ms 


    for i in range(y): # Hits:18.0, Total execution time: 2.252 ms, Average time per hit: 0.12511111111111112 ms 


        for k in range(maxm+1): # Hits:1126.0, Total execution time: 100.122 ms, Average time per hit: 0.08891829484902308 ms 


            for j in range(int(x)): # Hits:3943.0, Total execution time: 561.267 ms, Average time per hit: 0.14234516865330965 ms 


                if i+v[j]>=y: # Hits:2830.0, Total execution time: 358.023 ms, Average time per hit: 0.12650989399293286 ms 


                    dp[y][k]+=dp[i][k]/x # Hits:1617.0, Total execution time: 320.235 ms, Average time per hit: 0.1980426716141002 ms 


                    continue # Hits:1617.0, Total execution time: 138.612 ms, Average time per hit: 0.08572170686456401 ms 




                if event[i+v[j]]==[]: # Hits:1213.0, Total execution time: 188.412 ms, Average time per hit: 0.1553272877164056 ms 


                    dp[i+v[j]][k]+=dp[i][k]/x # Hits:304.0, Total execution time: 77.659 ms, Average time per hit: 0.25545723684210525 ms 




                elif event[i+v[j]][0]==1: # Hits:909.0, Total execution time: 154.386 ms, Average time per hit: 0.16984158415841585 ms 


                    skip=event[i+v[j]][1] # Hits:101.0, Total execution time: 19.544 ms, Average time per hit: 0.1935049504950495 ms 


                    dp[min(y,i+skip)][k]+=dp[i][k]/x # Hits:101.0, Total execution time: 31.498 ms, Average time per hit: 0.31186138613861386 ms 




                elif event[i+v[j]][0]==2: # Hits:808.0, Total execution time: 126.805 ms, Average time per hit: 0.1569368811881188 ms 


                    m=event[i+v[j]][1] # Hits:404.0, Total execution time: 57.674 ms, Average time per hit: 0.14275742574257427 ms 


                    dp[i+v[j]][k+m]+=dp[i][k]/x # Hits:404.0, Total execution time: 118.538 ms, Average time per hit: 0.29341089108910895 ms 




                else:

                    m=event[i+v[j]][1] # Hits:404.0, Total execution time: 54.456 ms, Average time per hit: 0.13479207920792077 ms 


                    dp[i+v[j]][max(0,k-m)]+=dp[i][k]/x # Hits:404.0, Total execution time: 135.382 ms, Average time per hit: 0.3351039603960396 ms 




    ans=0.0 # Hits:5.0, Total execution time: 0.459 ms, Average time per hit: 0.09179999999999999 ms 


    for i in range(maxm+1): # Hits:410.0, Total execution time: 33.961 ms, Average time per hit: 0.08283170731707316 ms 


        ans+=dp[y][i]*i # Hits:405.0, Total execution time: 57.17 ms, Average time per hit: 0.1411604938271605 ms 


    print((int(ans))) # Hits:5.0, Total execution time: 23.207 ms, Average time per hit: 4.6414 ms 
","def solve(x,y,maxm): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    for i in range(y):

        for j in range(maxm+1):

            if dp[i][j]==0:continue

            for k in range(int(x)):



                if event[min(y,i+v[k])][0]==0:

                    dp[min(y,i+v[k])][j]+=dp[i][j]/x



                elif event[i+v[k]][0]==1:

                    skip=event[i+v[k]][1]

                    dp[min(y,i+v[k]+skip)][j]+=dp[i][j]/x



                elif event[i+v[k]][0]==2:

                    m=event[i+v[k]][1]

                    dp[i+v[k]][j+m]+=dp[i][j]/x



                else:

                    m=event[i+v[k]][1]

                    dp[i+v[k]][max(0,j-m)]+=dp[i][j]/x

    return dp



while 1: # Hits:6.0, Total execution time: 0.584 ms, Average time per hit: 0.09733333333333333 ms 


    x,y,z=list(map(int,input().split())) # Hits:6.0, Total execution time: 40.502 ms, Average time per hit: 6.750333333333333 ms 


    if x==0 and y==0 and z==0:break # Hits:6.0, Total execution time: 0.917 ms, Average time per hit: 0.15283333333333335 ms 


    v=list(map(int,input().split())) # Hits:5.0, Total execution time: 5.583 ms, Average time per hit: 1.1165999999999998 ms 


    event=[[0]*2 for _ in range(y+1)] # Hits:5.0, Total execution time: 5.958 ms, Average time per hit: 1.1916 ms 


    maxm=0 # Hits:5.0, Total execution time: 0.542 ms, Average time per hit: 0.10840000000000001 ms 


    for i in range(z): # Hits:11.0, Total execution time: 1.999 ms, Average time per hit: 0.1817272727272727 ms 


        n,e,a=list(map(int,input().split())) # Hits:6.0, Total execution time: 6.709 ms, Average time per hit: 1.1181666666666668 ms 


        event[n][0]=e # Hits:6.0, Total execution time: 1.082 ms, Average time per hit: 0.18033333333333335 ms 


        event[n][1]=a # Hits:6.0, Total execution time: 0.875 ms, Average time per hit: 0.14583333333333334 ms 


        if e==2: # Hits:6.0, Total execution time: 0.626 ms, Average time per hit: 0.10433333333333333 ms 


            maxm+=a # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 




    dp=[[0]*(5005) for _ in range(y+1)] # Hits:5.0, Total execution time: 148.959 ms, Average time per hit: 29.7918 ms 


    dp[0][0]=1 # Hits:5.0, Total execution time: 0.919 ms, Average time per hit: 0.18380000000000002 ms 


    x=float(x) # Hits:5.0, Total execution time: 1.166 ms, Average time per hit: 0.2332 ms 


    dp=solve(x,y,maxm) # Hits:5.0, Total execution time: 227.209 ms, Average time per hit: 45.4418 ms 


    ans=0.0 # Hits:5.0, Total execution time: 0.667 ms, Average time per hit: 0.13340000000000002 ms 


    for i in range(maxm+1): # Hits:410.0, Total execution time: 58.336 ms, Average time per hit: 0.1422829268292683 ms 


        ans+=dp[y][i]*i # Hits:405.0, Total execution time: 88.675 ms, Average time per hit: 0.2189506172839506 ms 


    print((int(ans))) # Hits:5.0, Total execution time: 24.999 ms, Average time per hit: 4.9998000000000005 ms 
",p00232,True
"import sys # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


readline = sys.stdin.readline # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


X,Y,Z,K = list(map(int, readline().split())) # Hits:1.0, Total execution time: 71.833 ms, Average time per hit: 71.833 ms 


a = sorted(list(map(int, readline().split())), reverse=True) # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


b = sorted(list(map(int, readline().split())), reverse=True) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


c = sorted(list(map(int, readline().split())), reverse=True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




ab = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for ai in a: # Hits:4.0, Total execution time: 0.333 ms, Average time per hit: 0.08325 ms 


    for bj in b: # Hits:12.0, Total execution time: 0.918 ms, Average time per hit: 0.0765 ms 


        ab.append(ai+bj) # Hits:9.0, Total execution time: 1.876 ms, Average time per hit: 0.20844444444444446 ms 


ab.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


ab = ab[:K] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


cond = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for abi in ab: # Hits:6.0, Total execution time: 0.501 ms, Average time per hit: 0.0835 ms 


    for cj in c: # Hits:20.0, Total execution time: 1.751 ms, Average time per hit: 0.08755 ms 


        cond.append(abi+cj) # Hits:15.0, Total execution time: 1.959 ms, Average time per hit: 0.1306 ms 


cond = sorted(cond, reverse=True)[:K] # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


for condi in cond: # Hits:6.0, Total execution time: 0.666 ms, Average time per hit: 0.111 ms 


    print(condi) # Hits:5.0, Total execution time: 8.917 ms, Average time per hit: 1.7834 ms 

","import sys # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


readline = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


X, Y, Z, K = list(map(int, readline().split())) # Hits:1.0, Total execution time: 28.875 ms, Average time per hit: 28.875 ms 


A = sorted(list(map(int, readline().split())), reverse=True) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


B = sorted(list(map(int, readline().split())), reverse=True) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


C = sorted(list(map(int, readline().split())), reverse=True) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 




ABC = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for a in range(X): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    for b in range(Y): # Hits:9.0, Total execution time: 1.123 ms, Average time per hit: 0.12477777777777777 ms 


        if (a+1)*(b+1) > K: # Hits:8.0, Total execution time: 1.334 ms, Average time per hit: 0.16675 ms 


            break # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


        for c in range(Z): # Hits:16.0, Total execution time: 2.292 ms, Average time per hit: 0.14325 ms 


            if (a+1)*(b+1)*(c+1) > K: # Hits:15.0, Total execution time: 2.836 ms, Average time per hit: 0.18906666666666666 ms 


                break # Hits:5.0, Total execution time: 1.709 ms, Average time per hit: 0.3418 ms 


            ABC.append(A[a] + B[b] + C[c]) # Hits:10.0, Total execution time: 2.752 ms, Average time per hit: 0.2752 ms 


            

for ai in sorted(ABC, reverse=True)[:K]: # Hits:6.0, Total execution time: 1.542 ms, Average time per hit: 0.257 ms 


    print(ai) # Hits:5.0, Total execution time: 9.958 ms, Average time per hit: 1.9915999999999998 ms 

",p03078,True
"x,y,z,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 23.75 ms, Average time per hit: 23.75 ms 


Alist = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


Blist = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


Clist = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 




Alist.sort(reverse=True) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


Blist.sort(reverse=True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


Clist.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




ABlist = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in Alist[:k]: # Hits:4.0, Total execution time: 0.499 ms, Average time per hit: 0.12475 ms 


    for j in Blist[:k]: # Hits:12.0, Total execution time: 1.335 ms, Average time per hit: 0.11125 ms 


        ABlist.append(i + j) # Hits:9.0, Total execution time: 2.042 ms, Average time per hit: 0.2268888888888889 ms 




ABlist.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




ABClist = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in ABlist[:k]: # Hits:6.0, Total execution time: 0.665 ms, Average time per hit: 0.11083333333333333 ms 


    for j in Clist[:k]: # Hits:20.0, Total execution time: 2.168 ms, Average time per hit: 0.10840000000000001 ms 


        ABClist.append(i + j) # Hits:15.0, Total execution time: 2.208 ms, Average time per hit: 0.1472 ms 




ABClist.sort(reverse=True) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




for i in range(k): # Hits:6.0, Total execution time: 0.793 ms, Average time per hit: 0.13216666666666665 ms 


    print((ABClist[i])) # Hits:5.0, Total execution time: 11.915 ms, Average time per hit: 2.383 ms 

","x,y,z,k = map(int,input().split()) # Hits:1.0, Total execution time: 22.75 ms, Average time per hit: 22.75 ms 


Alist = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.291 ms, Average time per hit: 1.291 ms 


Blist = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


Clist = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




Alist.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


Blist.sort(reverse=True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


Clist.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




ABlist = [i + j for i in Alist[:k] for j in Blist[:k]] # Hits:1.0, Total execution time: 1.916 ms, Average time per hit: 1.916 ms 




ABlist.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




ABClist = [l + m for l in ABlist[:k] for m in Clist[:k]] # Hits:1.0, Total execution time: 2.25 ms, Average time per hit: 2.25 ms 




ABClist.sort(reverse=True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




print(*ABClist[:k], sep = '\n') # Hits:1.0, Total execution time: 8.417 ms, Average time per hit: 8.417 ms 

",p03078,True
"import math, string, itertools, fractions, heapq, collections, re,  array, bisect, sys, random, time, copy, functools # Hits:1.0, Total execution time: 3.417 ms, Average time per hit: 3.417 ms 


sys.setrecursionlimit(10**7) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


inf = 10 ** 20 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


eps = 1.0 / 10**10 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


mod = 10**9+7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


dd = [(-1, 0), (0, 1), (1, 0), (0, -1)] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LI(): return [int(x) for x in sys.stdin.readline().split()] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LF(): return [float(x) for x in sys.stdin.readline().split()] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LS(): return sys.stdin.readline().split() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def I(): return int(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def F(): return float(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def pf(s): return print(s, flush=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




X, Y, Z, K = LI() # Hits:1.0, Total execution time: 37.75 ms, Average time per hit: 37.75 ms 


A = sorted(LI(), reverse=True) # Hits:1.0, Total execution time: 2.25 ms, Average time per hit: 2.25 ms 


B = sorted(LI(), reverse=True) # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


C = sorted(LI(), reverse=True) # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 




A = A[:min(250, X)] # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


B = B[:min(250, Y)] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


C = C[:min(250, Z)] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


# Aの中で最大の数字足すBの最大、Cの最大は全体の中で最大

# 3000個大きい順に求めれば良い



# iが決まれば、j,kのおおきさは分かる

BC = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


# 1000*1000 で10**6の計算量

for j in range(len(B)): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    for k in range(len(C)): # Hits:12.0, Total execution time: 1.375 ms, Average time per hit: 0.11458333333333333 ms 


        BC.append(B[j] + C[k]) # Hits:9.0, Total execution time: 3.168 ms, Average time per hit: 0.352 ms 




points = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


# 10**3 と 10** 6

for i in range(len(A)): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


    points += [bc + A[i] for bc in BC] # Hits:3.0, Total execution time: 4.042 ms, Average time per hit: 1.3473333333333333 ms 


#  #  for i in range(len(A)):

#  #      for bc in BC:

#  #          points.append(A[i]+bc)

#  #      #  for j in range(len(B)):

#  #      #      for k in range(len(C)):

#  #      #          point = A[i] + B[j] + C[k]

#  #      #          points.append(point)

for i in sorted(points, reverse=True)[:K]: # Hits:6.0, Total execution time: 1.749 ms, Average time per hit: 0.2915 ms 


    print(i) # Hits:5.0, Total execution time: 8.959 ms, Average time per hit: 1.7918 ms 



","import math, string, itertools, fractions, heapq, collections, re,  array, bisect, sys, random, time, copy, functools # Hits:1.0, Total execution time: 3.625 ms, Average time per hit: 3.625 ms 


sys.setrecursionlimit(10**7) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


inf = 10 ** 20 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


eps = 1.0 / 10**10 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


mod = 10**9+7 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


dd = [(-1, 0), (0, 1), (1, 0), (0, -1)] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


ddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


def LI(): return [int(x) for x in sys.stdin.readline().split()] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


def LI_(): return [int(x)-1 for x in sys.stdin.readline().split()] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LF(): return [float(x) for x in sys.stdin.readline().split()] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def LS(): return sys.stdin.readline().split() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def I(): return int(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def F(): return float(sys.stdin.readline()) # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def pf(s): return print(s, flush=True) # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




"""""" # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


最大、最大2なら、あとはなにかけあわせても最大しかない

ABCの最大2個なので、プラス残りのlen()を足す。

もし超えたら、その組み合わせで順番にもとめていく

""""""

X, Y, Z, K = LI() # Hits:1.0, Total execution time: 36.583 ms, Average time per hit: 36.583 ms 


A = sorted(LI(), reverse=True) # Hits:1.0, Total execution time: 1.791 ms, Average time per hit: 1.791 ms 


B = sorted(LI(), reverse=True) # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 


C = sorted(LI(), reverse=True) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 




e = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for a in A: # Hits:4.0, Total execution time: 0.333 ms, Average time per hit: 0.08325 ms 


    for b in B: # Hits:12.0, Total execution time: 1.043 ms, Average time per hit: 0.08691666666666667 ms 


        e.append(a+b) # Hits:9.0, Total execution time: 1.831 ms, Average time per hit: 0.20344444444444446 ms 


e = sorted(e, reverse=True)[:K] # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


results = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for item in e: # Hits:6.0, Total execution time: 0.503 ms, Average time per hit: 0.08383333333333333 ms 


    for c in C: # Hits:20.0, Total execution time: 1.709 ms, Average time per hit: 0.08545 ms 


        results.append(item+c) # Hits:15.0, Total execution time: 1.917 ms, Average time per hit: 0.1278 ms 




for i in sorted(results, reverse=True)[:K]: # Hits:6.0, Total execution time: 1.043 ms, Average time per hit: 0.17383333333333334 ms 


    print(i) # Hits:5.0, Total execution time: 8.624 ms, Average time per hit: 1.7247999999999999 ms 




#  #  ABC = A+B+C

#  #  ABC = sorted(ABC, reverse=True)

#  #  #  print(ABC)

#  INF = 10**18

#  a,b,c = [INF],[INF],[INF]

#  #  abc = 0

#  count = 0

#  while a[-1] > B[0] or a[-1] > C[0] or len(a) <= min(50, X):

#      a.append(A[count])

#      count += 1

#      if count >= len(A):

#          break





#  count = 0

#  while b[-1] > A[0] or b[-1] > C[0] or len(b) <= min(50, Y):

#      b.append(B[count])

#      count += 1

#      if count >= len(B):

#          break



#  count = 0

#  while c[-1] > B[0] or c[-1] > A[0] or len(c) <= min(50, Z):

#      c.append(C[count])

#      count += 1

#      if count >= len(C):

#          break

#  a = a[1:]

#  b = b[1:]

#  c = c[1:]



#  #  while a[-1] > b[0] and a[-1] > c[0] and b[-1] > a[0] and b[-1] > c[0] and c[-1] > a[0] and c[-1] > b[0]:



#  #  while not(len(a) >= min(100, X) and len(b) >= min(100, Y) and len(c) >= min(100, Z)):

#  #      if A:

#  #          if ABC[abc]in A:

#  #              a.append(ABC[abc])

#  #              A.remove(ABC[abc])

#  #      if B:

#  #          if ABC[abc]in B:

#  #              b.append(ABC[abc])

#  #              B.remove(ABC[abc])

#  #      if C:

#  #          if ABC[abc]in C:

#  #              c.append(ABC[abc])

#  #              C.remove(ABC[abc])

#  #      abc+=1

#  #  #  for abc in range(min(200, X+Y+Z)):



#  #  #      if ABC[abc]in A:

#  #  #          a.append(ABC[abc])

#  #  #          A.remove(ABC[abc])

#  #  #      if ABC[abc]in B:

#  #  #          b.append(ABC[abc])

#  #  #          B.remove(ABC[abc])

#  #  #      if ABC[abc]in C:

#  #  #          c.append(ABC[abc])

#  #  #          C.remove(ABC[abc])

#  #  #  print(a,b,c)



#  points = []

#  for i in a:

#      for j in b:

#          for k in c:

#              points.append(i+j+k)

#  #  print(points)





#  #  #  A = A[:min(250, X)]

#  #  #  B = B[:min(250, Y)]

#  #  #  C = C[:min(250, Z)]

#  #  #  # Aの中で最大の数字足すBの最大、Cの最大は全体の中で最大

#  #  #  # 3000個大きい順に求めれば良い



#  #  #  # iが決まれば、j,kのおおきさは分かる

#  #  #  BC = []

#  #  #  # 1000*1000 で10**6の計算量

#  #  #  #  for j in range(len(B)):

#  #  #  #      for k in range(len(C)):

#  #  #  #          BC.append(B[j] + C[k])



#  #  #  points = []

#  #  #  # 10**3 と 10** 6

#  #  #  #  for i in range(len(A)):

#  #  #  #      points += [bc + A[i] for bc in BC]

#  #  #  for i in range(len(A)):

#  #  #      #  for bc in BC:

#  #  #      #      points.append(A[i]+bc)

#  #  #      for j in range(len(B)):

#  #  #          for k in range(len(C)):

#  #  #              points.append(A[i] + B[j] + C[k])

#  for i in sorted(points, reverse=True)[:K]:

#      print(i)


",p03078,True
"#!/usr/bin/env python3

import sys





def solve(X: int, Y: int, Z: int, K: int, A: ""List[int]"", B: ""List[int]"", C: ""List[int]""):

    C.sort(reverse=True)

    

    count = 0

    AB = []



    for i in range(X):

        for j in range(Y):

            AB.append(A[i]+B[j])

    AB.sort(reverse=True)

    AB = AB[:K]



    ABC = []

    for k in range(Z):

        for ab_index in range(len(AB)):

            ABC.append(C[k]+AB[ab_index])



    ABC.sort(reverse=True)

    ABC = ABC[:K]

    for i in range(len(ABC)):

        print((ABC[i]))

    return





def main():

    def iterate_tokens():

        for line in sys.stdin:

            for word in line.split():

                yield word

    tokens = iterate_tokens()

    X = int(next(tokens))  # type: int

    Y = int(next(tokens))  # type: int

    Z = int(next(tokens))  # type: int

    K = int(next(tokens))  # type: int

    A = [int(next(tokens)) for _ in range(X)]  # type: ""List[int]""

    B = [int(next(tokens)) for _ in range(Y)]  # type: ""List[int]""

    C = [int(next(tokens)) for _ in range(Z)]  # type: ""List[int]""

    solve(X, Y, Z, K, A, B, C)



if __name__ == '__main__':

    main()
",,p03078,False
"x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.625 ms, Average time per hit: 35.625 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.583 ms, Average time per hit: 2.583 ms 


b = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.166 ms, Average time per hit: 1.166 ms 


c = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


a.sort(reverse=True) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


b.sort(reverse=True) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


c.sort(reverse=True) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


p = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


for i in a: # Hits:4.0, Total execution time: 0.543 ms, Average time per hit: 0.13575 ms 


    for j in b: # Hits:12.0, Total execution time: 1.333 ms, Average time per hit: 0.11108333333333333 ms 


        p.append(i+j) # Hits:9.0, Total execution time: 2.375 ms, Average time per hit: 0.2638888888888889 ms 


p.sort(reverse=True) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


p = p[:min(3001, x*y*z+1)] # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


q = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in p: # Hits:10.0, Total execution time: 0.96 ms, Average time per hit: 0.096 ms 


    for j in c: # Hits:36.0, Total execution time: 3.75 ms, Average time per hit: 0.10416666666666667 ms 


        q.append(i+j) # Hits:27.0, Total execution time: 4.545 ms, Average time per hit: 0.16833333333333333 ms 


q.sort(reverse=True) # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


for i in range(k): # Hits:6.0, Total execution time: 0.917 ms, Average time per hit: 0.15283333333333335 ms 


    print((q[i])) # Hits:5.0, Total execution time: 11.083 ms, Average time per hit: 2.2166 ms 
","x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 29.583 ms, Average time per hit: 29.583 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.583 ms, Average time per hit: 1.583 ms 


b = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


c = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


a.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


b.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


c.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


p = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in a: # Hits:4.0, Total execution time: 0.375 ms, Average time per hit: 0.09375 ms 


    for j in b: # Hits:12.0, Total execution time: 0.998 ms, Average time per hit: 0.08316666666666667 ms 


        p.append(i+j) # Hits:9.0, Total execution time: 1.833 ms, Average time per hit: 0.20366666666666666 ms 


p.sort(reverse=True) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


p = p[:min(3001, x*y*z+1)] # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


q = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for j in c: # Hits:4.0, Total execution time: 0.29 ms, Average time per hit: 0.0725 ms 


    for i in p: # Hits:30.0, Total execution time: 2.167 ms, Average time per hit: 0.07223333333333333 ms 


        q.append(i+j) # Hits:27.0, Total execution time: 3.585 ms, Average time per hit: 0.13277777777777777 ms 


q.sort(reverse=True) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


for i in range(k): # Hits:6.0, Total execution time: 0.96 ms, Average time per hit: 0.16 ms 


    print((q[i])) # Hits:5.0, Total execution time: 9.167 ms, Average time per hit: 1.8334000000000001 ms 
",p03078,True
"x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.167 ms, Average time per hit: 38.167 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


b = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


c = list(map(int, input().split()))  # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


a.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


b.sort(reverse=True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


c.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


p = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for h in range(min(x,k)): # Hits:4.0, Total execution time: 1.001 ms, Average time per hit: 0.25025 ms 


    for i in range(y): # Hits:12.0, Total execution time: 1.168 ms, Average time per hit: 0.09733333333333333 ms 


        if h*i <= k: # Hits:9.0, Total execution time: 1.041 ms, Average time per hit: 0.11566666666666667 ms 


            for j in range(z): # Hits:36.0, Total execution time: 3.499 ms, Average time per hit: 0.09719444444444444 ms 


                if h*i*j <= k: # Hits:27.0, Total execution time: 3.168 ms, Average time per hit: 0.11733333333333333 ms 


                    p.append(a[h]+b[i]+c[j]) # Hits:26.0, Total execution time: 6.375 ms, Average time per hit: 0.24519230769230768 ms 




p.sort(reverse=True) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


for i in range(k): # Hits:6.0, Total execution time: 0.709 ms, Average time per hit: 0.11816666666666667 ms 


    print((p[i])) # Hits:5.0, Total execution time: 11.749 ms, Average time per hit: 2.3498 ms 
","x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.0 ms, Average time per hit: 36.0 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


b = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


c = list(map(int, input().split()))  # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


a.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


b.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


c.sort(reverse=True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


p = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for h in range(min(x,k)): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    for i in range(y): # Hits:12.0, Total execution time: 1.209 ms, Average time per hit: 0.10075 ms 


        if h*i > k: # Hits:9.0, Total execution time: 0.999 ms, Average time per hit: 0.111 ms 


            break # Hits:7.0, Total execution time: 0.499 ms, Average time per hit: 0.07128571428571429 ms 


        for j in range(z): # Hits:35.0, Total execution time: 3.456 ms, Average time per hit: 0.09874285714285715 ms 


            if h*i*j > k: # Hits:27.0, Total execution time: 3.044 ms, Average time per hit: 0.11274074074074075 ms 


                break # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


            p.append(a[h]+b[i]+c[j]) # Hits:26.0, Total execution time: 5.624 ms, Average time per hit: 0.2163076923076923 ms 




p.sort(reverse=True) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


for i in range(k): # Hits:6.0, Total execution time: 0.708 ms, Average time per hit: 0.118 ms 


    print((p[i])) # Hits:5.0, Total execution time: 8.416 ms, Average time per hit: 1.6832 ms 
",p03078,True
"X,Y,Z,K = list(map(int,input().split())) # Hits:1.0, Total execution time: 35.25 ms, Average time per hit: 35.25 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


C = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


sorted_abcsum = sorted([A[x] + B[y] + C[z] for x in range(X) for y in range(Y) for z in range(Z)],reverse=True) # Hits:1.0, Total execution time: 8.666 ms, Average time per hit: 8.666 ms 


for k in range(K): # Hits:6.0, Total execution time: 0.832 ms, Average time per hit: 0.13866666666666666 ms 


    print((sorted_abcsum[k])) # Hits:5.0, Total execution time: 8.792 ms, Average time per hit: 1.7584000000000002 ms 
","X,Y,Z,K = list(map(int,input().split())) # Hits:1.0, Total execution time: 38.584 ms, Average time per hit: 38.584 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.834 ms, Average time per hit: 1.834 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


C = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


asort,bsort,csort = sorted(A,reverse=True),sorted(B,reverse=True),sorted(C,reverse=True) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


print((asort[0] + bsort[0] + csort[0])) # Hits:1.0, Total execution time: 4.542 ms, Average time per hit: 4.542 ms 


already = [[0,0,0]] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


x,y,z = 0,0,0 # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


place_sum = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


check = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for k in range(K - 1): # Hits:5.0, Total execution time: 0.959 ms, Average time per hit: 0.1918 ms 


    if [x + 1,y,z] not in already and x + 1 < X: # Hits:4.0, Total execution time: 1.124 ms, Average time per hit: 0.281 ms 


        already.append([x + 1,y,z]) # Hits:2.0, Total execution time: 0.458 ms, Average time per hit: 0.229 ms 


        place_sum.append([x + 1,y,z]) # Hits:2.0, Total execution time: 0.333 ms, Average time per hit: 0.1665 ms 


        check.append(asort[x + 1] + bsort[y] + csort[z]) # Hits:2.0, Total execution time: 0.667 ms, Average time per hit: 0.3335 ms 


    if [x,y + 1,z] not in already and y + 1 < Y: # Hits:4.0, Total execution time: 1.167 ms, Average time per hit: 0.29175 ms 


        already.append([x,y + 1,z]) # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


        place_sum.append([x,y + 1,z]) # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


        check.append(asort[x] + bsort[y + 1] + csort[z]) # Hits:4.0, Total execution time: 1.169 ms, Average time per hit: 0.29225 ms 


    if [x,y,z + 1] not in already and z + 1 < Z: # Hits:4.0, Total execution time: 1.249 ms, Average time per hit: 0.31225 ms 


        already.append([x,y,z + 1]) # Hits:4.0, Total execution time: 0.791 ms, Average time per hit: 0.19775 ms 


        place_sum.append([x,y,z + 1]) # Hits:4.0, Total execution time: 0.749 ms, Average time per hit: 0.18725 ms 


        check.append(asort[x] + bsort[y] + csort[z + 1]) # Hits:4.0, Total execution time: 1.252 ms, Average time per hit: 0.313 ms 


    print((max(check))) # Hits:4.0, Total execution time: 11.207 ms, Average time per hit: 2.80175 ms 


    x,y,z = place_sum[check.index(max(check))][0],place_sum[check.index(max(check))][1],place_sum[check.index(max(check))][2] # Hits:4.0, Total execution time: 3.334 ms, Average time per hit: 0.8335 ms 


    place_sum.pop(check.index(max(check))) # Hits:4.0, Total execution time: 1.374 ms, Average time per hit: 0.3435 ms 


    check.remove(max(check)) # Hits:4.0, Total execution time: 1.374 ms, Average time per hit: 0.3435 ms 
",p03078,True
"import heapq # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


X,Y,Z,K = list(map(int,input().split())) # Hits:1.0, Total execution time: 28.458 ms, Average time per hit: 28.458 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.458 ms, Average time per hit: 1.458 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


C = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


asort,bsort,csort = sorted(A,reverse=True),sorted(B,reverse=True),sorted(C,reverse=True) # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


already = [[0,0,0]] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


print((asort[0] + bsort[0] + csort[0])) # Hits:1.0, Total execution time: 5.791 ms, Average time per hit: 5.791 ms 


x,y,z = 0,0,0 # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


check = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for k in range(K - 1): # Hits:5.0, Total execution time: 1.333 ms, Average time per hit: 0.2666 ms 


    if [x + 1,y,z] not in already and x + 1 < X: # Hits:4.0, Total execution time: 2.165 ms, Average time per hit: 0.54125 ms 


        already.append([x + 1,y,z]) # Hits:4.0, Total execution time: 1.208 ms, Average time per hit: 0.302 ms 


        heapq.heappush(check,(-(asort[x + 1] + bsort[y] + csort[z]),x + 1,y,z)) # Hits:4.0, Total execution time: 2.499 ms, Average time per hit: 0.62475 ms 


    if [x,y + 1,z] not in already and y + 1 < Y: # Hits:4.0, Total execution time: 1.668 ms, Average time per hit: 0.417 ms 


        already.append([x,y + 1,z]) # Hits:4.0, Total execution time: 1.041 ms, Average time per hit: 0.26025 ms 


        heapq.heappush(check,(-(asort[x] + bsort[y + 1] + csort[z]),x,y + 1,z)) # Hits:4.0, Total execution time: 2.043 ms, Average time per hit: 0.51075 ms 


    if [x,y,z + 1] not in already and z + 1 < Z: # Hits:4.0, Total execution time: 1.707 ms, Average time per hit: 0.42675 ms 


        already.append([x,y,z + 1]) # Hits:2.0, Total execution time: 0.459 ms, Average time per hit: 0.2295 ms 


        heapq.heappush(check,(-(asort[x] + bsort[y] + csort[z + 1]),x,y,z + 1)) # Hits:2.0, Total execution time: 1.125 ms, Average time per hit: 0.5625 ms 


    maxsum = heapq.heappop(check) # Hits:4.0, Total execution time: 1.541 ms, Average time per hit: 0.38525 ms 


    print((-maxsum[0])) # Hits:4.0, Total execution time: 12.042 ms, Average time per hit: 3.0105 ms 


    x,y,z = maxsum[1],maxsum[2],maxsum[3] # Hits:4.0, Total execution time: 1.249 ms, Average time per hit: 0.31225 ms 
","import heapq # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


 

_x, _y, _z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 28.583 ms, Average time per hit: 28.583 ms 


aa = list(reversed(sorted(map(int, input().split())))) # Hits:1.0, Total execution time: 2.083 ms, Average time per hit: 2.083 ms 


bb = list(reversed(sorted(map(int, input().split())))) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


cc = list(reversed(sorted(map(int, input().split())))) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


 

ar = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


history = set() # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


 

 

def push(x, y, z): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    if (x, y, z) in history:

        pass

    else:

        v = aa[x] + bb[y] + cc[z]

        heapq.heappush(ar, (-v, x, y, z))

        history.add((x, y, z))

 

 

def pop(): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    (v, x, y, z) = heapq.heappop(ar)

    return (-v, x, y, z)

 

 

push(0, 0, 0) # Hits:1.0, Total execution time: 2.541 ms, Average time per hit: 2.541 ms 


for _ in range(k): # Hits:6.0, Total execution time: 1.084 ms, Average time per hit: 0.18066666666666667 ms 


    (total, x, y, z) = pop() # Hits:5.0, Total execution time: 4.001 ms, Average time per hit: 0.8002 ms 


    print(total) # Hits:5.0, Total execution time: 15.543 ms, Average time per hit: 3.1086 ms 


    if x + 1 < len(aa): # Hits:5.0, Total execution time: 1.207 ms, Average time per hit: 0.2414 ms 


        push(x + 1, y, z) # Hits:4.0, Total execution time: 4.791 ms, Average time per hit: 1.19775 ms 


    if y + 1 < len(bb): # Hits:5.0, Total execution time: 0.876 ms, Average time per hit: 0.1752 ms 


        push(x, y + 1, z) # Hits:5.0, Total execution time: 4.458 ms, Average time per hit: 0.8916000000000001 ms 


    if z + 1 < len(cc): # Hits:5.0, Total execution time: 0.792 ms, Average time per hit: 0.1584 ms 


        push(x, y, z + 1) # Hits:4.0, Total execution time: 3.375 ms, Average time per hit: 0.84375 ms 
",p03078,True
"X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.083 ms, Average time per hit: 36.083 ms 


x = sorted(list(map(int, input().split()))) # Hits:1.0, Total execution time: 2.25 ms, Average time per hit: 2.25 ms 


y = sorted(list(map(int, input().split()))) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


z = sorted(list(map(int, input().split()))) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


import heapq # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


shou = 3 * 10**10 + 1 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans = [] # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for i in range(X-1, -1, -1): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


  for j in range(Y-1, -1, -1): # Hits:12.0, Total execution time: 1.208 ms, Average time per hit: 0.10066666666666667 ms 


    for k in range(Z-1, -1, -1): # Hits:36.0, Total execution time: 3.96 ms, Average time per hit: 0.11 ms 


      if (X-i)*(Y-j)*(Z-k) <= K: # Hits:27.0, Total execution time: 5.168 ms, Average time per hit: 0.19140740740740741 ms 


        sub = x[i]+y[j]+z[k] # Hits:10.0, Total execution time: 1.666 ms, Average time per hit: 0.1666 ms 


        ans.append(sub) # Hits:10.0, Total execution time: 1.375 ms, Average time per hit: 0.1375 ms 


ans = list([x*(-1) for x in ans])  # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


heapq.heapify(ans) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.793 ms, Average time per hit: 0.13216666666666665 ms 


  print((heapq.heappop(ans)*(-1))) # Hits:5.0, Total execution time: 9.75 ms, Average time per hit: 1.95 ms 
","X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.875 ms, Average time per hit: 38.875 ms 


x = sorted(list(map(int, input().split()))) # Hits:1.0, Total execution time: 2.875 ms, Average time per hit: 2.875 ms 


y = sorted(list(map(int, input().split()))) # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 


z = sorted(list(map(int, input().split()))) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 






import heapq # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


ans = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(X-1, -1, -1): # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


  for j in range(Y-1, -1, -1): # Hits:12.0, Total execution time: 1.459 ms, Average time per hit: 0.12158333333333333 ms 


    for k in range(Z-1, -1, -1): # Hits:19.0, Total execution time: 2.625 ms, Average time per hit: 0.13815789473684212 ms 


      if (X-i)*(Y-j)*(Z-k) <= K: # Hits:18.0, Total execution time: 3.125 ms, Average time per hit: 0.1736111111111111 ms 


        sub = x[i]+y[j]+z[k] # Hits:10.0, Total execution time: 1.709 ms, Average time per hit: 0.1709 ms 


        ans.append(sub) # Hits:10.0, Total execution time: 1.457 ms, Average time per hit: 0.1457 ms 


      else:

        break # Hits:8.0, Total execution time: 1.084 ms, Average time per hit: 0.1355 ms 


ans = list([x*(-1) for x in ans])  # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


heapq.heapify(ans) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.666 ms, Average time per hit: 0.111 ms 


  print((heapq.heappop(ans)*(-1))) # Hits:5.0, Total execution time: 10.042 ms, Average time per hit: 2.0084 ms 
",p03078,True
"X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.125 ms, Average time per hit: 37.125 ms 




A = sorted(list(map(int, input().split()))) # Hits:1.0, Total execution time: 2.167 ms, Average time per hit: 2.167 ms 


B = sorted(list(map(int, input().split()))) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


C = sorted(list(map(int, input().split())))[::-1] # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 




A_B = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for a in A: # Hits:4.0, Total execution time: 0.418 ms, Average time per hit: 0.1045 ms 


    for b in B: # Hits:12.0, Total execution time: 1.167 ms, Average time per hit: 0.09725 ms 


        A_B.append(a + b) # Hits:9.0, Total execution time: 2.083 ms, Average time per hit: 0.23144444444444445 ms 




A_B = sorted(A_B) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




def bin_search(mid): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    res = 0

    idx = 0

    ans = [] 

    for c in C:

        while idx < len(A_B):

            if c + A_B[idx] >= mid:

                res += len(A_B) - idx

                ans.append((c, idx))

                break

            else:

                idx += 1



    return res, ans



ok = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ng = pow(10, 10) * 3 + 1 # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 




while ok + 1 < ng: # Hits:36.0, Total execution time: 3.624 ms, Average time per hit: 0.10066666666666667 ms 


    mid = (ok + ng) // 2 # Hits:35.0, Total execution time: 3.914 ms, Average time per hit: 0.11182857142857142 ms 


    res, ans = bin_search(mid) # Hits:35.0, Total execution time: 86.418 ms, Average time per hit: 2.4690857142857143 ms 


    if res >= K: # Hits:35.0, Total execution time: 2.998 ms, Average time per hit: 0.08565714285714286 ms 


        ok = mid # Hits:5.0, Total execution time: 0.417 ms, Average time per hit: 0.0834 ms 


    else:

        ng = mid # Hits:30.0, Total execution time: 2.21 ms, Average time per hit: 0.07366666666666667 ms 




res, ans = bin_search(ok) # Hits:1.0, Total execution time: 2.958 ms, Average time per hit: 2.958 ms 




tmp_ans = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for c, idx in ans: # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


    for i in range(idx, len(A_B)): # Hits:8.0, Total execution time: 1.165 ms, Average time per hit: 0.145625 ms 


        tmp_ans.append(A_B[i] + c) # Hits:5.0, Total execution time: 0.793 ms, Average time per hit: 0.1586 ms 


for ans in sorted(tmp_ans)[::-1][:K]: # Hits:6.0, Total execution time: 1.124 ms, Average time per hit: 0.18733333333333335 ms 


    print(ans) # Hits:5.0, Total execution time: 8.376 ms, Average time per hit: 1.6752 ms 
","X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.125 ms, Average time per hit: 38.125 ms 




A = sorted(list(map(int, input().split()))) # Hits:1.0, Total execution time: 2.083 ms, Average time per hit: 2.083 ms 


B = sorted(list(map(int, input().split()))) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


C = sorted(list(map(int, input().split())))[::-1] # Hits:1.0, Total execution time: 1.041 ms, Average time per hit: 1.041 ms 




A_B = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for a in A: # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


    for b in B: # Hits:12.0, Total execution time: 1.0 ms, Average time per hit: 0.08333333333333333 ms 


        A_B.append(a + b) # Hits:9.0, Total execution time: 2.084 ms, Average time per hit: 0.23155555555555554 ms 




A_B = sorted(A_B)[::-1][:K] # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




ans = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for a_b in A_B: # Hits:6.0, Total execution time: 0.5 ms, Average time per hit: 0.08333333333333333 ms 


    for c in C: # Hits:20.0, Total execution time: 1.582 ms, Average time per hit: 0.07909999999999999 ms 


        ans.append(a_b + c) # Hits:15.0, Total execution time: 2.084 ms, Average time per hit: 0.13893333333333333 ms 




for a in sorted(ans)[::-1][:K]: # Hits:6.0, Total execution time: 1.419 ms, Average time per hit: 0.2365 ms 


    print(a) # Hits:5.0, Total execution time: 8.542 ms, Average time per hit: 1.7084000000000001 ms 
",p03078,True
"x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.041 ms, Average time per hit: 36.041 ms 


Lis = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for _ in range(3): # Hits:4.0, Total execution time: 0.875 ms, Average time per hit: 0.21875 ms 


    L = list(map(int, input().split())) # Hits:3.0, Total execution time: 4.208 ms, Average time per hit: 1.4026666666666667 ms 


    L.sort(reverse=True) # Hits:3.0, Total execution time: 1.126 ms, Average time per hit: 0.3753333333333333 ms 


    Lis.append(L) # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 




Li = [[0, 0, 0]] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


def search(): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    global dic

    L = []

    for a, b, c in Li:

        for d, e, f in [[1, 0, 0], [0, 1, 0], [0, 0, 1]]:

            if a+d < x and b+e < y and c+f < z and [a+d, b+e, c+f] not in Li:

                re = Lis[0][a+d] + Lis[1][b+e] + Lis[2][c+f]

                L.append([re, a+d, b+e, c+f])

    L.sort(reverse=True)

    Li.append([L[0][1], L[0][2], L[0][3]])

    return L[0][0]

    



for i in range(k): # Hits:6.0, Total execution time: 1.001 ms, Average time per hit: 0.16683333333333333 ms 


    if i == 0: # Hits:5.0, Total execution time: 0.666 ms, Average time per hit: 0.13319999999999999 ms 


        ans = Lis[0][0] + Lis[1][0] + Lis[2][0] # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


        print(ans) # Hits:1.0, Total execution time: 6.5 ms, Average time per hit: 6.5 ms 


    else:

        print((search())) # Hits:4.0, Total execution time: 48.375 ms, Average time per hit: 12.09375 ms 

","x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.125 ms, Average time per hit: 36.125 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.625 ms, Average time per hit: 2.625 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


A.sort(reverse=True) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




Q = [] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


Q.append([A[0]+B[0]+C[0], 0, 0, 0]) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


M = {(0, 0, 0):True} # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




def search(): # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


    global Q

    q = Q.pop()

    a = q[1]

    b = q[2]

    c = q[3]

    if a+1 < x and (a+1, b, c) not in M:

        Q.append([A[a+1]+B[b]+C[c], a+1, b, c])

        M[(a+1, b, c)] = True

    if b+1 < y and (a, b+1, c) not in M:

        Q.append([A[a]+B[b+1]+C[c], a, b+1, c])

        M[(a, b+1, c)] = True

    if c+1 < z and (a, b, c+1) not in M:

        Q.append([A[a]+B[b]+C[c+1], a, b, c+1])

        M[(a, b, c+1)] = True

    Q.sort()

    return q[0]



for _ in range(k): # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


    print((search())) # Hits:1.0, Total execution time: 5.834 ms, Average time per hit: 5.834 ms 
",p03078,True
"# coding: utf-8

# hello worldと表示する

#float型を許すな

#numpyはpythonで

import sys

input = sys.stdin.readline

sys.setrecursionlimit(10**7)

from collections import Counter, deque

from collections import defaultdict

from itertools import combinations, permutations, accumulate, groupby, product

from bisect import bisect_left,bisect_right

from heapq import heapify, heappop, heappush

from math import floor, ceil,pi,factorial

from operator import itemgetter

def I(): return int(eval(input()))

def MI(): return list(map(int, input().split()))

def LI(): return list(map(int, input().split()))

def LI2(): return [int(eval(input())) for i in range(n)]

def MXI(): return [[LI()]for i in range(n)]

def SI(): return input().rstrip()

def printns(x): print(('\n'.join(x)))

def printni(x): print(('\n'.join(list(map(str,x)))))

inf = 10**17

mod = 10**9 + 7



def main():

    x,y,z,k=MI()

    A=sorted(LI(),reverse=True)

    B=sorted(LI(),reverse=True)

    C=sorted(LI(),reverse=True)

    Q=[[(A[0]+B[0]+C[0])*(-1),0,0,0]]

    heapify(Q)

    #print(Q)

    i=0

    ans=[]

    #print(heappop(Q))

    #al=[[[-1]*x for i in range(y)] for j in range(z)]

    #al[0][0][0]=0

    xl,yl,zl=0,0,0

    al=[]

    al=[[0,0,0]]

    while i<k:

        #print(Q)

        if not Q:

            sys.exit()

        a,u,v,w=heappop(Q)

        ans.append(-a)

        i+=1

        if u+1<x and (not ([u+1,v,w] in al)):

            heappush(Q,[-A[u+1]-B[v]-C[w],u+1,v,w])

            al.append([u+1,v,w])

            

            #al[u+1][v][w]=0

        if v+1<y and not([u,v+1,w] in al):

            heappush(Q,[-A[u]-B[v+1]-C[w],u,v+1,w])

            al.append([u,v+1,w])

            #al[u][v+1][w]=0

        if w+1<z and not([u,v,w+1] in al):

            heappush(Q,[-A[u]-B[v]-C[w+1],u,v,w+1])

            al.append([u,v,w+1])

    #print(len(ans))

    for i in range(k):

        print((ans[i]))

if __name__==""__main__"":

    main()

    



    

    
",,p03078,False
"# coding: utf-8

# hello worldと表示する

#float型を許すな

#numpyはpythonで

import sys

input = sys.stdin.readline

sys.setrecursionlimit(10**7)

from collections import Counter, deque

from collections import defaultdict

from itertools import combinations, permutations, accumulate, groupby, product

from bisect import bisect_left,bisect_right

from heapq import heapify, heappop, heappush

from math import floor, ceil,pi,factorial

from operator import itemgetter

def I(): return int(eval(input()))

def MI(): return list(map(int, input().split()))

def LI(): return list(map(int, input().split()))

def LI2(): return [int(eval(input())) for i in range(n)]

def MXI(): return [[LI()]for i in range(n)]

def SI(): return input().rstrip()

def printns(x): print(('\n'.join(x)))

def printni(x): print(('\n'.join(list(map(str,x)))))

inf = 10**17

mod = 10**9 + 7



def main():

    x,y,z,k=MI()

    set_=set()

    A=sorted(LI(),reverse=True)

    B=sorted(LI(),reverse=True)

    C=sorted(LI(),reverse=True)

    Q=[[(A[0]+B[0]+C[0])*(-1),0,0,0]]

    heapify(Q)

    set_.add((0,0,0))

    #print(Q)

    i=0

    ans=[]

    #print(heappop(Q))

    #al=[[[-1]*x for i in range(y)] for j in range(z)]

    #al[0][0][0]=0

    xl,yl,zl=0,0,0

    al=[]

    al=[[0,0,0]]

    while i<k:

        #print(Q)

        a,u,v,w=heappop(Q)

        ans.append([-a,u,v,w])

        print((-a))

        i+=1

        if u+1<x and (u+1,v,w) not in set_:

            heappush(Q,[-A[u+1]-B[v]-C[w],u+1,v,w])

            set_.add((u+1,v,w))

            #al.append([u+1,v,w])

            

            #al[u+1][v][w]=0

        if v+1<y and (u,v+1,w) not in set_:

            heappush(Q,[-A[u]-B[v+1]-C[w],u,v+1,w])

            set_.add((u,v+1,w))

            #al.append([u,v+1,w])

            #al[u][v+1][w]=0

        if w+1<z and (u,v,w+1) not in set_:

            heappush(Q,[-A[u]-B[v]-C[w+1],u,v,w+1])

            set_.add((u,v,w+1))

            #al.append([u,v,w+1])

if __name__==""__main__"":

    main()

    



    

    
","# coding: utf-8

# hello worldと表示する

#float型を許すな

#numpyはpythonで

import sys # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


sys.setrecursionlimit(10**7) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


from collections import Counter, deque # Hits:1.0, Total execution time: 1.542 ms, Average time per hit: 1.542 ms 


from collections import defaultdict # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


from itertools import combinations, permutations, accumulate, groupby, product # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


from bisect import bisect_left,bisect_right # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


from heapq import heapify, heappop, heappush # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


from math import floor, ceil,pi,factorial # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


from operator import itemgetter # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


def I(): return int(eval(input())) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


def MI(): return list(map(int, input().split())) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def LI(): return list(map(int, input().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LI2(): return [int(eval(input())) for i in range(n)] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def MXI(): return [[LI()]for i in range(n)] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def SI(): return input().rstrip() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def printns(x): print(('\n'.join(x))) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def printni(x): print(('\n'.join(list(map(str,x))))) # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


inf = 10**17 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


mod = 10**9 + 7 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 






x,y,z,k=MI() # Hits:1.0, Total execution time: 35.167 ms, Average time per hit: 35.167 ms 


set_=set() # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


A=sorted(LI(),reverse=True) # Hits:1.0, Total execution time: 2.417 ms, Average time per hit: 2.417 ms 


B=sorted(LI(),reverse=True) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


C=sorted(LI(),reverse=True) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


Q=[[(A[0]+B[0]+C[0])*(-1),0,0,0]] # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


heapify(Q) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


set_.add((0,0,0)) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


i=0 # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


ans=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


xl,yl,zl=0,0,0 # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


al=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


al=[[0,0,0]] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while i<k: # Hits:6.0, Total execution time: 0.958 ms, Average time per hit: 0.15966666666666665 ms 


    a,u,v,w=heappop(Q) # Hits:5.0, Total execution time: 1.751 ms, Average time per hit: 0.3502 ms 


    ans.append([-a,u,v,w]) # Hits:5.0, Total execution time: 1.166 ms, Average time per hit: 0.2332 ms 


    print((-a)) # Hits:5.0, Total execution time: 19.166 ms, Average time per hit: 3.8331999999999997 ms 


    i+=1 # Hits:5.0, Total execution time: 0.833 ms, Average time per hit: 0.1666 ms 


    if u+1<x and (u+1,v,w) not in set_: # Hits:5.0, Total execution time: 1.459 ms, Average time per hit: 0.2918 ms 


        heappush(Q,[-A[u+1]-B[v]-C[w],u+1,v,w]) # Hits:4.0, Total execution time: 2.084 ms, Average time per hit: 0.521 ms 


        set_.add((u+1,v,w)) # Hits:4.0, Total execution time: 1.291 ms, Average time per hit: 0.32275 ms 


    if v+1<y and (u,v+1,w) not in set_: # Hits:5.0, Total execution time: 1.249 ms, Average time per hit: 0.24980000000000002 ms 


        heappush(Q,[-A[u]-B[v+1]-C[w],u,v+1,w]) # Hits:5.0, Total execution time: 2.168 ms, Average time per hit: 0.43360000000000004 ms 


        set_.add((u,v+1,w)) # Hits:5.0, Total execution time: 1.25 ms, Average time per hit: 0.25 ms 


    if w+1<z and (u,v,w+1) not in set_: # Hits:5.0, Total execution time: 1.209 ms, Average time per hit: 0.24180000000000001 ms 


        heappush(Q,[-A[u]-B[v]-C[w+1],u,v,w+1]) # Hits:3.0, Total execution time: 1.5 ms, Average time per hit: 0.5 ms 


        set_.add((u,v,w+1)) # Hits:3.0, Total execution time: 0.75 ms, Average time per hit: 0.25 ms 






    



    

    
",p03078,False
"x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 62.0 ms, Average time per hit: 62.0 ms 


a = sorted(list(map(int, input().split())), reverse=True) # Hits:1.0, Total execution time: 2.792 ms, Average time per hit: 2.792 ms 


b = sorted(list(map(int, input().split())), reverse=True) # Hits:1.0, Total execution time: 1.041 ms, Average time per hit: 1.041 ms 


c = sorted(list(map(int, input().split())), reverse=True) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 




p = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(x): # Hits:4.0, Total execution time: 0.834 ms, Average time per hit: 0.2085 ms 


  for j in range(y): # Hits:12.0, Total execution time: 1.416 ms, Average time per hit: 0.118 ms 


    for l in range(z): # Hits:36.0, Total execution time: 4.792 ms, Average time per hit: 0.13311111111111112 ms 


      if (i+1) * (j+1) * (l+1) <= k: # Hits:27.0, Total execution time: 6.586 ms, Average time per hit: 0.24392592592592593 ms 


        p.append(a[i]+b[j]+c[l]) # Hits:10.0, Total execution time: 2.919 ms, Average time per hit: 0.2919 ms 




p.sort(reverse=True) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 




for i in range(k): # Hits:6.0, Total execution time: 0.75 ms, Average time per hit: 0.125 ms 


  print((p[i])) # Hits:5.0, Total execution time: 11.542 ms, Average time per hit: 2.3084000000000002 ms 
","x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.458 ms, Average time per hit: 35.458 ms 


a = sorted(list(map(int, input().split())), reverse=True) # Hits:1.0, Total execution time: 3.042 ms, Average time per hit: 3.042 ms 


b = sorted(list(map(int, input().split())), reverse=True) # Hits:1.0, Total execution time: 1.166 ms, Average time per hit: 1.166 ms 


c = sorted(list(map(int, input().split())), reverse=True) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 




p = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(x): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


  if i <= k: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


    for j in range(y): # Hits:9.0, Total execution time: 1.207 ms, Average time per hit: 0.13411111111111113 ms 


      if (i+1) * (j+1) <= k: # Hits:8.0, Total execution time: 1.292 ms, Average time per hit: 0.1615 ms 


        for l in range(z): # Hits:16.0, Total execution time: 1.959 ms, Average time per hit: 0.1224375 ms 


          if (i+1) * (j+1) * (l+1) <= k: # Hits:15.0, Total execution time: 2.75 ms, Average time per hit: 0.18333333333333335 ms 


            p.append(a[i]+b[j]+c[l]) # Hits:10.0, Total execution time: 2.46 ms, Average time per hit: 0.246 ms 


          else:

            break # Hits:5.0, Total execution time: 1.168 ms, Average time per hit: 0.2336 ms 


      else:

        break # Hits:2.0, Total execution time: 0.125 ms, Average time per hit: 0.0625 ms 


  else:

    break



p.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




for i in range(k): # Hits:6.0, Total execution time: 0.752 ms, Average time per hit: 0.12533333333333332 ms 


  print((p[i])) # Hits:5.0, Total execution time: 9.999 ms, Average time per hit: 1.9998 ms 
",p03078,True
"x,y,z,K = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.083 ms, Average time per hit: 34.083 ms 




a = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


b = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


c = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


a.sort(reverse=True) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


b.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


c.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




abc = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range (x): # Hits:4.0, Total execution time: 0.584 ms, Average time per hit: 0.146 ms 


      for j in range(y): # Hits:12.0, Total execution time: 1.289 ms, Average time per hit: 0.10741666666666667 ms 


            for(k) in range(z): # Hits:19.0, Total execution time: 2.332 ms, Average time per hit: 0.12273684210526316 ms 


                  if (i+1)*(j+1)*(k+1) <= K: # Hits:18.0, Total execution time: 3.127 ms, Average time per hit: 0.17372222222222222 ms 


                        abc.append(a[i]+b[j]+c[k]) # Hits:10.0, Total execution time: 2.168 ms, Average time per hit: 0.21680000000000002 ms 


                  else:

                        break # Hits:8.0, Total execution time: 1.167 ms, Average time per hit: 0.145875 ms 




abc.sort(reverse=True) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


for i in abc[:K]: # Hits:6.0, Total execution time: 0.834 ms, Average time per hit: 0.139 ms 


      print(i) # Hits:5.0, Total execution time: 8.166 ms, Average time per hit: 1.6332 ms 
","



X,Y,Z,K = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.709 ms, Average time per hit: 38.709 ms 




A = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 




A.sort(reverse=True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 






ans = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(X): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    if (i+1) > K: break # Hits:3.0, Total execution time: 0.374 ms, Average time per hit: 0.12466666666666668 ms 


    for j in range(Y): # Hits:9.0, Total execution time: 0.999 ms, Average time per hit: 0.111 ms 


        if (i+1)*(j+1) > K: break # Hits:8.0, Total execution time: 1.25 ms, Average time per hit: 0.15625 ms 


        for k in range(Z): # Hits:16.0, Total execution time: 1.874 ms, Average time per hit: 0.117125 ms 


            if (i+1)*(j+1)*(k+1) > K: break # Hits:15.0, Total execution time: 3.374 ms, Average time per hit: 0.22493333333333335 ms 


            ans.append(A[i]+B[j]+C[k]) # Hits:10.0, Total execution time: 2.334 ms, Average time per hit: 0.2334 ms 




ans.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




for i in range(K): # Hits:6.0, Total execution time: 0.792 ms, Average time per hit: 0.132 ms 


    print((ans[i])) # Hits:5.0, Total execution time: 8.874 ms, Average time per hit: 1.7748 ms 


            
",p03078,True
"import heapq # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.375 ms, Average time per hit: 33.375 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.917 ms, Average time per hit: 1.917 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


A.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


To = [[[True] * Z for _ in range(Y)] for __ in range(X)] # Hits:1.0, Total execution time: 4.541 ms, Average time per hit: 4.541 ms 


Q = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


To[0][0][0] = False # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


heapq.heappush(Q, (-(A[0] + B[0] + C[0]), 0, 0, 0)) # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


cnt = K # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


while cnt > 0: # Hits:6.0, Total execution time: 1.126 ms, Average time per hit: 0.18766666666666665 ms 


    cnt -= 1 # Hits:5.0, Total execution time: 0.708 ms, Average time per hit: 0.1416 ms 


    ans, a, b, c = heapq.heappop(Q) # Hits:5.0, Total execution time: 2.125 ms, Average time per hit: 0.425 ms 


    print((-ans)) # Hits:5.0, Total execution time: 18.334 ms, Average time per hit: 3.6668000000000003 ms 


    if (a + 1 < X) and (To[a+1][b][c]): # Hits:5.0, Total execution time: 1.417 ms, Average time per hit: 0.2834 ms 


        heapq.heappush(Q, (-(A[a + 1] + B[b] + C[c]), a + 1, b, c)) # Hits:4.0, Total execution time: 2.166 ms, Average time per hit: 0.5415 ms 


        To[a+1][b][c] = False # Hits:4.0, Total execution time: 0.918 ms, Average time per hit: 0.2295 ms 


    if (b + 1 < Y) and (To[a][b+1][c]): # Hits:5.0, Total execution time: 1.374 ms, Average time per hit: 0.2748 ms 


        heapq.heappush(Q, (-(A[a] + B[b + 1] + C[c]), a, b + 1, c)) # Hits:5.0, Total execution time: 2.333 ms, Average time per hit: 0.4666 ms 


        To[a][b+1][c] = False # Hits:5.0, Total execution time: 0.958 ms, Average time per hit: 0.1916 ms 


    if (c + 1 < Z) and (To[a][b][c+1]): # Hits:5.0, Total execution time: 1.126 ms, Average time per hit: 0.22519999999999998 ms 


        heapq.heappush(Q, (-(A[a] + B[b] + C[c + 1]), a, b, c + 1)) # Hits:3.0, Total execution time: 1.791 ms, Average time per hit: 0.597 ms 


        To[a][b][c+1] = False # Hits:3.0, Total execution time: 0.584 ms, Average time per hit: 0.19466666666666665 ms 

","import heapq # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.375 ms, Average time per hit: 35.375 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


A.sort(reverse=True) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 






def calc(p): # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


    cnt = 0

    for a in A:

        for b in B:

            for c in C:

                if a + b + c < p:

                    break

                cnt += 1

                if cnt >= K:

                    return True

    return False





end = A[0] + B[0] + C[0] + 1 # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


start = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


while end - start > 1: # Hits:10.0, Total execution time: 1.291 ms, Average time per hit: 0.1291 ms 


    mid = (end + start)//2 # Hits:9.0, Total execution time: 0.876 ms, Average time per hit: 0.09733333333333333 ms 


    if calc(mid): # Hits:9.0, Total execution time: 23.708 ms, Average time per hit: 2.6342222222222222 ms 


        start = mid # Hits:3.0, Total execution time: 0.209 ms, Average time per hit: 0.06966666666666667 ms 


    else:

        end = mid # Hits:6.0, Total execution time: 0.499 ms, Average time per hit: 0.08316666666666667 ms 




D = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for a in A: # Hits:4.0, Total execution time: 0.251 ms, Average time per hit: 0.06275 ms 


    for b in B: # Hits:12.0, Total execution time: 1.665 ms, Average time per hit: 0.13875 ms 


        for c in C: # Hits:14.0, Total execution time: 1.084 ms, Average time per hit: 0.07742857142857143 ms 


            if a + b + c < start: # Hits:13.0, Total execution time: 1.582 ms, Average time per hit: 0.1216923076923077 ms 


                break # Hits:8.0, Total execution time: 0.626 ms, Average time per hit: 0.07825 ms 


            D.append(a + b + c) # Hits:5.0, Total execution time: 0.79 ms, Average time per hit: 0.158 ms 


D.sort(reverse=True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for d in D[:K]: # Hits:6.0, Total execution time: 0.834 ms, Average time per hit: 0.139 ms 


    print(d) # Hits:5.0, Total execution time: 8.875 ms, Average time per hit: 1.775 ms 

",p03078,True
"import itertools # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.458 ms, Average time per hit: 34.458 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.834 ms, Average time per hit: 1.834 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


C = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


result = [a + b + c for (a,b,c) in list(itertools.product(A, B, C))] # Hits:1.0, Total execution time: 6.167 ms, Average time per hit: 6.167 ms 


result.sort(reverse = True) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


for i in range(K): # Hits:6.0, Total execution time: 1.125 ms, Average time per hit: 0.1875 ms 


    print((result[i])) # Hits:5.0, Total execution time: 8.959 ms, Average time per hit: 1.7918 ms 
","import itertools # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.375 ms, Average time per hit: 35.375 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.792 ms, Average time per hit: 1.792 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


C = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


result = [a + b  for (a,b) in list(itertools.product(A, B))] # Hits:1.0, Total execution time: 3.375 ms, Average time per hit: 3.375 ms 


result.sort(reverse = True) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


result = [s + c for (s,c) in list(itertools.product(result[:K], C))] # Hits:1.0, Total execution time: 2.792 ms, Average time per hit: 2.792 ms 


result.sort(reverse = True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


for i in range(K): # Hits:6.0, Total execution time: 1.125 ms, Average time per hit: 0.1875 ms 


    print((result[i])) # Hits:5.0, Total execution time: 8.708 ms, Average time per hit: 1.7415999999999998 ms 
",p03078,True
"X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.292 ms, Average time per hit: 34.292 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


C = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


A.sort(reverse = True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


B.sort(reverse = True) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


C.sort(reverse = True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ans = [A[i]+B[j]+C[k] for i in range(X) for j in range(Y) for k in range(Z) if (i+1)*(j+1)*(k+1) <= K] # Hits:1.0, Total execution time: 8.041 ms, Average time per hit: 8.041 ms 


ans.sort(reverse=True) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.791 ms, Average time per hit: 0.13183333333333333 ms 


    print((ans[i])) # Hits:5.0, Total execution time: 8.625 ms, Average time per hit: 1.725 ms 
","X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.667 ms, Average time per hit: 35.667 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


C = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


A.sort(reverse = True) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


B.sort(reverse = True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


C.sort(reverse = True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


t =[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(X): # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


    for j in range(Y): # Hits:12.0, Total execution time: 1.293 ms, Average time per hit: 0.10775 ms 


        for k in range(Z): # Hits:27.0, Total execution time: 2.789 ms, Average time per hit: 0.10329629629629629 ms 


            if (i+1)*(j+1)*(k) <= K: # Hits:24.0, Total execution time: 3.998 ms, Average time per hit: 0.16658333333333333 ms 


                t.append(A[i]+B[j]+C[k]) # Hits:18.0, Total execution time: 4.67 ms, Average time per hit: 0.2594444444444445 ms 


            else:break # Hits:6.0, Total execution time: 0.416 ms, Average time per hit: 0.06933333333333333 ms 


t.sort(reverse=True) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.834 ms, Average time per hit: 0.139 ms 


    print((t[i])) # Hits:5.0, Total execution time: 9.168 ms, Average time per hit: 1.8336 ms 
",p03078,True
"from heapq import nlargest # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


x,y,z,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 38.792 ms, Average time per hit: 38.792 ms 


A,B,C=[list(map(int,input().split()))for _ in[0]*3] # Hits:1.0, Total execution time: 4.75 ms, Average time per hit: 4.75 ms 


E=nlargest(k,(a+b+c for a in A for b in B for c in C)) # Hits:1.0, Total execution time: 17.375 ms, Average time per hit: 17.375 ms 


for i in E: # Hits:6.0, Total execution time: 0.709 ms, Average time per hit: 0.11816666666666667 ms 


    print(i) # Hits:5.0, Total execution time: 8.792 ms, Average time per hit: 1.7584000000000002 ms 

","from heapq import nlargest # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


x,y,z,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 40.208 ms, Average time per hit: 40.208 ms 


A,B,C=[list(map(int,input().split()))for _ in[0]*3] # Hits:1.0, Total execution time: 6.208 ms, Average time per hit: 6.208 ms 


D=nlargest(k,(a+b for a in A for b in B )) # Hits:1.0, Total execution time: 11.583 ms, Average time per hit: 11.583 ms 


E=nlargest(k,(d+c for c in C for d in D )) # Hits:1.0, Total execution time: 10.416 ms, Average time per hit: 10.416 ms 


for i in E: # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


    print(i) # Hits:5.0, Total execution time: 8.916 ms, Average time per hit: 1.7832000000000001 ms 

",p03078,True
"#coding:utf-8

import sys

sys.setrecursionlimit(2**31-1)

input = sys.stdin.readline

write = sys.stdout.write

LMIIS = lambda : list(map(int,input().split()))

II = lambda : int(input())

dbg = lambda *something : print(*something) if DEBUG is True else 0

DEBUG = True



def main():

    X,Y,Z,K = LMIIS()

    A = LMIIS()

    B = LMIIS()

    C = LMIIS()

    

    # A.sort(reverse=True)

    # B.sort(reverse=True)

    # C.sort(reverse=True)

    

    h = []

    from heapq import heappush,heappop

    for a in A:

        for b in B:

            for c in C:

                heappush(h,-(a+b+c))

    for _ in range(K):

        print(-heappop(h))

    # A.append(0)

    # B.append(0)

    # C.append(0)



    # # ai = bi = ci = 0



    # # for i in range(min(3000,X*Y*Z)):

    # #     print(A[ai],B[bi],C[ci])

    # #     print(A[ai]+B[bi]+C[ci])

    # #     nextai = ai + 1 if ai < X else ai

    # #     nextbi = bi + 1 if bi < Y else bi

    # #     nextci = ci + 1 if ci < Z else ci



    # #     #aiを更新する場合

    # #     if  A[nextai] >= B[nextbi]:

    # #         if A[nextai] >= C[nextci]:

    # #             ai = nextai

    # #         else:

    # #             ci = nextci

    # #     else:

    # #         if B[nextbi] >= C[nextci]:

    # #             bi = nextbi

    # #         else:

    # #             ci = nextci













    pass

if __name__ == '__main__':

    main()
",,p03078,False
"#coding:utf-8

import sys

sys.setrecursionlimit(2**31-1)

input = sys.stdin.readline

write = sys.stdout.write

LMIIS = lambda : list(map(int,input().split()))

II = lambda : int(input())

dbg = lambda *something : print(*something) if DEBUG is True else 0

DEBUG = True



def main():

    X,Y,Z,K = LMIIS()

    A = LMIIS()

    B = LMIIS()

    C = LMIIS()

    



    AB = []

    for a in A:

        for b in B:

            AB.append(a+b)

    

    AB.sort(reverse=True)



    ABC = []

    for ab in AB[:K]:

        for c in C:

            ABC.append(ab+c)

    ABC.sort(reverse=True)

    for i in range(K):

        print(ABC[i])



    pass

if __name__ == '__main__':

    main()
",,p03078,False
"from collections import deque # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 


X, Y, Z, K = list(map(int,input().split())) # Hits:1.0, Total execution time: 36.791 ms, Average time per hit: 36.791 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.958 ms, Average time per hit: 1.958 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 




out = deque() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




for i in range(X): # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


    for j in range(Y): # Hits:12.0, Total execution time: 1.126 ms, Average time per hit: 0.09383333333333332 ms 


        for k in range(Z): # Hits:36.0, Total execution time: 3.372 ms, Average time per hit: 0.09366666666666668 ms 


            out.append(A[i]+B[j]+C[k]) # Hits:27.0, Total execution time: 5.624 ms, Average time per hit: 0.2082962962962963 ms 


out = list(out) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


out.sort(reverse = True) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


    print((out[i])) # Hits:5.0, Total execution time: 8.293 ms, Average time per hit: 1.6585999999999999 ms 
","from collections import deque # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


X, Y, Z, K = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.875 ms, Average time per hit: 37.875 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 




out = deque() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


out2 = deque() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(X): # Hits:4.0, Total execution time: 0.749 ms, Average time per hit: 0.18725 ms 


    for j in range(Y): # Hits:12.0, Total execution time: 1.168 ms, Average time per hit: 0.09733333333333333 ms 


        out.append(A[i]+B[j]) # Hits:9.0, Total execution time: 2.46 ms, Average time per hit: 0.2733333333333333 ms 


out = list(out) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


out.sort(reverse = True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


del out[K:] # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in range(len(out)): # Hits:6.0, Total execution time: 0.748 ms, Average time per hit: 0.12466666666666668 ms 


    for j in range(Z): # Hits:20.0, Total execution time: 1.92 ms, Average time per hit: 0.096 ms 


        out2.append(out[i]+C[j]) # Hits:15.0, Total execution time: 2.375 ms, Average time per hit: 0.15833333333333335 ms 


out2 = list(out2) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


out2.sort(reverse = True) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


    print((out2[i])) # Hits:5.0, Total execution time: 8.583 ms, Average time per hit: 1.7166 ms 

",p03078,True
"from collections import deque # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 


X, Y, Z, K = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.542 ms, Average time per hit: 37.542 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 




out = deque() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


out2 = deque() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(X): # Hits:4.0, Total execution time: 0.709 ms, Average time per hit: 0.17725 ms 


    for j in range(Y): # Hits:12.0, Total execution time: 1.29 ms, Average time per hit: 0.1075 ms 


        out.append(A[i]+B[j]) # Hits:9.0, Total execution time: 2.124 ms, Average time per hit: 0.236 ms 


out = list(out) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


out.sort(reverse = True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


del out[K:] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for i in range(len(out)): # Hits:6.0, Total execution time: 0.667 ms, Average time per hit: 0.11116666666666668 ms 


    for j in range(Z): # Hits:20.0, Total execution time: 1.914 ms, Average time per hit: 0.09570000000000001 ms 


        out2.append(out[i]+C[j]) # Hits:15.0, Total execution time: 2.375 ms, Average time per hit: 0.15833333333333335 ms 


out2 = list(out2) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


out2.sort(reverse = True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.708 ms, Average time per hit: 0.118 ms 


    print((out2[i])) # Hits:5.0, Total execution time: 8.418 ms, Average time per hit: 1.6836 ms 

","from collections import deque # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 


X, Y, Z, K = list(map(int,input().split())) # Hits:1.0, Total execution time: 38.334 ms, Average time per hit: 38.334 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.959 ms, Average time per hit: 1.959 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




out = deque() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


out2 = deque() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




for i in range(X): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    for j in range(Y): # Hits:12.0, Total execution time: 1.374 ms, Average time per hit: 0.1145 ms 


        out.append(A[i]+B[j]) # Hits:9.0, Total execution time: 2.168 ms, Average time per hit: 0.24088888888888887 ms 


out = sorted(out, reverse=True) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


del out[K:] # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in range(len(out)): # Hits:6.0, Total execution time: 0.666 ms, Average time per hit: 0.111 ms 


    for j in range(Z): # Hits:20.0, Total execution time: 1.917 ms, Average time per hit: 0.09584999999999999 ms 


        out2.append(out[i]+C[j]) # Hits:15.0, Total execution time: 2.457 ms, Average time per hit: 0.1638 ms 


out2 = sorted(out2, reverse=True) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.75 ms, Average time per hit: 0.125 ms 


    print((out2[i])) # Hits:5.0, Total execution time: 8.501 ms, Average time per hit: 1.7002000000000002 ms 

",p03078,True
"from functools import lru_cache # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 




numbers = input().split() # Hits:1.0, Total execution time: 37.625 ms, Average time per hit: 37.625 ms 


x = input().split() # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


y = input().split() # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


z = input().split() # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




k = int(numbers[3]) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 






x.sort(reverse=True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


y.sort(reverse=True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


z.sort(reverse=True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




answer = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in x: # Hits:4.0, Total execution time: 0.292 ms, Average time per hit: 0.073 ms 


    for j in y: # Hits:12.0, Total execution time: 0.916 ms, Average time per hit: 0.07633333333333332 ms 


        for m in z: # Hits:36.0, Total execution time: 2.878 ms, Average time per hit: 0.07994444444444444 ms 


            price = int(i)+int(j)+int(m) # Hits:27.0, Total execution time: 7.795 ms, Average time per hit: 0.2887037037037037 ms 


            answer.append(price) # Hits:27.0, Total execution time: 3.541 ms, Average time per hit: 0.13114814814814815 ms 




answer.sort(reverse=True) # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


del answer[k::] # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




for l in answer: # Hits:6.0, Total execution time: 0.583 ms, Average time per hit: 0.09716666666666667 ms 


    print(l) # Hits:5.0, Total execution time: 8.459 ms, Average time per hit: 1.6918 ms 

","numbers = input().split() # Hits:1.0, Total execution time: 28.5 ms, Average time per hit: 28.5 ms 


x = input().split() # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 


y = input().split() # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 


z = input().split() # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 




k = int(numbers[3]) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




answer = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in x: # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


    for j in y: # Hits:12.0, Total execution time: 1.082 ms, Average time per hit: 0.09016666666666667 ms 


        price = int(i)+int(j) # Hits:9.0, Total execution time: 2.041 ms, Average time per hit: 0.22677777777777777 ms 


        answer.append(price) # Hits:9.0, Total execution time: 1.834 ms, Average time per hit: 0.20377777777777778 ms 


answer.sort(reverse=True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


del answer[k::] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


f_ans = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for m in answer: # Hits:6.0, Total execution time: 0.54 ms, Average time per hit: 0.09 ms 


    for n in z: # Hits:20.0, Total execution time: 1.542 ms, Average time per hit: 0.07709999999999999 ms 


        price = m + int(n) # Hits:15.0, Total execution time: 2.167 ms, Average time per hit: 0.14446666666666666 ms 


        f_ans.append(price) # Hits:15.0, Total execution time: 1.751 ms, Average time per hit: 0.11673333333333333 ms 




f_ans.sort(reverse=True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


del f_ans[k::] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




for l in f_ans: # Hits:6.0, Total execution time: 0.708 ms, Average time per hit: 0.118 ms 


    print(l) # Hits:5.0, Total execution time: 9.249 ms, Average time per hit: 1.8497999999999999 ms 

",p03078,True
"import sys # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


def input(): return sys.stdin.readline().strip() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def mapint(): return list(map(int, input().split())) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


sys.setrecursionlimit(10**9) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




X, Y, Z, K = mapint() # Hits:1.0, Total execution time: 31.0 ms, Average time per hit: 31.0 ms 


Xs = list(mapint()) # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 


Ys = list(mapint()) # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 


Zs = list(mapint()) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


Xs.sort(reverse=True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


Ys.sort(reverse=True) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


Zs.sort(reverse=True) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




x, y, z = 0, 0, 0 # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


from heapq import heappop, heappush # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 


Q = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


heappush(Q, (-(Xs[x]+Ys[y]+Zs[z]), (x, y, z))) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


s = set() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


s.add((x, y, z)) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


for _ in range(K): # Hits:6.0, Total execution time: 1.0 ms, Average time per hit: 0.16666666666666666 ms 


    ans, (x, y, z) = heappop(Q) # Hits:5.0, Total execution time: 1.876 ms, Average time per hit: 0.3752 ms 


    print((-ans)) # Hits:5.0, Total execution time: 23.083 ms, Average time per hit: 4.6166 ms 


    origin = [x, y, z] # Hits:5.0, Total execution time: 0.833 ms, Average time per hit: 0.1666 ms 


    for i in range(3): # Hits:20.0, Total execution time: 2.917 ms, Average time per hit: 0.14585 ms 


        xyz = origin[:] # Hits:15.0, Total execution time: 2.293 ms, Average time per hit: 0.15286666666666668 ms 


        xyz[i] += 1 # Hits:15.0, Total execution time: 2.791 ms, Average time per hit: 0.18606666666666666 ms 


        x, y, z = xyz # Hits:15.0, Total execution time: 2.292 ms, Average time per hit: 0.15280000000000002 ms 


        if x>=X or y>=Y or z>=Z: continue # Hits:15.0, Total execution time: 2.958 ms, Average time per hit: 0.1972 ms 


        if not tuple(xyz) in s: # Hits:13.0, Total execution time: 2.664 ms, Average time per hit: 0.20492307692307693 ms 


            heappush(Q, (-(Xs[x]+Ys[y]+Zs[z]), (x, y, z))) # Hits:12.0, Total execution time: 4.582 ms, Average time per hit: 0.3818333333333333 ms 


            s.add((x, y, z))           # Hits:12.0, Total execution time: 3.542 ms, Average time per hit: 0.2951666666666667 ms 
","import sys # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


def input(): return sys.stdin.readline().strip() # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


def mapint(): return list(map(int, input().split())) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


sys.setrecursionlimit(10**9) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




X, Y, Z, K = mapint() # Hits:1.0, Total execution time: 38.958 ms, Average time per hit: 38.958 ms 


As = list(mapint()) # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


Bs = list(mapint()) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


Cs = list(mapint()) # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


As.sort(reverse=True) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


Bs.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


Cs.sort(reverse=True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




from heapq import heappop, heappush # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


Q = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


heappush(Q, (-(As[0]+Bs[0]+Cs[0]), 0, 0, 0)) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


s = set() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for _ in range(K): # Hits:6.0, Total execution time: 1.043 ms, Average time per hit: 0.17383333333333334 ms 


    v, a, b, c = heappop(Q) # Hits:5.0, Total execution time: 1.499 ms, Average time per hit: 0.2998 ms 


    print((-v)) # Hits:5.0, Total execution time: 16.042 ms, Average time per hit: 3.2084 ms 


    if a+1<X and not (a+1, b, c) in s: # Hits:5.0, Total execution time: 1.376 ms, Average time per hit: 0.2752 ms 


        s.add((a+1, b, c)) # Hits:4.0, Total execution time: 1.166 ms, Average time per hit: 0.2915 ms 


        heappush(Q, (-(As[a+1]+Bs[b]+Cs[c]), a+1, b, c)) # Hits:4.0, Total execution time: 1.832 ms, Average time per hit: 0.458 ms 


    if b+1<Y and not (a, b+1, c) in s: # Hits:5.0, Total execution time: 1.418 ms, Average time per hit: 0.2836 ms 


        s.add((a, b+1, c)) # Hits:5.0, Total execution time: 1.124 ms, Average time per hit: 0.2248 ms 


        heappush(Q, (-(As[a]+Bs[b+1]+Cs[c]), a, b+1, c)) # Hits:5.0, Total execution time: 2.084 ms, Average time per hit: 0.4168 ms 


    if c+1<Z and not (a, b, c+1) in s: # Hits:5.0, Total execution time: 1.166 ms, Average time per hit: 0.2332 ms 


        s.add((a, b, c+1)) # Hits:3.0, Total execution time: 0.667 ms, Average time per hit: 0.22233333333333336 ms 


        heappush(Q, (-(As[a]+Bs[b]+Cs[c+1]), a, b, c+1)) # Hits:3.0, Total execution time: 1.501 ms, Average time per hit: 0.5003333333333333 ms 
",p03078,True
"

X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.916 ms, Average time per hit: 35.916 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.792 ms, Average time per hit: 1.792 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 




res = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for a in A: # Hits:4.0, Total execution time: 0.29 ms, Average time per hit: 0.0725 ms 


    for b in B: # Hits:12.0, Total execution time: 1.001 ms, Average time per hit: 0.08341666666666667 ms 


        for c in C: # Hits:36.0, Total execution time: 2.917 ms, Average time per hit: 0.08102777777777777 ms 


            res.append(a + b + c) # Hits:27.0, Total execution time: 4.666 ms, Average time per hit: 0.1728148148148148 ms 




res.sort(reverse=True) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.957 ms, Average time per hit: 0.1595 ms 


    print((res[i])) # Hits:5.0, Total execution time: 9.5 ms, Average time per hit: 1.9 ms 

","

X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.792 ms, Average time per hit: 33.792 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 




res = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for a in A: # Hits:4.0, Total execution time: 0.376 ms, Average time per hit: 0.094 ms 


    for b in B: # Hits:12.0, Total execution time: 0.999 ms, Average time per hit: 0.08325 ms 


        res.append(a + b) # Hits:9.0, Total execution time: 1.96 ms, Average time per hit: 0.21777777777777776 ms 




res.sort(reverse=True) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




res2 = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for v in res[:K]: # Hits:6.0, Total execution time: 0.668 ms, Average time per hit: 0.11133333333333333 ms 


    for c in C: # Hits:20.0, Total execution time: 1.628 ms, Average time per hit: 0.0814 ms 


        res2.append(v + c) # Hits:15.0, Total execution time: 1.916 ms, Average time per hit: 0.12773333333333334 ms 




res2.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.959 ms, Average time per hit: 0.15983333333333336 ms 


    print((res2[i])) # Hits:5.0, Total execution time: 9.208 ms, Average time per hit: 1.8416 ms 

",p03078,True
"

from heapq import heappop, heappush # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 




X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 29.875 ms, Average time per hit: 29.875 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.208 ms, Average time per hit: 1.208 ms 




A.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




pq = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


heappush(pq, (-A[0] - B[0] - C[0], 0, 0, 0)) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


appeared = set((0, 0, 0)) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




for _ in range(K): # Hits:6.0, Total execution time: 0.958 ms, Average time per hit: 0.15966666666666665 ms 


    # Pop maximum value

    val, i, j, k = heappop(pq) # Hits:5.0, Total execution time: 1.459 ms, Average time per hit: 0.2918 ms 


    print((-val)) # Hits:5.0, Total execution time: 19.292 ms, Average time per hit: 3.8584 ms 




    # Add next value

    if i + 1 < X and (i + 1, j, k) not in appeared: # Hits:5.0, Total execution time: 1.46 ms, Average time per hit: 0.292 ms 


        heappush(pq, (-A[i + 1] - B[j] - C[k], i + 1, j, k)) # Hits:4.0, Total execution time: 1.75 ms, Average time per hit: 0.4375 ms 


        appeared.add((i + 1, j, k)) # Hits:4.0, Total execution time: 1.25 ms, Average time per hit: 0.3125 ms 




    if j + 1 < Y and (i, j + 1, k) not in appeared: # Hits:5.0, Total execution time: 1.293 ms, Average time per hit: 0.2586 ms 


        heappush(pq, (-A[i] - B[j + 1] - C[k], i, j + 1, k)) # Hits:5.0, Total execution time: 2.291 ms, Average time per hit: 0.4582 ms 


        appeared.add((i, j + 1, k)) # Hits:5.0, Total execution time: 1.083 ms, Average time per hit: 0.2166 ms 




    if k + 1 < Z and (i, j, k + 1) not in appeared: # Hits:5.0, Total execution time: 1.208 ms, Average time per hit: 0.24159999999999998 ms 


        heappush(pq, (-A[i] - B[j] - C[k + 1], i, j, k + 1)) # Hits:3.0, Total execution time: 1.333 ms, Average time per hit: 0.4443333333333333 ms 


        appeared.add((i, j, k + 1)) # Hits:3.0, Total execution time: 0.667 ms, Average time per hit: 0.22233333333333336 ms 

","

X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.333 ms, Average time per hit: 34.333 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 




A.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




res = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(X): # Hits:4.0, Total execution time: 0.541 ms, Average time per hit: 0.13525 ms 


    for j in range(Y): # Hits:12.0, Total execution time: 1.252 ms, Average time per hit: 0.10433333333333333 ms 


        for k in range(Z): # Hits:19.0, Total execution time: 2.292 ms, Average time per hit: 0.12063157894736842 ms 


            if (i + 1) * (j + 1) * (k + 1) <= K: # Hits:18.0, Total execution time: 3.29 ms, Average time per hit: 0.18277777777777776 ms 


                res.append(A[i] + B[j] + C[k]) # Hits:10.0, Total execution time: 2.457 ms, Average time per hit: 0.2457 ms 


            else:

                break # Hits:8.0, Total execution time: 1.039 ms, Average time per hit: 0.129875 ms 




res.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.627 ms, Average time per hit: 0.1045 ms 


    print((res[i])) # Hits:5.0, Total execution time: 8.5 ms, Average time per hit: 1.7 ms 

",p03078,True
"X,Y,Z,K = list(map(int,input().split())) # Hits:1.0, Total execution time: 36.709 ms, Average time per hit: 36.709 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.916 ms, Average time per hit: 1.916 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




A = sorted(A, reverse = True) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


B = sorted(B, reverse = True) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


C = sorted(C, reverse = True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




ans = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(min(K,X)): # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


  for j in range(min(K,Y)): # Hits:12.0, Total execution time: 1.371 ms, Average time per hit: 0.11425 ms 


    for k in range(min(K,Z)): # Hits:36.0, Total execution time: 4.254 ms, Average time per hit: 0.11816666666666667 ms 


      ans.append(A[i]+B[j]+C[k]) # Hits:27.0, Total execution time: 5.917 ms, Average time per hit: 0.21914814814814815 ms 


    

ans = sorted(ans, reverse=True) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 




for i in range(K): # Hits:6.0, Total execution time: 0.792 ms, Average time per hit: 0.132 ms 


  print((ans[i])) # Hits:5.0, Total execution time: 8.874 ms, Average time per hit: 1.7748 ms 


      
","X,Y,Z,K = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.708 ms, Average time per hit: 37.708 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




A = sorted(A, reverse = True) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


B = sorted(B, reverse = True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


C = sorted(C, reverse = True) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




ans = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(min(K,X)): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


  for j in range(min(K//(i+1),Y)): # Hits:9.0, Total execution time: 1.376 ms, Average time per hit: 0.15288888888888888 ms 


    for k in range(min(K//(i+1)//(j+1),Z)): # Hits:16.0, Total execution time: 3.207 ms, Average time per hit: 0.2004375 ms 


      ans.append(A[i]+B[j]+C[k]) # Hits:10.0, Total execution time: 2.417 ms, Average time per hit: 0.2417 ms 


    

ans = sorted(ans, reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




for i in range(K): # Hits:6.0, Total execution time: 0.707 ms, Average time per hit: 0.11783333333333333 ms 


  print((ans[i])) # Hits:5.0, Total execution time: 8.708 ms, Average time per hit: 1.7415999999999998 ms 
",p03078,True
"X,Y,Z,K = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.375 ms, Average time per hit: 37.375 ms 


l_a = [int(x) for x in input().split()] # Hits:1.0, Total execution time: 2.458 ms, Average time per hit: 2.458 ms 


l_b = [int(x) for x in input().split()] # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


l_c = [int(x) for x in input().split()] # Hits:1.0, Total execution time: 1.166 ms, Average time per hit: 1.166 ms 


l_a.sort(reverse = True)   # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


l_b.sort(reverse = True)   # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


l_c.sort(reverse = True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


l_d = [a + b for a in l_a for b in l_b] # Hits:1.0, Total execution time: 1.458 ms, Average time per hit: 1.458 ms 


l_d.sort(reverse = True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


l_d[:3000] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


l_e = [ab + c for ab in l_d for c in l_c] # Hits:1.0, Total execution time: 2.834 ms, Average time per hit: 2.834 ms 


l_e.sort(reverse = True) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


 

for i in range(K): # Hits:6.0, Total execution time: 0.834 ms, Average time per hit: 0.139 ms 


    print((l_e[i])) # Hits:5.0, Total execution time: 8.459 ms, Average time per hit: 1.6918 ms 
","X,Y,Z,K = list(map(int,input().split())) # Hits:1.0, Total execution time: 36.292 ms, Average time per hit: 36.292 ms 


l_a = [int(x) for x in input().split()] # Hits:1.0, Total execution time: 2.875 ms, Average time per hit: 2.875 ms 


l_b = [int(x) for x in input().split()] # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 


l_c = [int(x) for x in input().split()] # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


l_a.sort(reverse = True)   # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


l_b.sort(reverse = True)   # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


l_c.sort(reverse = True) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


l_d = [a + b for a in l_a for b in l_b] # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


l_d.sort(reverse = True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


l_d = l_d[:3000] # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


l_e = [ab + c for ab in l_d for c in l_c] # Hits:1.0, Total execution time: 2.875 ms, Average time per hit: 2.875 ms 


l_e.sort(reverse = True) # Hits:1.0, Total execution time: 0.666 ms, Average time per hit: 0.666 ms 


 

for i in range(K): # Hits:6.0, Total execution time: 0.959 ms, Average time per hit: 0.15983333333333336 ms 


    print((l_e[i])) # Hits:5.0, Total execution time: 9.291 ms, Average time per hit: 1.8582 ms 
",p03078,True
"import sys # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 


from itertools import product # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 






X, Y, Z, K = map(int, input().split()) # Hits:1.0, Total execution time: 29.208 ms, Average time per hit: 29.208 ms 


lst_A = sorted(map(int, input().split()), reverse=True) # Hits:1.0, Total execution time: 1.916 ms, Average time per hit: 1.916 ms 


lst_B = sorted(map(int, input().split()), reverse=True) # Hits:1.0, Total execution time: 3.417 ms, Average time per hit: 3.417 ms 


lst_C = sorted(map(int, input().split()), reverse=True) # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


lst_A_K = lst_A[:K] # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


lst_B_K = lst_B[:K] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


lst_C_K = lst_C[:K] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 






lst_AB = sorted([a+b for a, b in product(lst_A_K, lst_B_K)], reverse=True) # Hits:1.0, Total execution time: 3.834 ms, Average time per hit: 3.834 ms 


lst_AB_K = lst_AB[:K] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 






lst_ABC = sorted([ab+c for ab, c in product(lst_AB_K, lst_C_K)], reverse=True) # Hits:1.0, Total execution time: 3.625 ms, Average time per hit: 3.625 ms 


lst_ABC_K = lst_ABC[:K] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 






print(*lst_ABC_K, sep=""\n"") # Hits:1.0, Total execution time: 10.167 ms, Average time per hit: 10.167 ms 

","import sys # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


from itertools import product # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 






X, Y, Z, K = map(int, input().split()) # Hits:1.0, Total execution time: 34.667 ms, Average time per hit: 34.667 ms 


lst_A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


lst_B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


lst_C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


lst_A.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


lst_B.sort(reverse=True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


lst_C.sort(reverse=True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




# lst_A_K = lst_A[:K]

# lst_B_K = lst_B[:K]

lst_C_K = lst_C[:K] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 






lst_AB = sorted([a+b for a, b in product(lst_A, lst_B)], reverse=True) # Hits:1.0, Total execution time: 2.916 ms, Average time per hit: 2.916 ms 


lst_AB_K = lst_AB[:K] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




lst_ABC = sorted([ab+c for ab, c in product(lst_AB_K, lst_C_K)], reverse=True) # Hits:1.0, Total execution time: 2.5 ms, Average time per hit: 2.5 ms 


lst_ABC_K = lst_ABC[:K] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




print(*lst_ABC_K, sep=""\n"") # Hits:1.0, Total execution time: 8.75 ms, Average time per hit: 8.75 ms 

",p03078,True
"from itertools import product # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 




X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 30.333 ms, Average time per hit: 30.333 ms 


lst_A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.583 ms, Average time per hit: 1.583 ms 


lst_B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


lst_C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


lst_A.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


lst_B.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


lst_C.sort(reverse=True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 






lst_A_K = lst_A[:K] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


lst_B_K = lst_B[:K] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


lst_C_K = lst_C[:K] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 






lst_AB = sorted([a+b for a, b in product(lst_A_K, lst_B_K)], reverse=True) # Hits:1.0, Total execution time: 2.25 ms, Average time per hit: 2.25 ms 


lst_AB_K = lst_AB[:K] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




lst_ABC = sorted([ab+c for ab, c in product(lst_AB_K, lst_C_K)], reverse=True) # Hits:1.0, Total execution time: 2.208 ms, Average time per hit: 2.208 ms 


lst_ABC_K = lst_ABC[:K] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




for i in range(K): # Hits:6.0, Total execution time: 0.958 ms, Average time per hit: 0.15966666666666665 ms 


    print((lst_ABC_K[i])) # Hits:5.0, Total execution time: 8.624 ms, Average time per hit: 1.7247999999999999 ms 

","import sys # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


from itertools import product # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 




read = sys.stdin.readline # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


X, Y, Z, K = list(map(int, read().split())) # Hits:1.0, Total execution time: 33.333 ms, Average time per hit: 33.333 ms 


lst_A = list(map(int, read().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


lst_B = list(map(int, read().split())) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


lst_C = list(map(int, read().split())) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 






lst_A.sort(reverse=True) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


lst_B.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


lst_C.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


lst_C_K = lst_C[:K] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 






lst_AB = sorted([a+b for a, b in product(lst_A, lst_B)], reverse=True) # Hits:1.0, Total execution time: 2.416 ms, Average time per hit: 2.416 ms 


lst_AB_K = lst_AB[:K] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




lst_ABC = sorted([ab+c for ab, c in product(lst_AB_K, lst_C_K)], reverse=True) # Hits:1.0, Total execution time: 2.375 ms, Average time per hit: 2.375 ms 


lst_ABC_K = lst_ABC[:K] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




for i in range(K): # Hits:6.0, Total execution time: 0.958 ms, Average time per hit: 0.15966666666666665 ms 


    print((lst_ABC_K[i])) # Hits:5.0, Total execution time: 9.167 ms, Average time per hit: 1.8334000000000001 ms 

",p03078,True
"from itertools import product # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 






X, Y, Z, K = map(int, input().split()) # Hits:1.0, Total execution time: 33.791 ms, Average time per hit: 33.791 ms 


lst_A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.917 ms, Average time per hit: 1.917 ms 


lst_B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


lst_C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


lst_C = lst_C[:K] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




lst_AB = [a + b for a, b in product(lst_A, lst_B)] # Hits:1.0, Total execution time: 2.25 ms, Average time per hit: 2.25 ms 


lst_AB.sort(reverse=True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


K_ = min(3000, X*Y*Z) # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


lst_ABC = [ab + c for ab, c in list(product(lst_AB[:K_], lst_C))] # Hits:1.0, Total execution time: 4.125 ms, Average time per hit: 4.125 ms 


lst_ABC.sort(reverse=True) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 






print(*lst_ABC[:K], sep=""\n"") # Hits:1.0, Total execution time: 8.417 ms, Average time per hit: 8.417 ms 

","from itertools import product # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 






X, Y, Z, K = map(int, input().split()) # Hits:1.0, Total execution time: 36.083 ms, Average time per hit: 36.083 ms 


lst_A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.792 ms, Average time per hit: 1.792 ms 


lst_B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


lst_C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


lst_A.sort(reverse=True) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


lst_B.sort(reverse=True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


lst_C.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




lst_C_K = lst_C[:K] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 






lst_AB = sorted([a+b for a, b in product(lst_A, lst_B)], reverse=True) # Hits:1.0, Total execution time: 2.416 ms, Average time per hit: 2.416 ms 


lst_AB_K = lst_AB[:K] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




lst_ABC = sorted([ab+c for ab, c in product(lst_AB_K, lst_C_K)], reverse=True) # Hits:1.0, Total execution time: 2.417 ms, Average time per hit: 2.417 ms 


lst_ABC_K = lst_ABC[:K] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




print(*lst_ABC_K, sep=""\n"") # Hits:1.0, Total execution time: 7.792 ms, Average time per hit: 7.792 ms 

",p03078,True
"import itertools # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 






X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.292 ms, Average time per hit: 34.292 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.958 ms, Average time per hit: 1.958 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 




AB = [a + b for (a, b) in list(itertools.product(A, B))] # Hits:1.0, Total execution time: 2.291 ms, Average time per hit: 2.291 ms 


AB.sort(reverse=True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


ans = [ab + c for (ab, c) in list(itertools.product(AB[:min(3000, X*Y*Z)], C))] # Hits:1.0, Total execution time: 3.917 ms, Average time per hit: 3.917 ms 


ans.sort(reverse=True) # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 




print(*ans[:K],sep='\n') # Hits:1.0, Total execution time: 8.333 ms, Average time per hit: 8.333 ms 

","x,y,z,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 35.708 ms, Average time per hit: 35.708 ms 


lisa = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.917 ms, Average time per hit: 1.917 ms 


lisb = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


lisc = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


lisa.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


lisb.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


lisc.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


an = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for num in lisb: # Hits:4.0, Total execution time: 0.416 ms, Average time per hit: 0.104 ms 


    for nu in lisa: # Hits:12.0, Total execution time: 1.124 ms, Average time per hit: 0.09366666666666668 ms 


        an.append(num+nu) # Hits:9.0, Total execution time: 2.126 ms, Average time per hit: 0.23622222222222222 ms 


an.sort(reverse=True) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


an = an[:min(3001,x*y*z+1)] # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


for num in lisc: # Hits:4.0, Total execution time: 0.333 ms, Average time per hit: 0.08325 ms 


    for nu in an: # Hits:30.0, Total execution time: 2.375 ms, Average time per hit: 0.07916666666666668 ms 


        ans.append(num+nu) # Hits:27.0, Total execution time: 3.668 ms, Average time per hit: 0.13585185185185183 ms 


ans.sort(reverse=True) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


for i in range(k): # Hits:6.0, Total execution time: 1.042 ms, Average time per hit: 0.17366666666666666 ms 


    print((ans[i])) # Hits:5.0, Total execution time: 8.541 ms, Average time per hit: 1.7082 ms 

",p03078,True
"x,y,z,k=list(map(int, input().split())) # Hits:1.0, Total execution time: 31.166 ms, Average time per hit: 31.166 ms 


a=list(map(int, input().split())) # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


b=list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


c=list(map(int, input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


ab=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(x): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    for j in range(y): # Hits:12.0, Total execution time: 1.249 ms, Average time per hit: 0.10408333333333333 ms 


        ab+=[a[i]+b[j]] # Hits:9.0, Total execution time: 2.502 ms, Average time per hit: 0.278 ms 


ab.sort(key=lambda x: -x) # Hits:1.0, Total execution time: 1.791 ms, Average time per hit: 1.791 ms 


c.sort(key=lambda x: -x) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


ans=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ct=[0] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ansc=[ab[0]+c[0]] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


while (len(ans)<k): # Hits:6.0, Total execution time: 0.666 ms, Average time per hit: 0.111 ms 


    if(ct[-1]!=0 and len(ct)<z): # Hits:5.0, Total execution time: 0.624 ms, Average time per hit: 0.1248 ms 


        ansc+=[ab[0]+c[len(ct)]] # Hits:2.0, Total execution time: 0.417 ms, Average time per hit: 0.2085 ms 


        ct+=[0] # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    ans+=[max(ansc)] # Hits:5.0, Total execution time: 1.167 ms, Average time per hit: 0.2334 ms 


    tmp=ansc.index(max(ansc)) # Hits:5.0, Total execution time: 1.166 ms, Average time per hit: 0.2332 ms 


    if(ct[tmp]==len(ab)-1): # Hits:5.0, Total execution time: 0.793 ms, Average time per hit: 0.1586 ms 


        ansc[tmp]=0 # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    else:

        ct[tmp]+=1 # Hits:5.0, Total execution time: 0.708 ms, Average time per hit: 0.1416 ms 


        ansc[tmp]=ab[ct[tmp]]+c[tmp] # Hits:5.0, Total execution time: 0.749 ms, Average time per hit: 0.14980000000000002 ms 


for i in ans: # Hits:6.0, Total execution time: 0.624 ms, Average time per hit: 0.104 ms 


    print(i) # Hits:5.0, Total execution time: 9.001 ms, Average time per hit: 1.8002 ms 
","x,y,z,k=list(map(int, input().split())) # Hits:1.0, Total execution time: 33.625 ms, Average time per hit: 33.625 ms 


a=list(map(int, input().split())) # Hits:1.0, Total execution time: 2.5 ms, Average time per hit: 2.5 ms 


b=list(map(int, input().split())) # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 


c=list(map(int, input().split())) # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 


ab=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(x): # Hits:4.0, Total execution time: 0.834 ms, Average time per hit: 0.2085 ms 


    for j in range(y): # Hits:12.0, Total execution time: 1.792 ms, Average time per hit: 0.14933333333333335 ms 


        ab.append(a[i]+b[j]) # Hits:9.0, Total execution time: 3.293 ms, Average time per hit: 0.36588888888888893 ms 


ab.sort(key=lambda x: -x) # Hits:1.0, Total execution time: 2.5 ms, Average time per hit: 2.5 ms 


c.sort(key=lambda x: -x) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


ans=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


ct=[0] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ansc=[ab[0]+c[0]] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


while (len(ans)<k): # Hits:6.0, Total execution time: 0.999 ms, Average time per hit: 0.1665 ms 


    if(ct[-1]!=0 and len(ct)<z): # Hits:5.0, Total execution time: 0.791 ms, Average time per hit: 0.15819999999999998 ms 


        ansc+=[ab[0]+c[len(ct)]] # Hits:2.0, Total execution time: 0.625 ms, Average time per hit: 0.3125 ms 


        ct+=[0] # Hits:2.0, Total execution time: 0.375 ms, Average time per hit: 0.1875 ms 


    ans+=[max(ansc)] # Hits:5.0, Total execution time: 1.833 ms, Average time per hit: 0.36660000000000004 ms 


    tmp=ansc.index(max(ansc)) # Hits:5.0, Total execution time: 1.583 ms, Average time per hit: 0.31660000000000005 ms 


    if(ct[tmp]==len(ab)-1): # Hits:5.0, Total execution time: 1.042 ms, Average time per hit: 0.2084 ms 


        ansc[tmp]=0 # Hits:2.0, Total execution time: 0.25 ms, Average time per hit: 0.125 ms 


    else:

        ct[tmp]+=1 # Hits:5.0, Total execution time: 0.958 ms, Average time per hit: 0.1916 ms 


        ansc[tmp]=ab[ct[tmp]]+c[tmp] # Hits:5.0, Total execution time: 1.167 ms, Average time per hit: 0.2334 ms 


for i in ans: # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


    print(i) # Hits:5.0, Total execution time: 9.875 ms, Average time per hit: 1.975 ms 
",p03078,True
"X,Y,Z,K = list(map(int,input().split())) # Hits:1.0, Total execution time: 35.5 ms, Average time per hit: 35.5 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.917 ms, Average time per hit: 1.917 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


C = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


DD = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


A.sort() # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


B.sort() # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


C.sort() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in A: # Hits:4.0, Total execution time: 0.417 ms, Average time per hit: 0.10425 ms 


    for j in B: # Hits:12.0, Total execution time: 0.876 ms, Average time per hit: 0.073 ms 


       DD.append(i+j) # Hits:9.0, Total execution time: 2.333 ms, Average time per hit: 0.25922222222222224 ms 


DD.sort() # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


F = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in DD[min(len(DD)-3010,0):]: # Hits:10.0, Total execution time: 1.541 ms, Average time per hit: 0.1541 ms 


    for j in C: # Hits:36.0, Total execution time: 2.959 ms, Average time per hit: 0.08219444444444444 ms 


        F.append(i+j) # Hits:27.0, Total execution time: 4.0 ms, Average time per hit: 0.14814814814814814 ms 


F.sort() # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.875 ms, Average time per hit: 0.14583333333333334 ms 


    print((F[-1-i])) # Hits:5.0, Total execution time: 9.418 ms, Average time per hit: 1.8836 ms 


        
","X,Y,Z,K = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.125 ms, Average time per hit: 37.125 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


C = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


DD = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


A.sort() # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


B.sort() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


C.sort() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in A: # Hits:4.0, Total execution time: 0.335 ms, Average time per hit: 0.08375 ms 


    for j in B: # Hits:12.0, Total execution time: 0.957 ms, Average time per hit: 0.07975 ms 


       DD.append(i+j) # Hits:9.0, Total execution time: 2.25 ms, Average time per hit: 0.25 ms 


DD.sort() # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


F = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in DD[max(len(DD)-3010,0):]: # Hits:10.0, Total execution time: 1.584 ms, Average time per hit: 0.1584 ms 


    for j in C: # Hits:36.0, Total execution time: 2.957 ms, Average time per hit: 0.08213888888888889 ms 


        F.append(i+j) # Hits:27.0, Total execution time: 3.625 ms, Average time per hit: 0.13425925925925927 ms 


F.sort() # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.875 ms, Average time per hit: 0.14583333333333334 ms 


    print((F[-1-i])) # Hits:5.0, Total execution time: 9.708 ms, Average time per hit: 1.9416 ms 


        
",p03078,True
"x, y ,z, k = map(int,input().split()) # Hits:1.0, Total execution time: 35.583 ms, Average time per hit: 35.583 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.375 ms, Average time per hit: 2.375 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.166 ms, Average time per hit: 1.166 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.083 ms, Average time per hit: 1.083 ms 




A.sort(reverse = True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


B.sort(reverse = True) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


C.sort(reverse = True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




now = [0, 0, 0] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


que = [[A[0] + B[0] + C[0], 0, 0, 0]] # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


memory = [[A[0] + B[0] + C[0], 0, 0, 0]] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


ans = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


while len(ans) < k: # Hits:6.0, Total execution time: 0.916 ms, Average time per hit: 0.15266666666666664 ms 


  maxli = max(que, key = lambda x:x[0]) # Hits:5.0, Total execution time: 4.124 ms, Average time per hit: 0.8248 ms 


  ans.append(maxli[0]) # Hits:5.0, Total execution time: 0.874 ms, Average time per hit: 0.1748 ms 


  now = maxli[1:] # Hits:5.0, Total execution time: 0.708 ms, Average time per hit: 0.1416 ms 


  que.remove(maxli) # Hits:5.0, Total execution time: 0.917 ms, Average time per hit: 0.1834 ms 


  a = A[min(now[0] + 1, x - 1)] # Hits:5.0, Total execution time: 1.25 ms, Average time per hit: 0.25 ms 


  b = B[min(now[1] + 1, y - 1)] # Hits:5.0, Total execution time: 1.126 ms, Average time per hit: 0.22519999999999998 ms 


  c = C[min(now[2] + 1, z - 1)] # Hits:5.0, Total execution time: 1.209 ms, Average time per hit: 0.24180000000000001 ms 


  if [a + B[now[1]] + C[now[2]], min(now[0] + 1, x - 1), now[1], now[2]] not in memory: # Hits:5.0, Total execution time: 2.417 ms, Average time per hit: 0.4834 ms 


    que.append([a + B[now[1]] + C[now[2]], min(now[0] + 1, x - 1), now[1], now[2]]) # Hits:3.0, Total execution time: 1.416 ms, Average time per hit: 0.472 ms 


    memory.append([a + B[now[1]] + C[now[2]], min(now[0] + 1, x - 1), now[1], now[2]]) # Hits:3.0, Total execution time: 1.291 ms, Average time per hit: 0.4303333333333333 ms 


  if [A[now[0]] + b + C[now[2]], now[0], min(now[1] + 1, y - 1), now[2]] not in memory: # Hits:5.0, Total execution time: 2.5 ms, Average time per hit: 0.5 ms 


    que.append([A[now[0]] + b + C[now[2]], now[0], min(now[1] + 1, y - 1), now[2]]) # Hits:5.0, Total execution time: 2.084 ms, Average time per hit: 0.4168 ms 


    memory.append([A[now[0]] + b + C[now[2]], now[0], min(now[1] + 1, y - 1), now[2]]) # Hits:5.0, Total execution time: 1.959 ms, Average time per hit: 0.39180000000000004 ms 


  if [A[now[0]] + B[now[1]] + c, now[0], now[1], min(now[2] + 1, z - 1)] not in memory: # Hits:5.0, Total execution time: 2.583 ms, Average time per hit: 0.5166000000000001 ms 


    que.append([A[now[0]] + B[now[1]] + c, now[0], now[1], min(now[2] + 1, z - 1)]) # Hits:4.0, Total execution time: 1.709 ms, Average time per hit: 0.42725 ms 


    memory.append([A[now[0]] + B[now[1]] + c, now[0], now[1], min(now[2] + 1, z - 1)]) # Hits:4.0, Total execution time: 1.624 ms, Average time per hit: 0.406 ms 




print(*ans, sep = ""\n"") # Hits:1.0, Total execution time: 8.75 ms, Average time per hit: 8.75 ms 

","x, y ,z, k = map(int,input().split()) # Hits:1.0, Total execution time: 35.583 ms, Average time per hit: 35.583 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.083 ms, Average time per hit: 2.083 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 




A.sort(reverse = True) # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


B.sort(reverse = True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


C.sort(reverse = True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




now = [0, 0, 0] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


que = [[A[0] + B[0] + C[0], 0, 0, 0]] # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


memory = [[0, 0, 0]] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans = [] # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


while len(ans) < k: # Hits:6.0, Total execution time: 1.042 ms, Average time per hit: 0.17366666666666666 ms 


  maxli = max(que, key = lambda x:x[0]) # Hits:5.0, Total execution time: 4.876 ms, Average time per hit: 0.9752000000000001 ms 


  ans.append(maxli[0]) # Hits:5.0, Total execution time: 0.75 ms, Average time per hit: 0.15 ms 


  now = maxli[1:] # Hits:5.0, Total execution time: 0.708 ms, Average time per hit: 0.1416 ms 


  que.remove(maxli) # Hits:5.0, Total execution time: 1.125 ms, Average time per hit: 0.225 ms 


  a = A[min(now[0] + 1, x - 1)] # Hits:5.0, Total execution time: 1.417 ms, Average time per hit: 0.2834 ms 


  b = B[min(now[1] + 1, y - 1)] # Hits:5.0, Total execution time: 1.042 ms, Average time per hit: 0.2084 ms 


  c = C[min(now[2] + 1, z - 1)] # Hits:5.0, Total execution time: 1.042 ms, Average time per hit: 0.2084 ms 


  if [min(now[0] + 1, x - 1), now[1], now[2]] not in memory: # Hits:5.0, Total execution time: 2.001 ms, Average time per hit: 0.4002 ms 


    que.append([a + B[now[1]] + C[now[2]], min(now[0] + 1, x - 1), now[1], now[2]]) # Hits:3.0, Total execution time: 1.333 ms, Average time per hit: 0.4443333333333333 ms 


    memory.append([min(now[0] + 1, x - 1), now[1], now[2]]) # Hits:3.0, Total execution time: 0.916 ms, Average time per hit: 0.3053333333333333 ms 


  if [now[0], min(now[1] + 1, y - 1), now[2]] not in memory: # Hits:5.0, Total execution time: 1.876 ms, Average time per hit: 0.3752 ms 


    que.append([A[now[0]] + b + C[now[2]], now[0], min(now[1] + 1, y - 1), now[2]]) # Hits:5.0, Total execution time: 2.125 ms, Average time per hit: 0.425 ms 


    memory.append([now[0], min(now[1] + 1, y - 1), now[2]]) # Hits:5.0, Total execution time: 1.458 ms, Average time per hit: 0.2916 ms 


  if [now[0], now[1], min(now[2] + 1, z - 1)] not in memory: # Hits:5.0, Total execution time: 1.874 ms, Average time per hit: 0.3748 ms 


    que.append([A[now[0]] + B[now[1]] + c, now[0], now[1], min(now[2] + 1, z - 1)]) # Hits:4.0, Total execution time: 1.708 ms, Average time per hit: 0.427 ms 


    memory.append([now[0], now[1], min(now[2] + 1, z - 1)]) # Hits:4.0, Total execution time: 1.209 ms, Average time per hit: 0.30225 ms 




print(*ans, sep = ""\n"") # Hits:1.0, Total execution time: 8.583 ms, Average time per hit: 8.583 ms 

",p03078,True
"X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 30.459 ms, Average time per hit: 30.459 ms 




A_list = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 


B_list = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


C_list = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




import itertools # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


val_list = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




a_max = min(len(A_list), K) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


b_max = min(len(B_list), K) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


c_max = min(len(C_list), K) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




A_list = sorted(A_list, reverse=True) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 


B_list = sorted(B_list, reverse=True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


C_list = sorted(C_list, reverse=True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


for a, b, c in itertools.product(A_list[:a_max], B_list[:b_max], C_list[:c_max]): # Hits:28.0, Total execution time: 3.874 ms, Average time per hit: 0.13835714285714287 ms 


    val_list.append(a + b + c) # Hits:27.0, Total execution time: 4.958 ms, Average time per hit: 0.18362962962962961 ms 


    

val_list = sorted(val_list, reverse=True) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.874 ms, Average time per hit: 0.14566666666666667 ms 


    print((val_list[i])) # Hits:5.0, Total execution time: 8.625 ms, Average time per hit: 1.725 ms 


    





            
","X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 26.958 ms, Average time per hit: 26.958 ms 




A_list = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


B_list = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


C_list = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 






import itertools # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


val_list = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 






A_list = sorted(A_list, reverse=True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


B_list = sorted(B_list, reverse=True) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


C_list = sorted(C_list, reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




#print(A_list)

#print(B_list)

#print(C_list)



for a, b, c in itertools.product(list(range(len(A_list))), list(range(len(B_list))), list(range(len(C_list)))): # Hits:28.0, Total execution time: 5.167 ms, Average time per hit: 0.18453571428571428 ms 


    if (a+1) * (b+1) * (c+1) > K: # Hits:27.0, Total execution time: 5.331 ms, Average time per hit: 0.19744444444444445 ms 


        continue # Hits:17.0, Total execution time: 1.455 ms, Average time per hit: 0.08558823529411765 ms 


        

    val_list.append(A_list[a] + B_list[b] + C_list[c]) # Hits:10.0, Total execution time: 5.834 ms, Average time per hit: 0.5834 ms 




val_list = sorted(val_list, reverse=True) # Hits:1.0, Total execution time: 0.584 ms, Average time per hit: 0.584 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.917 ms, Average time per hit: 0.15283333333333335 ms 


    print((val_list[i])) # Hits:5.0, Total execution time: 10.417 ms, Average time per hit: 2.0834 ms 




    





            
",p03078,True
"x,y,z,k = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.917 ms, Average time per hit: 38.917 ms 


A = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 2.959 ms, Average time per hit: 2.959 ms 


B = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 


C = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.166 ms, Average time per hit: 1.166 ms 




A.sort(reverse=True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




x = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


y = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


z = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


cakes = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for x, a in enumerate(A): # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 


    for y, b in enumerate(B): # Hits:12.0, Total execution time: 1.542 ms, Average time per hit: 0.1285 ms 


        for z, c in enumerate(C): # Hits:19.0, Total execution time: 2.54 ms, Average time per hit: 0.1336842105263158 ms 


            

            if (x+1)*(y+1)*(z+1) > k: # Hits:18.0, Total execution time: 3.375 ms, Average time per hit: 0.1875 ms 


                break # Hits:8.0, Total execution time: 1.625 ms, Average time per hit: 0.203125 ms 


                

            cakes.append(a+b+c) # Hits:10.0, Total execution time: 1.667 ms, Average time per hit: 0.1667 ms 


    

cakes.sort(reverse=True)       # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


for cake in cakes[:k]: # Hits:6.0, Total execution time: 0.876 ms, Average time per hit: 0.146 ms 


    print(cake) # Hits:5.0, Total execution time: 8.333 ms, Average time per hit: 1.6665999999999999 ms 
","x,y,z,k = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.042 ms, Average time per hit: 38.042 ms 


A = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 2.584 ms, Average time per hit: 2.584 ms 


B = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


C = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 




A.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




x = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


y = 0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


z = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


cakes = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for x, a in enumerate(A): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


    if x+1 > k: break # Hits:3.0, Total execution time: 0.376 ms, Average time per hit: 0.12533333333333332 ms 


        

    for y, b in enumerate(B): # Hits:9.0, Total execution time: 1.166 ms, Average time per hit: 0.12955555555555553 ms 


        if (x+1)*(y+1) > k: break # Hits:8.0, Total execution time: 1.29 ms, Average time per hit: 0.16125 ms 


            

        for z, c in enumerate(C): # Hits:16.0, Total execution time: 2.334 ms, Average time per hit: 0.145875 ms 


            if (x+1)*(y+1)*(z+1) > k: break # Hits:15.0, Total execution time: 3.124 ms, Average time per hit: 0.20826666666666668 ms 


                

            cakes.append(a+b+c) # Hits:10.0, Total execution time: 1.791 ms, Average time per hit: 0.17909999999999998 ms 


    

cakes.sort(reverse=True)       # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


for cake in cakes[:k]: # Hits:6.0, Total execution time: 0.833 ms, Average time per hit: 0.13883333333333334 ms 


    print(cake) # Hits:5.0, Total execution time: 11.958 ms, Average time per hit: 2.3916 ms 
",p03078,True
"x,y,z,N =(int(i) for i in input().split()) # Hits:1.0, Total execution time: 40.625 ms, Average time per hit: 40.625 ms 


a=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 3.75 ms, Average time per hit: 3.75 ms 


b=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.583 ms, Average time per hit: 1.583 ms 


c=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.292 ms, Average time per hit: 1.292 ms 




sa=sorted(a,reverse=True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


sb=sorted(b,reverse=True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


sc=sorted(c,reverse=True) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


l=[]#端点情報 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


n=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


i=0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


j=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


k=0 # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 




while n<N: # Hits:6.0, Total execution time: 3.0 ms, Average time per hit: 0.5 ms 


  print((sa[i]+sb[j]+sc[k])) # Hits:5.0, Total execution time: 55.292 ms, Average time per hit: 11.058399999999999 ms 


  l.append([i,j,k]) # Hits:5.0, Total execution time: 2.543 ms, Average time per hit: 0.5086 ms 


  maxl=0 # Hits:5.0, Total execution time: 0.75 ms, Average time per hit: 0.15 ms 


  maxijk=[len(sa)-1,len(sb)-1,len(sc)-1] # Hits:5.0, Total execution time: 3.0 ms, Average time per hit: 0.6 ms 


  for w in l: # Hits:20.0, Total execution time: 2.705 ms, Average time per hit: 0.13525 ms 


    if w[0]<len(sa)-1: # Hits:15.0, Total execution time: 3.17 ms, Average time per hit: 0.21133333333333335 ms 


      if not ([w[0]+1,w[1],w[2]] in l): # Hits:13.0, Total execution time: 4.123 ms, Average time per hit: 0.3171538461538461 ms 


        if maxl<=sa[w[0]+1]+sb[w[1]]+sc[w[2]]: # Hits:8.0, Total execution time: 3.042 ms, Average time per hit: 0.38025 ms 


          maxl=sa[w[0]+1]+sb[w[1]]+sc[w[2]] # Hits:6.0, Total execution time: 1.707 ms, Average time per hit: 0.2845 ms 


          maxijk=[w[0]+1,w[1],w[2]] # Hits:6.0, Total execution time: 1.417 ms, Average time per hit: 0.23616666666666666 ms 


    if w[1]<len(sb)-1: # Hits:15.0, Total execution time: 2.918 ms, Average time per hit: 0.19453333333333334 ms 


      if not([w[0],w[1]+1,w[2]] in l): # Hits:15.0, Total execution time: 4.876 ms, Average time per hit: 0.32506666666666667 ms 


        if maxl<=sa[w[0]]+sb[w[1]+1]+sc[w[2]]: # Hits:15.0, Total execution time: 4.872 ms, Average time per hit: 0.32480000000000003 ms 


          maxl=sa[w[0]]+sb[w[1]+1]+sc[w[2]] # Hits:3.0, Total execution time: 0.958 ms, Average time per hit: 0.3193333333333333 ms 


          maxijk=[w[0],w[1]+1,w[2]] # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 


    if w[2]<len(sc)-1: # Hits:15.0, Total execution time: 3.042 ms, Average time per hit: 0.2028 ms 


      if not([w[0],w[1],w[2]+1] in l): # Hits:14.0, Total execution time: 4.252 ms, Average time per hit: 0.3037142857142857 ms 


        if maxl<=sa[w[0]]+sb[w[1]]+sc[w[2]+1]: # Hits:9.0, Total execution time: 3.375 ms, Average time per hit: 0.375 ms 


          maxl=sa[w[0]]+sb[w[1]]+sc[w[2]+1] # Hits:4.0, Total execution time: 1.208 ms, Average time per hit: 0.302 ms 


          maxijk=[w[0],w[1],w[2]+1] # Hits:4.0, Total execution time: 0.917 ms, Average time per hit: 0.22925 ms 


    i=maxijk[0] # Hits:15.0, Total execution time: 3.998 ms, Average time per hit: 0.26653333333333334 ms 


  j=maxijk[1] # Hits:5.0, Total execution time: 0.667 ms, Average time per hit: 0.13340000000000002 ms 


  k=maxijk[2] # Hits:5.0, Total execution time: 0.542 ms, Average time per hit: 0.10840000000000001 ms 


  n+=1 # Hits:5.0, Total execution time: 0.625 ms, Average time per hit: 0.125 ms 
","#解答を見た後





x,y,z,N =(int(i) for i in input().split()) # Hits:1.0, Total execution time: 32.333 ms, Average time per hit: 32.333 ms 


a=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 2.625 ms, Average time per hit: 2.625 ms 


b=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


c=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 




sa=sorted(a,reverse=True) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


sb=sorted(b,reverse=True) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


sc=sorted(c,reverse=True) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


answer=[] # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 




for i in range(len(sa)): # Hits:4.0, Total execution time: 0.876 ms, Average time per hit: 0.219 ms 


  for j in range(len(sb)): # Hits:9.0, Total execution time: 1.376 ms, Average time per hit: 0.15288888888888888 ms 


    if (i+1)*(j+1)>N:break # Hits:8.0, Total execution time: 1.581 ms, Average time per hit: 0.197625 ms 


    for k in range(len(sb)): # Hits:16.0, Total execution time: 2.583 ms, Average time per hit: 0.1614375 ms 


      if (i+1)*(j+1)*(k+1)>N:break  # Hits:15.0, Total execution time: 4.166 ms, Average time per hit: 0.27773333333333333 ms 


      answer.append(sa[i]+sb[j]+sc[k]) # Hits:10.0, Total execution time: 2.874 ms, Average time per hit: 0.2874 ms 


answer=sorted(answer,reverse=True) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


for i in range(0,N): # Hits:6.0, Total execution time: 0.875 ms, Average time per hit: 0.14583333333333334 ms 


  print((answer[i])) # Hits:5.0, Total execution time: 11.333 ms, Average time per hit: 2.2666 ms 



",p03078,True
"import heapq # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


import collections # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




x,y,z,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.334 ms, Average time per hit: 37.334 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.958 ms, Average time per hit: 1.958 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


C = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




A.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




heap = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


heapq.heapify(heap) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


heapq.heappush(heap,(-(A[0]+B[0]+C[0]),0,0,0)) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




dictionary = collections.defaultdict(bool) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


dictionary[(0,0,0)] = True # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




i = 0 # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




while i<k: # Hits:6.0, Total execution time: 0.917 ms, Average time per hit: 0.15283333333333335 ms 


    M = heapq.heappop(heap) # Hits:5.0, Total execution time: 1.293 ms, Average time per hit: 0.2586 ms 


    print((-M[0])) # Hits:5.0, Total execution time: 18.79 ms, Average time per hit: 3.758 ms 


    i += 1 # Hits:5.0, Total execution time: 0.584 ms, Average time per hit: 0.1168 ms 


    if not dictionary[(M[1]+1,M[2],M[3])] and M[1]+1<x: # Hits:5.0, Total execution time: 2.29 ms, Average time per hit: 0.458 ms 


        heapq.heappush(heap,(-(A[M[1]+1]+B[M[2]]+C[M[3]]),M[1]+1,M[2],M[3])) # Hits:4.0, Total execution time: 2.292 ms, Average time per hit: 0.573 ms 


        dictionary[(M[1]+1,M[2],M[3])] = True # Hits:4.0, Total execution time: 1.167 ms, Average time per hit: 0.29175 ms 


    if not dictionary[(M[1],M[2]+1,M[3])] and M[2]+1<y: # Hits:5.0, Total execution time: 2.208 ms, Average time per hit: 0.44160000000000005 ms 


        heapq.heappush(heap,(-(A[M[1]]+B[M[2]+1]+C[M[3]]),M[1],M[2]+1,M[3])) # Hits:5.0, Total execution time: 2.749 ms, Average time per hit: 0.5498 ms 


        dictionary[(M[1],M[2]+1,M[3])] = True # Hits:5.0, Total execution time: 1.418 ms, Average time per hit: 0.2836 ms 


    if not dictionary[(M[1],M[2],M[3]+1)] and M[3]+1<z: # Hits:5.0, Total execution time: 1.709 ms, Average time per hit: 0.3418 ms 


        heapq.heappush(heap,(-(A[M[1]]+B[M[2]]+C[M[3]+1]),M[1],M[2],M[3]+1)) # Hits:3.0, Total execution time: 1.708 ms, Average time per hit: 0.5693333333333334 ms 


        dictionary[(M[1],M[2],M[3]+1)] = True # Hits:3.0, Total execution time: 0.793 ms, Average time per hit: 0.2643333333333333 ms 
","from heapq import heappop, heappush, heapify # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 




X, Y, Z, K = list(map(int,input().split())) # Hits:1.0, Total execution time: 34.0 ms, Average time per hit: 34.0 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.792 ms, Average time per hit: 1.792 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


C = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




A.sort(reverse=True) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




heap = list() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


used = set() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


res = list() # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




heappush(heap, (-(A[0] + B[0] + C[0]), 0, 0, 0)) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


used.add((0, 0, 0)) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 




for _ in range(K): # Hits:6.0, Total execution time: 0.916 ms, Average time per hit: 0.15266666666666664 ms 


    v, i, j, k = heappop(heap) # Hits:5.0, Total execution time: 1.251 ms, Average time per hit: 0.2502 ms 


    res.append(-v) # Hits:5.0, Total execution time: 0.708 ms, Average time per hit: 0.1416 ms 


    if i + 1 < X and (i + 1, j, k) not in used: # Hits:5.0, Total execution time: 1.084 ms, Average time per hit: 0.21680000000000002 ms 


        used.add((i + 1, j, k)) # Hits:4.0, Total execution time: 0.791 ms, Average time per hit: 0.19775 ms 


        heappush(heap, (-(A[i + 1] + B[j] + C[k]), i + 1, j, k)) # Hits:4.0, Total execution time: 1.458 ms, Average time per hit: 0.3645 ms 


    if j + 1 < Y and (i, j + 1, k) not in used: # Hits:5.0, Total execution time: 1.001 ms, Average time per hit: 0.2002 ms 


        used.add((i, j + 1, k)) # Hits:5.0, Total execution time: 0.876 ms, Average time per hit: 0.1752 ms 


        heappush(heap, (-(A[i] + B[j + 1] + C[k]), i, j + 1, k)) # Hits:5.0, Total execution time: 1.583 ms, Average time per hit: 0.31660000000000005 ms 


    if k + 1 < Z and (i, j, k + 1) not in used: # Hits:5.0, Total execution time: 0.834 ms, Average time per hit: 0.1668 ms 


        used.add((i, j, k + 1)) # Hits:3.0, Total execution time: 0.541 ms, Average time per hit: 0.18033333333333335 ms 


        heappush(heap, (-(A[i] + B[j] + C[k + 1]), i, j, k + 1)) # Hits:3.0, Total execution time: 1.124 ms, Average time per hit: 0.3746666666666667 ms 


        

print(('\n'.join(map(str, res)))) # Hits:1.0, Total execution time: 6.208 ms, Average time per hit: 6.208 ms 
",p03078,True
"def dfs(count, ans, ll): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    if count == 2:

        for cc in c:

            cccc = ans + cc

            if cccc is not None:

                ll.append(cccc)

    if count == 1:

        for bb in b:

            bbbb = dfs(count+1, ans+bb, ll)

            if bbbb is not None:

                ll.append(bbbb)

    if count == 0:

        for aa in a:

            aaaa = dfs(count+1, ans+aa, ll)

            if aaaa is not None:

                ll.append(aaaa)

        return ll



x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 29.375 ms, Average time per hit: 29.375 ms 


a = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 2.792 ms, Average time per hit: 2.792 ms 


b = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.917 ms, Average time per hit: 1.917 ms 


c = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


aaa = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ans = dfs(0, 0, aaa) # Hits:1.0, Total execution time: 16.708 ms, Average time per hit: 16.708 ms 


ans.sort() # Hits:1.0, Total execution time: 0.958 ms, Average time per hit: 0.958 ms 


ans = list(reversed(ans)) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


for i in range(k): # Hits:6.0, Total execution time: 0.957 ms, Average time per hit: 0.1595 ms 


    print((ans[i])) # Hits:5.0, Total execution time: 8.626 ms, Average time per hit: 1.7252 ms 
","x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 38.417 ms, Average time per hit: 38.417 ms 


a = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 3.75 ms, Average time per hit: 3.75 ms 


b = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


c = [int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.667 ms, Average time per hit: 1.667 ms 


a = list(reversed(sorted(a))) # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 


b = list(reversed(sorted(b))) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


c = list(reversed(sorted(c))) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


ans = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(x): # Hits:4.0, Total execution time: 0.792 ms, Average time per hit: 0.198 ms 


    for j in range(y): # Hits:12.0, Total execution time: 1.332 ms, Average time per hit: 0.111 ms 


        for l in range(z): # Hits:35.0, Total execution time: 3.998 ms, Average time per hit: 0.11422857142857143 ms 


            if i * j * l <= k: # Hits:27.0, Total execution time: 3.916 ms, Average time per hit: 0.14503703703703705 ms 


                ans.append(a[i] + b[j] + c[l]) # Hits:26.0, Total execution time: 7.128 ms, Average time per hit: 0.27415384615384614 ms 


            else:

                break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ans = list(reversed(sorted(ans))) # Hits:1.0, Total execution time: 1.792 ms, Average time per hit: 1.792 ms 


for i in range(k): # Hits:6.0, Total execution time: 0.875 ms, Average time per hit: 0.14583333333333334 ms 


    print((ans[i])) # Hits:5.0, Total execution time: 9.918 ms, Average time per hit: 1.9835999999999998 ms 
",p03078,True
"X, Y, Z, K=list(map(int, input().split())) # Hits:1.0, Total execution time: 36.542 ms, Average time per hit: 36.542 ms 


A=list(map(int, input().split())) # Hits:1.0, Total execution time: 2.375 ms, Average time per hit: 2.375 ms 


B=list(map(int, input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


C=list(map(int, input().split())) # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


A.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




import heapq # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


nums=[[-(A[0]+B[0]+C[0]), 0, 0, 0]] # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


heapq.heapify(nums) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




sumi=[[[0]*Z for __ in range(Y)] for _ in range(X)] # Hits:1.0, Total execution time: 3.292 ms, Average time per hit: 3.292 ms 


for _ in range(K): # Hits:6.0, Total execution time: 0.833 ms, Average time per hit: 0.13883333333333334 ms 


  out, a, b, c=heapq.heappop(nums) # Hits:5.0, Total execution time: 1.666 ms, Average time per hit: 0.3332 ms 


  print((-out)) # Hits:5.0, Total execution time: 20.582 ms, Average time per hit: 4.1164 ms 


  if a<X-1 and sumi[a+1][b][c]==0: # Hits:5.0, Total execution time: 1.709 ms, Average time per hit: 0.3418 ms 


    heapq.heappush(nums, [-(A[a+1]+B[b]+C[c]), a+1, b, c]) # Hits:4.0, Total execution time: 2.124 ms, Average time per hit: 0.531 ms 


    sumi[a+1][b][c]=1 # Hits:4.0, Total execution time: 0.917 ms, Average time per hit: 0.22925 ms 


  if b<Y-1 and sumi[a][b+1][c]==0: # Hits:5.0, Total execution time: 1.374 ms, Average time per hit: 0.2748 ms 


    heapq.heappush(nums, [-(A[a]+B[b+1]+C[c]), a, b+1, c]) # Hits:5.0, Total execution time: 2.085 ms, Average time per hit: 0.417 ms 


    sumi[a][b+1][c]=1 # Hits:5.0, Total execution time: 1.125 ms, Average time per hit: 0.225 ms 


  if c<Z-1 and sumi[a][b][c+1]==0: # Hits:5.0, Total execution time: 1.415 ms, Average time per hit: 0.283 ms 


    heapq.heappush(nums, [-(A[a]+B[b]+C[c+1]), a, b, c+1]) # Hits:3.0, Total execution time: 1.541 ms, Average time per hit: 0.5136666666666666 ms 


    sumi[a][b][c+1]=1 # Hits:3.0, Total execution time: 0.666 ms, Average time per hit: 0.222 ms 

","X, Y, Z, K=list(map(int, input().split())) # Hits:1.0, Total execution time: 37.75 ms, Average time per hit: 37.75 ms 


A=list(map(int, input().split())) # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


B=list(map(int, input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


C=list(map(int, input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


A.sort(reverse=True) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




import heapq # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


nums=[[-(A[0]+B[0]+C[0]), 0, 0, 0]] # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


heapq.heapify(nums) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




sumi=[[0, 0, 0]] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for _ in range(K): # Hits:6.0, Total execution time: 1.084 ms, Average time per hit: 0.18066666666666667 ms 


  out, a, b, c=heapq.heappop(nums) # Hits:5.0, Total execution time: 1.708 ms, Average time per hit: 0.3416 ms 


  print((-out)) # Hits:5.0, Total execution time: 15.585 ms, Average time per hit: 3.117 ms 


  if a<X-1 and not([a+1, b, c] in sumi): # Hits:5.0, Total execution time: 1.873 ms, Average time per hit: 0.37460000000000004 ms 


    heapq.heappush(nums, [-(A[a+1]+B[b]+C[c]), a+1, b, c]) # Hits:4.0, Total execution time: 1.877 ms, Average time per hit: 0.46925 ms 


    sumi.append([a+1, b, c]) # Hits:4.0, Total execution time: 0.959 ms, Average time per hit: 0.23975 ms 


  if b<Y-1 and not([a, b+1, c] in sumi): # Hits:5.0, Total execution time: 1.834 ms, Average time per hit: 0.3668 ms 


    heapq.heappush(nums, [-(A[a]+B[b+1]+C[c]), a, b+1, c]) # Hits:5.0, Total execution time: 2.042 ms, Average time per hit: 0.4084 ms 


    sumi.append([a, b+1, c]) # Hits:5.0, Total execution time: 1.293 ms, Average time per hit: 0.2586 ms 


  if c<Z-1 and not([a, b, c+1] in sumi): # Hits:5.0, Total execution time: 1.625 ms, Average time per hit: 0.325 ms 


    heapq.heappush(nums, [-(A[a]+B[b]+C[c+1]), a, b, c+1]) # Hits:3.0, Total execution time: 1.333 ms, Average time per hit: 0.4443333333333333 ms 


    sumi.append([a, b, c+1]) # Hits:3.0, Total execution time: 0.667 ms, Average time per hit: 0.22233333333333336 ms 

",p03078,True
"# coding: utf-8

#解法1 ABのK番まで　＋　CのK番まで

X,Y,Z,K=list(map(int,input().split())) # Hits:1.0, Total execution time: 37.0 ms, Average time per hit: 37.0 ms 


A=list(map(int,input().split())) # Hits:1.0, Total execution time: 1.792 ms, Average time per hit: 1.792 ms 


B=list(map(int,input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


C=list(map(int,input().split())) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 




AB=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(min(K,X)): # Hits:4.0, Total execution time: 0.874 ms, Average time per hit: 0.2185 ms 


    for j in range(min(K,Y)): # Hits:12.0, Total execution time: 1.335 ms, Average time per hit: 0.11125 ms 


        AB.append(A[i]+B[j]) # Hits:9.0, Total execution time: 2.207 ms, Average time per hit: 0.24522222222222223 ms 




AB.sort(reverse=True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




ABC=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(min(K,X*Y)): # Hits:6.0, Total execution time: 0.791 ms, Average time per hit: 0.13183333333333333 ms 


    for j in range(min(K,Z)): # Hits:20.0, Total execution time: 2.334 ms, Average time per hit: 0.1167 ms 


        ABC.append(AB[i]+C[j]) # Hits:15.0, Total execution time: 2.416 ms, Average time per hit: 0.16106666666666666 ms 




ABC.sort(reverse=True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




for i in range(K): # Hits:6.0, Total execution time: 0.665 ms, Average time per hit: 0.11083333333333333 ms 


    print((ABC[i])) # Hits:5.0, Total execution time: 8.251 ms, Average time per hit: 1.6502000000000001 ms 

","# coding: utf-8

#解法1 ABのK番まで　＋　CのK番まで

X,Y,Z,K=list(map(int,input().split())) # Hits:1.0, Total execution time: 32.333 ms, Average time per hit: 32.333 ms 


A=list(map(int,input().split())) # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


B=list(map(int,input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


C=list(map(int,input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 




A.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




ABC=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(X): # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    for j in range(Y): # Hits:9.0, Total execution time: 0.916 ms, Average time per hit: 0.10177777777777777 ms 


        for k in range(Z): # Hits:18.0, Total execution time: 2.042 ms, Average time per hit: 0.11344444444444444 ms 


            if (i+1)*(j+1)*(k+1)>K: # Hits:17.0, Total execution time: 2.832 ms, Average time per hit: 0.16658823529411765 ms 


                break # Hits:7.0, Total execution time: 0.541 ms, Average time per hit: 0.07728571428571429 ms 


            else:

                ABC.append(A[i]+B[j]+C[k]) # Hits:10.0, Total execution time: 2.375 ms, Average time per hit: 0.2375 ms 


        if (i+1)*(j+1)>K: # Hits:8.0, Total execution time: 1.626 ms, Average time per hit: 0.20325 ms 


            break # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


    if i+1>K: # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


        break



ABC.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 




for i in range(K): # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


    print((ABC[i])) # Hits:5.0, Total execution time: 8.376 ms, Average time per hit: 1.6752 ms 

",p03078,True
"# coding: utf-8

#解法1 ABのK番まで　＋　CのK番まで

X,Y,Z,K=list(map(int,input().split())) # Hits:1.0, Total execution time: 37.375 ms, Average time per hit: 37.375 ms 


A=list(map(int,input().split())) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


B=list(map(int,input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


C=list(map(int,input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




A.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




ABC=[] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




for i in range(X): # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


    for j in range(Y): # Hits:9.0, Total execution time: 0.917 ms, Average time per hit: 0.10188888888888889 ms 


        for k in range(Z): # Hits:18.0, Total execution time: 2.042 ms, Average time per hit: 0.11344444444444444 ms 


            if (i+1)*(j+1)*(k+1)>K: # Hits:17.0, Total execution time: 3.083 ms, Average time per hit: 0.18135294117647058 ms 


                break # Hits:7.0, Total execution time: 0.542 ms, Average time per hit: 0.07742857142857143 ms 


            else:

                ABC.append(A[i]+B[j]+C[k]) # Hits:10.0, Total execution time: 2.333 ms, Average time per hit: 0.2333 ms 


        if (i+1)*(j+1)>K: # Hits:8.0, Total execution time: 1.624 ms, Average time per hit: 0.203 ms 


            break # Hits:2.0, Total execution time: 0.083 ms, Average time per hit: 0.0415 ms 


    if i+1>K: # Hits:3.0, Total execution time: 0.25 ms, Average time per hit: 0.08333333333333333 ms 


        break



ABC.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




for i in range(K): # Hits:6.0, Total execution time: 0.667 ms, Average time per hit: 0.11116666666666668 ms 


    print((ABC[i])) # Hits:5.0, Total execution time: 8.333 ms, Average time per hit: 1.6665999999999999 ms 

","# coding: utf-8

#解法2 abc<=Kのみのリスト

X,Y,Z,K=list(map(int,input().split())) # Hits:1.0, Total execution time: 38.25 ms, Average time per hit: 38.25 ms 


A=list(map(int,input().split())) # Hits:1.0, Total execution time: 3.083 ms, Average time per hit: 3.083 ms 


B=list(map(int,input().split())) # Hits:1.0, Total execution time: 1.209 ms, Average time per hit: 1.209 ms 


C=list(map(int,input().split())) # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 




A.sort(reverse=True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




ABC=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(X): # Hits:4.0, Total execution time: 0.791 ms, Average time per hit: 0.19775 ms 


    for j in range(Y): # Hits:9.0, Total execution time: 1.042 ms, Average time per hit: 0.11577777777777777 ms 


        for k in range(Z): # Hits:18.0, Total execution time: 2.291 ms, Average time per hit: 0.12727777777777777 ms 


            if (i+1)*(j+1)*(k+1)>K: # Hits:17.0, Total execution time: 3.292 ms, Average time per hit: 0.19364705882352942 ms 


                break # Hits:7.0, Total execution time: 0.501 ms, Average time per hit: 0.07157142857142856 ms 


            else:

                ABC.append(A[i]+B[j]+C[k]) # Hits:10.0, Total execution time: 2.626 ms, Average time per hit: 0.2626 ms 


        if (i+1)*(j+1)>K: # Hits:8.0, Total execution time: 1.959 ms, Average time per hit: 0.244875 ms 


            break # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


    if i+1>K: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


        break



ABC.sort(reverse=True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




for i in range(K): # Hits:6.0, Total execution time: 0.751 ms, Average time per hit: 0.12516666666666668 ms 


    print((ABC[i])) # Hits:5.0, Total execution time: 8.625 ms, Average time per hit: 1.725 ms 

",p03078,True
"import sys

input = sys.stdin.readline



def main():

    X, Y, Z, K = [int(x) for x in input().split()]

    A = [int(x) for x in input().split()]

    B = [int(x) for x in input().split()]

    C = [int(x) for x in input().split()]



    ans = []

    for a in A:

        for b in B:

            for c in C:

                ans.append(a + b + c)



    ans_s = sorted(ans, reverse=True)



    for i in range(K):

        print((ans_s[i]))





if __name__ == '__main__':

    main()


",,p03078,False
"x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.958 ms, Average time per hit: 33.958 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


A.sort() # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


B.sort() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


C.sort() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




A = A[::-1] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


B = B[::-1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


C = C[::-1] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




anslist = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for i in range(len(A)): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


    if i > k: # Hits:3.0, Total execution time: 0.249 ms, Average time per hit: 0.083 ms 


        break

    for j in range(len(B)): # Hits:12.0, Total execution time: 1.459 ms, Average time per hit: 0.12158333333333333 ms 


        if i * j > k: # Hits:9.0, Total execution time: 0.916 ms, Average time per hit: 0.10177777777777777 ms 


            break # Hits:7.0, Total execution time: 0.708 ms, Average time per hit: 0.10114285714285715 ms 


        for l in range(len(C)): # Hits:19.0, Total execution time: 2.415 ms, Average time per hit: 0.12710526315789475 ms 


            if (i + 1) * (j + 1) * (l + 1) > k: # Hits:18.0, Total execution time: 3.043 ms, Average time per hit: 0.16905555555555554 ms 


                break # Hits:8.0, Total execution time: 1.042 ms, Average time per hit: 0.13025 ms 


            anslist.append(A[i] + B[j] + C[l]) # Hits:10.0, Total execution time: 2.252 ms, Average time per hit: 0.22519999999999998 ms 




anslist.sort() # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




anslist = anslist[::-1] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




for i in range(k): # Hits:6.0, Total execution time: 0.665 ms, Average time per hit: 0.11083333333333333 ms 


    print((anslist[i])) # Hits:5.0, Total execution time: 8.251 ms, Average time per hit: 1.6502000000000001 ms 

","x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.792 ms, Average time per hit: 37.792 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.958 ms, Average time per hit: 1.958 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


A.sort() # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


B.sort() # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


C.sort() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




A = A[::-1] # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 


B = B[::-1] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


C = C[::-1] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




anslist = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(len(A)): # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


    if (i + 1) > k: # Hits:3.0, Total execution time: 0.334 ms, Average time per hit: 0.11133333333333333 ms 


        break

    for j in range(len(B)): # Hits:9.0, Total execution time: 1.165 ms, Average time per hit: 0.12944444444444445 ms 


        if (i + 1)  * (j + 1) > k: # Hits:8.0, Total execution time: 1.167 ms, Average time per hit: 0.145875 ms 


            break # Hits:2.0, Total execution time: 0.167 ms, Average time per hit: 0.0835 ms 


        for l in range(len(C)): # Hits:16.0, Total execution time: 2.001 ms, Average time per hit: 0.1250625 ms 


            if (i + 1) * (j + 1) * (l + 1) > k: # Hits:15.0, Total execution time: 2.585 ms, Average time per hit: 0.17233333333333334 ms 


                break # Hits:5.0, Total execution time: 1.209 ms, Average time per hit: 0.24180000000000001 ms 


            anslist.append(A[i] + B[j] + C[l]) # Hits:10.0, Total execution time: 2.334 ms, Average time per hit: 0.2334 ms 




anslist.sort() # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




anslist = anslist[::-1] # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 




for i in range(k): # Hits:6.0, Total execution time: 0.627 ms, Average time per hit: 0.1045 ms 


    print((anslist[i])) # Hits:5.0, Total execution time: 8.666 ms, Average time per hit: 1.7332 ms 

",p03078,True
"# coding: utf-8



import sys # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.917 ms, Average time per hit: 35.917 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 




bimi = [] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


for a in range(X): # Hits:4.0, Total execution time: 0.542 ms, Average time per hit: 0.1355 ms 


        for b in range(Y): # Hits:12.0, Total execution time: 1.333 ms, Average time per hit: 0.11108333333333333 ms 


                bimi.append(A[a] + B[b]) # Hits:9.0, Total execution time: 2.249 ms, Average time per hit: 0.24988888888888888 ms 




bimi.sort(reverse=True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


ans = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for x in range(min(K, len(bimi))): # Hits:6.0, Total execution time: 0.958 ms, Average time per hit: 0.15966666666666665 ms 


        for c in range(Z): # Hits:20.0, Total execution time: 1.958 ms, Average time per hit: 0.0979 ms 


                ans.append(bimi[x] + C[c]) # Hits:15.0, Total execution time: 2.375 ms, Average time per hit: 0.15833333333333335 ms 




ans.sort(reverse=True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 




for i in range(K): # Hits:6.0, Total execution time: 0.708 ms, Average time per hit: 0.118 ms 


        print((ans[i])) # Hits:5.0, Total execution time: 9.042 ms, Average time per hit: 1.8084 ms 



","# coding: utf-8



import sys # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


input = sys.stdin.readline # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.625 ms, Average time per hit: 36.625 ms 


A = sorted(list(map(int, input().split())), reverse=True) # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 


B = sorted(list(map(int, input().split())), reverse=True) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


C = sorted(list(map(int, input().split())), reverse=True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




bimi = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for a in range(X): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


        for b in range(Y): # Hits:9.0, Total execution time: 0.998 ms, Average time per hit: 0.11088888888888888 ms 


                if (a + 1) * (b + 1) > K: # Hits:8.0, Total execution time: 1.249 ms, Average time per hit: 0.156125 ms 


                                break # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 




                for c in range(Z): # Hits:16.0, Total execution time: 1.918 ms, Average time per hit: 0.119875 ms 


                        if (a + 1) * (b + 1) * (c + 1) > K: # Hits:15.0, Total execution time: 2.626 ms, Average time per hit: 0.17506666666666668 ms 


                                break # Hits:5.0, Total execution time: 1.041 ms, Average time per hit: 0.2082 ms 




                        bimi.append(A[a] + B[b] + C[c]) # Hits:10.0, Total execution time: 2.417 ms, Average time per hit: 0.2417 ms 




bimi.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 




for i in range(K): # Hits:6.0, Total execution time: 0.666 ms, Average time per hit: 0.111 ms 


        print((bimi[i])) # Hits:5.0, Total execution time: 11.71 ms, Average time per hit: 2.342 ms 



",p03078,True
"x,y,z,n = list(map(int, input().split())) # Hits:1.0, Total execution time: 32.833 ms, Average time per hit: 32.833 ms 


a = sorted(list(map(int, input().split())),reverse = True) # Hits:1.0, Total execution time: 2.416 ms, Average time per hit: 2.416 ms 


b = sorted(list(map(int, input().split())),reverse = True) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


c = sorted(list(map(int, input().split())),reverse = True) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


d = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i,i1 in enumerate(a): # Hits:4.0, Total execution time: 0.707 ms, Average time per hit: 0.17675 ms 


  for j,j1 in enumerate(b): # Hits:12.0, Total execution time: 1.502 ms, Average time per hit: 0.12516666666666668 ms 


    for k,k1 in enumerate(c): # Hits:36.0, Total execution time: 4.375 ms, Average time per hit: 0.12152777777777778 ms 


      if (i+1) * (j+1) * (k+1) <= n: # Hits:27.0, Total execution time: 5.207 ms, Average time per hit: 0.19285185185185186 ms 


        d.append(i1 + j1 + k1) # Hits:10.0, Total execution time: 1.79 ms, Average time per hit: 0.179 ms 


d.sort(reverse = True) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


for i in d[:n]: # Hits:6.0, Total execution time: 0.916 ms, Average time per hit: 0.15266666666666664 ms 


  print(i) # Hits:5.0, Total execution time: 8.835 ms, Average time per hit: 1.767 ms 
","x,y,z,n = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.708 ms, Average time per hit: 34.708 ms 


a = sorted(list(map(int, input().split())),reverse = True) # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 


b = sorted(list(map(int, input().split())),reverse = True) # Hits:1.0, Total execution time: 0.917 ms, Average time per hit: 0.917 ms 


c = sorted(list(map(int, input().split())),reverse = True) # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


d = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i,i1 in enumerate(a): # Hits:4.0, Total execution time: 0.582 ms, Average time per hit: 0.1455 ms 


  for j,j1 in enumerate(b): # Hits:9.0, Total execution time: 1.126 ms, Average time per hit: 0.12511111111111112 ms 


    if (i+1)*(j+1) <= n: # Hits:8.0, Total execution time: 1.334 ms, Average time per hit: 0.16675 ms 


      for k,k1 in enumerate(c): # Hits:16.0, Total execution time: 2.081 ms, Average time per hit: 0.1300625 ms 


        if (i+1) * (j+1) * (k+1) <= n: # Hits:15.0, Total execution time: 2.501 ms, Average time per hit: 0.16673333333333332 ms 


          d.append(i1 + j1 + k1) # Hits:10.0, Total execution time: 1.584 ms, Average time per hit: 0.1584 ms 


        else:

          break # Hits:5.0, Total execution time: 1.082 ms, Average time per hit: 0.2164 ms 


    else:

      break # Hits:2.0, Total execution time: 0.166 ms, Average time per hit: 0.083 ms 


d.sort(reverse = True) # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


for i in d[:n]: # Hits:6.0, Total execution time: 0.749 ms, Average time per hit: 0.12483333333333332 ms 


  print(i) # Hits:5.0, Total execution time: 8.459 ms, Average time per hit: 1.6918 ms 

",p03078,True
"def resolve():

    X, Y, Z, K = list(map(int, input().split()))

    A = sorted(list(map(int, input().split())))

    B = sorted(list(map(int, input().split())))

    C = sorted(list(map(int, input().split())))



    AB = []

    for a in A:

        for b in B:

            AB.append(a+b)

    AB = sorted(AB, reverse=True)[:K]

    ABC = []

    for ab in AB:

        for c in C:

            ABC.append(ab+c)

    ABC = sorted(ABC, reverse=True)

    [print(ABC[i]) for i in range(K)]





if '__main__' == __name__:

    resolve()
",,p03078,False
"import itertools # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


import heapq # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


import copy # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




def inv(l): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    return list([x*-1 for x in l])



def solve(A,B,C, K): # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


    A,B,C = inv(A), inv(B), inv(C)

    A = sorted(A)

    B = sorted(B)

    C = sorted(C)

    ind = set([(0,0,0)])



    h = [(A[0]+ B[0]+ C[0], (0,0,0))]

    res = []



    for _ in range(K):

        h2 = copy.copy(h)

        for (val, (i,j,k)) in h2:

            if i+1 < len(A) and (i+1,j,k) not in ind:

                heapq.heappush(h, (A[i+1]+B[j]+C[k], (i+1, j, k)))

                ind |= set([(i+1,j,k)])

            if j+1 < len(B) and (i,j+1, k) not in ind:

                heapq.heappush(h, (A[i]+B[j+1]+C[k], (i, j+1, k)))

                ind |= set([(i,j+1,k)])

            if k+1 < len(C) and (i,j, k+1) not in ind:

                heapq.heappush(h, (A[i]+B[j]+C[k+1], (i, j, k+1)))

                ind |= set([(i,j,k+1)])

        res += [heapq.heappop(h)]

    for r in res:

        print((r[0]*-1))



la,lb,lc,K = list(map(int, input().split(' '))) # Hits:1.0, Total execution time: 39.083 ms, Average time per hit: 39.083 ms 


A = list(map(int, input().split(' '))) # Hits:1.0, Total execution time: 2.125 ms, Average time per hit: 2.125 ms 


B = list(map(int, input().split(' '))) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


C = list(map(int, input().split(' '))) # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 




solve(A,B,C,K) # Hits:1.0, Total execution time: 71.417 ms, Average time per hit: 71.417 ms 
","import itertools # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


import heapq # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


import copy # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




def inv(l): # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


    return list([x*-1 for x in l])



def solve(A,B,C, K): # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


    A,B,C = inv(A), inv(B), inv(C)

    A = sorted(A)

    B = sorted(B)

    C = sorted(C)

    ind = set([(0,0,0)])



    h = [(A[0]+ B[0]+ C[0], (0,0,0))]

    res = []



    for _ in range(K):

        h2 = copy.copy(h)

        val, (i,j,k) = heapq.heappop(h)

        res += [-val]

        if i+1 < len(A) and (i+1,j,k) not in ind:

            heapq.heappush(h, (A[i+1]+B[j]+C[k], (i+1, j, k)))

            ind |= set([(i+1,j,k)])

        if j+1 < len(B) and (i,j+1, k) not in ind:

            heapq.heappush(h, (A[i]+B[j+1]+C[k], (i, j+1, k)))

            ind |= set([(i,j+1,k)])

        if k+1 < len(C) and (i,j, k+1) not in ind:

            heapq.heappush(h, (A[i]+B[j]+C[k+1], (i, j, k+1)))

            ind |= set([(i,j,k+1)])

    for r in res:

        print(r)



la,lb,lc,K = list(map(int, input().split(' '))) # Hits:1.0, Total execution time: 36.875 ms, Average time per hit: 36.875 ms 


A = list(map(int, input().split(' '))) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


B = list(map(int, input().split(' '))) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


C = list(map(int, input().split(' '))) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




solve(A,B,C,K) # Hits:1.0, Total execution time: 29.416 ms, Average time per hit: 29.416 ms 
",p03078,True
"# TODO D - Cake 123

# https://atcoder.jp/contests/abc123/tasks/abc123_d



X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 39.042 ms, Average time per hit: 39.042 ms 




A = [int(x) for x in input().split()] # Hits:1.0, Total execution time: 2.709 ms, Average time per hit: 2.709 ms 


B = [int(y) for y in input().split()] # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


C = [int(z) for z in input().split()] # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 




AB = sorted([a+b for a in A for b in B], reverse=True) # Hits:1.0, Total execution time: 2.833 ms, Average time per hit: 2.833 ms 


ABC = sorted([ab + c for ab in AB[:K] for c in C], reverse=True) # Hits:1.0, Total execution time: 2.5 ms, Average time per hit: 2.5 ms 




for i in ABC[:K]: # Hits:6.0, Total execution time: 0.793 ms, Average time per hit: 0.13216666666666665 ms 


    print('{}'.format(i)) # Hits:5.0, Total execution time: 9.585 ms, Average time per hit: 1.917 ms 

","#abc123d

 

x,y,z,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 37.792 ms, Average time per hit: 37.792 ms 


a=sorted(map(int,input().split()),reverse=True) # Hits:1.0, Total execution time: 2.042 ms, Average time per hit: 2.042 ms 


b=sorted(map(int,input().split()),reverse=True) # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


c=sorted(map(int,input().split()),reverse=True) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


 

ab=sorted([i+j for i in a for j in b],reverse=True) # Hits:1.0, Total execution time: 1.959 ms, Average time per hit: 1.959 ms 


res=sorted([ij+l for ij in ab[:k] for l in c],reverse=True) # Hits:1.0, Total execution time: 2.416 ms, Average time per hit: 2.416 ms 


for i in res[:k]: # Hits:6.0, Total execution time: 0.791 ms, Average time per hit: 0.13183333333333333 ms 


	print(i) # Hits:5.0, Total execution time: 8.416 ms, Average time per hit: 1.6832 ms 
",p03078,True
"X, Y, Z, K = [int(_) for _ in input().split()]

A = [int(_) for _ in input().split()]

B = [int(_) for _ in input().split()]

C = [int(_) for _ in input().split()]



A = sorted(A)

B = sorted(B)

C = sorted(C)



maxn = A[0] * B[0] * C[0]



from heapq import *



h = []





heappush(h, (-A[-1] - B[-1] - C[-1], len(A) - 1, len(B) - 1, len(C) - 1))



used = {}



for i in range(min(K, X * Y * Z)):

    v, ix, iy, iz = heappop(h)

    print((-v))

    def push(x, y, z):

        if x >= 0 and y >= 0 and z >= 0 and (x, y, z) not in used:

            heappush(h, (-A[x] - B[y] - C[z], x, y, z))

            used[x, y, z] = 1

    push(ix - 1, iy, iz)

    push(ix, iy - 1, iz)

    push(ix, iy, iz - 1)


","X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.834 ms, Average time per hit: 36.834 ms 


A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.875 ms, Average time per hit: 1.875 ms 


B = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


C = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.709 ms, Average time per hit: 0.709 ms 




A.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 






# Priority QueueとしてHeapを使う

# Pythonのheapqは小さい順に取り出すので、-1を掛けて負数としてpushしていく

#   (-Ai-Bj-Ck, i, j, k)

# 取り出したi, j, kについて、(i+1, j, k), (i, j+1, k), (i, j, k+1)に対応するタプルをpushする

# ただし、すでにpushした値は入れないようにする



import heapq # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 




def make(i, j, k): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    return (-A[i]-B[j]-C[k], i, j, k)





used = set() # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


l = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




heapq.heappush(l, make(0, 0, 0)) # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 


used.add((0, 0, 0)) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 




for cnt in range(K): # Hits:6.0, Total execution time: 0.875 ms, Average time per hit: 0.14583333333333334 ms 


    V, i, j, k = heapq.heappop(l) # Hits:5.0, Total execution time: 1.541 ms, Average time per hit: 0.3082 ms 


    

    if i < X - 1 and (i+1, j, k) not in used: # Hits:5.0, Total execution time: 1.21 ms, Average time per hit: 0.242 ms 


        heapq.heappush(l, make(i+1, j, k)) # Hits:4.0, Total execution time: 2.208 ms, Average time per hit: 0.552 ms 


        used.add((i+1, j, k)) # Hits:4.0, Total execution time: 0.999 ms, Average time per hit: 0.24975 ms 


    

    if j < Y - 1 and (i, j+1, k) not in used: # Hits:5.0, Total execution time: 1.208 ms, Average time per hit: 0.24159999999999998 ms 


        heapq.heappush(l, make(i, j+1, k)) # Hits:5.0, Total execution time: 2.625 ms, Average time per hit: 0.525 ms 


        used.add((i, j+1, k)) # Hits:5.0, Total execution time: 1.042 ms, Average time per hit: 0.2084 ms 


    

    if k < Z - 1 and (i, j, k+1) not in used: # Hits:5.0, Total execution time: 1.04 ms, Average time per hit: 0.208 ms 


        heapq.heappush(l, make(i, j, k+1)) # Hits:3.0, Total execution time: 1.708 ms, Average time per hit: 0.5693333333333334 ms 


        used.add((i, j, k+1)) # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 


    

    print((-V)) # Hits:5.0, Total execution time: 19.043 ms, Average time per hit: 3.8085999999999998 ms 





",p03078,True
"import sys # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 




sys.setrecursionlimit(10**7) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


def I(): return int(sys.stdin.readline().rstrip()) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def MI(): return map(int,sys.stdin.readline().rstrip().split()) # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


def LI(): return list(map(int,sys.stdin.readline().rstrip().split()))  #空白あり # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LI2(): return list(map(int,sys.stdin.readline().rstrip()))  #空白なし # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def S(): return sys.stdin.readline().rstrip() # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LS(): return list(sys.stdin.readline().rstrip().split())  #空白あり # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LS2(): return list(sys.stdin.readline().rstrip())  #空白なし # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 






X,Y,Z,K = MI() # Hits:1.0, Total execution time: 34.834 ms, Average time per hit: 34.834 ms 


A,B,C = LI(),LI(),LI() # Hits:1.0, Total execution time: 2.917 ms, Average time per hit: 2.917 ms 


A.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




ANS = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(X): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    if i >= K: # Hits:3.0, Total execution time: 0.376 ms, Average time per hit: 0.12533333333333332 ms 


        break

    a = A[i] # Hits:3.0, Total execution time: 0.291 ms, Average time per hit: 0.097 ms 


    for j in range(Y): # Hits:12.0, Total execution time: 1.21 ms, Average time per hit: 0.10083333333333333 ms 


        if i*j >= K: # Hits:9.0, Total execution time: 1.042 ms, Average time per hit: 0.11577777777777777 ms 


            break # Hits:7.0, Total execution time: 0.501 ms, Average time per hit: 0.07157142857142856 ms 


        b = B[j] # Hits:9.0, Total execution time: 0.792 ms, Average time per hit: 0.088 ms 


        for k in range(Z): # Hits:35.0, Total execution time: 3.418 ms, Average time per hit: 0.09765714285714286 ms 


            if i*j*k >= K: # Hits:27.0, Total execution time: 3.166 ms, Average time per hit: 0.11725925925925926 ms 


                break # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


            c = C[k] # Hits:26.0, Total execution time: 2.333 ms, Average time per hit: 0.08973076923076923 ms 


            ANS.append(a+b+c) # Hits:26.0, Total execution time: 4.416 ms, Average time per hit: 0.16984615384615384 ms 




ANS.sort(reverse=True) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


print(*ANS[:K],sep='\n') # Hits:1.0, Total execution time: 8.667 ms, Average time per hit: 8.667 ms 

","import sys # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


def MI(): return map(int,sys.stdin.readline().rstrip().split()) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


def LI(): return list(map(int,sys.stdin.readline().rstrip().split()))  #空白あり # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 






X,Y,Z,K = MI() # Hits:1.0, Total execution time: 30.334 ms, Average time per hit: 30.334 ms 


A,B,C = LI(),LI(),LI() # Hits:1.0, Total execution time: 2.583 ms, Average time per hit: 2.583 ms 


A.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




ANS = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(X): # Hits:4.0, Total execution time: 0.667 ms, Average time per hit: 0.16675 ms 


    if i >= K: # Hits:3.0, Total execution time: 0.333 ms, Average time per hit: 0.111 ms 


        break

    a = A[i] # Hits:3.0, Total execution time: 0.292 ms, Average time per hit: 0.09733333333333333 ms 


    for j in range(Y): # Hits:12.0, Total execution time: 1.457 ms, Average time per hit: 0.12141666666666667 ms 


        if i*j >= K: # Hits:9.0, Total execution time: 1.167 ms, Average time per hit: 0.12966666666666665 ms 


            break # Hits:7.0, Total execution time: 0.541 ms, Average time per hit: 0.07728571428571429 ms 


        b = B[j] # Hits:9.0, Total execution time: 0.999 ms, Average time per hit: 0.111 ms 


        for k in range(Z): # Hits:35.0, Total execution time: 4.416 ms, Average time per hit: 0.12617142857142857 ms 


            if i*j*k >= K: # Hits:27.0, Total execution time: 3.915 ms, Average time per hit: 0.145 ms 


                break # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


            c = C[k] # Hits:26.0, Total execution time: 2.834 ms, Average time per hit: 0.109 ms 


            ANS.append(a+b+c) # Hits:26.0, Total execution time: 5.499 ms, Average time per hit: 0.2115 ms 




ANS.sort(reverse=True) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


print(*ANS[:K],sep='\n') # Hits:1.0, Total execution time: 8.209 ms, Average time per hit: 8.209 ms 

",p03078,True
"X,Y,Z,K = list(map(int,input().split())) # Hits:1.0, Total execution time: 34.791 ms, Average time per hit: 34.791 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.792 ms, Average time per hit: 1.792 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


C = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 






x = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for a in A: # Hits:4.0, Total execution time: 0.374 ms, Average time per hit: 0.0935 ms 


    for b in B: # Hits:12.0, Total execution time: 0.96 ms, Average time per hit: 0.08 ms 


        for c in C: # Hits:36.0, Total execution time: 2.998 ms, Average time per hit: 0.08327777777777777 ms 


            x.append(a + b + c) # Hits:27.0, Total execution time: 4.542 ms, Average time per hit: 0.16822222222222222 ms 


x.sort(reverse=True) # Hits:1.0, Total execution time: 0.959 ms, Average time per hit: 0.959 ms 




for i in range(K): # Hits:6.0, Total execution time: 0.874 ms, Average time per hit: 0.14566666666666667 ms 


    print((x[i])) # Hits:5.0, Total execution time: 9.25 ms, Average time per hit: 1.85 ms 


    ","x,y,z,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.583 ms, Average time per hit: 37.583 ms 


a = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


b = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


c = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 




ab = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(x): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


    for j in range(y): # Hits:12.0, Total execution time: 1.208 ms, Average time per hit: 0.10066666666666667 ms 


        ab.append(a[i] + b[j]) # Hits:9.0, Total execution time: 2.167 ms, Average time per hit: 0.24077777777777779 ms 


ab.sort(reverse = True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




abc = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(min(3000, len(ab))): # Hits:10.0, Total execution time: 1.082 ms, Average time per hit: 0.1082 ms 


    for j in range(z): # Hits:36.0, Total execution time: 3.375 ms, Average time per hit: 0.09375 ms 


        abc.append(ab[i] + c[j]) # Hits:27.0, Total execution time: 4.541 ms, Average time per hit: 0.1681851851851852 ms 


abc.sort(reverse = True) # Hits:1.0, Total execution time: 0.625 ms, Average time per hit: 0.625 ms 




for i in range(k): # Hits:6.0, Total execution time: 0.666 ms, Average time per hit: 0.111 ms 


    print((abc[i])) # Hits:5.0, Total execution time: 11.793 ms, Average time per hit: 2.3586 ms 

",p03078,True
"x,y,z,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 37.75 ms, Average time per hit: 37.75 ms 


a = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


b = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


c = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 




ab = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(x): # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


    for j in range(y): # Hits:12.0, Total execution time: 1.415 ms, Average time per hit: 0.11791666666666667 ms 


        ab.append(a[i] + b[j]) # Hits:9.0, Total execution time: 2.417 ms, Average time per hit: 0.26855555555555555 ms 


ab.sort(reverse = True) # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 




abc = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in range(min(k,len(ab))): # Hits:6.0, Total execution time: 1.042 ms, Average time per hit: 0.17366666666666666 ms 


    for j in range(z): # Hits:20.0, Total execution time: 2.083 ms, Average time per hit: 0.10415 ms 


        abc.append(ab[i] + c[j]) # Hits:15.0, Total execution time: 2.668 ms, Average time per hit: 0.17786666666666667 ms 




abc.sort(reverse = True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




for i in range(k): # Hits:6.0, Total execution time: 0.667 ms, Average time per hit: 0.11116666666666668 ms 


    print((abc[i])) # Hits:5.0, Total execution time: 8.875 ms, Average time per hit: 1.775 ms 
","x,y,z,k = list(map(int,input().split())) # Hits:1.0, Total execution time: 32.584 ms, Average time per hit: 32.584 ms 


a = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


b = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


c = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


a.sort(reverse = True) # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 


b.sort(reverse = True) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


c.sort(reverse = True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 




abc = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




for i in range(x): # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


    for j in range(y): # Hits:9.0, Total execution time: 1.083 ms, Average time per hit: 0.12033333333333333 ms 


        if (i + 1) * (j + 1) > k: # Hits:8.0, Total execution time: 1.251 ms, Average time per hit: 0.156375 ms 


            break # Hits:2.0, Total execution time: 0.126 ms, Average time per hit: 0.063 ms 


        for l in range(z): # Hits:16.0, Total execution time: 1.877 ms, Average time per hit: 0.1173125 ms 


            if (i + 1) * (j + 1) * (l + 1 ) > k: # Hits:15.0, Total execution time: 2.544 ms, Average time per hit: 0.1696 ms 


                break # Hits:5.0, Total execution time: 0.833 ms, Average time per hit: 0.1666 ms 


            abc.append(a[i] + b[j] + c[l]) # Hits:10.0, Total execution time: 2.25 ms, Average time per hit: 0.225 ms 




abc.sort(reverse = True) # Hits:1.0, Total execution time: 0.334 ms, Average time per hit: 0.334 ms 




for i in range(k): # Hits:6.0, Total execution time: 0.625 ms, Average time per hit: 0.10416666666666667 ms 


    print((abc[i])) # Hits:5.0, Total execution time: 8.666 ms, Average time per hit: 1.7332 ms 

",p03078,True
"x,y,z,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 35.875 ms, Average time per hit: 35.875 ms 


a=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 3.0 ms, Average time per hit: 3.0 ms 


b=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.709 ms, Average time per hit: 1.709 ms 


c=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.459 ms, Average time per hit: 1.459 ms 


d=[] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


ans=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in a: # Hits:4.0, Total execution time: 0.376 ms, Average time per hit: 0.094 ms 


    for j in b: # Hits:12.0, Total execution time: 1.128 ms, Average time per hit: 0.094 ms 


        d.append(i+j) # Hits:9.0, Total execution time: 1.916 ms, Average time per hit: 0.21288888888888888 ms 


for i in c: # Hits:4.0, Total execution time: 0.376 ms, Average time per hit: 0.094 ms 


    for j in d: # Hits:30.0, Total execution time: 2.665 ms, Average time per hit: 0.08883333333333333 ms 


        ans.append(i+j) # Hits:27.0, Total execution time: 4.125 ms, Average time per hit: 0.15277777777777776 ms 


ans.sort(reverse=True) # Hits:1.0, Total execution time: 1.042 ms, Average time per hit: 1.042 ms 


for i in range(k): # Hits:6.0, Total execution time: 0.833 ms, Average time per hit: 0.13883333333333334 ms 


    print((ans[i])) # Hits:5.0, Total execution time: 6.293 ms, Average time per hit: 1.2586 ms 

","x,y,z,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 36.542 ms, Average time per hit: 36.542 ms 


a=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 2.459 ms, Average time per hit: 2.459 ms 


b=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.333 ms, Average time per hit: 1.333 ms 


c=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


a.sort(reverse=True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


b.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


c.sort(reverse=True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


if k>x: a=a[:k] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


if k>y: b=b[:k] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


if k>z: c=c[:k] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


d=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in a: # Hits:4.0, Total execution time: 0.333 ms, Average time per hit: 0.08325 ms 


    for j in b: # Hits:12.0, Total execution time: 1.081 ms, Average time per hit: 0.09008333333333333 ms 


        d.append(i+j) # Hits:9.0, Total execution time: 1.833 ms, Average time per hit: 0.20366666666666666 ms 


d.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


if len(d)>k: d=d[:k] # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 


for i in c: # Hits:4.0, Total execution time: 0.334 ms, Average time per hit: 0.0835 ms 


    for j in d: # Hits:18.0, Total execution time: 1.415 ms, Average time per hit: 0.07861111111111112 ms 


        ans.append(i+j) # Hits:15.0, Total execution time: 2.083 ms, Average time per hit: 0.13886666666666667 ms 


ans.sort(reverse=True) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


for i in range(k): # Hits:6.0, Total execution time: 0.751 ms, Average time per hit: 0.12516666666666668 ms 


    print((ans[i])) # Hits:5.0, Total execution time: 8.376 ms, Average time per hit: 1.6752 ms 
",p03078,True
"x,y,z,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 32.916 ms, Average time per hit: 32.916 ms 


a=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 3.042 ms, Average time per hit: 3.042 ms 


b=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 


c=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.25 ms, Average time per hit: 1.25 ms 


a.sort(reverse=True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


b.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


c.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


if k<x: a=a[:k] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


if k<y: b=b[:k] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


if k<z: c=c[:k] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


d=[] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


ans=[] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in a: # Hits:4.0, Total execution time: 0.375 ms, Average time per hit: 0.09375 ms 


    for j in b: # Hits:12.0, Total execution time: 1.084 ms, Average time per hit: 0.09033333333333333 ms 


        d.append(i+j) # Hits:9.0, Total execution time: 1.959 ms, Average time per hit: 0.21766666666666665 ms 


d.sort(reverse=True) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


if len(d)<k: d=d[:k] # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


for i in c: # Hits:4.0, Total execution time: 0.292 ms, Average time per hit: 0.073 ms 


    for j in d: # Hits:30.0, Total execution time: 2.375 ms, Average time per hit: 0.07916666666666668 ms 


        ans.append(i+j) # Hits:27.0, Total execution time: 3.457 ms, Average time per hit: 0.12803703703703703 ms 


ans.sort(reverse=True) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


for i in range(k): # Hits:6.0, Total execution time: 0.917 ms, Average time per hit: 0.15283333333333335 ms 


    print((ans[i])) # Hits:5.0, Total execution time: 8.75 ms, Average time per hit: 1.75 ms 
","x,y,z,k=list(map(int,input().split())) # Hits:1.0, Total execution time: 35.625 ms, Average time per hit: 35.625 ms 


a=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 2.458 ms, Average time per hit: 2.458 ms 


b=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 


c=[int(i) for i in input().split()] # Hits:1.0, Total execution time: 1.792 ms, Average time per hit: 1.792 ms 


a.sort(reverse=True) # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


b.sort(reverse=True) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


c.sort(reverse=True) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


if k<x: a=a[:k] # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


if k<y: b=b[:k] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


if k<z: c=c[:k] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


d=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


ans=[] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i in a: # Hits:4.0, Total execution time: 0.458 ms, Average time per hit: 0.1145 ms 


    for j in b: # Hits:12.0, Total execution time: 1.292 ms, Average time per hit: 0.10766666666666667 ms 


        d.append(i+j) # Hits:9.0, Total execution time: 2.415 ms, Average time per hit: 0.2683333333333333 ms 


d.sort(reverse=True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


if k<len(d): d=d[:k] # Hits:1.0, Total execution time: 0.542 ms, Average time per hit: 0.542 ms 


for i in c: # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


    for j in d: # Hits:18.0, Total execution time: 2.043 ms, Average time per hit: 0.1135 ms 


        ans.append(i+j) # Hits:15.0, Total execution time: 2.71 ms, Average time per hit: 0.18066666666666667 ms 


ans.sort(reverse=True) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


for i in range(k): # Hits:6.0, Total execution time: 1.168 ms, Average time per hit: 0.19466666666666665 ms 


    print((ans[i])) # Hits:5.0, Total execution time: 11.124 ms, Average time per hit: 2.2248 ms 

",p03078,True
"def main():

    import heapq



    x, y, z, k, *abc = map(int, open(0).read().split())

    a = abc[:x]

    b = abc[x:x + y]

    c = abc[x + y:]

    s = set()



    a.sort(reverse=True)

    b.sort(reverse=True)

    c.sort(reverse=True)



    h = [(-(a[0] + b[0] + c[0]), 0, 0, 0)]

    heapq.heapify(h)

    ans = []

    for _ in range(k):

        p, i, j, k = heapq.heappop(h)

        ans.append(-p)

        for p, q, r in [(1, 0, 0), (0, 1, 0), (0, 0, 1)]:

            if i + p < x and j + q < y and k + r < z:

                if (i + p, j + q, k + r) not in s:

                    s.add((i + p, j + q, k + r))

                    v = - (a[i + p] + b[j + q] + c[k + r])

                    heapq.heappush(h, (v, i + p, j + q, k + r))



    print(*ans, sep='\n')





if __name__ == '__main__':

    main()
",,p03078,False
"import heapq # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


 

x, y, z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 34.917 ms, Average time per hit: 34.917 ms 


a = list(map(int, input().split())) # Hits:1.0, Total execution time: 2.0 ms, Average time per hit: 2.0 ms 


b = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.833 ms, Average time per hit: 0.833 ms 


c = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


a.sort(reverse = True) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


b.sort(reverse = True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


c.sort(reverse = True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


 

n = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


heapq.heapify(n) # Hits:1.0, Total execution time: 0.375 ms, Average time per hit: 0.375 ms 


heapq.heappush(n, (-(a[0]+b[0] + c[0]), 0,0,0)) # Hits:1.0, Total execution time: 0.583 ms, Average time per hit: 0.583 ms 


for i in range(K): # Hits:6.0, Total execution time: 1.167 ms, Average time per hit: 0.1945 ms 


    (m, j, k, l) = heapq.heappop(n) # Hits:5.0, Total execution time: 1.749 ms, Average time per hit: 0.3498 ms 


    print((-m)) # Hits:5.0, Total execution time: 19.416 ms, Average time per hit: 3.8832 ms 


    if j + 1 <=x-1: # Hits:5.0, Total execution time: 1.083 ms, Average time per hit: 0.2166 ms 


        s = (-(a[j+1]+b[k]+c[l]), j+1, k, l) # Hits:4.0, Total execution time: 1.416 ms, Average time per hit: 0.354 ms 


        if s not in n: # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


            heapq.heappush(n ,s) # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


 

    if k + 1 <=y-1: # Hits:5.0, Total execution time: 0.749 ms, Average time per hit: 0.14980000000000002 ms 


        s = (-(a[j]+b[k+1]+c[l]), j, k+1, l) # Hits:5.0, Total execution time: 1.751 ms, Average time per hit: 0.3502 ms 


        if s not in n: # Hits:5.0, Total execution time: 0.877 ms, Average time per hit: 0.1754 ms 


            heapq.heappush(n ,s) # Hits:5.0, Total execution time: 0.875 ms, Average time per hit: 0.175 ms 


    

    if l+ 1 <=z-1: # Hits:5.0, Total execution time: 0.708 ms, Average time per hit: 0.1416 ms 


        s = (-(a[j]+b[k]+c[l+1]), j, k, l+1) # Hits:4.0, Total execution time: 1.376 ms, Average time per hit: 0.344 ms 


        if s not in n: # Hits:4.0, Total execution time: 0.751 ms, Average time per hit: 0.18775 ms 


            heapq.heappush(n ,s) # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 
","import heapq # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


X, Y, Z, K = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.708 ms, Average time per hit: 37.708 ms 


a =list(map(int, input().split())) # Hits:1.0, Total execution time: 1.834 ms, Average time per hit: 1.834 ms 


b =list(map(int, input().split())) # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


c = list(map(int, input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


a.sort(reverse = True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


b.sort(reverse = True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


c.sort(reverse = True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


ans = [(-(a[0]+b[0]+c[0]), 0, 0, 0)] # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


for i in range(K): # Hits:6.0, Total execution time: 1.0 ms, Average time per hit: 0.16666666666666666 ms 


    m, j, k, h = heapq.heappop(ans) # Hits:5.0, Total execution time: 1.708 ms, Average time per hit: 0.3416 ms 


    print((-m)) # Hits:5.0, Total execution time: 17.793 ms, Average time per hit: 3.5585999999999998 ms 


    if j+1 <= X-1: # Hits:5.0, Total execution time: 0.918 ms, Average time per hit: 0.18359999999999999 ms 


        s =(-(a[j+1]+b[k]+c[h]), j+1, k, h) # Hits:4.0, Total execution time: 1.375 ms, Average time per hit: 0.34375 ms 


        if s not in ans: # Hits:4.0, Total execution time: 0.708 ms, Average time per hit: 0.177 ms 


            heapq.heappush(ans, s) # Hits:4.0, Total execution time: 0.958 ms, Average time per hit: 0.2395 ms 


    if k+1 <= Y-1: # Hits:5.0, Total execution time: 0.791 ms, Average time per hit: 0.15819999999999998 ms 


        s =(-(a[j]+b[k+1]+c[h]), j , k+1, h) # Hits:5.0, Total execution time: 1.751 ms, Average time per hit: 0.3502 ms 


        if s not in ans: # Hits:5.0, Total execution time: 0.957 ms, Average time per hit: 0.19140000000000001 ms 


            heapq.heappush(ans, s) # Hits:5.0, Total execution time: 0.834 ms, Average time per hit: 0.1668 ms 


    if h+1 <= Z-1: # Hits:5.0, Total execution time: 0.708 ms, Average time per hit: 0.1416 ms 


        s =(-(a[j]+b[k]+c[h+1]), j , k, h+1) # Hits:4.0, Total execution time: 1.333 ms, Average time per hit: 0.33325 ms 


        if s not in ans: # Hits:4.0, Total execution time: 0.749 ms, Average time per hit: 0.18725 ms 


            heapq.heappush(ans, s) # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 



",p03078,True
"x, y, z, k = list(map(int,input().split())) # Hits:1.0, Total execution time: 35.25 ms, Average time per hit: 35.25 ms 


a =list(map(int,input().split())) # Hits:1.0, Total execution time: 1.791 ms, Average time per hit: 1.791 ms 


b =list(map(int,input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


c =list(map(int,input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 






ans = [] # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


for aa in a: # Hits:4.0, Total execution time: 0.375 ms, Average time per hit: 0.09375 ms 


    for bb in b: # Hits:12.0, Total execution time: 0.957 ms, Average time per hit: 0.07975 ms 


        for cc in c: # Hits:36.0, Total execution time: 2.916 ms, Average time per hit: 0.081 ms 


            ans.append(aa+bb+cc) # Hits:27.0, Total execution time: 4.665 ms, Average time per hit: 0.17277777777777778 ms 




for ansi in sorted(ans)[::-1][:k]: # Hits:6.0, Total execution time: 2.125 ms, Average time per hit: 0.3541666666666667 ms 


    print(ansi) # Hits:5.0, Total execution time: 8.291 ms, Average time per hit: 1.6582000000000001 ms 
","x, y, z, k = list(map(int,input().split())) # Hits:1.0, Total execution time: 33.625 ms, Average time per hit: 33.625 ms 


a =list(map(int,input().split())) # Hits:1.0, Total execution time: 1.708 ms, Average time per hit: 1.708 ms 


b =list(map(int,input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


c =list(map(int,input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 






ab = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for aa in a: # Hits:4.0, Total execution time: 0.334 ms, Average time per hit: 0.0835 ms 


    for bb in b: # Hits:12.0, Total execution time: 1.041 ms, Average time per hit: 0.08675 ms 


        ab.append(aa+bb) # Hits:9.0, Total execution time: 1.708 ms, Average time per hit: 0.18977777777777777 ms 




ab = sorted(ab)[::-1][:k] # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 




ans = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for aabb in ab: # Hits:6.0, Total execution time: 0.376 ms, Average time per hit: 0.06266666666666666 ms 


    for cc in c: # Hits:20.0, Total execution time: 1.581 ms, Average time per hit: 0.07905 ms 


        ans.append(aabb+cc) # Hits:15.0, Total execution time: 2.0 ms, Average time per hit: 0.13333333333333333 ms 




for ansi in sorted(ans)[::-1][:k]: # Hits:6.0, Total execution time: 1.5 ms, Average time per hit: 0.25 ms 


    print(ansi) # Hits:5.0, Total execution time: 9.5 ms, Average time per hit: 1.9 ms 
",p03078,True
"x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 35.0 ms, Average time per hit: 35.0 ms 


a_array = sorted([int(x) for x in input().split()], reverse=True) # Hits:1.0, Total execution time: 2.75 ms, Average time per hit: 2.75 ms 


b_array = sorted([int(x) for x in input().split()], reverse=True) # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 


c_array = sorted([int(x) for x in input().split()], reverse=True) # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 






def solver1(): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    ab_array = [x + y for x in a_array for y in b_array]

    abc_array = sorted([ab + c for ab in ab_array for c in c_array], reverse=True)

    for abc in abc_array[:k]:

        print(abc)





solver1() # Hits:1.0, Total execution time: 15.5 ms, Average time per hit: 15.5 ms 

","x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 33.583 ms, Average time per hit: 33.583 ms 


a_array = sorted([int(x) for x in input().split()], reverse=True) # Hits:1.0, Total execution time: 2.75 ms, Average time per hit: 2.75 ms 


b_array = sorted([int(x) for x in input().split()], reverse=True) # Hits:1.0, Total execution time: 1.416 ms, Average time per hit: 1.416 ms 


c_array = sorted([int(x) for x in input().split()], reverse=True) # Hits:1.0, Total execution time: 1.334 ms, Average time per hit: 1.334 ms 






def solver1(): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    ab_array = sorted([x + y for x in a_array for y in b_array], reverse=True)[:3000]

    abc_array = sorted([ab + c for ab in ab_array for c in c_array], reverse=True)

    for abc in abc_array[:k]:

        print(abc)





solver1() # Hits:1.0, Total execution time: 15.333 ms, Average time per hit: 15.333 ms 

",p03078,True
"# D - Cake 123



import heapq # Hits:1.0, Total execution time: 0.459 ms, Average time per hit: 0.459 ms 


import itertools # Hits:1.0, Total execution time: 0.291 ms, Average time per hit: 0.291 ms 




x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.792 ms, Average time per hit: 36.792 ms 




A = list(int(a) for a in input().split()) # Hits:1.0, Total execution time: 3.292 ms, Average time per hit: 3.292 ms 


B = list(int(b) for b in input().split()) # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 


C = list(int(c) for c in input().split()) # Hits:1.0, Total execution time: 1.375 ms, Average time per hit: 1.375 ms 




hq = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i, j in itertools.product(A, B): # Hits:10.0, Total execution time: 1.876 ms, Average time per hit: 0.1876 ms 


    heapq.heappush(hq, (i+j)*-1) # Hits:9.0, Total execution time: 2.834 ms, Average time per hit: 0.31488888888888894 ms 




AB = [] # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


while len(hq)>0 and len(AB)<=k: # Hits:7.0, Total execution time: 1.5 ms, Average time per hit: 0.21428571428571427 ms 


    AB.append(heapq.heappop(hq)*-1) # Hits:6.0, Total execution time: 1.625 ms, Average time per hit: 0.2708333333333333 ms 




hq = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for i, j in itertools.product(AB, C): # Hits:19.0, Total execution time: 1.958 ms, Average time per hit: 0.10305263157894737 ms 


    heapq.heappush(hq, (i+j)*-1) # Hits:18.0, Total execution time: 2.831 ms, Average time per hit: 0.15727777777777777 ms 




for _ in range(k): # Hits:6.0, Total execution time: 0.959 ms, Average time per hit: 0.15983333333333336 ms 


    print((heapq.heappop(hq)*-1)) # Hits:5.0, Total execution time: 9.334 ms, Average time per hit: 1.8668 ms 
","# D - Cake 123



import heapq # Hits:1.0, Total execution time: 0.5 ms, Average time per hit: 0.5 ms 


import itertools # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.375 ms, Average time per hit: 37.375 ms 




A = list(int(a) for a in input().split()) # Hits:1.0, Total execution time: 3.25 ms, Average time per hit: 3.25 ms 


B = list(int(b) for b in input().split()) # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 


C = list(int(c) for c in input().split()) # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 






A.sort(reverse=True) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




hq = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


for i in range(x): # Hits:4.0, Total execution time: 0.626 ms, Average time per hit: 0.1565 ms 


    for j in range(y): # Hits:12.0, Total execution time: 1.333 ms, Average time per hit: 0.11108333333333333 ms 


        for l in range(z): # Hits:19.0, Total execution time: 2.29 ms, Average time per hit: 0.12052631578947369 ms 


            if (i+1)*(j+1)*(l+1)<=k: # Hits:18.0, Total execution time: 3.122 ms, Average time per hit: 0.17344444444444446 ms 


                heapq.heappush(hq, (A[i]+B[j]+C[l])*-1) # Hits:10.0, Total execution time: 2.959 ms, Average time per hit: 0.2959 ms 


            else:

                break # Hits:8.0, Total execution time: 1.29 ms, Average time per hit: 0.16125 ms 




''' # Hits:1.0, Total execution time: 0.041 ms, Average time per hit: 0.041 ms 


hq = []

for i, j in itertools.product(A, B):

    heapq.heappush(hq, (i+j)*-1)



AB = []

while len(hq)>0 and len(AB)<=k:

    AB.append(heapq.heappop(hq)*-1)



hq = []

for i, j in itertools.product(AB, C):

    heapq.heappush(hq, (i+j)*-1)

'''



for _ in range(k): # Hits:6.0, Total execution time: 0.792 ms, Average time per hit: 0.132 ms 


    print((heapq.heappop(hq)*-1)) # Hits:5.0, Total execution time: 10.0 ms, Average time per hit: 2.0 ms 

",p03078,True
"# D - Cake 123



import heapq # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


import itertools # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


from collections import defaultdict # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 




x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 36.958 ms, Average time per hit: 36.958 ms 




A = list(int(a) for a in input().split()) # Hits:1.0, Total execution time: 3.125 ms, Average time per hit: 3.125 ms 


B = list(int(b) for b in input().split()) # Hits:1.0, Total execution time: 1.458 ms, Average time per hit: 1.458 ms 


C = list(int(c) for c in input().split()) # Hits:1.0, Total execution time: 1.417 ms, Average time per hit: 1.417 ms 




A.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




hq = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


hqAns = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


d = defaultdict(int) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 




heapq.heappush(hq, ((A[0]+B[0]+C[0])*-1,(0,0,0))) # Hits:1.0, Total execution time: 0.667 ms, Average time per hit: 0.667 ms 


d[(0,0,0)] = 1 # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 




while len(hqAns)<k : # Hits:6.0, Total execution time: 1.126 ms, Average time per hit: 0.18766666666666665 ms 


    val, key = heapq.heappop(hq) # Hits:5.0, Total execution time: 1.417 ms, Average time per hit: 0.2834 ms 


    heapq.heappush(hqAns, val) # Hits:5.0, Total execution time: 0.708 ms, Average time per hit: 0.1416 ms 


 

    if d[(key[0]+1, key[1], key[2])]==0 and key[0]+1 < x: # Hits:5.0, Total execution time: 2.166 ms, Average time per hit: 0.4332 ms 


        heapq.heappush(hq, ((A[key[0]+1]+B[key[1]]+C[key[2]])*-1, ((key[0]+1, key[1], key[2])))) # Hits:4.0, Total execution time: 1.833 ms, Average time per hit: 0.45825 ms 


        d[(key[0]+1, key[1], key[2])] = 1 # Hits:4.0, Total execution time: 0.915 ms, Average time per hit: 0.22875 ms 




    if d[(key[0], key[1]+1, key[2])]==0 and key[1]+1 < y: # Hits:5.0, Total execution time: 2.001 ms, Average time per hit: 0.4002 ms 


        heapq.heappush(hq, ((A[key[0]]+B[key[1]+1]+C[key[2]])*-1, ((key[0], key[1]+1, key[2])))) # Hits:5.0, Total execution time: 2.124 ms, Average time per hit: 0.4248 ms 


        d[(key[0], key[1]+1, key[2])] = 1 # Hits:5.0, Total execution time: 1.085 ms, Average time per hit: 0.217 ms 


 

    if d[(key[0], key[1], key[2]+1)]==0 and key[2]+1 < z: # Hits:5.0, Total execution time: 1.584 ms, Average time per hit: 0.3168 ms 


        heapq.heappush(hq, ((A[key[0]]+B[key[1]]+C[key[2]+1])*-1, ((key[0], key[1], key[2]+1)))) # Hits:3.0, Total execution time: 1.583 ms, Average time per hit: 0.5276666666666666 ms 


        d[(key[0], key[1], key[2]+1)] = 1 # Hits:3.0, Total execution time: 0.625 ms, Average time per hit: 0.20833333333333334 ms 




for i in range(k): # Hits:6.0, Total execution time: 1.001 ms, Average time per hit: 0.16683333333333333 ms 


    print((heapq.heappop(hqAns)*-1)) # Hits:5.0, Total execution time: 9.332 ms, Average time per hit: 1.8664 ms 




''' # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


# ans.2 #



A.sort(reverse=True)

B.sort(reverse=True)

C.sort(reverse=True)



hq = []

for i in range(x):

    for j in range(y):

        for l in range(z):

            if (i+1)*(j+1)*(l+1)<=k:

                heapq.heappush(hq, (A[i]+B[j]+C[l])*-1)

            else:

                break



for _ in range(k):

    print(heapq.heappop(hq)*-1)



'''



''' # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 




# ans.1 #



hq = []

for i, j in itertools.product(A, B):

    heapq.heappush(hq, (i+j)*-1)



AB = []

while len(hq)>0 and len(AB)<=k:

    AB.append(heapq.heappop(hq)*-1)



hq = []

for i, j in itertools.product(AB, C):

    heapq.heappush(hq, (i+j)*-1)



for _ in range(k):

    print(heapq.heappop(hq)*-1)



'''
","# D - Cake 123



import heapq # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


import itertools # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


from collections import defaultdict # Hits:1.0, Total execution time: 1.125 ms, Average time per hit: 1.125 ms 




x, y, z, k = list(map(int, input().split())) # Hits:1.0, Total execution time: 37.208 ms, Average time per hit: 37.208 ms 




A = list(int(a) for a in input().split()) # Hits:1.0, Total execution time: 2.875 ms, Average time per hit: 2.875 ms 


B = list(int(b) for b in input().split()) # Hits:1.0, Total execution time: 1.542 ms, Average time per hit: 1.542 ms 


C = list(int(c) for c in input().split()) # Hits:1.0, Total execution time: 1.5 ms, Average time per hit: 1.5 ms 




A.sort(reverse=True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




hq = [] # Hits:1.0, Total execution time: 0.084 ms, Average time per hit: 0.084 ms 


hqAns = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


d = defaultdict(int) # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 




heapq.heappush(hq, ((A[0]+B[0]+C[0])*-1, 0, 0, 0)) # Hits:1.0, Total execution time: 0.541 ms, Average time per hit: 0.541 ms 


d[(0,0,0)] = 1 # Hits:1.0, Total execution time: 0.209 ms, Average time per hit: 0.209 ms 




while len(hqAns)<k : # Hits:6.0, Total execution time: 0.75 ms, Average time per hit: 0.125 ms 


    val, l, m, n = heapq.heappop(hq) # Hits:5.0, Total execution time: 1.25 ms, Average time per hit: 0.25 ms 


    heapq.heappush(hqAns, val) # Hits:5.0, Total execution time: 0.708 ms, Average time per hit: 0.1416 ms 


 

    if d[(l+1, m, n)]==0 and l+1 < x: # Hits:5.0, Total execution time: 1.249 ms, Average time per hit: 0.24980000000000002 ms 


        heapq.heappush(hq, ((A[l+1]+B[m]+C[n])*-1, l+1, m, n)) # Hits:4.0, Total execution time: 1.25 ms, Average time per hit: 0.3125 ms 


        d[(l+1, m, n)] = 1 # Hits:4.0, Total execution time: 0.75 ms, Average time per hit: 0.1875 ms 




    if d[(l, m+1, n)]==0 and m+1 < y: # Hits:5.0, Total execution time: 1.417 ms, Average time per hit: 0.2834 ms 


        heapq.heappush(hq, ((A[l]+B[m+1]+C[n])*-1, l, m+1, n)) # Hits:5.0, Total execution time: 1.5 ms, Average time per hit: 0.3 ms 


        d[(l, m+1, n)] = 1 # Hits:5.0, Total execution time: 0.876 ms, Average time per hit: 0.1752 ms 


 

    if d[(l, m, n+1)]==0 and n+1 < z: # Hits:5.0, Total execution time: 1.084 ms, Average time per hit: 0.21680000000000002 ms 


        heapq.heappush(hq, ((A[l]+B[m]+C[n+1])*-1, l, m, n+1)) # Hits:3.0, Total execution time: 1.167 ms, Average time per hit: 0.389 ms 


        d[(l, m, n+1)] = 1 # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 




for i in range(k): # Hits:6.0, Total execution time: 0.791 ms, Average time per hit: 0.13183333333333333 ms 


    print((heapq.heappop(hqAns)*-1)) # Hits:5.0, Total execution time: 9.501 ms, Average time per hit: 1.9002000000000001 ms 




''' # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


# ans.2 #



A.sort(reverse=True)

B.sort(reverse=True)

C.sort(reverse=True)



hq = []

for i in range(x):

    for j in range(y):

        for l in range(z):

            if (i+1)*(j+1)*(l+1)<=k:

                heapq.heappush(hq, (A[i]+B[j]+C[l])*-1)

            else:

                break



for _ in range(k):

    print(heapq.heappop(hq)*-1)



'''



''' # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 




# ans.1 #



hq = []

for i, j in itertools.product(A, B):

    heapq.heappush(hq, (i+j)*-1)



AB = []

while len(hq)>0 and len(AB)<=k:

    AB.append(heapq.heappop(hq)*-1)



hq = []

for i, j in itertools.product(AB, C):

    heapq.heappush(hq, (i+j)*-1)



for _ in range(k):

    print(heapq.heappop(hq)*-1)



'''
",p03078,True
"X,Y,Z,K = list(map(int,input().split())) # Hits:1.0, Total execution time: 38.041 ms, Average time per hit: 38.041 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.75 ms, Average time per hit: 1.75 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


C = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.708 ms, Average time per hit: 0.708 ms 


A.sort(reverse= True) # Hits:1.0, Total execution time: 0.458 ms, Average time per hit: 0.458 ms 


B.sort(reverse= True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


C.sort(reverse= True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


LIS = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for i in range(X): # Hits:4.0, Total execution time: 0.666 ms, Average time per hit: 0.1665 ms 


    for j in range(Y): # Hits:12.0, Total execution time: 1.166 ms, Average time per hit: 0.09716666666666667 ms 


        for k in range(min((3000//(i+1)*(j+1)),Z)): # Hits:36.0, Total execution time: 5.336 ms, Average time per hit: 0.14822222222222223 ms 


            SUM = A[i] + B[j] + C[k] # Hits:27.0, Total execution time: 4.459 ms, Average time per hit: 0.16514814814814816 ms 


            LIS.append(SUM) # Hits:27.0, Total execution time: 3.958 ms, Average time per hit: 0.14659259259259258 ms 


LIS.sort(reverse = True) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.667 ms, Average time per hit: 0.11116666666666668 ms 


    print((LIS[i])) # Hits:5.0, Total execution time: 8.792 ms, Average time per hit: 1.7584000000000002 ms 
","X,Y,Z,K = list(map(int,input().split())) # Hits:1.0, Total execution time: 35.75 ms, Average time per hit: 35.75 ms 


A = list(map(int,input().split())) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


B = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.834 ms, Average time per hit: 0.834 ms 


C = list(map(int,input().split())) # Hits:1.0, Total execution time: 0.916 ms, Average time per hit: 0.916 ms 


A.sort(reverse= True) # Hits:1.0, Total execution time: 0.333 ms, Average time per hit: 0.333 ms 


B.sort(reverse= True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


C.sort(reverse= True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


LIS = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


for i in range(X): # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


    INTB = 3000//(i+1) # Hits:3.0, Total execution time: 0.417 ms, Average time per hit: 0.139 ms 


    for j in range(min(INTB+1,Y)): # Hits:12.0, Total execution time: 1.627 ms, Average time per hit: 0.13558333333333333 ms 


        INT = 3000//((i+1)*(j+1)) # Hits:9.0, Total execution time: 1.376 ms, Average time per hit: 0.15288888888888888 ms 


        for k in range(min(INT+1,Z)): # Hits:36.0, Total execution time: 4.333 ms, Average time per hit: 0.12036111111111111 ms 


            SUM = A[i] + B[j] + C[k] # Hits:27.0, Total execution time: 4.295 ms, Average time per hit: 0.1590740740740741 ms 


            LIS.append(SUM) # Hits:27.0, Total execution time: 3.665 ms, Average time per hit: 0.13574074074074075 ms 


LIS.sort(reverse = True) # Hits:1.0, Total execution time: 0.75 ms, Average time per hit: 0.75 ms 


for i in range(K): # Hits:6.0, Total execution time: 0.708 ms, Average time per hit: 0.118 ms 


    print((LIS[i])) # Hits:5.0, Total execution time: 12.582 ms, Average time per hit: 2.5164 ms 
",p03078,True
"def int_raw(): # Hits:1.0, Total execution time: 0.208 ms, Average time per hit: 0.208 ms 


    return int(eval(input()))



def ss_raw(): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    return input().split()



def ints_raw(): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    return list(map(int,ss_raw()))



X,Y,Z,K = ints_raw() # Hits:1.0, Total execution time: 29.625 ms, Average time per hit: 29.625 ms 




A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.625 ms, Average time per hit: 1.625 ms 


B= list(map(int, input().split())) # Hits:1.0, Total execution time: 1.041 ms, Average time per hit: 1.041 ms 


C= list(map(int, input().split())) # Hits:1.0, Total execution time: 1.0 ms, Average time per hit: 1.0 ms 


A.sort(reverse=True) # Hits:1.0, Total execution time: 0.417 ms, Average time per hit: 0.417 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.166 ms, Average time per hit: 0.166 ms 


def main(): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    D = []

    for a in A:

        for b in B:

            D.append(a+b)

    D.sort(reverse=True)

    D = D[:K+1]

    E =[]

    for d in D:

        for c in C:

            E.append(d+c)

    E.sort(reverse=True)

    for e in range(K):

        print((E[e]))



main() # Hits:1.0, Total execution time: 16.333 ms, Average time per hit: 16.333 ms 

","def int_raw(): # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


    return int(eval(input()))



def ss_raw(): # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


    return input().split()



def ints_raw(): # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


    return list(map(int,ss_raw()))



X,Y,Z,K = ints_raw() # Hits:1.0, Total execution time: 37.541 ms, Average time per hit: 37.541 ms 




A = list(map(int, input().split())) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


B= list(map(int, input().split())) # Hits:1.0, Total execution time: 0.875 ms, Average time per hit: 0.875 ms 


C= list(map(int, input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


A.sort(reverse=True) # Hits:1.0, Total execution time: 0.292 ms, Average time per hit: 0.292 ms 


B.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


C.sort(reverse=True) # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


def main(): # Hits:1.0, Total execution time: 0.25 ms, Average time per hit: 0.25 ms 


    D = [a+b for a in A for b in B]

    D.sort(reverse=True)

    D = D[:K+1]

    E =[d+c for d in D for c in C]

    E.sort(reverse=True)

    for e in range(K):

        print((E[e]))



main() # Hits:1.0, Total execution time: 14.625 ms, Average time per hit: 14.625 ms 

",p03078,True
"X , Y , Z , K = list(map(int , input().split()))  # Hits:1.0, Total execution time: 37.209 ms, Average time per hit: 37.209 ms 




A = list(map(int , input().split())) # Hits:1.0, Total execution time: 1.833 ms, Average time per hit: 1.833 ms 


B = list(map(int , input().split())) # Hits:1.0, Total execution time: 0.791 ms, Average time per hit: 0.791 ms 


C = list(map(int , input().split())) # Hits:1.0, Total execution time: 0.792 ms, Average time per hit: 0.792 ms 


#入力受け取り







AA = [] # Hits:1.0, Total execution time: 0.042 ms, Average time per hit: 0.042 ms 


BB = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


CC = [] # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 




for k in range(min(X, K)): # Hits:4.0, Total execution time: 0.833 ms, Average time per hit: 0.20825 ms 


	maxA = max(A) # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


	A.remove(maxA) # Hits:3.0, Total execution time: 0.668 ms, Average time per hit: 0.22266666666666665 ms 


	AA.append(maxA) # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


for k in range(min(Y, K)): # Hits:4.0, Total execution time: 0.502 ms, Average time per hit: 0.1255 ms 


	maxB = max(B) # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


	B.remove(max(B)) # Hits:3.0, Total execution time: 0.75 ms, Average time per hit: 0.25 ms 


	BB.append(maxB) # Hits:3.0, Total execution time: 0.375 ms, Average time per hit: 0.125 ms 


for k in range(min(Z, K)): # Hits:4.0, Total execution time: 0.5 ms, Average time per hit: 0.125 ms 


	maxC = max(C) # Hits:3.0, Total execution time: 0.458 ms, Average time per hit: 0.15266666666666664 ms 


	C.remove(maxC) # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


	CC.append(maxC) # Hits:3.0, Total execution time: 1.249 ms, Average time per hit: 0.41633333333333333 ms 


#list X から X に大きい順にポイントを格納。







indexlist  = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for k in range(min(X, K)): # Hits:4.0, Total execution time: 0.459 ms, Average time per hit: 0.11475 ms 


	for l in range(min(Y, K)): # Hits:12.0, Total execution time: 1.414 ms, Average time per hit: 0.11783333333333333 ms 


		for m in range(min(Z, K)): # Hits:36.0, Total execution time: 4.045 ms, Average time per hit: 0.11236111111111112 ms 


			indexlist.append([k, l, m]) # Hits:27.0, Total execution time: 3.793 ms, Average time per hit: 0.14048148148148148 ms 


#インデックスを参照することで大きい順にポイントの組を取得できるような「リストのリスト」を作成





dictionary = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for P in indexlist: # Hits:28.0, Total execution time: 2.289 ms, Average time per hit: 0.08175 ms 


	p = AA[P[0]] + BB[P[1]] + CC[P[2]] # Hits:27.0, Total execution time: 5.463 ms, Average time per hit: 0.20233333333333334 ms 


	dictionary.update({str(P[0]) +"" , "" + str(P[1]) +"" , "" + str(P[2]): p}) # Hits:27.0, Total execution time: 15.125 ms, Average time per hit: 0.5601851851851852 ms 


#indexlist 引数の組を取り出し、対応するポイントを足し算して辞書に格納







Ans = list(dictionary.values()) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


for k in range(K): # Hits:6.0, Total execution time: 0.71 ms, Average time per hit: 0.11833333333333333 ms 


	print((max(Ans))) # Hits:5.0, Total execution time: 12.709 ms, Average time per hit: 2.5418000000000003 ms 


	Ans.remove(max(Ans)) # Hits:5.0, Total execution time: 2.418 ms, Average time per hit: 0.48360000000000003 ms 





","X , Y , Z , K = list(map(int , input().split()))  # Hits:1.0, Total execution time: 35.833 ms, Average time per hit: 35.833 ms 




A = list(map(int , input().split())) # Hits:1.0, Total execution time: 3.0 ms, Average time per hit: 3.0 ms 


B = list(map(int , input().split())) # Hits:1.0, Total execution time: 1.167 ms, Average time per hit: 1.167 ms 


C = list(map(int , input().split())) # Hits:1.0, Total execution time: 1.084 ms, Average time per hit: 1.084 ms 


#入力受け取り







AA = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 


BB = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


CC = [] # Hits:1.0, Total execution time: 0.167 ms, Average time per hit: 0.167 ms 




for k in range(min(X, K)): # Hits:4.0, Total execution time: 1.042 ms, Average time per hit: 0.2605 ms 


	maxA = max(A) # Hits:3.0, Total execution time: 0.874 ms, Average time per hit: 0.29133333333333333 ms 


	A.remove(maxA) # Hits:3.0, Total execution time: 0.917 ms, Average time per hit: 0.3056666666666667 ms 


	AA.append(maxA) # Hits:3.0, Total execution time: 0.584 ms, Average time per hit: 0.19466666666666665 ms 


for k in range(min(Y, K)): # Hits:4.0, Total execution time: 0.583 ms, Average time per hit: 0.14575 ms 


	maxB = max(B) # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


	B.remove(maxB) # Hits:3.0, Total execution time: 0.583 ms, Average time per hit: 0.19433333333333333 ms 


	BB.append(maxB) # Hits:3.0, Total execution time: 0.5 ms, Average time per hit: 0.16666666666666666 ms 


for k in range(min(Z, K)): # Hits:4.0, Total execution time: 0.625 ms, Average time per hit: 0.15625 ms 


	maxC = max(C) # Hits:3.0, Total execution time: 0.708 ms, Average time per hit: 0.236 ms 


	C.remove(maxC) # Hits:3.0, Total execution time: 0.542 ms, Average time per hit: 0.18066666666666667 ms 


	CC.append(maxC) # Hits:3.0, Total execution time: 1.458 ms, Average time per hit: 0.486 ms 


#list X から X に大きい順にポイントを格納。







indexlist  = [] # Hits:1.0, Total execution time: 0.083 ms, Average time per hit: 0.083 ms 


for k in range(min(X, K)): # Hits:4.0, Total execution time: 0.624 ms, Average time per hit: 0.156 ms 


	for l in range(min(Y, K)): # Hits:12.0, Total execution time: 1.751 ms, Average time per hit: 0.14591666666666667 ms 


		for m in range(min(Z, K)): # Hits:36.0, Total execution time: 4.917 ms, Average time per hit: 0.13658333333333333 ms 


			if k*l*m <= K: # Hits:27.0, Total execution time: 4.248 ms, Average time per hit: 0.15733333333333335 ms 


				indexlist.append([k, l, m]) # Hits:26.0, Total execution time: 4.709 ms, Average time per hit: 0.18111538461538462 ms 


#インデックスを参照することで大きい順にポイントの組を取得できるような「リストのリスト」を作成





dictionary = {} # Hits:1.0, Total execution time: 0.125 ms, Average time per hit: 0.125 ms 


for P in indexlist: # Hits:27.0, Total execution time: 2.374 ms, Average time per hit: 0.08792592592592592 ms 


	p = AA[P[0]] + BB[P[1]] + CC[P[2]] # Hits:26.0, Total execution time: 5.627 ms, Average time per hit: 0.21642307692307694 ms 


	dictionary.update({str(P[0]) +"" , "" + str(P[1]) +"" , "" + str(P[2]): p}) # Hits:26.0, Total execution time: 15.416 ms, Average time per hit: 0.5929230769230769 ms 


#indexlist 引数の組を取り出し、対応するポイントを足し算して辞書に格納





Ans = list(dictionary.values()) # Hits:1.0, Total execution time: 0.416 ms, Average time per hit: 0.416 ms 


for k in range(K): # Hits:6.0, Total execution time: 0.666 ms, Average time per hit: 0.111 ms 


	print((max(Ans))) # Hits:5.0, Total execution time: 9.083 ms, Average time per hit: 1.8166 ms 


	Ans.remove(max(Ans)) # Hits:5.0, Total execution time: 2.334 ms, Average time per hit: 0.4668 ms 





",p03078,True
